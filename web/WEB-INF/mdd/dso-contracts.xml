<?xml version="1.0"?>
<csv>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[10]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>

        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[11]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>

        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[12]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>

        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[13]]></value>
        <value><![CDATA[main]]></value>

        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[14]]></value>

        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[from net.sf.chellow.billing import VirtualBill, NonCoreContract
from java.util import GregorianCalendar, TimeZone, Locale, Calendar

def totalElement(account, startDate, finishDate):
    totalElement = VirtualBill("total", 103, "Dso cost")
    return totalElement

class LlfCalculator:
    def __init__(self, voltage_level, is_substation, date):
        self.cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
        self.cal_ct = GregorianCalendar(TimeZone.getTimeZone("Europe/London"), Locale.UK)
        self.voltage_level = voltage_level
        self.is_substation = is_substation
        self.rate_script = None
        self.set_time(date)

    def set_time(self, date):
        self.date = date
        self.cal.setTime(self.date.getDate())
        self.year = self.cal.get(Calendar.YEAR)
        self.month = self.cal.get(Calendar.MONTH)
        self.day = self.cal.get(Calendar.DAY_OF_MONTH)
        self.day_of_week = self.cal.get(Calendar.DAY_OF_WEEK)
        self.hour = self.cal.get(Calendar.HOUR_OF_DAY)
        self.minute = self.cal.get(Calendar.MINUTE)
        self.decimal_hour = self.hour + self.minute / 60
        self.cal_ct.setTime(date.getDate())
        self.year_ct = self.cal_ct.get(Calendar.YEAR)
        self.month_ct = self.cal_ct.get(Calendar.MONTH)
        self.day_ct = self.cal_ct.get(Calendar.DAY_OF_MONTH)
        self.day_of_week_ct = self.cal_ct.get(Calendar.DAY_OF_WEEK)
        self.hour_ct = self.cal_ct.get(Calendar.HOUR_OF_DAY)
        self.minute_ct = self.cal_ct.get(Calendar.MINUTE)
        self.decimal_hour_ct = self.hour_ct + self.minute_ct / 60
        if self.rate_script == None or self.rate_script.getStartDate().getDate().after(date.getDate()) or (self.rate_script.getFinishDate() is not None and self.rate_script.getFinishDate().getDate().before(date.getDate())):
            self.rate_script = contract.rateScripts(date, date)[0]
            self.rate_engine = self.rate_script.invocableEngine()

    def get_rate(self, name):
        return self.rate_engine.invokeFunction(name, [])

    def llf(self):
        if self.decimal_hour_ct >= 1 and self.decimal_hour_ct <= 7.5:
            if self.voltage_level == "HV":
                return self.get_rate('night_hv')
            elif self.voltage_level == "LV":
                return self.get_rate('night_lv')
        elif self.day_of_week < 7 and self.day_of_week > 1 and self.decimal_hour_ct > 16 and self.decimal_hour_ct <= 19 and (self.month_ct > 10 or self.month_ct < 3):
            if self.voltage_level == "HV":
                return self.get_rate('peak_hv')
            elif self.voltage_level == "LV":
                return self.get_rate('peak_lv')
        elif self.day_of_week < 7 and self.day_of_week > 1 and ((self.decimal_hour_ct >= 7.5 and self.decimal_hour_ct <= 16) or (self.decimal_hour_ct >= 19 and self.decimal_hour_ct <= 20)) and (self.month_ct > 10 or self.month_ct < 3):
            if self.voltage_level == "HV":
                return self.get_rate('winter_weekday_hv')
            elif self.voltage_level == "LV":
                return self.get_rate('winter_weekday_lv')
        else:
            if self.voltage_level == "HV":
                return self.get_rate('other_hv')
            if self.voltage_level == "LV":
                return self.get_rate('other_lv')

def calculator(voltage_level, is_substation, date):
    return LlfCalculator(voltage_level, is_substation, date)]]></value>
        <value><![CDATA[def night_hv():
    return 1.012

def night_lv():
    return 1.042

def peak_hv():
    return 1.037

def peak_lv():
    return 1.104

def winter_weekday_hv():
    return 1.032

def winter_weekday_lv():
    return 1.095

def other_hv():
    return 1.029

def other_lv():
    return 1.070]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>

        <value><![CDATA[14]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2007-04-01T00:30Z]]></value>
        <value><![CDATA[def night_hv():
    return 1.012

def night_lv():
    return 1.042

def peak_hv():
    return 1.037

def peak_lv():
    return 1.104

def winter_weekday_hv():
    return 1.032

def winter_weekday_lv():
    return 1.095

def other_hv():
    return 1.029

def other_lv():
    return 1.070

def triad():
    return 17.807318]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[14]]></value>

        <value><![CDATA[main]]></value>
        <value><![CDATA[2008-04-01T00:30Z]]></value>
        <value><![CDATA[def night_hv():
    return 1.012

def night_lv():
    return 1.042

def peak_hv():
    return 1.037

def peak_lv():
    return 1.104

def winter_weekday_hv():
    return 1.032

def winter_weekday_lv():
    return 1.095

def other_hv():
    return 1.029

def other_lv():
    return 1.070

def triad():
    return 19.147817]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[14]]></value>
        <value><![CDATA[main]]></value>

        <value><![CDATA[2009-04-01T00:30Z]]></value>
        <value><![CDATA[def night_hv():
    return 1.012

def night_lv():
    return 1.042

def peak_hv():
    return 1.037

def peak_lv():
    return 1.104

def winter_weekday_hv():
    return 1.032

def winter_weekday_lv():
    return 1.095

def other_hv():
    return 1.029

def other_lv():
    return 1.070

def triad():
    return 20.526611]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[15]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>

        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[16]]></value>
        <value><![CDATA[main]]></value>

        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[17]]></value>

        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>

        <value><![CDATA[18]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>

        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[19]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>

        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[20]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[from net.sf.chellow.billing import VirtualBill, NonCoreContract
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad import UserException

def totalElement(account, startDate, finishDate):
    totalElement = VirtualBill("total", 103, "Dso cost")
    return totalElement

class LlfCalculator:
    def __init__(self, voltage_level, is_substation, date):
        self.cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
        self.cal_ct = GregorianCalendar(TimeZone.getTimeZone("Europe/London"), Locale.UK)
        self.voltage_level = voltage_level
        self.is_substation = is_substation
        self.rate_script = None
        self.set_time(date)

    def get_rate(self, name):
        return self.rate_engine.invokeFunction(name, [])

    def set_time(self, date):
        self.date = date
        self.cal.setTime(self.date.getDate())
        self.year = self.cal.get(Calendar.YEAR)
        self.month = self.cal.get(Calendar.MONTH)
        self.day = self.cal.get(Calendar.DAY_OF_MONTH)
        self.day_of_week = self.cal.get(Calendar.DAY_OF_WEEK)
        self.hour = self.cal.get(Calendar.HOUR_OF_DAY)
        self.minute = self.cal.get(Calendar.MINUTE)
        self.decimal_hour = self.hour + self.minute / 60
        self.cal_ct.setTime(date.getDate())
        self.year_ct = self.cal_ct.get(Calendar.YEAR)
        self.month_ct = self.cal_ct.get(Calendar.MONTH)
        self.day_ct = self.cal_ct.get(Calendar.DAY_OF_MONTH)
        self.day_of_week_ct = self.cal_ct.get(Calendar.DAY_OF_WEEK)
        self.hour_ct = self.cal_ct.get(Calendar.HOUR_OF_DAY)
        self.minute_ct = self.cal_ct.get(Calendar.MINUTE)
        self.decimal_hour_ct = self.hour_ct + self.minute_ct / 60
        if self.rate_script == None or self.rate_script.getStartDate().getDate().after(date.getDate()) or (self.rate_script.getFinishDate() is not None and self.rate_script.getFinishDate().getDate().before(date.getDate())):
            self.rate_script = contract.rateScripts(date, date)[0]
            self.rate_engine = self.rate_script.invocableEngine()

    def llf(self):
        if self.decimal_hour_ct > 0.5 and self.decimal_hour_ct <= 7.5:
            if self.voltage_level == "HV":
                return self.get_rate('night_hv')
            elif self.voltage_level == "LV":
                return self.get_rate('night_lv')
        elif self.day_of_week_ct < Calendar.SATURDAY and self.day_of_week > Calendar.SUNDAY and self.decimal_hour_ct > 16 and self.decimal_hour_ct <= 19 and (self.month_ct > Calendar.OCTOBER or self.month_ct < Calendar.MARCH):
            if self.voltage_level == "HV":
                return self.get_rate('peak_hv')
            elif self.voltage_level == "LV":
                return self.get_rate('peak_lv')
        elif self.day_of_week_ct < 7 and self.day_of_week > 1 and ((self.decimal_hour_ct > 7.5 and self.decimal_hour_ct <= 16) or (self.decimal_hour_ct > 19 and self.decimal_hour_ct <= 20)) and (self.month_ct > 10 or self.month_ct < 3):
            if self.voltage_level == "HV":
                return self.get_rate('winter_weekday_hv')
            elif self.voltage_level == "LV":
                return self.get_rate('winter_weekday_lv')
        else:
            if self.voltage_level == "HV":
                return self.get_rate('other_hv')
            if self.voltage_level == "LV":
                return self.get_rate('other_lv')

    def is_duos_day(self):
        if self.decimal_hour_ct >= 0.5 and self.decimal_hour_ct <= 7.5:
            return False
        else:
            return True

def calculator(voltage_level, is_substation, date):
    return LlfCalculator(voltage_level, is_substation, date)]]></value>
        <value><![CDATA[def night_hv():
    return 1.032

def night_lv():
    return 1.075

def peak_hv():
    return 1.047

def peak_lv():
    return 1.096

def winter_weekday_hv():
    return 1.044

def winter_weekday_lv():
    return 1.089

def other_hv():
    return 1.037

def other_lv():
    return 1.080

def triad():
    return 21.100281]]></value>
    </line>

    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[20]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2007-04-01T00:30Z]]></value>
        <value><![CDATA[def night_hv():
    return 1.032

def night_lv():
    return 1.075

def peak_hv():
    return 1.047

def peak_lv():
    return 1.096

def winter_weekday_hv():
    return 1.044

def winter_weekday_lv():
    return 1.089

def other_hv():
    return 1.037

def other_lv():
    return 1.080

def triad():
    return 21.100281]]></value>
    </line>
    <line>

        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[20]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2008-04-01T00:30Z]]></value>
        <value><![CDATA[def night_hv():
    return 1.033

def night_lv():
    return 1.075

def peak_hv():
    return 1.048

def peak_lv():
    return 1.095

def winter_weekday_hv():
    return 1.045

def winter_weekday_lv():
    return 1.089

def other_hv():
    return 1.038

def other_lv():
    return 1.079

def triad():
    return 22.194810]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>

        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[20]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2009-04-01T00:30Z]]></value>
        <value><![CDATA[def night_hv():
    return 1.029

def night_lv():
    return 1.074

def peak_hv():
    return 1.043

def peak_lv():
    return 1.093

def winter_weekday_hv():
    return 1.039

def winter_weekday_lv():
    return 1.087

def other_hv():
    return 1.034

def other_lv():
    return 1.078

def triad():
    return 24.471461]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>

        <value><![CDATA[21]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>

        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[22]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[from net.sf.chellow.billing import VirtualBill, NonCoreContract
from java.util import GregorianCalendar, TimeZone, Locale, Calendar

def totalElement(account, startDate, finishDate):
    totalElement = VirtualBill("total", 103, "Dso cost")
    return totalElement

class LlfCalculator:
    def __init__(self, voltage_level, is_substation, date):
        self.cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
        self.cal_ct = GregorianCalendar(TimeZone.getTimeZone("Europe/London"), Locale.UK)
        self.voltage_level = voltage_level
        self.is_substation = is_substation
        self.rate_script = None
        self.set_time(date)

    def get_rate(self, name):
        return self.rate_engine.invokeFunction(name, [])

    def set_time(self, date):
        self.date = date
        self.cal.setTime(self.date.getDate())
        self.year = self.cal.get(Calendar.YEAR)
        self.month = self.cal.get(Calendar.MONTH)
        self.day = self.cal.get(Calendar.DAY_OF_MONTH)
        self.day_of_week = self.cal.get(Calendar.DAY_OF_WEEK)
        self.hour = self.cal.get(Calendar.HOUR_OF_DAY)
        self.minute = self.cal.get(Calendar.MINUTE)
        self.decimal_hour = self.hour + self.minute / 60
        self.cal_ct.setTime(date.getDate())
        self.year_ct = self.cal_ct.get(Calendar.YEAR)
        self.month_ct = self.cal_ct.get(Calendar.MONTH)
        self.day_ct = self.cal_ct.get(Calendar.DAY_OF_MONTH)
        self.day_of_week_ct = self.cal_ct.get(Calendar.DAY_OF_WEEK)
        self.hour_ct = self.cal_ct.get(Calendar.HOUR_OF_DAY)
        self.minute_ct = self.cal_ct.get(Calendar.MINUTE)
        self.decimal_hour_ct = self.hour_ct + self.minute_ct / 60
        if self.rate_script == None or self.rate_script.getStartDate().getDate().after(self.date.getDate()) or (self.rate_script.getFinishDate() is not None and self.rate_script.getFinishDate().getDate().before(self.date.getDate())):
            self.rate_script = contract.rateScripts(self.date, self.date)[0]
            self.rate_engine = self.rate_script.invocableEngine()

    def llf(self):
        if self.decimal_hour_ct > 23.5 or self.decimal_hour_ct <= 6.5:
            if self.voltage_level == "HV":
                return self.get_rate('night_hv')
            elif self.voltage_level == "LV":
                if self.is_substation:
                    return self.get_rate('night_lv_sub')
                else:
                    return self.get_rate('night_lv')
        elif self.day_of_week < 7 and self.day_of_week > 1 and self.decimal_hour_ct > 16 and self.decimal_hour_ct <= 19 and (self.month_ct > 10 or self.month_ct < 3):
            if self.voltage_level == "HV":
                return self.get_rate('winter_weekday_peak_hv')
            elif self.voltage_level == "LV":
                if self.is_substation:
                    return self.get_rate('winter_weekday_peak_lv_sub')
                else:
                    return self.get_rate('winter_weekday_peak_lv')
        elif self.day_of_week < 7 and self.day_of_week > 1 and self.decimal_hour_ct > 6.5 and self.decimal_hour_ct <= 16 and (self.month_ct > 10 or self.month_ct <3):
            if self.voltage_level == "HV":
                return self.get_rate('winter_weekday_day_hv')
            elif self.voltage_level == "LV":
                if self.is_substation:
                    return self.get_rate('winter_weekday_day_lv_sub')
                else:
                    return self.get_rate('winter_weekday_day_lv')
        else:
            if self.voltage_level == "HV":
                return self.get_rate('other_hv')
            elif self.voltage_level == "LV":
                if self.is_substation:
                    return self.get_rate('other_lv_sub')
                else:
                    return self.get_rate('other_lv_sub')

    def is_duos_day(self):
        if self.decimal_hour_ct > 23.5 or self.decimal_hour_ct <= 6.5:
            return False
        else:
            return True

def calculator(voltage_level, is_substation, date):
    return LlfCalculator(voltage_level, is_substation, date)]]></value>
        <value><![CDATA[def winter_weekday_peak_hv():

    return 1.057



def winter_weekday_day_hv():

    return 1.051



def night_hv():

    return 1.040



def other_hv():

    return 1.045



def winter_weekday_peak_lv_sub():

    return 1.068



def winter_weekday_day_lv_sub():

    return 1.064



def night_lv_sub():

    return 1.059



def other_lv_sub():

    return 1.060



def winter_weekday_peak_lv():

    return 1.074



def winter_weekday_day_lv():

    return 1.069



def night_lv():

    return 1.064



def other_lv():

    return 1.065



def triad():

    return 23.77056]]></value>
    </line>
    <line>

        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[22]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2007-04-01T00:30Z]]></value>
        <value><![CDATA[def winter_weekday_peak_hv():
    return 1.057

def winter_weekday_day_hv():
    return 1.051

def night_hv():
    return 1.040

def other_hv():
    return 1.045

def winter_weekday_peak_lv_sub():
    return 1.068

def winter_weekday_day_lv_sub():
    return 1.064

def night_lv_sub():
    return 1.059

def other_lv_sub():
    return 1.060

def winter_weekday_peak_lv():
    return 1.074

def winter_weekday_day_lv():
    return 1.069

def night_lv():
    return 1.064

def other_lv():
    return 1.065

def triad():
    return 23.77056]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>

        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[22]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2008-04-01T00:30Z]]></value>
        <value><![CDATA[def winter_weekday_peak_hv():
    return 1.058

def winter_weekday_day_hv():
    return 1.051

def night_hv():
    return 1.041

def other_hv():
    return 1.046

def winter_weekday_peak_lv_sub():
    return 1.070

def winter_weekday_day_lv_sub():
    return 1.066

def night_lv_sub():
    return 1.060

def other_lv_sub():
    return 1.062

def winter_weekday_peak_lv():
    return 1.079

def winter_weekday_day_lv():
    return 1.073

def night_lv():
    return 1.067

def other_lv():
    return 1.069

def triad():
    return 25.212997]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>

        <value><![CDATA[22]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2009-04-01T00:30Z]]></value>
        <value><![CDATA[def winter_weekday_peak_hv():
    return 1.058

def winter_weekday_day_hv():
    return 1.051

def night_hv():
    return 1.041

def other_hv():
    return 1.046

def winter_weekday_peak_lv_sub():
    return 1.070

def winter_weekday_day_lv_sub():
    return 1.066

def night_lv_sub():
    return 1.060

def other_lv_sub():
    return 1.062

def winter_weekday_peak_lv():
    return 1.079

def winter_weekday_day_lv():
    return 1.073

def night_lv():
    return 1.067

def other_lv():
    return 1.069

def triad():
    return 25.631634]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[23]]></value>

        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>

        <value><![CDATA[24]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>

        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[99]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[from net.sf.chellow.billing import VirtualBill

def totalElement(account, startDate, finishDate):
    totalElement = VirtualBill("total", 103, "Dso cost")
    return totalElement

def calculator(voltage_level, is_substation, date):
    return None]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
</csv>

