<?xml version="1.0"?>
<csv>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[1]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Home]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['impt'](globals(), 'templater', 'db')

sess = None
try:
    sess = db.session()
    config = db.Contract.get_non_core_by_name(sess, 'configuration')
    templater.render(inv, template, {'properties': config.make_properties()})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/" />
    <title>Chellow</title>
  </head>
  <body>
    <p>Chellow</p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <div id="container">
      <div id="main">
        <h3>Main</h3>
        <ul>
          <li>
            <a href="{{ context_path }}/reports/3/output/">Sites</a>
          </li>
          <li>
            <a href="{{ context_path }}/reports/99/output/">
              Supplies
            </a>
          </li>
          <li>Contracts
            <ul>
              <li>
                <a href="{{ context_path }}/reports/113/output/">HHDC</a>
              </li>
              <li>
                <a href="{{ context_path }}/reports/185/output/">MOP</a>
              </li>
              <li>
                <a href="{{ context_path }}/reports/75/output/">Supplier</a>
              </li>
              <li>
                <a href="{{ context_path }}/reports/137/output/">DNO</a>
              </li>
              <li>
                <a href="{{ context_path }}/reports/259/output/">Non-Core</a>
              </li>
            </ul>
          </li>
          <li>
            <a href="{{ context_path }}/reports/39/output/">Site Snags</a>
          </li>
          {% if properties.local_reports_id %}
            <li>
              <a href="{{context_path}}/reports/{{properties.local_reports_id }}/output/">Local Reports</a>
            </li>
          {% endif %}
        <li>
          <a href="{{context_path}}/reports/293/output/">General Import</a>
        </li>
        <li>
          <a href="https://bitbucket.org/ww_tlocke/chellow" target="_blank">Docs</a>
        </li>
      </ul>
      <table><caption>CSV <a href="{{ context_path }}/reports/251/output/">Downloads</a></caption>
        <tr><th></th><th>Supplies</th><th>Sites</th></tr>
        <tr><th>Snapshot</th><td><a href="{{ context_path }}/reports/157/output/">Download</a></td><td></td></tr>
        <tr>
          <th>Duration</th>
          <td><a href="{{ context_path }}/reports/147/output/">Download</a></td>
          <td><a href="{{ context_path }}/reports/57/output/">Download</a></td>
        </tr>
        <tr>
          <th>Monthly Duration</th>
          <td><a href="{{ context_path }}/reports/155/output/">Download</a></td>
            <td><a href="{{ context_path }}/reports/159/output/">Download</a></td>
        </tr>
        <tr><th>HH Data</th><td><a href="{{ context_path }}/reports/167/output/">Download</a></td><td><a href="{{ context_path }}/reports/145/output/">Download</a></td>
        </tr>
        </tr>
          <tr><th>TRIAD</th><td><a href="{{ context_path }}/reports/175/output/">Download</a></td><td><a href="{{ context_path }}/reports/179/output/">Download</a></td>
          </tr>
          <tr><th>CRC</th><td><a href="{{ context_path }}/reports/209/output/">Download</a></td><td></td>
          </tr>
          <tr><th>Register Reads</th><td><a href="{{ context_path }}/reports/217/output/">Download</a></td><td></td>
          </tr>
          <tr><th>Bills</th><td><a href="{{ context_path }}/reports/153/output/">Download</a></td><td></td>
          </tr>

        </table>

        <ul>
            <li><a href="{{ context_path }}/reports/235/output/">Overall Profile</a></li>
            <li><a href="{{ context_path }}/reports/245/output/">Scenario Runner</a></li>

        </ul>
        </div>
        <div id="industry-info">
        <h3>Industry Info</h3>
        <ul>
          <li>
            <a href="{{ context_path }}/reports/71/output/">
            Market Participants
            </a>
          </li>
          <li>
            <a href="{{ context_path }}/reports/121/output/">
              Market Roles
            </a>
          </li>
          <li><a href="{{ context_path }}/reports/45/output/">Parties</a></li>
          <li><a href="{{ context_path }}/reports/53/output/">
            Profile Classes
            </a>
          </li>
          <li>
          <a
             href="{{ context_path }}/reports/61/output/">
    Meter Timeswitch Classes
            </a>
                    </li>
                    <li>
                        <a
    href="{{ context_path }}/reports/129/output/">
                            Meter Types
                        </a>
                    </li>
                    <li>
                      <a href="{{ context_path }}/reports/133/output/">Meter Payment Types</a>
                    </li>
                    <li>
                        <a
    href="{{ context_path }}/reports/95/output/">
                            TPRs
                        </a>
                    </li>
                    <li>
<a href="{{ context_path }}/reports/125/output/">
                            SSCs
                        </a>
                    </li>
                    <li>
                        <a
    href="{{ context_path }}/reports/43/output/">
    GSP Groups
                        </a>
                    </li>
                    <li>
                        <a
    href="{{ context_path }}/reports/85/output/">
    CoPs
                        </a>
                    </li>
                    <li>
                        <a
    href="{{ context_path }}/reports/199/output/">
    Bill Types
                        </a>
                    </li>
                    <li>
                        <a
    href="{{ context_path }}/reports/141/output/">
    Read Types
                        </a>
                    </li>
                    <li>
                        <a href="{{context_path}}/reports/337/output/">
                            Sources
                        </a>
                    </li>
                    <li>
                        <a href="{{context_path}}/reports/341/output/">
                            Generator Types
                        </a>
                    </li>
                </ul>
      </div>
      <div id="for-editors">
        <h3>For Editors</h3>

        <ul>
          <li>
            <a href="{{ context_path }}/reports/">Reports</a>
          </li>
          <li>
            <a href="{{context_path}}/reports/255/output/">Users</a>
          </li>
          <li>
            <a href="{{ context_path }}/reports/261/output/">User Roles</a>
          </li>
          <li>
            <a href="{{ context_path }}/configuration/">
              Configuration
            </a>
          </li>
          <li>
            <a href="{{ context_path }}/reports/171/output/">System</a>
          </li>
          <li>
            <a href="{{ context_path }}/reports/195/output/">Comparison against ECOES</a>
          </li>
        </ul>
      </div>
    </div>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[3]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Sites]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Site', 'Party', 'Era', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

LIMIT = 50
sess = None
try:
    sess = session()
    if inv.hasParameter('pattern'):
        pattern = inv.getString("pattern")
        #pattern = pattern.strip()
        sites = sess.query(Site).from_statement("select * from site where lower(code || ' ' || name) like '%' || lower(:pattern) || '%' order by code limit :lim").params(pattern=pattern, lim=LIMIT).all()

        if len(sites) == 1:
            inv.sendTemporaryRedirect("/reports/5/output/?site_id=" + str(sites[0].id))
        else:
            render(inv, template, {'sites': sites, 'limit': LIMIT})
    else:
        render(inv, template, {})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; Sites</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      Sites [<a href="{{context_path}}/reports/297/output/">add</a>]
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <form action=".">
      <fieldset>
        {{input_text('pattern', '')}}
        <input type="submit" value="Search">
      </fieldset>
    </form>
    {% if sites %}
      <p>Only the first {{limit}} sites of the search results are shown.</p>
      <ul>
        {% for site in sites %}
          <li>
            <a href="{{context_path}}/reports/5/output/?site_id={{site.id}}">{{site.code}} {{site.name}}</a>
          </li>
        {% endfor %}
      </ul>
    {% elif request.getParameter('pattern') %}
      <p>No sites matched your search</p>
    {% endif %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[5]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Site]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import operator
from datetime import datetime
from dateutil.relativedelta import relativedelta
from java.lang import System
import pytz

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')

Contract, Site, Era, SiteEra = db.Contract, db.Site, db.Era, db.SiteEra
HH = utils.HH

sess = None
try:
    sess = db.session()
    configuration_contract = Contract.get_non_core_by_name(sess, 'configuration')
    site_id = inv.getLong("site_id")
    site = Site.get_by_id(sess, site_id)

    eras = sess.query(Era).join(SiteEra).filter(SiteEra.site_id==site.id).order_by(Era.supply_id, Era.start_date.desc()).all()

    groups = []
    for idx, era in enumerate(eras):
        if idx == 0 or eras[idx - 1].supply_id != era.supply_id:
            if era.pc.code == '00':
                meter_cat = 'HH'
            elif len(era.channels) > 0:
                meter_cat = 'AMR'
            elif era.mtc.meter_type.code in ['UM', 'PH']:
                meter_cat = 'Unmetered'
            else:
                meter_cat = 'NHH'

            groups.append({'last_era': era, 'is_ongoing': era.finish_date is None, 'meter_category': meter_cat})
        if era == eras[-1] or era.supply_id != eras[idx + 1]:
            groups[-1]['first_era'] = era

    groups = sorted(groups, key=operator.itemgetter('is_ongoing'), reverse=True)

    now = datetime.now(pytz.utc)
    month_start = datetime(now.year, now.month, 1)
    month_finish = month_start + relativedelta(months=1) - HH
    last_month_start = month_start - relativedelta(months=1)
    last_month_finish = month_start - HH

    properties = configuration_contract.make_properties()
    other_sites = [s for s in site.groups(sess, now, now, False)[0].sites if s != site]
    templater.render(inv, template, {'site': site, 'groups': groups, 'properties': properties, 'other_sites': other_sites, 'month_start': month_start, 'month_finish': month_finish, 'last_month_start': last_month_start, 'last_month_finish': last_month_finish})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>Chellow &gt; Sites &gt; {{site.name}}</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/3/output/">Sites</a> &gt;
      {{site.name}}
      [<a href="{{context_path}}/reports/311/output/?site_id={{site.id}}">edit</a>]
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tr>
        <th>Code</th>
        <td>{{site.code}}</td>
      </tr>
      <tr>
        <th>Name</th>
        <td>{{site.name}}</td>
      </tr>
      {% if properties.site_reports %}
        <tr>
          <th>Custom Reports</th>
          <td>
            <ul>
              {% for report in properties.site_reports %}
                <li>
                  <a href="{{context_path}}/reports/{{report.id}}/output/?site_id={{site.id}}">{{report.name}}</a>
                </li>
              {% endfor %}
            </ul>
          </td>
        </tr>
      {% endif %}
      {% if properties.site_links %}
        <tr>
          <th>External Links</th>
          <td>
            <ul>
              {% for link in properties.site_links %}
                <li><a href="{{link.href}}{{site.code}}">{{link.name}}</a></li>
              {% endfor %}
            </ul>
          </td>
        </tr>
      {% endif %}
    </table>
    <br>

    {% if other_sites|length > 0 %}
      <table>
        <caption>Other sites in this group</caption>
        <tr>
          <th>Code</th>
          <th>Name</th>
        </tr>
        {% for osite in other_sites %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/5/output/?site_id={{osite.id}}">{{osite.code}}</a>
            </td>
            <td>{{osite.name}}</td>
          </tr>
        {% endfor %}
      </table>
    {% endif %}
    <br>
    <table>
      <caption>Supplies that power this site</caption>
      <thead>
        <tr>
          <th>View</th>
          <th>Name</th>
          <th>From</th>
          <th>To</th>
          <th>Source</th>
          <th>Generator Type</th>
          <th>Import MPAN core</th>
          <th>Export MPAN core</th>
          <th>Physical Location</th>
          <th>Also Supplies</th>
          <th>Meter Category</th>
          <th>Meter Serial Number</th>
        </tr>
      </thead>
      <tbody>
        {% for group in groups %}
          {% set last_era = group['last_era'] %}
          <tr
            {% if not group['is_ongoing'] %}
              style="color: silver;"
            {% endif %}
          >
            <td>
              <a href="{{context_path}}/reports/7/output/?supply_id={{last_era.supply_id}}">view</a>
            </td>
            <td>{{last_era.supply.name}}</td>
            <td>{{group['first_era'].start_date|hh_format}}</td>
            <td>{{last_era.finish_date|hh_format}}</td>
            <td>{{last_era.supply.source.code}}</td>
            <td>
              {% if last_era.supply.generator_type %}
                {{last_era.supply.generator_type.code}}
              {% endif %}
            </td>
            <td>
              {% if last_era.imp_mpan_core %}
                <a href="{{context_path}}/reports/67/output/?dno_contract_id={{last_era.supply.dno_contract.id}}">{{last_era.supply.dno_contract.name}}</a>
                {{last_era.imp_mpan_core[2:]}}
              {% endif %}
            </td>
            <td>
              {% if last_era.exp_mpan_core %}
                <a href="{{context_path}}/reports/67/output/?dno_contract_id={{last_era.supply.dno_contract.id}}">{{last_era.supply.dno_contract.name}}</a>
                {{last_era.exp_mpan_core[2:]}}
              {% endif %}
            </td>
            <td>
              {% for site_era in last_era.site_eras %}
                {% if site_era.is_physical %}
                  {% if site_era.site.id == site.id %}
                    this site
                  {% else %}
                    <a href="{{context_path}}/reports/5/output/?site_id={{site_era.site.id}}" title="{{site_era.site.name}}">{{site_era.site.code}}</a>
                  {% endif %}
                {% endif %}
              {% endfor %}
            </td>
            <td>
              {% for site_era in last_era.site_eras %}
                {% if site_era.site.id != site.id %}
                  <a href="{{context_path}}/reports/5/output/?site_id={{site_era.site.id}}" title="{{site_era.site.name}}">{{site_era.site.code}}</a>
                {% endif %}
              {% endfor %}
            </td>
            <td>{{group.meter_category}}</td>
            <td>{{last_era.msn}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
    <ul>
      <li>
        <a href="{{context_path}}/reports/9/output/?site_id={{site.id}}&amp;months=1&amp;finish_year={{month_finish.year}}&amp;finish_month={{month_finish.month}}">Graph of site usage</a>
      </li>
      <li>
        <a href="{{context_path}}/reports/11/output/?site_id={{site.id}}&amp;months=1&amp;finish_year={{month_finish.year}}&amp;finish_month={{month_finish.month}}">Generation Graphs</a>
      </li>
      <li>
        <a href="{{context_path}}/reports/13/output/?site_id={{site.id}}&amp;finish_year={{last_month_finish.year}}&amp;finish_month={{last_month_finish.month}}">
Table of site level monthly kWh, MD kWh etc.</a>
      </li>
      <li>
        <a href="{{context_path}}/reports/25/output/?site_code={{site.code}}&amp;year={{month_finish.year}}&amp;month={{month_finish.month}}">Table of hh data</a>
      </li>
    </ul>

    <h3>CSV Downloads</h3>
    
    <form action="{{context_path}}/reports/161/output/">
      <fieldset>
        <input type="hidden" name="site_id" value="{{site.id}}">
        <legend>Monthly Duration</legend>
        <br>
        For {{input_text('months', '1', 2, 2)}}
        month(s) until the end of {{input_date('finish', last_month_finish, resolution='month')}}
        <input type="submit" value="Download"/>
      </fieldset>
    </form>
    <br>
    <form action="{{context_path}}/reports/181/output/">
      <fieldset>
        <input type="hidden" name="site_id" value="{{site.id}}">
        <legend>Download TRIAD CSV</legend>
        <br>
        For financial year ending March
        {{input_date(None, last_month_finish, resolution='year')}}
        <input type="submit" value="Download">
      </fieldset>
    </form>
    <br>
    <form action="{{context_path}}/reports/29/output/">
      <fieldset>
        <legend>Download HH data (kWh)</legend>
        <input type="hidden" name="site_id" value="{{site.id}}">
        <br>
        <select name="type">
          <option value="used">Used</option>
          <option value="imp_net">Imported</option>
          <option value="exp_net">Exported</option>
          <option value="imp_gen">Generated</option>
          <option value="displaced">Displaced</option>
          <option value="exp_gen">Parasitic</option>
        </select>
        for {{input_text('months', '1', 2, 2)}}
        month(s) until the end of {{input_date('finish', last_month_finish, resolution='month')}}
        <input type="submit" value="Download">
      </fieldset>
    </form>
    <br>
    <form action="{{context_path}}/reports/109/output/">
      <fieldset>
        <input type="hidden" name="site_id" value="{{site.id}}">
        <legend>Displaced Virtual Bills</legend>
        <br>
        For {{input_text('months', '1', 2, 2)}}
        month(s) until the end of {{input_date('finish', last_month_finish, resolution='month')}}
        <input type="submit" value="Download">
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[7]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supply]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from dateutil.relativedelta import relativedelta
import collections
from datetime import datetime

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')

UserException = utils.UserException
Supply, Era, Site, SiteEra = db.Supply, db.Era, db.Site, db.SiteEra
Channel, Bill, Contract, Tpr = db.Channel, db.Bill, db.Contract, db.Tpr
MeasurementRequirement = db.MeasurementRequirement
RegisterRead = db.RegisterRead


sess = None
rate_scripts = None
debug = ''
try:
    sess = db.session()
    era_bundles = []
    supply_id = inv.getLong('supply_id')
    if supply_id is None:
        supply_id = inv.getLong('supply-id')
    supply = Supply.get_by_id(sess, supply_id)
    eras = sess.query(Era).filter(Era.supply_id == supply.id).order_by(Era.start_date.desc()).all()
    for era in eras:
        imp_mpan_core = era.imp_mpan_core
        exp_mpan_core = era.exp_mpan_core
        physical_site = sess.query(Site).join(SiteEra).filter(SiteEra.is_physical == True, SiteEra.era_id == era.id).one()
        other_sites = sess.query(Site).join(SiteEra).filter(SiteEra.is_physical != True, SiteEra.era_id == era.id).all()
        imp_channels = sess.query(Channel).filter(Channel.era_id == era.id, Channel.imp_related == True).order_by(Channel.channel_type).all()
        exp_channels = sess.query(Channel).filter(Channel.era_id == era.id, Channel.imp_related == False).order_by(Channel.channel_type).all()
        era_bundle = {'era': era, 'physical_site': physical_site, 'other_sites':
            other_sites, 'imp_channels': imp_channels, 'exp_channels':
            exp_channels, 'imp_bills': {'bill_dicts': []}, 'exp_bills': {'bill_dicts': []}, 'hhdc_bills': {'bill_dicts': []}, 'mop_bills': {'bill_dicts': []}}
        era_bundles.append(era_bundle)

        if imp_mpan_core is not None:
            era_bundle['imp_shared_supplier_accounts'] = sess.query(Supply).from_statement("select distinct supply.* from era, supply where era.supply_id = supply.id and era.supply_id != :supply_id and era.imp_supplier_account = :account and era.imp_supplier_contract_id = :contract_id").params(supply_id=supply.id, account=era.imp_supplier_account, contract_id=era.imp_supplier_contract_id).all()

        if exp_mpan_core is not None:
            era_bundle['exp_shared_supplier_accounts'] = sess.query(Supply).join(Era).filter(Era.supply != supply, Era.exp_supplier_account == era.exp_supplier_account, Era.exp_supplier_contract == era.exp_supplier_contract).all()
        if era.pc.code != '00':
            inner_headers = [tpr for tpr in sess.query(Tpr).join(MeasurementRequirement).filter(MeasurementRequirement.ssc_id == era.ssc.id).order_by(Tpr.code)]
            if era.pc.code in ['05', '06', '07', '08']:
                inner_headers.append(None)
            era_bundle['imp_bills']['inner_headers'] = inner_headers
            inner_header_codes = [tpr.code if tpr is not None else 'md' for tpr in inner_headers]

        bills = sess.query(Bill).filter(Bill.supply_id==supply.id).order_by(Bill.start_date.desc(), Bill.issue_date.desc(), Bill.reference.desc())
        if era.finish_date is not None:
            bills = bills.filter(Bill.start_date<=era.finish_date)
        if era != eras[-1]:
            bills = bills.filter(Bill.start_date>=era.start_date)

        num_outer_cols = 0
        for bill in bills:
            bill_contract = bill.batch.contract
            bill_role_code = bill_contract.party.market_role.code
            if bill_role_code == 'X':
                if exp_mpan_core is not None and bill_contract == era.exp_supplier_contract:
                    bill_group_name = 'exp_bills'
                else:
                    bill_group_name = 'imp_bills'

            elif bill_role_code == 'C':
                bill_group_name = 'hhdc_bills'
            elif bill_role_code == 'M':
                bill_group_name = 'mop_bills'
            else:
                raise UserException("""bill group name not found for
                    bill_contract_id """ + str(bill_contract.id))

            bill_group = era_bundle[bill_group_name]
            rows_high = 1
            bill_dict = {'bill': bill}
            bill_group['bill_dicts'].append(bill_dict)

            if bill_group_name == 'imp_bills' and era.pc.code != '00':
                inner_tpr_map = dict((code, []) for code in inner_header_codes)
                outer_tpr_map = collections.defaultdict(list)

                for read, tpr in sess.query(RegisterRead, Tpr).join(Tpr).filter(RegisterRead.bill_id==bill.id).order_by(Tpr.id, RegisterRead.present_date.desc()):
                    tpr_code = 'md' if tpr is None else tpr.code
                    try:
                        inner_tpr_map[tpr_code].append(read)
                    except KeyError:
                        outer_tpr_map[tpr_code].append(read)                   
                
                rows_high = max([len(val) for val in (inner_tpr_map.values() + outer_tpr_map.values())] + [rows_high])

                read_rows = []
                bill_dict['read_rows'] = read_rows

                for i in range(rows_high):
                    inner_reads = []
                    row_dict = {'inner_reads': inner_reads, 'outer_reads': []}
                    read_rows.append(row_dict)
                    for tpr_code in inner_header_codes:
                        try:
                            inner_reads.append(inner_tpr_map[tpr_code][i])
                        except IndexError:
                            row_dict['inner_reads'].append(None)

                    for tpr_code, read_list in outer_tpr_map.iteritems():
                        try:
                            row_dict['outer_reads'].append(read_list[i])
                        except IndexError:
                            row_dict['outer_reads'].append(None)

                num_outer_cols = max(num_outer_cols, len(outer_tpr_map))


                bill_dict['rows_high'] = rows_high

        era_bundle['imp_bills']['num_outer_cols'] = num_outer_cols
        era_bundle['exp_bills']['num_outer_cols'] = 0

        for bill_group_name in ('imp_bills', 'exp_bills', 'hhdc_bills', 'mop_bills'):
            b_dicts = list(reversed(era_bundle[bill_group_name]['bill_dicts']))
            for i, b_dict in enumerate(b_dicts):
                if i < (len(b_dicts) - 1):
                    bill = b_dict['bill']
                    next_b_dict = b_dicts[i+1]
                    next_bill = next_b_dict['bill']
                    if (bill.start_date, bill.finish_date, bill.kwh, bill.net) == (next_bill.start_date, next_bill.finish_date, -1 * next_bill.kwh, -1 * next_bill.net) and not 'collapsible' in b_dict:
                        b_dict['collapsible'] = True
                        next_b_dict['first_collapsible'] = True
                        next_b_dict['collapsible'] = True
                        b_dict['collapse_id'] = next_b_dict['collapse_id'] = bill.id
            #debug += str(b_dicts)

    RELATIVE_YEAR = relativedelta(years=1)

    now = datetime.utcnow()
    triad_year = (now - RELATIVE_YEAR).year if now.month < 3 else now.year
    this_month_start = datetime(now.year, now.month, 1)
    last_month_start = this_month_start - relativedelta(months=1) 
    last_month_finish = this_month_start - relativedelta(minutes=30)

    batch_reports = []
    config_contract = Contract.get_non_core_by_name(sess, 'configuration')
    properties = config_contract.make_properties()
    if 'supply_reports' in properties:
        for report_id in properties['supply_reports']:
            batch_reports.append(Report.get_by_id(sess, report_id))
    
    truncated_note = None
    is_truncated = False
    note = None
    if len(supply.note.strip()) == 0:
        note_str = "{'notes': []}"
    else:
        note_str = supply.note

    supply_note = eval(note_str)
    notes = supply_note['notes']
    if len(notes) > 0:
        note = notes[0]
        lines = note['body'].splitlines()
        if len(lines) > 0:
            trunc_line = lines[0][:50]
            if len(lines) > 1 or len(lines[0]) > len(trunc_line):
                is_truncated = True
                truncated_note = trunc_line

    templater.render(inv, template, {'triad_year': triad_year, 'now': now, 'last_month_start': last_month_start, 'last_month_finish': last_month_finish, 'era_bundles': era_bundles, 'supply': supply, 'system_properties': properties, 'is_truncated': is_truncated, 'truncated_note': truncated_note, 'note': note, 'this_month_start': this_month_start, 'batch_reports': batch_reports, 'debug': debug})

except UserException, e:
    if str(e).startswith("There isn't a contract"):
        inv.sendNotFound(str(e))
    else:
        render(inv, template, {'messages': [str(e)], 'contract': contract, 'rate_scripts': rate_scripts})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Chellow &gt; Supplies &gt; {{supply.id}}</title>

    <script type="text/javascript" language="javascript">    
      function hideText() {
        document.getElementById('full_note').style.display='none';
        document.getElementById('truncated_note').style.display='inline';
      }

      function showText() {
        document.getElementById('truncated_note').style.display='none';
        document.getElementById('full_note').style.display='inline';
      }

      function collapseBills(collapseId) {
        var collapsibles = document.getElementsByClassName('collapsible_' + collapseId);
        for (var i = 0; i < collapsibles.length; i++) {
          collapsibles[i].style.display = 'none';
        }
        var expanders = document.getElementsByClassName('expander_' + collapseId);
        for (var i = 0; i < expanders.length; i++) {
          expanders[i].style.display = 'inline';
        }
        var collapsers = document.getElementsByClassName('collapser_' + collapseId);
        for (var i = 0; i < collapsers.length; i++) {
          collapsers[i].style.display = 'none';
        }
      }

      function expandBills(collapseId) {
        var collapsibles = document.getElementsByClassName('collapsible_' + collapseId);
        for (var i = 0; i < collapsibles.length; i++) {
          collapsibles[i].style.display = 'block';
        }
        var expanders = document.getElementsByClassName('expander_' + collapseId);
        for (var i = 0; i < expanders.length; i++) {
          expanders[i].style.display = 'none';
        }
        var collapsers = document.getElementsByClassName('collapser_' + collapseId);
        for (var i = 0; i < collapsers.length; i++) {
          collapsers[i].style.display = 'inline';
        }
      }    
    
    </script>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/99/output/">Supplies</a> &gt;
      {{supply.id}} [<a href="{{context_path}}/reports/305/output/?supply_id={{supply.id}}">edit</a>]
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    {{debug}}

    <table>
      <tr>
        <th>Name</th>
        <td>{{ supply.name }}</td>
      </tr>
      <tr>
        <th>Source</th>
        <td>
          {{ supply.source.code }} - {{ supply.source.name }}
          {% if supply.source.code == 'gen' %}
            ( {{ supply.generator_type.code }} {{ supply.generator_type.name }})
          {% endif %}
        </td>
      </tr>
      <tr>
        <th>GSP Group</th>
        <td>
          {{ supply.gsp_group.code }} {{ supply.gsp_group.description }}
        </td>
      </tr>
        {% if system_properties['supply_links'] %}
          <tr>
            <th>Links</th>
            <td>
              <ul>
                {% for link in system_properties['supply_links'] %}
                  <li>
                    <a href="{{link.url}}supply_id={{site.id}}">{{link.name}}</a>
                  </li>
                {% endfor %}
              </ul>
            </td>
          </tr>
        {% endif %}
      <tr>
        <th>
          <a href="{{context_path}}/reports/369/output/?supply_id={{supply.id}}">Notes</a>
        </th>
        <td>
          {% if note %}
            {% if is_truncated %}
              <div id="truncated_note">
                {{ truncated_note }} 
              </div>
              <div id="full_note" style="display: none;">
                <pre style=" white-space: pre-wrap;">{{ supply.note }}</pre>
                <a href="JavaScript:void()" onClick="hideText()" />Less...</a>
              </div>
            {% else %}
              Category: {{note.category}}
              {% if note.is_important %}
                Important
              {% else %}
                Not important
              {% endif %}
              <pre style="display: inline;">{{note.body}}</pre>
            {% endif %}
          {% endif %}
        </td>
      </tr>
    </table>
    <br />
    {% for era_bundle in era_bundles %}
      {% set era = era_bundle['era'] %}
      {% set physical_site = era_bundle['physical_site'] %}
      {% set other_sites = era_bundle['other_sites'] %}

      <table>
          <caption>
            Era
            [<a href="{{context_path}}/reports/307/output/?era_id={{era.id}}">edit</a>]
          </caption>
          <thead>
            <tr>
              <th rowspan="2">From</th>
              <th rowspan="2">To</th>
              <th rowspan="2">Sites</th>
              <th rowspan="2"><a title="Profile Class">PC</a></th>
              <th rowspan="2"><a title="Meter Serial Number">MSN</a></th>
              <th rowspan="2"><a title="Meter Timeswitch Class">MTC</a></th>
              <th rowspan="2"><a title="Metering Code Of Practice">CoP</a></th>
              <th rowspan="2">
                <a title="Standard Settlement Configuration">SSC</a>
              </th>
              <th colspan="2">
                <a title="Meter Operator">MOP</a>
              </th>
              <th colspan="2">
                <a title="Data Collector">DC</a>
              </th>
              <th rowspan="2">
                Channels
                      [<a href="{{context_path}}/reports/299/output/?era_id={{era.id}}">add</a>]
              </th>
              <th rowspan="2">
                <a title="Line Loss Factor Class">LLFC</a>
              </th>
              <th rowspan="2">MPAN Core</th>
              <th rowspan="2">kVA</th>
              <th colspan="2">Supplier</th>
            </tr>
            <tr>
              <th>Contract</th>
              <th>Account</th>
              <th>Contract</th>
              <th>Account</th>
              <th>Contract</th>
              <th>Account</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td rowspan="4">
                <a title="{{ era.start_date|hh_format }}">{{ era.start_date|hh_format(modifier='date') }}</a>
              </td>
              <td rowspan="4">
                <a title="{{ era.finish_date|hh_format }}">{{ era.finish_date|hh_format(modifier='date') }}</a>
              </td>
              <td rowspan="4">
                <a href="{{ context_path }}/reports/5/output/?site_id={{ physical_site.id }}" title="{{ physical_site.name }}">{{ physical_site.code }}</a>
                {% if other_sites %}
                  (also
                    {% for other_site in other_sites %}
                      <a href="{{ context_path }}/reports/5/output/?site_id={{ other_site.id }}" title="{{ other_site.name }}">{{ other_site.code }}</a>
                    {%- endfor -%}
                  )
                {% endif %}
              </td>
              <td rowspan="4">
                <a href="{{ context_path }}/reports/55/output/?pc_id={{ era.pc.id }}" title="{{ era.pc.name }}">{{ era.pc.code }}</a>
              </td>
              <td rowspan="4">{{ era.msn }}</td>
              <td rowspan="4">
                <a href="{{ context_path }}/reports/63/output/?mtc_id={{ era.mtc.id }}" title="{{ era.mtc.description }}">{{ era.mtc.code }}</a>
              </td>
              <td rowspan="4">
                <a href="{{ context_path }}/reports/197/output/?cop_id={{ era.cop.id }}" title="{{ era.cop.description }}">{{ era.cop.code }}</a>
              </td>
              <td rowspan="4">
                {% if era.ssc %}
                  <a href="{{ context_path }}/reports/127/output/?ssc_id={{ era.ssc.id }}" title="{{ era.ssc.description }}">{{ era.ssc.code }}</a>
                {% endif %}
              </td>
              <td rowspan="4">
                <a href="{{ context_path }}/reports/107/output/?mop_contract_id={{ era.mop_contract.id }}">{{ era.mop_contract.name }}</a>
              </td>
              <td rowspan="4">
                {{ era.mop_account }}
              </td>
              <td rowspan="4">
                <a href="{{ context_path }}/reports/115/output/?hhdc_contract_id={{ era.hhdc_contract.id }}">{{ era.hhdc_contract.name }}</a>
              </td>
              <td rowspan="4">{{ era.hhdc_account }}</td>
              <th colspan="6">Import</th>
            </tr>
            <tr>
              <td>
                {% for channel in era_bundle['imp_channels'] %}
                  <a href="{{context_path}}/reports/301/output/?channel_id={{channel.id}}">{{channel.channel_type}}</a>
                {% endfor %}
              </td>
              <td>
                {% if era.imp_mpan_core %}
                  <a href="{{ context_path }}/reports/51/output/?llfc_id={{ era.imp_llfc.id }}" title="{{ era.imp_llfc.description }}">{{ era.imp_llfc.code }}
                  </a>
                {% endif %}
              </td>
              <td>
                {% if era.imp_mpan_core %}
                  <a title="{{ supply.dno_contract.name }}" href="{{ context_path }}/reports/67/output/?dno_contract_id={{ supply.dno_contract.id }}">{{ supply.dno_contract.name }}</a> {{ era.imp_mpan_core[3:] }}
                {% endif %}
              <td>
                {% if era.imp_mpan_core %}
                  {{ era.imp_sc }}
                {% endif %}
              </td>      
              <td>
                {% if era.imp_mpan_core %}
                  <a href="{{ context_path }}/reports/77/output/?supplier_contract_id={{ era.imp_supplier_contract.id }}">{{ era.imp_supplier_contract.name }}</a>
                {% endif %}
              </td>
              <td>
                {% if era.imp_mpan_core %}  
                  {{ era.imp_supplier_account }}
                  {% if era_bundle['imp_shared_supplier_accounts'] %}(
                    {%- for sup in era_bundle['imp_shared_supplier_accounts'] -%}
                      {%- if not loop.first    -%} {%- endif -%}
                        <a href="{{ context_path }}/reports/7/output/?supply_id={{ sup.id }}">{{ sup.id }}</a>
                    {%- endfor -%}
                    )
                  {% endif %}
                {% endif %}
              </td>
            </tr>
            <tr>
              <th colspan="6">Export</th>
            </tr>
            <tr>
              <td>
                {% for channel in era_bundle['exp_channels'] %}
                  <a href="{{context_path}}/reports/301/output/?channel_id={{channel.id}}">{{channel.channel_type}}</a>
                {% endfor %}
              </td>
              <td>
                {% if era.exp_mpan_core %}
                  <a href="{{ context_path }}/reports/51/output/?llfc_id={{ era.exp_llfc.id }}" title="{{ era.exp_llfc.description }}">{{ era.exp_llfc.code }}</a>
                {% endif %}
              </td>
              <td>
                {% if era.exp_mpan_core %}
                  <a title="{{ era.supply.dno_contract.name }}" href="{{ context_path }}/reports/67/output/?dno_contract_id={{ era.supply.dno_contract.id }}">{{ era.supply.dno_contract.name }}</a> {{ era.exp_mpan_core[3:] }}
                {% endif %}
              </td>
              <td>
                {% if era.exp_mpan_core %}
                  {{ era.exp_sc }}
                {% endif %}
              </td>
              <td>
                {% if era.exp_mpan_core %}
                  <a href="{{ context_path }}/reports/77/output/?supplier_contract_id={{ era.exp_supplier_contract.id }}">{{ era.exp_supplier_contract.name }}</a>
                {% endif %}
              </td>
              <td>
                {% if era.exp_mpan_core %}
                  {{ era.exp_supplier_account }}
                  {% if era_bundle['exp_shared_supplier_accounts'] %}(
                    {%- for sup in era_bundle['exp_shared_supplier_accounts'] -%}
                    {%- if not loop.first    -%} {%- endif -%}
                      <a href="{{ context_path }}/reports/7/output/?supply_id={{ sup.id }}">{{ sup.id }}</a>
                    {%- endfor -%}
                    )
                  {% endif %}
                {% endif %}
              </td>
            </tr>
          </tbody>
      </table>
      <br/>
      <table>
        {% set imp_bills = era_bundle['imp_bills'] %}
        <caption>Import Supplier Bills</caption>
        <thead>
          <tr>
            <th rowspan="2">View</th>
            <th rowspan="2">From</th>
            <th rowspan="2">To</th>
            <th rowspan="2">Batch</th>
            <th rowspan="2">Reference</th>
            <th rowspan="2">kWh</th>
            <th rowspan="2">Net</th>
            <th rowspan="2">VAT</th>
            <th rowspan="2">Type</th>
            {% for tpr in imp_bills['inner_headers'] %}
              <th colspan="4">
                {% if tpr == None %}
                  MD
                {% else %}
                  <a href="{{ context_path }}/reports/97/output/?tpr_id={{ tpr.id }}">{{ tpr.code }}</a>
                {% endif %}
              </th>
            {% endfor %}
            {% for i in range(imp_bills['num_outer_cols']) %}
              <th colspan="5">
                {{ loop.index }}
              </th>
            {% endfor %}
          </tr>

          <tr>
            {% for tpr in imp_bills['inner_headers'] %}
              <th colspan="2">Previous</th>
              <th colspan="2">Present</th>
            {% endfor %}
            {% for i in range(imp_bills['num_outer_cols']) %}
              <th>TPR</th>
              <th colspan="2">Previous</th>
              <th colspan="2">Present</th>
            {% endfor %}
          </tr>
        </thead>
        <tbody>
          {% for bill_dict in imp_bills['bill_dicts'] %}
            {% set read_rows = bill_dict['read_rows'] %}
            {% set bill = bill_dict['bill'] %}
            {% set rows_high = bill_dict['rows_high'] %}
            {% if bill_dict.first_collapsible %}
              <tr style="background-color: silver; cursor: pointer;">
                <td
                  style="text-decoration: none; padding-top: 0px; padding-bottom: 0px; font-size: x-small;"
                  colspan="{{9 + imp_bills['inner_headers']|length * 4 + imp_bills['num_outer_cols'] * 5}}"
                  class="expander_{{bill_dict.collapse_id}}"
                  onClick="expandBills({{bill_dict.collapse_id}})"
                >
                  +
                </td>
                <td
                  style="text-decoration: none; display: none; padding-top: 0px; padding-bottom: 0px; font-size: x-small;"
                  colspan="{{9 + imp_bills['inner_headers']|length * 4 + imp_bills['num_outer_cols'] * 5}}"
                  class="collapser_{{bill_dict.collapse_id}}"
                  onClick="collapseBills({{bill_dict.collapse_id}})"
                >
                  -
                </td>
              </tr>
            {% endif %}
            
            <tr
              {% if bill_dict.collapsible %}
                class="collapsible_{{bill_dict.collapse_id}}"
                style="display: none; background-color: silver;"
              {% endif %}
            >
              <td rowspan="{{ rows_high }}">
                <a href="{{ context_path }}/reports/105/output/?supplier_bill_id={{bill.id}}">View</a>
                </td>
                <td rowspan="{{ rows_high }}">
                  <a title="{{ bill.start_date|hh_format }}">{{ bill.start_date|hh_format('date') }}</a>
                </td>
                <td rowspan="{{ rows_high }}">
                  <a title="{{ bill.finish_date|hh_format }}">{{ bill.finish_date|hh_format('date') }}</a>
                </td>
                <td rowspan="{{ rows_high }}">
                  <a href="{{ context_path }}/reports/91/output/?supplier_batch_id={{bill.batch.id}}">{{ bill.batch.reference }}</a>
                </td>
                <td rowspan="{{ rows_high }}">{{ bill.reference }}</td>
                <td rowspan="{{ rows_high }}">{{ bill.kwh }}</td>
                <td rowspan="{{ rows_high }}">{{ bill.net }}</td>
                <td rowspan="{{ rows_high }}">{{ bill.vat }}</td>
                <td rowspan="{{ rows_high }}">
                  <a href="{{ context_path }}/reports/201/output/?bill_type_id={{bill.bill_type.id}}" title="{{bill.bill_type.description}}">{{bill.bill_type.code}}</a>
              </td>
              {% for read_row in read_rows %}
                {% if not loop.first %}
                  <tr
                    {% if bill_dict.collapsible %}
                      class="collapsible_{{bill_dict.collapse_id}}" 
                      style="display: none; background-color: silver;"
                    {% endif %}
                  >
                {% endif %}
                {% for read in read_row['inner_reads'] %}
                  <td style="border-right: none;">
                    {% if read %}
                      <a title="{{ read.previous_date|hh_format }} {{ read.msn }}">{{ read.previous_value }}</a>
                    {% endif %}
                  </td>
                  <td style="border-left: none; text-align: right;">
                    {% if read %}
                      {{ read.previous_type.code }}
                    {% endif %}
                  </td>
                  <td style="border-right: none;">
                    {% if read %}
                      <a title="{{ read.present_date|hh_format }} {{ read.msn }}">{{ read.present_value }}</a>
                    {% endif %}
                  </td>
                  <td style="border-left: none; text-align: right;">
                    {% if read %}
                      {{ read.present_type.code }}
                    {% endif %}
                  </td>
                {% endfor %}
                {% for read in read_row['outer_reads'] %}
                  <td>
                    {% if read %}
                      {% if read.tpr %}
                        <a href="{{ context_path }}/reports/97/output/?tpr_id={{ read.tpr.id }}">{{ read.tpr.code }}</a>
                      {% else %}
                        MD
                      {% endif %}
                    {% endif %}
                  </td>
                  <td style="border-right: none;">
                    {% if read %}
                      <a title="{{read.previous_date|hh_format}} {{read.msn}}">{{read.previous_value}}</a>
                    {% endif %}
                  </td>
                  <td style="border-left: none; text-align: right;">
                    {% if read %}
                      {{read.previous_type.code}}
                    {% endif %}
                  </td>
                  <td style="border-right: none;">
                    {% if read %}
                      <a title="{{read.present_date|hh_format}} {{read.msn}}">{{read.present_value}}</a>
                    {% endif %}
                  </td>
                  <td style="border-left: none; text-align: right;">
                    {% if read %}
                      {{read.present_type.code}}
                    {% endif %}
                  </td>
                  {% if not loop.first %}
                    </tr>
                  {% endif %}
                {% endfor %}
              </tr>
            {% endfor %}
          {% endfor %}
        </tbody>
      </table>
      <br />

      <table>
        {% set exp_bills = era_bundle['exp_bills'] %}
        <caption>Export Supplier Bills</caption>
        <thead>
          <tr>
            <th rowspan="2">View</th>
            <th rowspan="2">From</th>
            <th rowspan="2">To</th>
            <th rowspan="2">Batch</th>
            <th rowspan="2">Reference</th>
            <th rowspan="2">kWh</th>
            <th rowspan="2">Net</th>
            <th rowspan="2">VAT</th>
            <th rowspan="2">Type</th>
            {% for tpr in exp_bills['inner_headers'] %}
              <th colspan="4">
                {% if tpr == None %}
                  MD
                {% else %}
                  <a href="{{ context_path }}/reports/97/output/?tpr_id={{ tpr.id }}">{{ tpr.code }}</a>
                {% endif %}
              </th>
            {% endfor %}
            {% for i in range(exp_bills['num_outer_cols']) %}
              <th colspan="5">
                {{ loop.index }}
              </th>
            {% endfor %}
          </tr>

          <tr>
            {% for tpr in exp_bills['inner_headers'] %}
              <th colspan="2">Previous</th>
              <th colspan="2">Present</th>
            {% endfor %}
            {% for i in range(exp_bills['num_outer_cols']) %}
              <th>TPR</th>
              <th colspan="2">Previous</th>
              <th colspan="2">Present</th>
            {% endfor %}
          </tr>
        </thead>
        <tbody>
          {% for bill_dict in exp_bills['bill_dicts'] %}
            {% set read_rows = bill_dict['read_rows'] %}
            {% set bill = bill_dict['bill'] %}
            {% set rows_high = bill_dict['rows_high'] %}
            <tr>
              <td rowspan="{{ rows_high }}">
                <a href="{{context_path}}/reports/105/output/?supplier_bill_id={{bill.id}}">View</a>
              </td>
              <td rowspan="{{ rows_high }}">
                <a title="{{ bill.start_date|hh_format }}">{{ bill.start_date|hh_format('date') }}</a>
              </td>
              <td rowspan="{{ rows_high }}">
                <a title="{{ bill.finish_date|hh_format }}">{{ bill.finish_date|hh_format('date') }}</a>
              </td>
              <td rowspan="{{ rows_high }}">
                <a href="{{ context_path }}/reports/91/output/?supplier_batch_id={{bill.batch.id}}">{{bill.batch.reference}}</a>
              </td>
              <td rowspan="{{ rows_high }}">{{ bill.reference }}</td>
              <td rowspan="{{ rows_high }}">{{ bill.kwh }}</td>
              <td rowspan="{{ rows_high }}">{{ bill.net }}</td>
              <td rowspan="{{ rows_high }}">{{ bill.vat }}</td>
              <td rowspan="{{ rows_high }}">
                <a href="{{ context_path }}/reports/201/output/?bill_type_id={{bill.bill_type.id}}" title="{{bill.bill_type.description}}">{{bill.bill_type.code}}</a>
              </td>

              {% for read_row in read_rows %} 
                {% for read in read_row['inner_reads'] %}
                  <td style="border-right: none;">
                    {% if read %}
                      <a title="{{ read.previous_date|hh_format }} {{ read.msn }}">{{ read.previous_value }}</a>
                    {% endif %}
                  </td>
                  <td style="border-left: none;">
                    {% if read %}
                      {{ read.previousType.code }}
                    {% endif %}
                  </td>
                  <td style="border-right: none;">
                    {% if read %}
                      <a title="{{ read.presentDate|hh_format }} {{ read.msn }}">{{ read.presentValue }}</a>
                    {% endif %}
                  </td>
                  <td style="border-left: none;">
                    {% if read %}
                      {{ read.presentType.code }}
                    {% endif %}
                  </td>
                {% endfor %}
                {% if loop.first %}
                  {% for read in read_row['outer_reads'] %}
                    <td>
                      {% if read.tpr %}
                        <a href="{{ context_path }}/reports/97/output/?tpr_id={{ read.tpr.id }}">{{ read.tpr.code }}</a>
                      {% else %}
                        MD
                      {% endif %}
                    </td>
                    <td style="border-right: none;">
                      <a title="{{ read.previous_date|hh_format }} {{ read.msn }}">{{ read.previous_value }}</a>
                    </td>
                    <td style="border-left: none;">
                      {{ read.previous_type.code }}
                    </td>
                    <td style="border-right: none;">
                      <a title="{{ read.present_date|hh_format }} {{ read.msn }}">{{ read.present_value }}</a>
                    </td>
                    <td style="border-left: none;">
                      {{ read.present_type.code }}
                    </td>
                  {% endfor %}
                {% endif %}
              {% endfor %}
            </tr>
          {% endfor %}
        </tbody>
      </table>
      <br />

      <table>
        <caption>DC Bills</caption>
        <thead>
          <tr>
            <th>Edit</th>
            <th>Batch</th>
            <th>Reference</th>
            <th>Account</th>
            <th>Issue Date</th>
            <th>From</th>
            <th>To</th>
            <th>kWh</th>
            <th>Net</th>
            <th>VAT</th>
            <th>Gross</th>
            <th>Type</th>
          </tr>
        </thead>
        <tbody>
          {% for bill_dict in era_bundle['hhdc_bills']['bill_dicts'] %}
            {% set bill = bill_dict['bill'] %}
            <tr>
              <td>
                [<a href="{{ context_path }}/hhdc-contracts/{{ era.hhdc_contract.id }}/batches/{{ bill.batch.id }}/bills/{{ bill.id }}/">edit</a>]
              </td>
              <td>
                <a href="{{ context_path }}/reports/203/output/?hhdc_batch_id={{bill.batch.id}}">{{bill.batch.reference}}</a>
              </td>
              <td>{{ bill.reference }}</td>
              <td>{{ bill.account }}</td>
              <td>{{ bill.issue_date|hh_format }}</td>
              <td>{{ bill.start_date|hh_format }}</td>
              <td>{{ bill.finish_date|hh_format }}</td>
              <td>{{ bill.kwh }}</td>
              <td>{{ bill.net }}</td>
              <td>{{ bill.vat }}</td>
              <td>{{ bill.gross }}</td>
              <td>
                <a href="{{ context_path }}/reports/201/output/?bill_type_id={{bill.bill_type.id}}" title="{{bill.bill_type.description}}">{{bill.bill_type.code}}</a>
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
      <br />
      <table>
        <caption>MOP Bills</caption>
        <thead>
          <tr>
            <th>Edit</th>
            <th>Batch</th>
            <th>Reference</th>
            <th>Account</th>
                    <th>Issue Date</th>
                    <th>From</th>
                    <th>To</th>
                    <th>kWh</th>
                    <th>Net</th>
                    <th>VAT</th>
                    <th>Gross</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
          {% for bill_dict in era_bundle['mop_bills']['bill_dicts'] %}
            {% set bill = bill_dict['bill'] %}
                    <tr>
                        <td>
                          [<a href="{{ context_path }}/mop-contracts/{{ era.mop_contract.id }}/batches/{{ bill.batch.id }}/bills/{{ bill.id }}">edit</a>]
                        </td>
                        <td>
                            <a href="{{ context_path }}/reports/193/output/?mop_batch_id={{bill.batch.id}}">{{bill.batch.reference}}</a>
                        </td>
                        <td>{{ bill.reference }}</td>
                        <td>{{ bill.account }}</td>
                        <td>{{ bill.issue_date|hh_format }}</td>
                        <td>{{ bill.start_date|hh_format }}</td>
                        <td>{{ bill.finish_date|hh_format }}</td>
                        <td>{{ bill.kwh }}</td>
                        <td>{{ bill.net }}</td>
                        <td>{{ bill.vat }}</td>
                        <td>{{ bill.gross }}</td>
                        <td>
                            <a href="{{context_path}}/reports/201/output/?bill_type_id={{bill.bill_type.id}}" title="{{bill.bill_type.description}}">{{bill.bill_type.code}}</a>
                        </td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
        <br>
    {% endfor %}

    <br />
    <ul>
        <li>kWh, kVA, MD etc. by month:
            <a href="{{context_path}}/reports/15/output/?supply_id={{supply.id}}&amp;is_import=true&amp;year={{last_month_start.year}}&amp;years=1">Import</a>
            <a href="{{context_path}}/reports/15/output/?supply_id={{supply.id}}&amp;is_import=false&amp;year={{last_month_start.year}}&amp;years=1">Export</a>
        </li>
        <li>
            <a href="{{context_path}}/reports/17/output/?supply_id={{ supply.id }}&amp;months=1&amp;finish_year={{ now.year }}&amp;finish_month={{ now.month }}">Raw HH data</a>
        </li>
        <li>
            <a href="{{context_path}}/reports/101/output/?supply_id={{supply.id}}&amp;start_year={{last_month_start.year}}&amp;start_month={{last_month_start.month}}&amp;start_day={{last_month_start.day}}&amp;start_hour={{last_month_start.hour}}&amp;start_minute={{last_month_start.minute}}&amp;finish_year={{last_month_finish.year}}&amp;finish_month={{last_month_finish.month}}&amp;finish_day={{last_month_finish.day}}&amp;finish_hour={{last_month_finish.hour}}&amp;finish_minute={{last_month_finish.minute}}">Supplier Virtual Bill</a>
        </li>
    </ul>

    <h3>CSV Downloads</h3>

    <form action="{{ context_path }}/reports/291/output/">
      <fieldset>
        <input type="hidden" name="supply_id" value="{{supply.id}}">
        <legend>Virtual Bills</legend>
        From {{input_date('start', last_month_start)}} to
        {{input_date('finish', last_month_finish)}}
        <input type="submit" value="Download">
      </fieldset>
    </form>
    <br />
    <form action="{{ context_path }}/reports/241/output/">
      <fieldset>
        <input type="hidden" name="supply_id" value="{{supply.id}}">
        <legend>Daily Supplier Virtual Bills</legend>
        <select name="is_import">
          <option value="true">Import</option>
          <option value="false">Export</option>
        </select>
        from {{input_date('start', last_month_start, 'day')}}
        to {{input_date('finish', last_month_finish, 'day')}} 
        <input type="submit" value="Download">
      </fieldset>
    </form>
    <br />
    <form action="{{context_path}}/reports/387/output/">
      <fieldset>
        <input type="hidden" name="supply_id" value="{{supply.id}}">
        <legend>Virtual Bills By Half-Hour</legend>
        From {{input_date('start', last_month_start)}} to
        {{input_date('finish', last_month_finish)}}
        <input type="submit" value="Download">
      </fieldset>
    </form>
    <br />

    <form action="{{ context_path }}/reports/169/output/">
      <fieldset>
        <legend>HH Data: 48 Column Format</legend>
        <input type="hidden" name="supply_id" value="{{supply.id}}">
        <select name="imp_related">
          <option value="true">Import</option>
          <option value="false">Export</option>
        </select>
        <select name="channel_type">
          <option value="ACTIVE">ACTIVE</option>
          <option value="REACTIVE_IMP">REACTIVE_IMP</option>
          <option value="REACTIVE_EXP">REACTIVE_EXP</option>
        </select>
        from {{ input_date('start', last_month_start) }} to
        {{ input_date('finish', last_month_finish) }}
        <input type="submit" value="Download">
      </fieldset>
    </form>
    <br />
    <form action="{{context_path}}/reports/187/output/">
      <fieldset>
        <legend>HH Data: HH Per Row</legend>
        <input type="hidden" name="supply_id" value="{{supply.id}}">
        From {{ input_date('start', last_month_start) }} to
        {{ input_date('finish', last_month_finish) }}
        <input type="submit" value="Download">
      </fieldset>
    </form>
    <br />
    <form action="{{ context_path }}/reports/41/output/?supply-id">
      <fieldset>
        <legend>TRIAD</legend>
        <input type="hidden" name="supply_id" value="{{ supply.id }}">
        <br>
        For financial year ending March
        <input name="year" value="{{ triad_year }}" size="4" maxlength="4">
        <input type="submit" value="Download" />
      </fieldset>
    </form>
    <br />
    <form action="{{ context_path }}/reports/149/output/">
        <fieldset>
            <input type="hidden" name="supply_id" value="{{supply.id}}">
            <legend>Duration</legend>
            <p>
            From {{ input_date('start', last_month_start) }}
            to {{ input_date('finish', last_month_finish) }}
            <input type="submit" value="Download">
            </p>
        </fieldset>
    </form>
    <br />
    <form action="{{ context_path }}/reports/177/output/">
        <fieldset>
            <input type="hidden" name="supply_id" value="{{ supply.id }}" />
            <legend>Monthly Duration</legend>
            <br />
            For <input name="months" maxlength="2" size="2" value="1">
            month(s) finishing at the end of
            {{ input_date('end', last_month_finish, 'month') }}
            <input type="submit" value="Download">
        </fieldset>
    </form>
    <br />
    <form action="{{ context_path }}/reports/33/output/">
        <input type="hidden" name="supply_id" value="{{ supply.id }}">
        <fieldset>
            <legend>Snapshot</legend>
            <br />
            For {{ input_date(None, last_month_finish) }}
            <input type="submit" value="Download">
        </fieldset>
    </form>
    <br>
    <form action="{{ context_path }}/reports/219/output/">
      <input type="hidden" name="supply-id" value="{{ supply.id }}" />
      <fieldset>
        <legend>Register Reads</legend>
        <br />
        <br />
        For <input name="months" maxlength="2" size="2" value="1">
        month(s) finishing at the end of
        {{ input_date('end', last_month_finish, 'month') }}
        <input type="submit" value="Download" />
      </fieldset>
    </form>
    <br />
    <form action="{{ context_path }}/reports/207/output/">
      <input type="hidden" name="supply-id" value="{{ supply.id }}" />
      <fieldset>
        <legend>CRC</legend>
        <br />
        For financial year starting April
        <input name="year" value="{{ last_month_start.year }}" size="4" maxlength="4">
        <input type="submit" value="Download" />
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[9]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Site hh graph container]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Site', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

def make_fields(site, e=None):
    messages = None if e is None else [str(e)]
    finish_date = datetime.datetime(year, month, 1, tzinfo=pytz.utc)
        
    return {'site': site, 'finish_date': finish_date, 'messages': messages}


sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        site_id = inv.getLong("site_id")
        site = Site.get_by_id(sess, site_id)

        year = inv.getInteger("finish_year")
        month = inv.getInteger("finish_month")
        months = inv.getInteger("months")
        
        render(inv, template, make_fields(site))
    else:
        raise UserException("POST not allowed.")

except UserException, e:
    render(inv, template, make_fields(site, e))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Sites &gt; {{site.name}} &gt; HH graph of site use
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/3/output/">Sites</a> &gt;
      <a href="{{context_path}}/reports/5/output/?site_id={{site.id}}">{{site.name}}</a>
      &gt; HH graph of site use
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <p>
      <img src="{{context_path}}/reports/21/output/?site_id={{site.id}}&amp;finish_year={{request.getParameter('finish_year')}}&amp;finish_month={{request.getParameter('finish_month')}}&amp;months={{request.getParameter('months')}}">
    </p>
    
    <form action=".">
      <fieldset>
        <legend>Show graph</legend>
        <input type="hidden" name="site_id" value="{{site.id}}">
        For {{input_text('months', request.getParameter('months'), 2, 2)}}
        months finishing in {{input_date('finish', finish_date, 'month')}}
        <input type="submit" value="Show">
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[11]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Site Generation Graph Container]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import Site
from java.util import Calendar
from java.lang import System

site_id = inv.getLong("site_id")
if not inv.isValid():
    raise UserException()

if inv.hasParameter('finish_year'):
    year = inv.getInteger("finish_year")
    month = inv.getInteger("finish_month")
    months = inv.getInteger("months")
    if not inv.isValid():
        raise UserException()

    site = Site.getSite(site_id)
    source.appendChild(site.toXml(doc))

    source.appendChild(MonadDate.getMonthsXml(doc))
else:
    cal = MonadDate.getCalendar()
    cal.setTimeInMillis(System.currentTimeMillis())
    inv.sendTemporaryRedirect('/reports/11/output/?site_id=' + str(site_id) + '&months=1&finish_month=' + str(cal.get(Calendar.MONTH) + 1) + '&finish_year=' + str(cal.get(Calendar.YEAR)))]]></value>
		<value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml" encoding="US-ASCII"
    doctype-public="-//W3C//DTD XHTML 1.1//EN"
    doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
    indent="yes" />
  <xsl:template match="/">
    <html>
      <head>
        <link rel="stylesheet" type="text/css"
            href="{/source/request/@context-path}/reports/19/output/" />
        <title>Chellow &gt; Sites &gt;
            <xsl:value-of select="/source/site/@name" />
        </title>
      </head>
      <body>
        <p>
          <a href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
          &gt;
          <a href="{/source/request/@context-path}/reports/3/output/">
            <xsl:value-of select="'Sites'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/5/output/?site_id={/source/site/@id}">
                        <xsl:value-of select="/source/site/@name" />
                    </a>
                    &gt; HH graph of era
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>

                <p>
                    <img
                        src="{/source/request/@context-path}/reports/23/output/?site_id={/source/site/@id}&amp;finish_year={/source/request/parameter[@name='finish_year']/value}&amp;finish_month={/source/request/parameter[@name='finish_month']/value}&amp;months={/source/request/parameter[@name='months']/value}" />
                </p>
                <form action=".">
                    <fieldset>
                        <legend>Show graph</legend>
                        <input type="hidden" name="site_id"
                            value="{/source/request/parameter[@name='site_id']/value}" />


                        <xsl:value-of select="'For '" />
                        <input name="months" maxlength="2" size="2" value="{/source/request/parameter[@name='months']/value}"/>
                        <xsl:value-of select="' months finishing at the end of '" />
                        <input size="4" length="4"
                            name="finish_year" value="{/source/request/parameter[@name='finish_year']/value}" />
                        <xsl:value-of select="' - '" />
                        <select name="finish_month">
                            <xsl:for-each select="/source/months/month">
                                <option>
                                    <xsl:if
                                        test="/source/request/parameter[@name='finish_month']/value = @number">
                                        <xsl:attribute
                                            name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Show" />

                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[13]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Site Monthly figures]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from sqlalchemy import or_
import pytz
import datetime
from dateutil.relativedelta import relativedelta
from java.lang import System

Monad.getUtils()['imprt'](globals(), {
        'db': ['HhDatum', 'Channel', 'Snag', 'Era', 'Site', 'Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException', 'HH'],
        'templater': ['render']})


sess = None
try:
    sess = session()

    site_id = inv.getLong("site_id")
    finish_year = inv.getInteger("finish_year")
    finish_month = inv.getInteger("finish_month")
    start_date = datetime.datetime(finish_year, finish_month, 1, tzinfo=pytz.utc)

    start_date -= relativedelta(months=11)

    site = Site.get_by_id(sess, site_id)

    typs = ('imp_net', 'exp_net', 'used', 'displaced', 'imp_gen', 'exp_gen')

    months = []
    month_start = start_date
    for i in range(12):
        month_finish = month_start + relativedelta(months=1) - HH
        month = dict((typ, {'md': 0, 'md_date': None, 'kwh': 0}) for typ in typs)
        month['start_date'] = month_start
        months.append(month)

        for group in site.groups(sess, month_start, month_finish, True):
            for hh in group.hh_data(sess):
                for tp in typs:
                    if hh[tp] * 2 > month[tp]['md']:
                        month[tp]['md'] = hh[tp] * 2
                        month[tp]['md_date'] = hh['start_date']
                    month[tp]['kwh'] += hh[tp]

        has_snags = sess.query(Snag).filter(Snag.site==site, Snag.start_date <= month_finish, or_(Snag.finish_date is None, Snag.finish_date > month_start)).count() > 0
        month['has_site_snags'] = has_snags

        month_start += relativedelta(months=1)


    totals = dict((typ, {'md': 0, 'md_date': None, 'kwh': 0}) for typ in typs)

    for month in months:
        for typ in typs:
            if month[typ]['md'] > totals[typ]['md']:
                totals[typ]['md'] = month[typ]['md']
                totals[typ]['md_date'] = month[typ]['md_date']
            totals[typ]['kwh'] += month[typ]['kwh']

    months.append(totals)

    render(inv, template, {'site': site, 'months': months})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Sites &gt; {{site.code}} {{site.name}} &gt; Monthly figures
    </title>
    <style>
      colgroup.gray {
        background: silver;
      }

      tr.error {
        color: red;
      }
    </style>
  </head>
  <body>
  
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/3/output/">Sites</a> &gt;
      <a href="{{context_path}}/reports/5/output/?site_id={{site.id}}">{{site.code}} {{site.name}}</a>
      &gt; Monthly figures
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <form action=".">
      <fieldset>
        <legend>Show table</legend>
        <input type="hidden" name="site_id" value="{{site.id}}">
        For 12 months finishing at the end of {{input_date('finish', resolution='month')}}
        <input type="submit" value="Show">
      </fieldset>
    </form>

    <table>
      <caption>Months</caption>
      <colgroup>
      <colgroup class="gray" span="3">
      <colgroup span="3">
      <colgroup class="gray" span="3">
      <colgroup span="3">
      <colgroup class="gray" span="3">
      <colgroup span="3">
      <tfoot>
        <tr>
          <th>For all months</th>
          <th>{{months[-1].imp_net.md|round(1)}}</th>
          <th>{{months[-1].imp_net.md_date|hh_format}}</th>
          <th>{{months[-1].imp_net.kwh|round(1)}}</th>
          <th>{{months[-1].used.md|round(1)}}</th>
          <th>{{months[-1].used.md_date|hh_format}}</th>
          <th>{{months[-1].used.kwh|round(1)}}</th>
          <th>{{months[-1].displaced.md|round(1)}}</th>
          <th>{{months[-1].displaced.md_date|hh_format}}</th>
          <th>{{months[-1].displaced.kwh|round(1)}}</th>
          <th>{{months[-1].imp_gen.md|round(1)}}</th>
          <th>{{months[-1].imp_gen.md_date|hh_format}}</th>
          <th>{{months[-1].imp_gen.kwh|round(1)}}</th>
          <th>{{months[-1].exp_net.md|round(1)}}</th>
          <th>{{months[-1].exp_net.md_date|hh_format}}</th>
          <th>{{months[-1].exp_net.kwh|round(1)}}</th>
          <th>{{months[-1].exp_gen.md|round(1)}}</th>
          <th>{{months[-1].exp_gen.md_date|hh_format}}</th>
          <th>{{months[-1].exp_gen.kwh|round(1)}}</th>
        </tr>
      </tfoot>
      <thead>
        <tr>
          <th rowspan="2">Month</th>
          <th colspan="3">Imported</th>
          <th colspan="3">Used</th>
          <th colspan="3">Displaced</th>
          <th colspan="3">Generated</th>
          <th colspan="3">Exported</th>
          <th colspan="3">Parasitic</th>
        </tr>
        <tr>
          <th>MD / kW</th>
          <th>Date of MD</th>
          <th>kWh</th>
          <th>MD / kW</th>
          <th>Date of MD</th>
          <th>kWh</th>
          <th>MD / kW</th>
          <th>Date of MD</th>
          <th>kWh</th>
          <th>MD / kW</th>
          <th>Date of MD</th>
          <th>kWh</th>
          <th>MD / kW</th>
          <th>Date of MD</th>
          <th>kWh</th>
          <th>MD / kW</th>
          <th>Date of MD</th>
          <th>kWh</th>
          <th>Data quality</th>
        </tr>
      </thead>
      <tbody>
        {% for month in months[:-1] %}
          <tr
            {%- if month.has_site_snags -%}
              class="error"
            {%- endif -%}
          >
            <td>{{month.start_date|hh_format('date')}}</td>
            <td>{{month.imp_net.md|round(1)}}</td>
            <td>
              {% if month.imp_net.md_date %}
                {{month.imp_net.md_date|hh_format}}
              {% endif %}
            </td>
            <td>{{month.imp_net.kwh|round(1)}}</td>

            <td>{{month.used.md|round(1)}}</td>
            <td>
              {% if month.used.md_date %}
                {{month.used.md_date|hh_format}}
              {% endif %}
            </td>
            <td>{{month.used.kwh|round(1)}}</td>

            <td>{{month.displaced.md|round(1)}}</td>
            <td>
              {% if month.displaced.md_date %}
                {{month.displaced.md_date|hh_format}}
              {% endif %}
            </td>
            <td>{{month.displaced.kwh|round(1)}}</td>

            <td>{{month.imp_gen.md|round(1)}}</td>
            <td>
              {% if month.imp_gen.md_date %}
                {{month.imp_gen.md_date|hh_format}}
              {% endif %}
            </td>
            <td>{{month.imp_gen.kwh|round(1)}}</td>

            <td>{{month.exp_net.md|round(1)}}</td>
            <td>
              {% if month.exp_net.md_date %}
                {{month.exp_net.md_date|hh_format}}
              {% endif %}
            </td>
            <td>{{month.exp_net.kwh|round(1)}}</td>

            <td>{{month.exp_gen.md|round(1)}}</td>
            <td>
              {% if month.exp_gen.md_date %}
                {{month.exp_gen.md_date|hh_format}}
              {% endif %}
            </td>
            <td>{{month.exp_gen.kwh|round(1)}}</td>

            <td>
              {% if month.has_site_snags %}
                See <a href="{{context_path}}/reports/11/output/?site_id={{site.id}}&amp;months=1&amp;finish_year={{month.start_date.year}}&amp;finish_month={{month.start_date.month}}">generation graph</a> for errors.
              {% endif %}
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[15]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supply MPAN months]]></value>
		<value><![CDATA[from java.lang import System
from net.sf.chellow.monad import Monad
import datetime
import pytz
from sqlalchemy import func
from dateutil.relativedelta import relativedelta

Monad.getUtils()['impt'](globals(), 'templater', 'db', 'utils')

HH = utils.HH
Supply, HhDatum, Channel, Era = db.Supply, db.HhDatum, db.Channel, db.Era

sess = None
try:
    sess = db.session()
    supply_id = inv.getLong("supply_id")
    supply = Supply.get_by_id(sess, supply_id)

    is_import = inv.getBoolean("is_import")

    year = inv.getInteger('year')
    years = inv.getInteger('years')

    month_start = datetime.datetime(year - years + 1, 1, 1, tzinfo=pytz.utc)
    months = []
    for i in range(12 * years):
        next_month_start = month_start + relativedelta(months=1)
        month_finish = next_month_start - HH
    
        month_data = {}
        months.append(month_data)

        era = supply.find_era_at(sess, month_finish)
        if era != None:
            mpan_core = era.imp_mpan_core if is_import else era.exp_mpan_core
            if mpan_core != None:
                month_data['mpan_core'] = mpan_core
                month_data['sc'] = era.imp_sc if is_import else era.exp_sc

        md_kvah = 0
        for kwh, kvarh, hh_date in sess.execute("select cast(max(hh_ac.value) as double precision), cast(max(hh_re.value) as double precision), hh_ac.start_date from hh_datum as hh_ac join channel as channel_ac on (hh_ac.channel_id = channel_ac.id) join era as era_ac on (channel_ac.era_id = era_ac.id) join hh_datum as hh_re on (hh_ac.start_date = hh_re.start_date) join channel as channel_re on (hh_re.channel_id = channel_re.id) join era as era_re on (channel_re.era_id = era_re.id) where era_ac.supply_id = :supply_id and era_re.supply_id = :supply_id and channel_ac.imp_related = :is_import and channel_re.imp_related = :is_import and channel_ac.channel_type = 'ACTIVE' and channel_re.channel_type in ('REACTIVE_IMP', 'REACTIVE_EXP') and hh_ac.start_date >= :month_start and hh_ac.start_date <= :month_finish and hh_re.start_date >= :month_start and hh_re.start_date <= :month_finish group by hh_ac.start_date", params={'month_start': month_start, 'month_finish': month_finish, 'is_import': is_import, 'supply_id': supply.id}):
            kvah = (kwh ** 2 + kvarh ** 2) ** 0.5
            if kvah > md_kvah:
                md_kvah = kvah
                month_data['md_kva'] = 2 * md_kvah
                month_data['md_kvar'] = kvarh * 2
                month_data['md_kw'] = kwh * 2
                month_data['md_pf'] = float(kwh) / kvah
                month_data['md_date'] = hh_date

        total_kwh = sess.query(func.sum(HhDatum.value)).join(Channel).join(Era).filter(Era.supply_id==supply.id, Channel.channel_type=='ACTIVE', Channel.imp_related==is_import, HhDatum.start_date>=month_start, HhDatum.start_date<=month_finish).one()[0]

        if total_kwh != None:
            month_data['total_kwh'] = float(total_kwh)

        month_data['start_date'] = month_start
        month_start = next_month_start

    templater.render(inv, template, {'supply': supply, 'months': months, 'is_import': is_import, 'now': datetime.datetime.now(pytz.utc)})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; Supplies &gt; {{supply.name}}</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/99/output/">Supplies</a> &gt;
      <a href="{{context_path}}/reports/7/output/?supply_id={{supply.id}}">{{supply.id}}</a> &gt;
      {% if is_import %}
        Import
      {% else %}
        Export
      {% endif %}
      data by month
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <form action=".">
      <fieldset>
        <input type="hidden" name="is_import" value="{{request.getParameter('is_import')}}">
        <input type="hidden" name="supply_id" value="{{supply.id}}">
        <legend>View Supply Months</legend>
        <br>
        For {{input_text('years', '1', 2, 2)}}
        years, ending 31st December
        {{input_text('year', now.year, 4, 4)}}
        <input type="submit" value="View"><br><br>
      </fieldset>
    </form>
    
    <table>
      <caption>Months</caption>
      <thead>
        <tr>
          <th rowspan="2">Month Starting (UTC)</th>
          <th rowspan="2">MPAN Core</th>
          <th colspan="5">At MD kVA</th>
          <th rowspan="2">Agreed Supply Capacity (kVA)</th>
          <th rowspan="2">kWh</th>
        </tr>
        <tr>
          <th>Date (UTC)</th>
          <th>kW</th>
          <th>kVAr</th>
          <th>Power Factor</th>
          <th>kVA</th>
        </tr>
      </thead>
      <tbody>
        {% for month in months %}
          <tr>
            <td>{{month.start_date|hh_format}}</td>
            <td>{{month.mpan_core}}</td>

            {% if month.md_date %}
              <td>{{month.md_date|hh_format}}</td>
              <td>{{month.md_kw|round(1)}}</td>
              <td>{{month.md_kvar|round(1)}}</td>
              <td>{{month.md_pf|round(2)}}</td>
              <td>{{month.md_kva|round(1)}}</td>
            {% else %}
              <td></td>
              <td></td>
              <td></td>
              <td></td>
              <td></td>
            {% endif %}

            <td>{{month.sc}}</td>
            <td>
              {% if month.total_kwh %}
                {{month.total_kwh|round|int}}
              {% endif %}
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[17]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supply Raw HH Data]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from datetime import datetime
import pytz
from dateutil.relativedelta import relativedelta
from java.lang import System

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Batch', 'Participant', 'set_read_write', 'session', 'Bill', 'Report', 'Supply', 'HhDatum', 'Era'], 
        'utils': ['UserException', 'form_date', 'HH'],
        'templater': ['render']})


sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        supply_id = inv.getLong('supply_id')
        months = inv.getInteger('months')
        finish_year = inv.getInteger("finish_year")
        finish_month = inv.getInteger("finish_month")
        supply = Supply.get_by_id(sess, supply_id)

        finish_date = datetime(finish_year, finish_month, 1, tzinfo=pytz.utc) + relativedelta(months=1) - HH
        start_date = datetime(finish_year, finish_month, 1, tzinfo=pytz.utc) - relativedelta(months=months-1)

        era = sess.query(Era).from_statement("select * from era where supply_id = :supply_id and start_date <= :finish_date and (finish_date is null or finish_date >= :start_date) order by start_date desc").params(supply_id=supply.id, start_date=start_date, finish_date=finish_date).first()

        keys = {True: {'ACTIVE': 'import_active', 'REACTIVE_IMP': 'import_reactive_imp', 'REACTIVE_EXP': 'import_reactive_exp'},
            False: {'ACTIVE': 'export_active', 'REACTIVE_IMP': 'export_reactive_imp', 'REACTIVE_EXP': 'export_reactive_exp'}}

        hh_data = sess.query(HhDatum).from_statement("select hh_datum.* from hh_datum, channel, era where hh_datum.channel_id = channel.id and channel.era_id = era.id and era.supply_id = :supply_id and hh_datum.start_date >= :start_date and hh_datum.start_date <= :finish_date order by hh_datum.start_date").params(supply_id=supply.id, start_date=start_date, finish_date=finish_date).__iter__()
        hh_lines = []

        hh_date = start_date
        try:
            hh_datum = hh_data.next()
        except StopIteration:
            hh_datum = None
        while hh_date <= finish_date:
            hh_line = {'timestamp': hh_date}
            hh_lines.append(hh_line)
            while hh_datum is not None and hh_datum.start_date == hh_date:
                channel = hh_datum.channel
                hh_line[keys[channel.imp_related][channel.channel_type]] = hh_datum
                try:
                    hh_datum = hh_data.next()
                except StopIteration:
                    hh_datum = None

            hh_date += HH
        render(inv, template, {'supply': supply, 'era': era, 'hh_lines': hh_lines})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/" />
    <title>Chellow &gt; Supplies &gt; {{supply.id}} &gt; Hh Data</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/99/output/">Supplies</a> &gt;
      <a href="{{context_path}}/reports/7/output/?supply_id={{supply.id}}">{{supply.name}}</a>
      &gt; HH Data
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <caption>Supply</caption>
      <tr>
        <th>Name</th>
        <td>{{supply.name}}</td>
      </tr>
      <tr>
        <th>Import MPAN core</th>
        <td>{{era.imp_mpan_core}}</td>
      </tr>
      <tr>
        <th>Export MPAN core</th>
        <td>{{era.exp_mpan_core}}</td>
      </tr>
      <tr>
        <th>Source Code</th>
        <td>{{supply.source.code}}</td>
      </tr>
    </table>
    <br/>
    <form action=".">
      <fieldset>
        <legend>Show HH Data</legend>
          <input type="hidden" name="supply_id" value="{{supply.id}}">
          <br/>
          For {{ input_text('months', '1', 2, 2) }} month(s)
          finishing at the end of
          {{input_date('finish', None, 'month')}}
          <input type="submit" value="Show">
        </fieldset>
      </form>
      <br>
      <table>
        <caption>Hh Data</caption>
        <thead>
          <tr>
            <th rowspan="3">HH Starting</th>
            <th colspan="9">Import</th>
            <th colspan="9">Export</th>
          </tr>
          <tr>
            <th colspan="3">ACTIVE</th>
            <th colspan="3">REACTIVE_IMP</th>
            <th colspan="3">REACTIVE_EXP</th>
            <th colspan="3">ACTIVE</th>
            <th colspan="3">REACTIVE_IMP</th>
            <th colspan="3">REACTIVE_EXP</th>
          </tr>
          <tr>
            <th>Value</th>
            <th>Status</th>
            <th>Last Modified</th>
            <th>Value</th>
            <th>Status</th>
            <th>Last Modified</th>
            <th>Value</th>
            <th>Status</th>
            <th>Last Modified</th>
            <th>Value</th>
            <th>Status</th>
            <th>Last Modified</th>
            <th>Value</th>
            <th>Status</th>
            <th>Last Modified</th>
            <th>Value</th>
            <th>Status</th>
            <th>Last Modified</th>
          </tr>
        </thead>
      <tbody>
        {% for hh_line in hh_lines %}
          <tr>
            <td>
              {{hh_line.timestamp|hh_format}}
            </td>
            {% if hh_line.import_active %}
              <td>{{hh_line.import_active.value}}</td>
              <td>{{hh_line.import_active.status}}</td>
              <td>{{hh_line.import_active.last_modified|hh_format}}</td>
            {% else %}
              <td></td>
              <td></td>
              <td></td>
            {% endif %}
            {% if hh_line.import_reactive_imp %}
              <td>{{hh_line.import_reactive_imp.value}}</td>
              <td>{{hh_line.import_reactive_imp.status}}</td>
              <td>{{hh_line.import_reactive_imp.last_modified|hh_format}}</td>
            {% else %}
              <td></td>
              <td></td>
              <td></td>
            {% endif %}
            {% if hh_line.import_reactive_exp %}
              <td>{{hh_line.import_reactive_exp.value}}</td>
              <td>{{hh_line.import_reactive_exp.status}}</td>
              <td>{{hh_line.import_reactive_exp.last_modified|hh_format}}</td>
            {% else %}
              <td></td>
              <td></td>
              <td></td>
            {% endif %}
            {% if hh_line.export_active %}
              <td>{{hh_line.export_active.value}}</td>
              <td>{{hh_line.export_active.status}}</td>
              <td>{{hh_line.export_active.last_modified|hh_format}}</td>
            {% else %}
              <td></td>
              <td></td>
              <td></td>
            {% endif %}
            {% if hh_line.export_reactive_imp %}
              <td>{{hh_line.export_reactive_imp.value}}</td>
              <td>{{hh_line.export_reactive_imp.status}}</td>
              <td>{{hh_line.export_reactive_imp.last_modified|hh_format}}</td>
            {% else %}
              <td></td>
              <td></td>
              <td></td>
            {% endif %}
            {% if hh_line.export_reactive_exp %}
              <td>{{hh_line.export_reactive_exp.value}}</td>
              <td>{{hh_line.export_reactive_exp.status}}</td>
              <td>{{hh_line.export_reactive_exp.last_modified|hh_format}}</td>
            {% else %}
              <td></td>
              <td></td>
              <td></td>
            {% endif %}
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[19]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Style Sheet]]></value>
		<value><![CDATA[inv.getResponse().setContentType("text/css")
pw = inv.getResponse().getWriter()
pw.println("@import url(https://fonts.googleapis.com/css?family=Overclock);")
pw.println("table {                                                        ")
pw.println("    border: thin solid gray;                                   ")
pw.println("    border-collapse: collapse;                                 ")
pw.println("}                                                              ")
pw.println("td {                                                           ")
pw.println("    border: thin solid gray;                                   ")
pw.println("    padding-left: 0.2em;                                       ")
pw.println("    padding-right: 0.2em;                                      ")
pw.println("}                                                              ")
pw.println("th {                                                           ")
pw.println("    border: thin solid gray;                                   ")
pw.println("}                                                              ")
pw.println("#title {                                                       ")
pw.println("    font-size: xx-large                                        ")
pw.println("}                                                              ")
pw.println(".logo {                                                        ")
pw.println("    color: green;                                              ")
pw.println("}                                                              ")
pw.println("                                                               ")
pw.println("                                                               ")
pw.println("                                                               ")
pw.println("                                                               ")
pw.println("body {                                                         ")
pw.println("    line-height: 1.2;                                          ")
pw.println("    font-size: 0.9em;                                          ")
pw.println("    font-family: 'Overclock', sans-serif;                      ")
pw.println("    background-color: rgb(255, 236, 139);                      ")
pw.println("}                                                              ")
pw.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[21]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Site HH Graph]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from sqlalchemy import or_, not_
import datetime
from dateutil.relativedelta import relativedelta
from java.util.zip import ZipOutputStream, ZipEntry
from java.io import PrintWriter, OutputStreamWriter
from java.awt.image import BufferedImage
from javax.imageio import ImageIO
from java.awt import Font, Color
import pytz
import math

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')

HH = utils.HH

sess = None
try:
    sess = db.session()
    inv.getResponse().setContentType("image/png")

    
    site_id = inv.getLong("site_id")
    finish_date_year = inv.getInteger("finish_year")
    finish_date_month = inv.getInteger("finish_month")
    months = inv.getInteger("months")

    finish_date = datetime.datetime(finish_date_year, finish_date_month, 1, tzinfo=pytz.utc) + relativedelta(months=1) - HH
    start_date = datetime.datetime(finish_date_year, finish_date_month, 1, tzinfo=pytz.utc) - relativedelta(months=months-1)
    site = db.Site.get_by_id(sess, site_id)

    supplies = sess.query(db.Supply).join(db.Source).join(db.Era).join(db.SiteEra).distinct().filter(db.SiteEra.site_id==site.id, not_(db.Source.code.in_(('sub', 'gen-net')))).all()

    #res = sess.execute("select hh_datum.value as value, hh_datum.start_date as start_date, hh_datum.status as status, channel.imp_related as imp_related, source.code from hh_datum, channel, era, supply, source where hh_datum.channel_id = channel.id and channel.era_id = era.id and era.supply_id = supply.id and supply.source_id = source.id and channel.channel_type = 'ACTIVE' and hh_datum.start_date >= :start_date and hh_datum.start_date <= :finish_date and supply.id in :supply_ids order by hh_datum.start_date", params={'supply_ids': [s.id for s in supplies], 'start_date': start_date, 'finish_date': finish_date})
    res = iter(sess.execute("select cast(hh_datum.value as double precision) as value, hh_datum.start_date as start_date, hh_datum.status as status, channel.imp_related as imp_related, source.code as source_code from hh_datum, channel, era, supply, source where hh_datum.channel_id = channel.id and channel.era_id = era.id and era.supply_id = supply.id and supply.source_id = source.id and channel.channel_type = 'ACTIVE' and hh_datum.start_date >= :start_date and hh_datum.start_date <= :finish_date and supply.id = any(:supply_ids) order by hh_datum.start_date", params={'start_date': start_date, 'finish_date': finish_date, 'supply_ids': [s.id for s in supplies]}))

    hh_date = start_date
    max_scale = 2
    min_scale = 0
    result_data = []

    try:
        row = res.next()

        while hh_date <= finish_date:
            complete = "blank"
            hh_value = 0
            while row is not None and row.start_date == hh_date:
                if (row.imp_related and row.source_code != '3rd-party-reverse') or (not row.imp_related and row.source_code == '3rd-party-reverse'):
                    hh_value += row.value
                else:
                    hh_value -= row.value
                if row.status == 'A':
                    if complete == "blank":
                        complete = "actual"
                else:
                    complete = "not-actual"
                try:
                    row = res.next()
                except StopIteration:
                    row = None

            hh_date += HH
            result_data.append([hh_value, hh_date, complete == "actual"])
            max_scale = max(max_scale, int(math.ceil(hh_value)))
            min_scale = min(min_scale, int(math.floor(hh_value)))

        step = 10**int(math.floor(math.log10(max_scale - min_scale)))
        #raise Exception('step is ' + str(step))

        '''
        if step > (max_scale - minScale) / 2:
            step = int(float(step) / 4)
        '''
    except StopIteration:
        pass

    if len(result_data) > 0:
        graph_left = 100
        image = BufferedImage(graph_left + len(result_data) + 100, 400, BufferedImage.TYPE_4BYTE_ABGR)
        graphics = image.createGraphics()
        defaultFont = graphics.getFont()
        small_font = Font(defaultFont.getName(), defaultFont.getStyle(), 10)
        max_height = 300
        scale_factor = float(max_height) / (max_scale - min_scale)
        graph_top = 50
        x_axis = int(graph_top + max_scale * scale_factor)
        month_points = []
        for i, (value, date, is_complete) in enumerate(result_data):
            hour = date.hour
            minute = date.minute
            height = int(value * scale_factor)
            if is_complete:
                graphics.setColor(Color.BLUE)
            else:
                graphics.setColor(Color.GRAY)
                graphics.fillRect(graph_left + i, graph_top, 1, max_height)
                graphics.setColor(Color.BLACK)
            if height > 0:
                graphics.fillRect(graph_left + i, x_axis - height, 1, height)
            else:
                graphics.fillRect(graph_left + i, x_axis, 1, abs(height))
            if hour == 0 and minute == 0:
                day = date.day
                if date.weekday() > 4:
                    graphics.setColor(Color.RED)
                else:
                    graphics.setColor(Color.BLACK)
                graphics.drawString(str(day), graph_left + i + 16, graph_top + max_height + 20)
                graphics.setColor(Color.BLACK)
                graphics.fillRect(graph_left + i, graph_top + max_height, 1, 5)
                if day == 15:
                    graphics.drawString(date.strftime("%B"), graph_left + i + 16, graph_top + max_height + 45)
                    month_points.append(i)
        graphics.setColor(Color.BLACK)
        graphics.fillRect(graph_left, graph_top, 1, max_height)

        graphics.setColor(Color.BLACK)

        for point in range(0, max_scale, step) + range(0, min_scale, step * -1):
            graphics.fillRect(graph_left - 5, int(x_axis - point * scale_factor), len(result_data) + 5, 1)
            graphics.drawString(str(point * 2), graph_left - 40, int(x_axis - point * scale_factor + 5))
            for month_point in month_points:
                graphics.drawString(str(point * 2), graph_left + month_point + 16, int(x_axis - point * scale_factor - 2))

        graphics.drawString("kW", graph_left - 90, 100)
        title = "Electricity use at site " + site.code + " " + site.name + " for " + str(months) + " month"
        if months > 1:
            title += "s"
        title += " ending " + finish_date.strftime("%B %Y")
        graphics.drawString(title, 30, 30)
        graphics.setFont(small_font)
        graphics.drawString("Poor data is denoted by a grey background and black foreground.", 30, 395)
    else:
        image = BufferedImage(400, 400, BufferedImage.TYPE_4BYTE_ABGR)
        graphics = image.createGraphics()
        graphics.setColor(Color.BLACK)
        graphics.drawString("No data available for this period.", 30, 10)

    os = inv.getResponse().getOutputStream()
    graphics.setColor(Color.BLACK)
    #graphics.drawString("report took..." + str(java.lang.System.currentTimeMillis() - start) + "ms", 10, 390)

    ImageIO.write(image, "png", os)
    os.close()
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[23]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Generation Graph]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.awt.image import BufferedImage
from javax.imageio import ImageIO
from java.awt import Color, Font
from java.lang import System
import math
import datetime
import pytz
from dateutil.relativedelta import relativedelta

Monad.getUtils()['impt'](globals(), 'utils', 'db')

HH = utils.HH
Site = db.Site

colour_list = [Color.BLUE, Color.GREEN, Color.RED, Color.YELLOW, Color.MAGENTA, Color.CYAN, Color.PINK, Color.ORANGE]

def set_colour(graphics, supplies, id):
    graphics.setColor(supplies[id][0])

def add_colour(supplies, id, name, source_code):
    if not id in supplies:
        supplies[id] = [len(supplies), name, source_code]

def sort_colour(supplies):
    keys = supplies.keys()
    keys.sort()
    for i in range(len(keys)):
        supplies[keys[i]][0] = colour_list[i]

def paint_legend(supplies, graph_top):
    i = 0
    keys = supplies.keys()
    keys.sort()
    for key in keys:
        supply = supplies[key]
        graphics.setColor(supply[0])
        graphics.fillRect(12, int(graph_top + 15 + (10 * i)), 8, 8)
        graphics.setColor(Color.BLACK)
        graphics.drawString(supply[2] + ' ' + supply[1], 25, int(graph_top + 22 + (10 * i)))
        i = i + 1        

def minimum_scale(min_scale, max_scale):
    if min_scale == 0 and max_scale == 0:
        min_scale = 0
        max_scale = 10
    if min_scale < 0 and min_scale > -10:
        min_scale = -10
    if max_scale > 0 and max_scale < 10:
        max_scale = 10
    return min_scale, max_scale

sess = None
try:
    sess = db.session()

    start = System.currentTimeMillis()
    inv.getResponse().setContentType("image/png")
    site_id = inv.getLong("site_id")
    finish_date_year = inv.getInteger("finish_year")
    finish_date_month = inv.getInteger("finish_month")
    months = inv.getInteger("months")

    finish_date = datetime.datetime(finish_date_year, finish_date_month, 1, tzinfo=pytz.utc) + relativedelta(months=1) - HH

    start_date = datetime.datetime(finish_date_year, finish_date_month, 1, tzinfo=pytz.utc) - relativedelta(months=months-1)

    generated_supplies = {}
    imported_supplies = {}
    exported_supplies = {}
    maxHeight = 80
    pxStep = 10
    maxOverallScale = 0
    minOverallScale = 0
    maxExportedScale = 0
    minExportedScale = 0
    maxImportedScale = 0
    minImportedScale = 0
    maxGeneratedScale = 0
    maxParasiticScale = 0
    maxDisplacedScale = 0
    minDisplacedScale = 0
    maxUsedScale = 0
    minUsedScale = 0
    resultData = []
    actualStatus = 'A'

    site = Site.get_by_id(sess, site_id)
    hhDate = start_date
    groups = site.groups(sess, start_date, finish_date, True)
    for group in groups:
        rs = iter(sess.execute("select hh_datum.value, hh_datum.start_date, hh_datum.status, channel.imp_related, supply.name, source.code, supply.id as supply_id from hh_datum, channel, era, supply, source where hh_datum.channel_id = channel.id and channel.era_id = era.id and era.supply_id = supply.id and supply.source_id = source.id and channel.channel_type = 'ACTIVE' and hh_datum.start_date >= :start_date and hh_datum.start_date <= :finish_date and supply.id = any(:supply_ids) order by hh_datum.start_date, supply.id", params={'start_date': group.start_date, 'finish_date': group.finish_date, 'supply_ids': [s.id for s in group.supplies]}))

        try:
            row = rs.next()
            hhChannelValue = float(row.value)
            hhChannelStartDate = row.start_date
            imp_related = row.imp_related
            status = row.status
            source_code = row.code
            supply_name = row.name
            supply_id = row.supply_id

            while hhDate <= finish_date:
                complete = "blank"
                exportedValue = 0
                importedValue = 0
                parasiticValue = 0
                generatedValue = 0
                third_party_import = 0
                third_party_export = 0
                supplyList = []
                while hhChannelStartDate == hhDate:
                    if not imp_related and source_code in ('net', 'gen-net'):
                        exportedValue += hhChannelValue
                        add_colour(exported_supplies, supply_id, supply_name, source_code)
                    if imp_related and source_code in ('net', 'gen-net'):
                        importedValue += hhChannelValue
                        add_colour(imported_supplies, supply_id, supply_name, source_code)
                    if (imp_related and source_code == 'gen') or (not imp_related and source_code == 'gen-net'):
                        generatedValue += hhChannelValue
                        add_colour(generated_supplies, supply_id, supply_name, source_code)
                    if (not imp_related and source_code == 'gen') or (imp_related and source_code == 'gen-net'):
                        parasiticValue += hhChannelValue
                        add_colour(generated_supplies, supply_id, supply_name, source_code)
                    supplyList.append([supply_name, source_code, imp_related, hhChannelValue, supply_id])
                    if (imp_related and source_code == '3rd-party') or (not imp_related and source_code == '3rd-party-reverse'):
                        third_party_import += hhChannelValue
                    if (not imp_related and source_code == '3rd-party') or (imp_related and source_code == '3rd-party-reverse'):
                        third_party_export += hhChannelValue
                    try:
                        row = rs.next()
                        source_code = row.code
                        supply_name = row.name
                        hhChannelValue = float(row.value)
                        hhChannelStartDate = row.start_date
                        imp_related = row.imp_related
                        status = row.status
                        supply_id = row.supply_id
                    except StopIteration:
                        hhChannelStartDate = None

                maxExportedScale = max(maxExportedScale, exportedValue)
                minExportedScale = min(minExportedScale, exportedValue)
                maxImportedScale = max(maxImportedScale, importedValue)
                minImportedScale = min(minImportedScale, importedValue)
                maxGeneratedScale = max(maxGeneratedScale, generatedValue)
                maxParasiticScale = max(maxParasiticScale, parasiticValue)
                displacedValue = generatedValue - parasiticValue - exportedValue
                maxDisplacedScale = max(maxDisplacedScale, displacedValue)
                minDisplacedScale = min(minDisplacedScale, displacedValue)
                usedValue = importedValue + displacedValue + third_party_import - third_party_export
                maxUsedScale = max(maxUsedScale, usedValue)
                minUsedScale = min(minUsedScale, usedValue)
                resultData.append([hhDate, supplyList, usedValue, displacedValue])
                hhDate += HH
        except StopIteration:
            pass

        #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter("ResultData: " + str(resultData)) 
        #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter("Overall: " + str(maxOverallScale) + " " + str(minOverallScale) + " Exported: " + str(maxExportedScale) + " " + str(minExportedScale) + " Imported: " + str(maxImportedScale) + " " + str(minImportedScale) + " Generated: " + str(maxGeneratedScale) + " Parasitic: " + str(maxParasiticScale) + " Displaced: " + str(maxDisplacedScale) + " " + str(minDisplacedScale) + " Used: " + str(maxUsedScale) + " " + str(minUsedScale))
        sort_colour(generated_supplies)
        sort_colour(imported_supplies)
        sort_colour(exported_supplies)
        minimized_scale = minimum_scale(minExportedScale, maxExportedScale)
        minExportedScale = minimized_scale[0]
        maxExportedScale = minimized_scale[1]
        minimized_scale = minimum_scale(minImportedScale, maxImportedScale)
        minImportedScale = minimized_scale[0]
        maxImportedScale = minimized_scale[1]
        if maxGeneratedScale == 0 and maxParasiticScale == 0:
            maxGeneratedScale = 10
            maxParasiticScale = 10
        minimized_scale = minimum_scale(minUsedScale, maxUsedScale)
        minUsedScale = minimized_scale[0]
        maxUsedScale = minimized_scale[1]
        minimized_scale = minimum_scale(minDisplacedScale, maxDisplacedScale)
        minDisplacedScale = minimized_scale[0]
        maxDisplacedScale = minimized_scale[1]
        maxOverallScale = max(maxExportedScale, maxImportedScale, maxGeneratedScale, maxDisplacedScale, maxUsedScale)
        minOverallScale = min(minExportedScale, minImportedScale, minDisplacedScale, minUsedScale)
        rawStepOverall = (maxOverallScale * 2) / (maxHeight / pxStep)
        factorOverall = 10**int(math.floor(math.log10(rawStepOverall)))
        endOverall = rawStepOverall / factorOverall
        newEndOverall = 1
        if endOverall >= 2:
            newEndOverall = 2
        if endOverall >= 5:
            newEndOverall = 5
        stepOverall = newEndOverall * factorOverall
        #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter("Overall Step: " + str(stepOverall))
    if len(resultData) > 0:
        graphLeft = 180
        scaleFactorOverall = float(maxHeight) / maxOverallScale
        #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter(str(scaleFactorExported) + " " + str(scaleFactorUsed) + " " + str(scaleFactorDisplaced) + " " + str(scaleFactorImported) + " " + str(scaleFactorGenerated))
        graphOrderExported = 5
        graphOrderImported = 4
        graphOrderGenerated = 3
        graphOrderUsed = 1
        graphOrderDisplaced = 2
        minUsed = 0
        minDisplaced = 0
        minParasitic = 0
        for i in range(0, int(minUsedScale), stepOverall * -1):
            minUsed = min(minUsed, i)
        for i in range(0, int(minDisplacedScale), stepOverall * -1):
            minDisplaced = min(minDisplaced, i)
        for i in range(0, int(maxParasiticScale), stepOverall):
            minParasitic = max(minParasitic, i)
        #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter(str(int((abs(minParasitic)) * scaleFactorOverall)))
        minUsed = int(abs(minUsed) * scaleFactorOverall)
        minDisplaced = int(abs(minDisplaced) * scaleFactorOverall)
        minParasitic = int(abs(minParasitic) * scaleFactorOverall)
        graphTopExported = ((graphOrderExported - 1) * (maxHeight + 22)) + 30 + minUsed + minDisplaced + minParasitic
        graphTopImported = ((graphOrderImported - 1) * (maxHeight + 22)) + 30 + minUsed + minDisplaced + minParasitic
        graphTopGenerated = ((graphOrderGenerated - 1) * (maxHeight + 22)) + 30 + minUsed + minDisplaced
        graphTopUsed = ((graphOrderUsed - 1) * (maxHeight + 22)) + 30
        graphTopDisplaced = ((graphOrderDisplaced - 1) * (maxHeight + 22)) + 30 + minUsed
        image = BufferedImage(graphLeft + len(resultData) + 100, ((maxHeight + 22) * 5) + 60 + minUsed + minDisplaced + minParasitic, BufferedImage.TYPE_4BYTE_ABGR)
        graphics = image.createGraphics()
        defaultFont = graphics.getFont()
        smallFont = Font(defaultFont.getName(), defaultFont.getStyle(), 10)
        keyFont = Font(defaultFont.getName(), defaultFont.getStyle(), 9)
        #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter(str(graphTopExported) + " " + str(graphTopImported) + " " + str(graphTopUsed) + " " + str(graphTopDisplaced))
        xAxisExported = int(graphTopExported + maxOverallScale * scaleFactorOverall)
        xAxisImported = int(graphTopImported + maxOverallScale * scaleFactorOverall)
        xAxisGenerated = int(graphTopGenerated + maxOverallScale * scaleFactorOverall)
        xAxisUsed = int(graphTopUsed + maxOverallScale * scaleFactorOverall)
        xAxisDisplaced = int(graphTopDisplaced + maxOverallScale * scaleFactorOverall)
        monthPoints = []
        for i, dataHh in enumerate(resultData):
            date = dataHh[0]
            usedValue = dataHh[2]
            displacedValue = dataHh[3]
            dataHhSupplyList = dataHh[1]

            hour = date.hour
            minute = date.minute
            graphics.setColor(Color.BLUE)
            usedHeight = int(round(usedValue * scaleFactorOverall))
            if usedHeight < 0:
                graphics.fillRect(graphLeft + i, xAxisUsed, 1, abs(usedHeight))
            else:
                graphics.fillRect(graphLeft + i, xAxisUsed - usedHeight, 1, usedHeight)
            displacedHeight = int(round(displacedValue * scaleFactorOverall))
            if displacedHeight < 0:
                graphics.fillRect(graphLeft + i, xAxisDisplaced, 1, abs(displacedHeight))
            else:
                graphics.fillRect(graphLeft + i, xAxisDisplaced - displacedHeight, 1, displacedHeight)
            generatedTotal = 0
            parasiticTotal = 0
            importedTotal = 0
            exportedTotal = 0
            for j in dataHhSupplyList:
                name = j[0]
                source = j[1]
                isImport = j[2]
                value = j[3]
                id = j[4]
                height = int(round(value * scaleFactorOverall))
                if source in ('net', 'gen-net') and not isImport:
                    set_colour(graphics, exported_supplies, id)
                    exportedTotal = exportedTotal + height
                    graphics.fillRect(graphLeft + i, xAxisExported - exportedTotal, 1, height)
                if source in ('net', 'gen-net') and isImport:
                    set_colour(graphics, imported_supplies, id)
                    importedTotal = importedTotal + height
                    graphics.fillRect(graphLeft + i, xAxisImported - importedTotal, 1, height)
                if (isImport and source == 'gen') or (not isImport and source == 'gen-net'):
                    set_colour(graphics, generated_supplies, id)
                    generatedTotal = generatedTotal + height
                    graphics.fillRect(graphLeft + i, xAxisGenerated - generatedTotal, 1, height)
                if (not isImport and source == 'gen') or (isImport and source == 'gen-net'):
                    set_colour(graphics, generated_supplies, id)
                    parasiticTotal = parasiticTotal + height
                    graphics.fillRect(graphLeft + i, xAxisGenerated, 1, height)
            if hour == 0 and minute == 0:
                day = date.day
                dayOfWeek = date.weekday()
                if dayOfWeek > 4:
                    graphics.setColor(Color.RED)
                else:
                    graphics.setColor(Color.BLACK)
                graphics.drawString(str(day), graphLeft + i + 16, ((maxHeight + 22) * 5) + 30 + minUsed + minDisplaced + minParasitic)
                graphics.setColor(Color.BLACK)
                graphics.fillRect(graphLeft + i, graphTopExported + maxHeight, 1, 5)
                graphics.fillRect(graphLeft + i, graphTopImported + maxHeight, 1, 5)
                graphics.fillRect(graphLeft + i, graphTopGenerated + maxHeight, 1, 5)
                graphics.fillRect(graphLeft + i, graphTopUsed + maxHeight, 1, 5)
                graphics.fillRect(graphLeft + i, graphTopDisplaced + maxHeight, 1, 5)
                if day == 15:
                    graphics.drawString(date.strftime("%B"), graphLeft + i + 16, ((maxHeight + 22) * 5) + 50 + minUsed + minDisplaced + minParasitic)
                    monthPoints.append(i)
        graphics.setColor(Color.BLACK)
        graphics.fillRect(graphLeft, graphTopExported, 1, maxHeight)
        graphics.fillRect(graphLeft, graphTopImported, 1, maxHeight)
        graphics.fillRect(graphLeft, graphTopGenerated, 1, maxHeight + minParasitic)
        graphics.fillRect(graphLeft, graphTopUsed, 1, maxHeight + minUsed)
        graphics.fillRect(graphLeft, graphTopDisplaced, 1, maxHeight + minDisplaced)
        scalePointsExported = []
        for i in range(0, int(maxOverallScale), stepOverall):
            scalePointsExported.append(i)
        #for i in range(0, int(minExportedScale), stepOverall * -1):
            #scalePointsExported.append(i)
        graphics.setColor(Color.BLACK)
        for point in scalePointsExported:
            graphics.fillRect(graphLeft - 5, int(xAxisExported - point * scaleFactorOverall), len(resultData) + 5, 1)
            graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisExported - point * scaleFactorOverall + 5))
            for monthPoint in monthPoints:
                graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisExported - point * scaleFactorOverall - 2))
        scalePointsImported = []
        for i in range(0, int(maxOverallScale), stepOverall):
            scalePointsImported.append(i)
        #for i in range(0, int(minOverallScale), stepOverall * -1):
            #scalePointsImported.append(i)
        graphics.setColor(Color.BLACK)
        for point in scalePointsImported:
            graphics.fillRect(graphLeft - 5, int(xAxisImported - point * scaleFactorOverall), len(resultData) + 5, 1)
            graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisImported - point * scaleFactorOverall + 5))
            for monthPoint in monthPoints:
                graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisImported - point * scaleFactorOverall - 2))
        scalePointsGenerated = []
        for i in range(0, int(maxOverallScale), stepOverall):
            scalePointsGenerated.append(i)
        for i in range(0, int(maxParasiticScale), stepOverall):
            scalePointsGenerated.append(i * -1)
        graphics.setColor(Color.BLACK)
        for point in scalePointsGenerated:
            graphics.fillRect(graphLeft - 5, int(xAxisGenerated - point * scaleFactorOverall), len(resultData) + 5, 1)
            graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisGenerated - point * scaleFactorOverall + 5))
            for monthPoint in monthPoints:
                graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisGenerated - point * scaleFactorOverall - 2))
        scalePointsUsed = []
        for i in range(0, int(maxOverallScale), stepOverall):
            scalePointsUsed.append(i)
        for i in range(0, int(minUsedScale), stepOverall * -1):
            scalePointsUsed.append(i)
        for point in scalePointsUsed:
            graphics.fillRect(graphLeft - 5, int(xAxisUsed - point * scaleFactorOverall), len(resultData) + 5, 1)
            graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisUsed - point * scaleFactorOverall + 5))
            for monthPoint in monthPoints:
                graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisUsed - point * scaleFactorOverall - 2))
        scalePointsDisplaced = []
        for i in range(0, int(maxOverallScale), stepOverall):
            scalePointsDisplaced.append(i)
        for i in range(0, int(minDisplacedScale), stepOverall * -1):
            scalePointsDisplaced.append(i)
        for point in scalePointsDisplaced:
            graphics.fillRect(graphLeft - 5, int(xAxisDisplaced - point * scaleFactorOverall), len(resultData) + 5, 1)
            graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisDisplaced - point * scaleFactorOverall + 5))
            for monthPoint in monthPoints:
                graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisDisplaced - point * scaleFactorOverall - 2))
        graphics.drawString("kW", graphLeft - 90, graphTopExported + 10)
        graphics.drawString("kW", graphLeft - 90, graphTopImported + 10)
        graphics.drawString("kW", graphLeft - 90, graphTopGenerated + 10)
        graphics.drawString("kW", graphLeft - 90, graphTopUsed + 10)
        graphics.drawString("kW", graphLeft - 90, graphTopDisplaced + 10)
        title = "Electricity at site " + site.code + " " + site.name + " for " + str(months) + " month"
        if months > 1:
            title = title + "s"
        title = title + " up to and including " + (finish_date - HH).strftime("%B %Y")
        graphics.drawString(title, 30, 20)
        graphics.drawString("Imported", 10, graphTopImported + 10)
        graphics.drawString("Exported", 10, graphTopExported + 10)
        graphics.drawString("Generated", 10, graphTopGenerated + 10)
        graphics.drawString("Used", 10, graphTopUsed + 10)
        graphics.drawString("Displaced", 10, graphTopDisplaced + 10)
        graphics.setFont(smallFont)
        graphics.drawString("Poor data is denoted by a grey background and black foreground.", 30, ((maxHeight + 22) * 5) + 50 + minUsed + minDisplaced + minParasitic)
        graphics.setFont(keyFont)
        paint_legend(exported_supplies, graphTopExported)
        paint_legend(imported_supplies, graphTopImported)
        paint_legend(generated_supplies, graphTopGenerated)
    else:
        image = BufferedImage(400, 400, BufferedImage.TYPE_4BYTE_ABGR)
        graphics = image.createGraphics()
        graphics.setColor(Color.BLACK)
        graphics.drawString("No data available for this period.", 30, 10)

    os = inv.getResponse().getOutputStream()
    graphics.setColor(Color.BLACK)
    #graphics.drawString("report took..." +     str(java.lang.System.currentTimeMillis() - start) + "ms", 10, 390)
    ImageIO.write(image, "png", os)
    os.close()
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[25]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Site HH figures]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import pytz
import datetime
from dateutil.relativedelta import relativedelta
from java.lang import System

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'HhDatum', 'Site', 'Channel', 'Supply', 'Era', 'Source', 'set_read_write', 'session'], 
        'utils': ['UserException', 'HH'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    site_code = inv.getString('site_code')
    site = Site.get_by_code(sess, site_code)

    year = inv.getInteger('year')
    month = inv.getInteger('month')
    start_date = datetime.datetime(year, month, 1, tzinfo=pytz.utc)
    finish_date = start_date + relativedelta(months=1) - HH
    groups = []

    for group in site.groups(sess, start_date, finish_date, True):
        sup_ids = sorted(supply.id for supply in group.supplies)
        group_dict = {'supplies': [Supply.get_by_id(sess, id) for id in sup_ids]}
        groups.append(group_dict)

        data = iter(sess.query(HhDatum).join(Channel, Era, Supply, Source).filter(Channel.channel_type=='ACTIVE', Supply.id.in_(sup_ids), HhDatum.start_date>=group.start_date, HhDatum.start_date<=group.finish_date).order_by(HhDatum.start_date, Supply.id))
        try:
            datum = data.next()
        except StopIteration:
            datum = None

        hh_date = group.start_date

        hh_data = []
        group_dict['hh_data'] = hh_data

        while not hh_date > group.finish_date:
            sups = []
            hh_dict = {'start_date': hh_date, 'supplies': sups, 'export_kwh': 0, 'import_kwh': 0, 'parasitic_kwh': 0, 'generated_kwh': 0, 'third_party_import_kwh': 0, 'third_party_export_kwh': 0}
            hh_data.append(hh_dict)
            for sup_id in sup_ids:
                sup_hh = {}
                sups.append(sup_hh)
                while datum is not None and datum.start_date == hh_date and datum.channel.era.supply.id == sup_id:
                    channel = datum.channel
                    imp_related = channel.imp_related
                    hh_float_value = float(datum.value)
                    source_code = channel.era.supply.source.code

                    prefix = 'import_' if imp_related else 'export_'
                    sup_hh[prefix + 'kwh'] = datum.value
                    sup_hh[prefix + 'status'] = datum.status
 
                    if not imp_related and source_code in ('net', 'gen-net'):
                        hh_dict['export_kwh'] += hh_float_value
                    if imp_related and source_code in ('net', 'gen-net'):
                        hh_dict['import_kwh'] += hh_float_value
                    if (imp_related and source_code == 'gen') or (not imp_related and source_code == 'gen-net'):
                        hh_dict['generated_kwh'] += hh_float_value
                    if (not imp_related and source_code == 'gen') or (imp_related and source_code == 'gen-net'):
                        hh_dict['parasitic_kwh'] += hh_float_value
                    if (imp_related and source_code == '3rd-party') or (not imp_related and source_code == '3rd-party-reverse'):
                        hh_dict['third_party_import'] += hh_float_value
                    if (not imp_related and source_code == '3rd-party') or (imp_related and source_code == '3rd-party-reverse'):
                        hh_dict['third_party_export'] += hh_float_value
                    try:
                        datum = data.next()
                    except StopIteration:
                        datum = None

            hh_dict['displaced_kwh'] = hh_dict['generated_kwh'] - hh_dict['export_kwh'] - hh_dict['parasitic_kwh']
            hh_dict['used_kwh'] = hh_dict['import_kwh'] + hh_dict['displaced_kwh']
            hh_date = hh_date + HH

    render(inv, template, {'site': site, 'groups': groups})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Sites &gt; {{site.code}} {{site.name}} &gt; HH data
    </title>
    <style>
      colgroup.gray {
        background: silver;
      }

      tr.error {
        color: red;
      }
    </style>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/3/output/">Sites</a> &gt;
      <a href="{{context_path}}/reports/5/output/?site_id={{site.id}}">
      {{site.code}} {{site.name}}</a>
      &gt; HH data
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{message}}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <form action=".">
      <fieldset>
        <legend>Show data</legend>
        <br>
        <label>
          Site Code {{input_text('site_code', site.code)}}
        </label>
        <br>
        <br>
        <fieldset>
          <legend>Month</legend>
          {{input_date(None, None, 'month')}}
          <br>
        </fieldset>
        <br>
        <input type="submit" value="Show">
      </fieldset>
    </form>

    {% for group in groups %}
      <table>
        <caption>HH Data</caption>
        <colgroup>
        <colgroup class="gray">
        <colgroup>
        <colgroup class="gray">
        <colgroup>
        <colgroup class="gray">
        <thead>
          <tr>
            <th rowspan="3">HH Starting</th>
            <th colspan="6">kWh</th>
            {% for supply in group.supplies %}
              <th colspan="4">
                {{supply.name}} {{supply.source.code}} {{supply.generator_type.code}}
              </th>
            {% endfor %}
          </tr>
          <tr>
            <th rowspan="2">Imported</th>
            <th rowspan="2">Used</th>
            <th rowspan="2">Displaced</th>
            <th rowspan="2">Generated</th>
            <th rowspan="2">Exported</th>
            <th rowspan="2">Parasitic</th>
            {% for supply in group.supplies %}
              <th colspan="2">Import</th>
              <th colspan="2">Export</th>
            {% endfor %}
          </tr>
          <tr>
            {% for supply in group.supplies %}
              <th>kWh</th>
              <th>Status</th>
              <th>kWh</th>
              <th>Status</th>
            {% endfor %}
          </tr>
        </thead>
        <tbody>
          {% for hh in group.hh_data %}
            <tr>
              <td>{{hh.start_date|hh_format}}</td>
              <td>{{hh.import_kwh}}</td>
              <td>{{hh.used_kwh}}</td>
              <td>{{hh.displaced_kwh}}</td>
              <td>{{hh.generated_kwh}}</td>
              <td>{{hh.export_kwh}}</td>
              <td>{{hh.parasitic_kwh}}</td>
              {% for datum in hh.supplies %}
                <td>{{datum.import_kwh}}</td>
                <td>{{datum.import_status}}</td>
                <td>{{datum.export_kwh}}</td>
                <td>{{datum.export_status}}</td>
              {% endfor %}
            </tr>
          {% endfor %}
        </tbody>
      </table>
    {% endfor %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[27]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Bills]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate, Site, Supply
from java.text import SimpleDateFormat, DecimalFormat
from java.lang import Math, System
from net.sf.chellow.billing import Contract
from org.python.util import PythonInterpreter

year = inv.getInteger("end_year")
month = inv.getInteger("end_month")
months = inv.getInteger("months")

if not inv.isValid():
    raise UserException()

if inv.hasParameter('supply_id'):
    supply_id = inv.getLong('supply_id')
    query = Hiber.session().createQuery("select bill, bill.batch, bill.batch.contract, bill.supply from Bill bill where bill.supply = :supply and bill.startDate.date >= :startDate and bill.startDate.date <= :finishDate order by bill.startDate.date").setEntity('supply', Supply.getSupply(supply_id))
else:
    query = Hiber.session().createQuery("select bill, bill.batch, bill.batch.contract from Bill bill where bill.startDate.date >= :startDate and bill.startDate.date <= :finishDate")

cal = MonadDate.getCalendar()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())
cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
start_date = HhStartDate(cal.getTime())

now_date = Date()
file_date_format = SimpleDateFormat("yyyy-MM-dd'_'HHmm")
file_date_format.setCalendar(cal)

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="bills_' + file_date_format.format(now_date) + '.csv"')
pw = inv.getResponse().getWriter()
pw.println("Report Start,Report Finish,Supply Id,Import MPAN Core,Export MPAN Core,Contract Name,Batch Reference,Bill Id,Bill From,Bill To,Bill Reference,Bill Issue Date,Bill Type, Bill kWh, Bill Net, Bill VAT, Bill Gross")
pw.flush()

issue_format = SimpleDateFormat("yyyy-MM-dd HH:mm")
issue_format.setCalendar(cal)

bills = query.setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate()).scroll()
while bills.next():
    bill = bills.get(0)
    batch = bills.get(1)
    contract = bills.get(2)
    supply = bill.getSupply()

    era = supply.getEra(bill.getStartDate())
    if era is None:
        imp_mpan_core = 'No Generation'
        exp_mpan_core = 'No Generation'
    else:
        imp_mpan_core = era.getImpMpanCore()
        if imp_mpan_core is None:
            imp_mpan_core = ''
        exp_mpan_core = era.getExpMpanCore()
        if exp_mpan_core is None:
            exp_mpan_core = ''

    pw.println(','.join('"' + str(value) + '"' for value in [start_date, finish_date, supply.getId(), imp_mpan_core, exp_mpan_core, contract.getName(), batch.getReference(), bill.getId(), bill.getStartDate(), bill.getFinishDate(), bill.getReference(), issue_format.format(bill.getIssueDate()), bill.getType().getCode(), bill.getKwh(), bill.getNet(), bill.getVat(), bill.getGross()]))
    pw.flush()
    Hiber.session().clear()

bills.close()
pw.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[29]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Site HH bulk figures]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad, Hiber, UserException
import datetime
import pytz
from dateutil.relativedelta import relativedelta

Monad.getUtils()['imprt'](globals(), {
        'db': ['HhDatum', 'Site', 'Supply', 'set_read_write', 'session'], 
        'utils': ['UserException', 'HH', 'form_date'],
        'templater': ['render']})

months = inv.getInteger('months')
finish_year = inv.getInteger('finish_year')
finish_month = inv.getInteger('finish_month')

finish_date = datetime.datetime(finish_year, finish_month, 1, tzinfo=pytz.utc) + relativedelta(months=1) - HH
start_date = finish_date + HH - relativedelta(months=months)

file_name = "site_hh_data_" + start_date.strftime("%Y%m%d%H%M") + ".csv"

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="' + file_name + '"')
pw = inv.getResponse().getWriter()

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        site_id = inv.getLong('site_id')
        site = Site.get_by_id(sess, site_id)
        type = inv.getString('type')
        pw.print(','.join(('Site Code', 'Type', 'Date') + tuple(map(str, range(1, 49)))))
        for group in site.groups(sess, start_date, finish_date, True):
            for hh in group.hh_data(sess):
              start_date = hh['start_date']
              if start_date.hour == 0 and start_date.minute == 0:
                pw.print('\r\n' + ','.join((site.code, type, start_date.strftime("%Y-%m-%d"))))
                pw.flush()
              pw.print("," + str(hh[type]))
    pw.close()
finally:
    sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[31]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Read Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from sqlalchemy.sql.expression import text
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Bill', 'ReadType', 'Tpr', 'RegisterRead', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date', 'form_decimal'],
        'templater': ['render']})


def make_fields(sess, read, message=None):
    read_types = sess.query(ReadType).from_statement("select * from read_type order by code")
    tprs = sess.query(Tpr).from_statement("select * from tpr order by code")

    messages = [] if message is None else [str(message)]
    return {'read': read, 'read_types': read_types, 'tprs': tprs, 'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        read_id = inv.getLong('supplier_read_id')
        read = RegisterRead.get_by_id(sess, read_id)
        render(inv, template, make_fields(sess, read))
    else:
        set_read_write(sess)
        read_id = inv.getLong('supplier_read_id')
        read = RegisterRead.get_by_id(sess, read_id)
        if inv.hasParameter('update'):
            tpr_id = inv.getLong("tpr_id")
            tpr = Tpr.get_by_id(sess, tpr_id)
            coefficient = form_decimal(inv, "coefficient")
            units = inv.getString("units")
            msn = inv.getString("msn")
            mpan_str = inv.getString("mpan")
            previous_date = form_date(inv, "previous")
            previous_value = form_decimal(inv, "previous_value")
            previous_type_id = inv.getLong("previous_type_id")
            previous_type = ReadType.get_by_id(sess, previous_type_id)
            present_date = form_date(inv, "present")
            present_value = form_decimal(inv, "present_value")
            present_type_id = inv.getLong("present_type_id")
            present_type = ReadType.get_by_id(sess, present_type_id)

            read.update(tpr, coefficient, units, msn, mpan_str, previous_date, previous_value, previous_type, present_date, present_value, present_type)
            sess.commit()
            inv.sendSeeOther("/reports/105/output/?supplier_bill_id=" + str(read.bill.id))
        elif inv.hasParameter("delete"):
            read.delete()
            sess.commit()
            inv.sendSeeOther("/reports/105/output/?supplier_bill_id=" + str(read.bill.id))
except UserException, e:
    render(inv, template, make_fields(sess, read, e))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">

    <style>
      label {
        width: 11em;
        float: left;
      }
    </style>

    <title>
      Chellow &gt; Supplier Contracts &gt;
      {{read.bill.batch.contract.name}} &gt; Batches &gt;
      {{read.bill.batch.reference}} &gt; Bills &gt;
      {{read.bill.id}} &gt; Read {{read.id}} Edit
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/75/output/">Supplier Contracts</a> &gt;
      <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{read.bill.batch.contract.id}}">{{read.bill.batch.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/89/output/?supplier_contract_id={{read.bill.batch.contract.id}}">Batches</a> &gt;
      <a href="{{context_path}}/reports/91/output/?supplier_batch_id={{read.bill.batch.id}}">{{read.bill.batch.reference}}</a> &gt;
      <a href="{{context_path}}/reports/105/output/?supplier_bill_id={{read.bill.id}}">Bill {{read.bill.id}}</a> &gt; Read {{read.id}} Edit
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br>
    {% if request.getParameter('confirm_delete') %}
      <form method="post" action=".">
        <fieldset>
          <legend>
            Are you sure you want to delete this register read?
          </legend>
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p><a href=".">Cancel</a></p>
    {% else %}
      <form action="." method="post">
        <input type="hidden" name="supplier_read_id" value="{{read.id}}">
        <fieldset>
          <legend>Update this read</legend>
          <br>
          <label>MPAN</label> {{input_text('mpan', read.mpan_str)}}
          <br>
          <label>Coefficient</label>
            {{input_text('coefficient', read.coefficient)}}
          <br>
          <label>Meter Serial Number</label>
            {{input_text('msn', read.msn)}}
          <br>
          <label>Units</label>
            {{input_text('units', read.units_as_str())}}
          <br>
          <label>TPR</label>
            <select name="tpr_id">
              {% for tpr in tprs %}
                {{input_option('tpr_id', tpr.id, tpr.code, read.tpr.id)}}
              {% endfor %}
            </select>
          <br>
          <br>
          <fieldset>
            <legend>Previous Read</legend>
            <fieldset>
              <legend>Date</legend>
              {{input_date('previous', read.previous_date)}}
            </fieldset>
            <br>
            <label>Value</label>
              {{input_text('previous_value', read.previous_value)}}
            <br>
            <label>Type</label>
              <select name="previous_type_id">
                {% for read_type in read_types %}
                  {{input_option('previous_type_id', read_type.id, read_type.code + ' ' + read_type.description, read.previous_type.id)}}
                {% endfor %}
              </select>
          </fieldset>
          <br>
          <br>
          <fieldset>
            <legend>Present Read</legend>
            <fieldset>
              <legend>Date</legend>
              {{input_date('present', read.present_date)}}
            </fieldset>
            <br>
            <label>Value</label>
              {{input_text('present_value', read.present_value)}}
            <br>
            <label>Type</label>
            <select name="present_type_id">
              {% for read_type in read_types %}
                {{input_option('present_type_id', read_type.id, read_type.code + ' ' + read_type.description, read.present_type.id)}}
              {% endfor %}
            </select>
          </fieldset>
          <br>
          <br>
          <input type="submit" name="update" value="Update">
        </fieldset>
      </form>
      <br>
      <form action=".">
        <fieldset>
          <input type="hidden" name="read_id" value="{{read.id}}">
          <legend>Delete this read</legend>
          <input name="confirm_delete" type="submit" value="Delete">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[33]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Supplies Snapshot]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import datetime
from dateutil.relativedelta import relativedelta
import pytz
from sqlalchemy.sql import func
from sqlalchemy import or_

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')

Era, Supply, Bill, Batch, Channel, HhDatum, RegisterRead, ReadType = db.Era, db.Supply, db.Bill, db.Batch, db.Channel, db.HhDatum, db.RegisterRead, db.ReadType
MeasurementRequirement = db.MeasurementRequirement

HH, hh_format = utils.HH, utils.hh_format

sess = None
try:
    sess = db.session()

    year = inv.getInteger('year')
    month = inv.getInteger('month')
    date = datetime.datetime(year, month, 1) + relativedelta(months=1) - HH

    inv.getResponse().setContentType('text/csv')
    inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="supplies_snapshot.csv"')
    pw = inv.getResponse().getWriter()

    pw.println("Date,Physical Site Id, Physical Site Name, Other Site Ids, Other Site Names, Supply Id, Source, Generator Type, DNO Name, Voltage Level, Metering Type, Mandatory HH, PC, MTC, CoP, SSC, Number Of Registers, MOP Contract, Mop Account, HHDC Contract, HHDC Account, Meter Serial Number, Meter Installation Date, Latest Normal Meter Read Date,Latest Normal Meter Read Type,Latest DC Bill Date, Latest MOP Bill Date,Import ACTIVE?, Import REACTIVE_IMPORT?, Import REACTIVE_EXPORT?, Export ACTIVE?, Export REACTIVE_IMPORT?, Export REACTIVE_EXPORT?, Import MPAN core, Import Agreed Supply Capacity (kVA), Import LLFC Code, Import LLFC Description, Import Supplier Contract, Import Supplier Account, Import Mandatory kWh,Latest Import Supplier Bill Date, Export MPAN core, Export Agreed Supply Capacity (kVA), Export LLFC Code, Export LLFC Description, Export Supplier Contract, Export Supplier Account, Export Mandatory kWh,Latest Export Supplier Bill Date")
    pw.flush()

    NORMAL_READ_TYPES = ('N', 'C', 'N3')
    year_start = date + HH - relativedelta(years=1)

    eras = sess.query(Era).filter(Era.start_date<date, or_(Era.finish_date==None, Era.finish_date>=date)).order_by(Era.supply_id)

    if inv.hasParameter('supply_id'):
        supply_id = inv.getLong('supply_id')
        supply = Supply.get_by_id(sess, supply_id)

        eras = eras.filter(Era.supply_id==supply.id)

    for era in eras:
        site_codes = ''
        site_names = ''
        for site_era in era.site_eras:
            if site_era.is_physical:
                physical_site = site_era.site
            else:
                site = site_era.site
                site_codes = site_codes + site.code + ', '
                site_names = site_names + site.name + ', '
        site_codes = site_codes[:-2]
        site_names = site_names[:-2]
        supply = era.supply
        if era.imp_mpan_core is None:
            voltage_level_code = era.exp_llfc.voltage_level.code
        else:
            voltage_level_code = era.imp_llfc.voltage_level.code

        generator_type = supply.generator_type
        generator_type = '' if generator_type is None else generator_type.code

        metering_type = era.make_meter_category()

        if metering_type == 'nhh':
            latest_prev_normal_read = sess.query(RegisterRead).join(Bill).join(RegisterRead.previous_type).filter(ReadType.code.in_(NORMAL_READ_TYPES), RegisterRead.previous_date<=date, Bill.supply_id==supply.id).order_by(RegisterRead.previous_date.desc()).first()

            latest_pres_normal_read = sess.query(RegisterRead).join(Bill).join(RegisterRead.present_type).filter(ReadType.code.in_(NORMAL_READ_TYPES), RegisterRead.present_date<=date, Bill.supply_id==supply.id).order_by(RegisterRead.present_date.desc()).first()

            if latest_prev_normal_read is None and latest_pres_normal_read is None:
                latest_normal_read_date = None
                latest_normal_read_type = None
            elif latest_pres_normal_read is not None and latest_prev_normal_read is None:
                latest_normal_read_date = latest_pres_normal_read.present_date
                latest_normal_read_type = latest_pres_normal_read.present_type.code
            elif latest_pres_normal_read is None and latest_prev_normal_read is not None:
                latest_normal_read_date = latest_prev_normal_read.previous_date
                latest_normal_read_type = latest_prev_normal_read.previous_type.code
            elif latest_pres_normal_read.present_date > latest_prev_normal_read.previous_date:
                latest_normal_read_date = latest_pres_normal_read.present_date
                latest_normal_read_type = latest_pres_normal_read.present_type.code
            else:
                latest_normal_read_date = latest_prev_normal_read.previous_date
                latest_normal_read_type = latest_prev_normal_read.previous_type.code
            if latest_normal_read_date is not None:
                latest_normal_read_date = hh_format(latest_normal_read_date)

        else:
            latest_normal_read_date = metering_type
            latest_normal_read_type = None
            latest_read_date = metering_type

        mop_contract = era.mop_contract
        if mop_contract is None:
            mop_contract_name = ''
            mop_account = ''
            latest_mop_bill_date = 'No MOP'
        else:
            mop_contract_name = mop_contract.name
            mop_account = era.mop_account
            latest_mop_bill_date = sess.query(Bill.finish_date).join(Batch).filter(Bill.start_date<=date, Bill.supply_id==supply.id, Batch.contract_id==mop_contract.id).order_by(Bill.finish_date.desc()).first()

            if latest_mop_bill_date is not None:
                latest_mop_bill_date = hh_format(latest_mop_bill_date[0])

        hhdc_contract = era.hhdc_contract
        if hhdc_contract is None:
            hhdc_contract_name = ''
            hhdc_account = ''
            latest_hhdc_bill_date = 'No HHDC'
        else:
            hhdc_contract_name = hhdc_contract.name
            hhdc_account = era.hhdc_account
            latest_hhdc_bill_date = sess.query(Bill.finish_date).join(Batch).filter(Bill.start_date<=date, Bill.supply_id==supply.id, Batch.contract_id==hhdc_contract.id).order_by(Bill.finish_date.desc()).first()

            if latest_hhdc_bill_date is not None:
                latest_hhdc_bill_date = hh_format(latest_hhdc_bill_date[0])

        channel_values = []
        for imp_related in [True, False]:
            for channel_type in utils.CHANNEL_TYPES:
                if era.find_channel(sess, imp_related, channel_type) is None:
                    channel_values.append('false')
                else:
                    channel_values.append('true')

        imp_avg_months = None
        exp_avg_months = None
        for is_import in [True, False]:
            if is_import and era.imp_mpan_core is None:
                continue
            if not is_import and era.exp_mpan_core is None:
                continue

            if metering_type == 'nhh':
                continue

            month_mds = tuple(md[0] for md in sess.execute("""

select max(hh_datum.value) as md
from hh_datum join channel on (hh_datum.channel_id = channel.id)
    join era on (channel.era_id = era.id)
where era.supply_id = :supply_id and hh_datum.start_date >= :year_start
    and hh_datum.start_date <= :year_finish and channel.channel_type = 'ACTIVE'
    and channel.imp_related = :is_import
group by extract(month from (hh_datum.start_date at time zone 'utc'))
order by md desc
limit 3

""", params={'supply_id': supply.id, 'year_start': year_start, 'year_finish': date, 'is_import': is_import}))

            avg_months = sum(month_mds)
            if len(month_mds) > 0:
                avg_months /= len(month_mds)
                if is_import:
                    imp_avg_months = avg_months
                else:
                    exp_avg_months = avg_months

        if imp_avg_months > 100 or exp_avg_months > 100:
            mandatory_hh = 'yes'
        else:
            mandatory_hh = 'no'

        imp_latest_supplier_bill_date = None
        exp_latest_supplier_bill_date = None
        for is_import in [True, False]:
            if is_import:
                if era.imp_mpan_core is None:
                    continue
                else:
                    supplier_contract = era.imp_supplier_contract
            if not is_import:
                if era.exp_mpan_core is None:
                    continue
                else:
                    supplier_contract = era.exp_supplier_contract

            if metering_type == 'hh':
                latest_supplier_bill_date = sess.query(Bill.finish_date).join(Batch).filter(Bill.start_date<=date, Bill.supply_id==supply.id, Batch.contract_id==supplier_contract.id).order_by(Bill.finish_date.desc()).first()
                if latest_supplier_bill_date is not None:
                    latest_supplier_bill_date = latest_supplier_bill_date[0]
            else:
                latest_prev_read = sess.query(RegisterRead).join(Bill).filter(RegisterRead.previous_date<=date, Bill.supply_id==supply.id).order_by(RegisterRead.previous_date.desc()).first()

                latest_pres_read = sess.query(RegisterRead).join(Bill).filter(RegisterRead.present_date<=date, Bill.supply_id==supply.id).order_by(RegisterRead.present_date.desc()).first()

                if latest_prev_read is None and latest_pres_read is None:
                    latest_read = None
                elif latest_pres_read is not None and latest_prev_read is None:
                    latest_read = latest_pres_read
                elif latest_pres_read is None and latest_prev_read is not None:
                    latest_read = latest_prev_read
                elif latest_pres_read.present_date > latest_prev_read.previous_date:
                    latest_read = latest_pres_read
                else:
                    latest_read = latest_prev_read

                if latest_read is None:
                    latest_supplier_bill_date = None
                else:
                    latest_supplier_bill_date = latest_read.bill.finish_date

            if latest_supplier_bill_date is not None:
                latest_supplier_bill_date = hh_format(latest_supplier_bill_date)

                if is_import:
                    imp_latest_supplier_bill_date = latest_supplier_bill_date
                else:
                    exp_latest_supplier_bill_date = latest_supplier_bill_date

        meter_installation_date = sess.query(func.min(Era.start_date)).filter(Era.supply_id==era.supply_id, Era.msn==era.msn).one()[0]
        
        if era.ssc is None:
            ssc_code = num_registers = None
        else:
            ssc_code = era.ssc.code
            num_registers = sess.query(MeasurementRequirement).filter(MeasurementRequirement.ssc_id==era.ssc.id).count()

        pw.println(','.join(('"' + ('' if value is None else str(value)) + '"') for value in [hh_format(date), physical_site.code, physical_site.name, site_codes, site_names, supply.id, supply.source.code, generator_type, supply.dno_contract.name, voltage_level_code, metering_type, mandatory_hh, era.pc.code, era.mtc.code, era.cop.code, ssc_code, num_registers, mop_contract_name, mop_account, hhdc_contract_name, hhdc_account, era.msn, hh_format(meter_installation_date), latest_normal_read_date, latest_normal_read_type, latest_hhdc_bill_date, latest_mop_bill_date] + channel_values + [era.imp_mpan_core, era.imp_sc, None if era.imp_llfc is None else era.imp_llfc.code, None if era.imp_llfc is None else era.imp_llfc.description, None if era.imp_supplier_contract is None else era.imp_supplier_contract.name, era.imp_supplier_account, imp_avg_months, imp_latest_supplier_bill_date] + [era.exp_mpan_core, era.exp_sc, None if era.exp_llfc is None else era.exp_llfc.code, None if era.exp_llfc is None else era.exp_llfc.description, None if era.exp_supplier_contract is None else era.exp_supplier_contract.name, era.exp_supplier_account, exp_avg_months, exp_latest_supplier_bill_date]))
        pw.flush()
    pw.close()
finally:
    if sess is not None:
        sess.close()
]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[35]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[GSP Group]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import GspGroup

group_id = inv.getLong('gsp-group-id')
group = GspGroup.getGspGroup(group_id)
source.appendChild(group.toXml(doc))]]></value>
		<value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; GSP Groups &gt;
                    <xsl:value-of
                        select="/source/gsp-group/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/43/output/">
                        <xsl:value-of select="'GSP Groups'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/gsp-group/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/gsp-group/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/gsp-group/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[37]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Channel Snags]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import datetime
from dateutil.relativedelta import relativedelta
import pytz
from itertools import islice
from java.lang import System

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'Snag', 'Channel', 'Era', 'SiteEra', 'Site', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
rate_scripts = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        contract_id = inv.getLong('hhdc_contract_id')
        if contract_id is None:
            contract_id = inv.getLong('hhdc-contract-id')
        contract = Contract.get_hhdc_by_id(sess, contract_id)
        hidden_days = inv.getLong('hidden_days')

        total_snags = sess.query(Snag).join(Channel).join(Era).filter(Snag.is_ignored==False, Era.hhdc_contract_id==contract.id, Snag.start_date < datetime.datetime.now(pytz.utc) - relativedelta(days=hidden_days)).count()
        snags = sess.query(Snag).join(Channel).join(Era).join(Era.site_eras).join(SiteEra.site).filter(Snag.is_ignored==False, Era.hhdc_contract_id==contract.id, Snag.start_date < datetime.datetime.now(pytz.utc) - relativedelta(days=hidden_days)).order_by(Site.code, Era.id, Snag.start_date, Snag.finish_date, Snag.channel_id)
        snag_groups = []
        prev_snag = None
        for snag in islice(snags, 200):
            if prev_snag is None or snag.channel.era != prev_snag.channel.era or snag.start_date != prev_snag.start_date or snag.finish_date != prev_snag.finish_date or snag.description != prev_snag.description:
                era = snag.channel.era
                snag_group = {'snags': [], 'sites': sess.query(Site).join(Site.site_eras).filter(SiteEra.era_id==era.id).order_by(Site.code), 'era': era, 'description': snag.description, 'start_date': snag.start_date, 'finish_date': snag.finish_date}
                snag_groups.append(snag_group)
            snag_group['snags'].append(snag)
            prev_snag = snag

        render(inv, template, {'contract': contract, 'snags': snags, 'total_snags': total_snags, 'snag_groups': snag_groups})
except UserException, e:
    if str(e).startswith("There isn't a contract"):
        inv.sendNotFound(str(e))
    else:
        render(inv, template, {'messages': [str(e)], 'contract': contract}, 400)
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; HHDC Contracts &gt; {{contract.name}} &gt; Channel Snags
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{context_path}}/reports/115/output/?hhdc_contract_id={{contract.id}}">{{contract.name}}</a>
      &gt; Channel Snags
    </p>

    <form action="{{context_path}}/reports/233/output/">
      <fieldset>
        <legend>Download CSV</legend>
        <input type="hidden" name="hhdc_contract_id" value="{{contract.id}}">
        <label>
          Snags less than <input size="3" maxlength="3" name="days_hidden" value="0"> GMT calendar day(s) old are hidden.
        </label>
        <input type="submit" value="Download">
      </fieldset>
    </form>
    <br>
    <form action=".">
      <fieldset>
        <legend>Show Channel Snags</legend>
        <input type="hidden" name="hhdc_contract_id" value="{{contract.id}}">
        <label>
          Snags less than {{input_text('hidden_days', '0', 3, 3)}} days old are hidden.
        </label>
        <input type="submit" value="Show">
      </fieldset>
    </form>

    <p>
      There are {{total_snags}} snag(s) older than {{request.getParameter('hidden_days')}} days that aren't ignored.
    </p>

    <table>
      <caption>Snags (truncated after 200)</caption>
      <thead>
        <tr>
          <th>View</th>
          <th>Import MPAN Core</th>
          <th>Export MPAN Core</th>
          <th>Sites</th>
          <th>Snag Description</th>
          <th>Channels</th>
          <th>Duration</th>
        </tr>
      </thead>
      <tbody>
        {% for snag_group in snag_groups %}
          <tr>
            <td>
              <ul>
                {% for snag in snag_group.snags %}
                  <li>
                    <a href="{{context_path}}/reports/117/output/?snag_id={{snag.id}}">view</a>  [<a href="{{context_path}}/reports/365/output/?snag_id={{snag.id}}">edit</a>]
                  </li>
                {% endfor %}
              </ul>
            </td>
            <td>
              {% if snag_group.era.imp_mpan_core %}
                {{snag_group.era.imp_mpan_core}}
              {% endif %}
            </td>
            <td>
              {% if snag_group.era.exp_mpan_core %}
                {{snag_group.era.exp_mpan_core}}
              {% endif %}
            </td>
            <td>
              <ul>
                {% for site in snag_group.sites %}
                  <li>{{site.code}} {{site.name}}</li>
                {% endfor %}
              </ul>
            </td>
            <td>{{snag_group.description}}</td>
            <td>
              <ul>
                {% for snag in snag_group.snags %}
                  <li>
                    {% if snag.channel.imp_related %}
                      Import
                    {% else %}
                      Export
                    {% endif %}
                    {{snag.channel.channel_type}}
                  </li>
                {% endfor %}
              </ul>
            </td>
            <td>
              {{snag_group.start_date|hh_format}} to
              {{snag_group.finish_date|hh_format}}
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[39]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Site Group Snags]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import System

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')

Snag, Site = db.Snag, db.Site

sess = None

try:
    sess = db.session()
    if inv.getRequest().getMethod() == 'GET':
        snags = sess.query(Snag).filter(Snag.is_ignored==False, Snag.site_id!=None).order_by(Snag.start_date.desc(), Snag.id).all()
        site_count = sess.query(Snag).join(Site).filter(Snag.is_ignored==False).distinct(Site.id).count()
        templater.render(inv, template, {'snags': snags, 'site_count': site_count})
except utils.UserException, e:
        render(inv, template, {'messages': [str(e)]}, 400)
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; Site Snags</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      Site Snags [<a href="{{context_path}}/reports/371/output/">edit</a>]
    </p>
    
    <p>
      There are {{snags|length}} snag(s), over {{site_count}} site(s)
    </p>

    <table>
      <thead>
        <tr>
          <th></th>
          <th>Creation Date</th>
          <th>Site ID</th>
          <th>Site Name</th>
          <th>Snag Description</th>
          <th>Start Date</th>
          <th>Finish Date</th>
        </tr>
      </thead>
      <tbody>
        {% for snag in snags %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/119/output/?site_snag_id={{snag.id}}">view</a> [<a href="{{context_path}}/reports/373/output/?site_snag_id={{snag.id}}">edit</a>]
            </td>
            <td>{{snag.date_created|hh_format}}</td>
            <td>
              <a href="{{context_path}}/reports/5/output/?site_id={{snag.site.id}}">{{snag.site.code}}</a>
            </td>
            <td>{{snag.site.name}}</td>
            <td>{{snag.description}}</td>
            <td>{{snag.start_date|hh_format}}</td>
            <td>{{snag.finish_date|hh_format}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[41]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Supplies TRIAD]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import datetime
from dateutil.relativedelta import relativedelta
from sqlalchemy import or_
import pytz

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'computer', 'duos', 'triad')

Era, Supply, Source, Pc, Site = db.Era, db.Supply, db.Source, db.Pc, db.Site
SiteEra = db.SiteEra
HH = utils.HH

caches = {}

sess = None
try:
    sess = db.session()
    inv.getResponse().setContentType("text/csv")
    inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="supplies_triad.csv"')

    year = inv.getInteger('year')
    pw = inv.getResponse().getWriter()
    year_finish = datetime.datetime(year, 4, 1, tzinfo=pytz.utc) - HH
    year_start = datetime.datetime(year, 4, 1, tzinfo=pytz.utc) - relativedelta(years=1)

    def triad_csv(supply_source):
        if supply_source is None or supply_source.mpan_core.startswith('99'):
            return [''] * 19

        duos.duos_vb(supply_source)
        triad.triad_bill(supply_source)

        bill = supply_source.supplier_bill
        values = [supply_source.mpan_core]
        for i in range(1, 4):
            triad_prefix = 'triad-actual-' + str(i)
            for suffix in ['-date', '-msp-kw', '-status', '-laf', '-gsp-kw']:
                #supply_source.pw.println("looking for " + triad_prefix + suffix)
                values.append(bill[triad_prefix + suffix])
        #supply_source.pw.println("values so far" + str(values))
    
        values += [bill['triad-actual-' + suf] for suf in ['gsp-kw', 'rate', 'gbp']]
        return values


    pw.println("Site Code, Site Name, Supply Name, Source, Generator Type, Import MPAN Core, Import T1 Date, Import T1 MSP kW, Import T1 Status, Import T1 LAF, Import T1 GSP kW, Import T2 Date, Import T2 MSP kW, Import T2 Status, Import T2 LAF, Import T2 GSP kW, Import T3 Date, Import T3 MSP kW, Import T3 Status, Import T3 LAF, Import T3 GSP kW, Import GSP kW, Import Rate GBP / kW, Import GBP, Export MPAN Core, Export T1 Date, Export T1 MSP kW, Export T1 Status, Export T1 LAF, Export T1 GSP kW, Export T2 Date, Export T2 MSP kW, Export T2 Status, Export T2 LAF, Export T2 GSP kW, Export T3 Date, Export T3 MSP kW, Export T3 Status, Export T3 LAF, Export T3 GSP kW, Export GSP kW, Export Rate GBP / kW, Export GBP")
    pw.flush()

    forecast_date = computer.forecast_date()
    eras = sess.query(Era).join(Supply).join(Source).join(Pc).filter(Era.start_date<=year_finish, or_(Era.finish_date==None, Era.finish_date>=year_finish), Source.code.in_(('net', 'gen-net')), Pc.code=='00').order_by(Supply.id)

    if inv.hasParameter('supply_id'):
        supply_id = inv.getLong('supply_id')
        eras = eras.filter(Supply.id==supply_id)

    for era in eras:
        site = sess.query(Site).join(SiteEra).filter(SiteEra.is_physical==True, SiteEra.era_id==era.id).one()
        supply = era.supply
        pw.print(site.code + ',"' + site.name + '","' + supply.name + '",' + supply.source.code)
        pw.flush()

        imp_mpan_core = era.imp_mpan_core
        if imp_mpan_core is None:
            imp_supply_source = None
        else:
            imp_supply_source = computer.SupplySource(sess, year_finish, year_finish, forecast_date, era, True, pw, caches)

        exp_mpan_core = era.exp_mpan_core
        if exp_mpan_core is None:
            exp_supply_source = None
        else:
            exp_supply_source = computer.SupplySource(sess, year_finish, year_finish, forecast_date, era, False, pw, caches)
        
        gen_type = supply.generator_type
        gen_type = '' if gen_type is None else gen_type.code
        #pw.println("imp csv" + str(triad_csv(imp_supply_source)))
        for value in [gen_type] + triad_csv(imp_supply_source) + triad_csv(exp_supply_source):
            pw.print(',"' + str(value) + '"')
        pw.println('')
        pw.flush()
    pw.close()
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[43]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[GSP Groups]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

groups_element = doc.createElement('gsp-groups')
source.appendChild(groups_element)
for group in Hiber.session().createQuery("from GspGroup group order by group.code").list():
    groups_element.appendChild(group.toXml(doc))]]></value>
		<value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    <xsl:value-of select="'Chellow'" />
                    &gt; GSP Groups
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'GSP Groups'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/gsp-groups/gsp-group">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/35/output/?gsp-group-id={@id}">
                                       <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[45]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Parties]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    parties = sess.query(Party).from_statement("select party.* from party, market_role where party.market_role_id = market_role.id order by party.name, market_role.code").all()
    render(inv, template, {'parties': parties})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; Parties</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt; Parties
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <thead>
        <th>Name</th>
        <th>Market Role</th>
        <th>Participant</th>
      </thead>
      <tbody>
        {% for party in parties %}
          <tr>
            <td>
              <a href="{{ context_path }}/reports/47/output/?party_id={{ party.id }}">{{ party.name }}</a>
            </td>
            <td>
              <a href="{{ context_path }}/reports/121/output/?market_role_id={{ party.market_role.id }}">{{ party.market_role.description }}</a>
            </td>
            <td>
              <a href="{{ context_path }}/reports/73/output/?participant_id={{ party.participant.id }}">{{ party.participant.code }}</a>
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[47]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Party]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    party_id = inv.getLong('party_id')
    party = Party.get_by_id(sess, party_id)
    render(inv, template, {'party': party})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; Parties &gt; {{ party.name }}</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/45/output/">Parties</a> &gt;
      {{ party.name }}
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tr>
        <th>Name</th>
        <td>{{ party.name }}</td>
      </tr>
      <tr>
        <th>Participant</th>
        <td><a href="{{ context_path }}/reports/73/output/?participant_id={{ party.participant.id }}">{{ party.participant.name }}</a>
        </td>
      </tr>
      <tr>
        <th>Role</th>
        <td>
          <a href="{{ context_path }}/reports/123/output/?market_role_id={{ party.market_role.id }}">{{ party.market_role.description }}</a>
        </td>
      </tr>
        {% if party.market_role.code == 'R' %}
          <tr>
            <th>DNO Code</th>
            <td>{{ party.dno_code }}</td>
          </tr>
        {% endif %}
    </table>
    <br />
    <table>
      <caption>Contracts</caption>
      <thead>
        <tr>
          <th>Name</th>
          <th>Start Date</th>
          <th>Finish Date</th>
        </tr>
      </thead>
      <tbody>
        {% for contract in party.contracts %}
          <tr>
            <td>
              {% if contract.market_role.code == 'C' %}
                <a href="{{ context_path }}/reports/113/output/?contract-id={{ contract.id }}">{{ contract.name }}</a>
              {% elif contract.market_role.code == 'R' %}
                <a href="{{ context_path }}/reports/113/output/?contract-id={{ contract.id }}">{{ contract.name }}</a>
              {% elif contract.market_role.code == 'X' %}
                <a href="{{ context_path }}/reports/77/output/?supplier-contract-id={{ contract.id }}">{{ contract.name }}</a>
              {% elif contract.market_role.code == 'M' %}
                <a href="{{ context_path }}/reports/107/output/?mop-contract-id={{ contract.id }}">{{ contract.name }}</a>
              {% endif %}
            </td>
            <td>{{ contract.start_rate_script.start_date|hh_format }}</td>
            <td>{{ contract.finish_rate_script.finish_date|hh_format }}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[49]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[DNO Contract LLFCs]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'Llfc', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    dno_contract_id = inv.getLong('dno_contract_id')
    contract = Contract.get_dno_by_id(sess, dno_contract_id)
    llfcs = sess.query(Llfc).from_statement("select * from llfc where dno_id = :dno_id order by code").params(dno_id=contract.party.id).all()
    render(inv, template, {'llfcs': llfcs, 'contract': contract})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>Chellow &gt; DNO Contracts &gt; {{contract.name}} &gt; LLFCs</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/137/output/">DNO Contracts</a> &gt;
      <a href="{{context_path}}/reports/67/output/?dno_contract_id={{contract.id}}">{{ contract.name }}</a>
      &gt; LLFCs
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <thead>
        <tr>
          <th>Code</th>
          <th>Description</th>
          <th>Voltage Level</th>
          <th>Is Substation?</th>
          <th>Is Import?</th>
        </tr>
      </thead>
      <tbody>
        {% for llfc in llfcs %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/51/output/?llfc_id={{llfc.id}}">{{llfc.code}}</a>
            </td>
            <td>{{llfc.description}}</td>
            <td>{{llfc.voltage_level.code}} - {{llfc.voltage_level.name}}</td>
            <td>
              {% if llfc.is_substation %}
                Has Substation
              {% else %}
                No Substation
              {% endif %}
            </td>
            <td>
              {% if llfc.is_import %}
                Import
              {% else %}
                Export
              {% endif %}
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[51]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[DNO Contract LLFC]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'Llfc', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    llfc_id = inv.getLong('llfc_id')
    llfc = Llfc.get_by_id(sess, llfc_id)
    dno_contract = Contract.get_dno_by_name(sess, llfc.dno.dno_code)
    render(inv, template, {'llfc': llfc, 'dno_contract': dno_contract})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>
      Chellow &gt; DNO Contracts &gt; {{dno_contract.name}} &gt;
      LLFCs &gt; {{llfc.code}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/137/output/">DNO Contracts</a> &gt;
      <a href="{{context_path}}/reports/67/output/?dno_contract_id={{ dno_contract.id}}">{{ dno_contract.name }}</a> &gt;
      <a href="{{context_path}}/reports/49/output/?dno_contract_id={{dno_contract.id}}">LLFCs</a>
      &gt; {{llfc.code}}
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tr>
        <th>Code</th>
        <td>{{llfc.code}}</td>
      </tr>
      <tr>
        <th>Description</th>
        <td>{{llfc.description}}</td>
      </tr>
      <tr>
        <th>Voltage Level</th>
        <td>{{llfc.voltage_level.code}} - {{llfc.voltage_level.name}}</td>
      </tr>
      <tr>
        <th>Is Substation?</th>
        <td>{{llfc.is_substation}}</td>
      </tr>
      <tr>
        <th>Is Import?</th>
        <td>{{llfc.is_import}}</td>
      </tr>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[53]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Profile Classes]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['impt'](globals(), 'templater', 'db')
Pc = db.Pc

sess = None
try:
    sess = db.session()
    pcs = sess.query(Pc).order_by(Pc.code)
    templater.render(inv, template, {'pcs': pcs})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; Profile Classes</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      Profile Classes
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <thead>
        <tr>
          <th>Code</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {% for pc in pcs %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/55/output/?pc_id={{pc.id}}">
                {{pc.code}}
              </a>
            </td>
            <td>{{pc.name}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[55]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Profile Class]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['impt'](globals(), 'templater', 'db')

sess = None
try:
    sess = db.session()
    pc_id = inv.getLong('pc_id')
    pc = db.Pc.get_by_id(sess, pc_id)
    templater.render(inv, template, {'pc': pc})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>Chellow &gt; Profile Classes &gt; {{pc.code}}</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/53/output/">Profile Classes</a> &gt;
      {{pc.code}}
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <tr>
        <th>Code</th>
        <td>{{pc.code}}</td>
      </tr>
      <tr>
        <th>Description</th>
        <td>{{pc.name}}</td>
      </tr>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[57]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Sites Duration Selector]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from datetime import datetime
from dateutil.relativedelta import relativedelta

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    init = datetime.utcnow()
    init = datetime(init.year, init.month, 1) - relativedelta(months=1)

    render(inv, template, {'init': init})

finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; CSV Sites Duration</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      CSV Sites Duration
    </p>
    
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    
    <form action="{{context_path}}/reports/59/output/">
      <fieldset>
        <legend>Download</legend>
        <br>
        For For {{input_text('months', 1, 2, 2)}}
        month(s) finishing at the end of
        {{input_date(None, init, resolution='month')}}
        <input type="submit" value="Download">
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[59]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Sites Duration]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.lang import System
from net.sf.chellow.monad.types import MonadDate
import math
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate

year = inv.getInteger("year")
month = inv.getInteger("month")
months = inv.getInteger("months")

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.clear()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.add(Calendar.MONTH, 1)
finish_date = HhStartDate(cal.getTime())
cal.add(Calendar.MONTH, -1 * months)
cal.add(Calendar.MINUTE, 30)
start_date = HhStartDate(cal.getTime())

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="output.csv"')
pw = inv.getResponse().getWriter()
pw.println("Site Id, Site Name, Associated Site Ids, Sources, Generator Types, From, To, Imported kWh, Displaced kWh, Exported kWh, Used kWh, Parasitic kWh, Generated kWh,Meter Type")
pw.flush()
sites = Hiber.session().createQuery("from Site site order by site.code").scroll()
while sites.next():
    query = Hiber.session().createQuery("select sum(datum.value) from HhDatum datum where datum.channel.era = :era and datum.channel.isImport is :isImport and datum.channel.isKwh is true and datum.channel.era.supply.source.code in (:sources) and datum.startDate.date >= :startDate and datum.startDate <= :finishDate")
    site = sites.get(0)
    site_code = site.getCode()
    associates = []
    sources = []
    generator_types = []
    has_physical = False
    site_supply_eras = Hiber.session().createQuery("from SiteEra siteEra where siteEra.site = :site and siteEra.isPhysical is true and siteEra.era.supply.source.code != 'sub' and siteEra.era.startDate.date <= :finishDate and (siteEra.era.finishDate is null or siteEra.era.finishDate.date >= :startDate)").setEntity('site', site).setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate()).scroll()
    import_from_net = 0
    export_to_net = 0
    import_from_gen = 0
    export_to_gen = 0
    metering_type = 'nhh'
    while site_supply_eras.next():
        has_physical = True
        site_supply_era = site_supply_eras.get(0)
        supply_era = site_supply_era.getEra()
        if metering_type == 'nhh' and supply_era.getChannels().size() > 0:
            metering_type = 'amr'
        if supply_era.getPc().getCode() == 0:
            metering_type = 'hh'
        for ss_gen in supply_era.getSiteEras():
            ss_gen_site_code = ss_gen.getSite().getCode()
            if ss_gen.getId() != site_supply_era.getId() and ss_gen_site_code != site_code and ss_gen_site_code not in associates:
                associates.append(ss_gen_site_code)
            sup = ss_gen.getEra().getSupply()
            ss_gen_source = sup.getSource().getCode()
            if ss_gen_source not in sources:
                sources.append(ss_gen_source)
            if sup.getGeneratorType() is not None:
                ss_gen_gtype = sup.getGeneratorType().getCode()
                if sup.getGeneratorType() not in generator_types:
                    generator_types.append(ss_gen_gtype)
        result = query.setEntity('era', supply_era).setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate()).setBoolean('isImport', True).setParameterList('sources', ['net', 'gen-net']).uniqueResult()
        if result is not None:
            import_from_net = import_from_net + result.doubleValue()
        result = query.setBoolean('isImport', False).uniqueResult()
        if result is not None:
            export_to_net = export_to_net + result.doubleValue()
        result = query.setParameterList('sources', ['gen']).uniqueResult()
        if result is not None:
            export_to_gen = export_to_gen + result.doubleValue()
        result = query.setParameterList('sources', ['gen-net']).uniqueResult()
        if result is not None:
            import_from_gen = import_from_gen + result.doubleValue()
        result = query.setBoolean('isImport', True).uniqueResult()
        if result is not None:
            export_to_gen = export_to_gen + result.doubleValue()
        result = query.setParameterList('sources', ['gen']).uniqueResult()
        if result is not None:
            import_from_gen = import_from_gen + result.doubleValue()
    if has_physical:
        associate_str = ''
        for associate in associates:
            associate_str = associate_str + associate + ', '
        sources.sort()
        sources_str = ''
        for source in sources:
            sources_str = sources_str + source + ', '
        generator_types.sort()
        generator_types_str = ''
        for generator_type in generator_types:
            generator_types_str = generator_types_str + generator_type + ', '
        displaced = import_from_gen - export_to_net - export_to_gen
        used = displaced + import_from_net
        pw.print('"' + site_code + '","')
        pw.print(site.getName() + '","')     
        pw.print(associate_str[:-2] + '","')
        pw.print(sources_str[:-2] + '","')
        pw.print(generator_types_str[:-2] + '",')
        pw.print(start_date.toString() + ',')
        pw.print(finish_date.toString() + ',')
        pw.print(str(round(import_from_net)))
        pw.print(',' + str(round(displaced)) + ',')
        pw.print(str(round(export_to_net)) + ',')
        pw.print(str(round(used)) + ',')
        pw.print(str(round(export_to_gen)) + ',')
        pw.print(str(round(import_from_gen)) + ',' + metering_type + '\n')
    pw.flush()
    Hiber.session().clear()
sites.close()
pw.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[61]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MTCs]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['impt'](globals(), 'templater', 'db')
Mtc, Party, Contract = db.Mtc, db.Party, db.Contract

sess = None
try:
    sess = db.session()
    mtcs = sess.query(Mtc, Contract).outerjoin(Mtc.dno).outerjoin(Contract).order_by(Mtc.code, Party.dno_code).all()
    templater.render(inv, template, {'mtcs': mtcs})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>Chellow &gt; MTCs</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt; MTCs
    </p>
    <br>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <thead>
        <tr>
          <th>Code</th>
          <th>Dno</th>
          <th>Description</th>
          <th>Meter Type</th>
          <th>TPR count</th>
        </tr>
      </thead>
      <tbody>
        {% for mtc, contract in mtcs %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/63/output/?mtc_id={{mtc.id}}">
                {{mtc.code}}
              </a>
            </td>
            <td>
              {% if mtc.dno %}
                <a href="{{context_path}}/reports/67/output/?dno_contract_id={{contract.id}}">
                  {{mtc.dno.dno_code}}
                </a>
              {% else %}
                All
              {% endif %}
            </td>
            <td>{{mtc.description}}</td>
            <td>
              <a href="{{context_path}}/reports/131/output/?meter_type_id={{mtc.meter_type.id}}">
                {{mtc.meter_type.code}}
              </a>
            </td>
            <td>{{mtc.tpr_count}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[63]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MTC]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['impt'](globals(), 'templater', 'db')
Mtc, Contract = db.Mtc, db.Contract

sess = None
try:
    sess = db.session()
    mtc_id = inv.getLong('mtc_id')
    mtc, dno_contract = sess.query(Mtc, Contract).outerjoin(Mtc.dno).outerjoin(Contract).filter(Mtc.id == mtc_id).one()
    templater.render(inv, template, {'mtc': mtc, 'dno_contract': dno_contract})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; MTCs &gt; {{mtc.code}}</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/61/output/">MTCs</a> &gt; {{mtc.code}}
    </p>
    <br>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <tr>
        <th>Code</th>
        <td>{{mtc.code}}</td>
      </tr>
      <tr>
        <th>DNO</th>
        <td>
          {% if dno_contract %}
            <a href="{{context_path}}/reports/67/output/?dno_contract_id={{dno_contract.id}}">
              {{dno_contract.name}}
            </a>
          {% else %}
            All
          {% endif %}
        </td>
      </tr>
      <tr>
        <th>Description</th>
        <td>{{mtc.description}}</td>
      </tr>
      <tr>
        <th>Has Related Metering?</th>
        <td>
          {% if mtc.has_related_metering == True %}
            Yes
          {% else %}
            No
          {% endif %}
        </td>
      </tr>
      <tr>
        <th>Has Comms?</th>
        <td>
          {% if mtc.has_comms == True %}
            Yes
          {% else %}
            No
          {% endif %}
        </td>
      </tr>
      <tr>
        <th>Measurement Class</th>
        <td>
          {% if mtc.is_hh == True %}
            HH
          {% else %}
            NHH
          {% endif %}
        </td>
      </tr>
      <tr>
        <th>Meter Type</th>
        <td>
          <a href="{{context_path}}/reports/131/output/?meter_type_id={{mtc.meter_type.id}}">
            {{mtc.meter_type.description}}
          </a>
        </td>
      </tr>
      <tr>
        <th>Payment Type</th>
        <td>
          <a href="{{context_path}}/reports/135/output/?meter_payment_type_id={{mtc.meter_payment_type.id}}">
            {{mtc.meter_payment_type.description}}
          </a>
        </td>
      </tr>
      <tr>
        <th>TPR Count</th>
        <td>{{mtc.tpr_count}}</td>
      </tr>
      <tr>
        <th>Valid From</th>
        <td>{{mtc.valid_from}}</td>
      </tr>
      <tr>
        <th>Valid To</th>
        <td>{{mtc.valid_to}}</td>
      </tr>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[65]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Contract HH Data Import]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render'],
        'hh_importer': ['get_hh_import_processes']})

sess = None
try:
    sess = session()
    contract_id = inv.getLong('hhdc_contract_id')
    contract = Contract.get_hhdc_by_id(sess, contract_id)
    process_id = inv.getLong('process_id')
    process = get_hh_import_processes(contract_id)[process_id]

    render(inv, template, {'contract': contract, 'process': process})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; HHDC Contracts &gt; {{contract.name}} &gt;
      HH Data Imports &gt; {{process.id}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{context_path}}/reports/115/output/?hhdc_contract_id={{contract.id}}">{{contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/211/output/?hhdc_contract_id={{contract.id}}">HH Data Imports</a> &gt;
      {{process.id}}
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    {% if process.isAlive() %}
      <p>Reached line number {{process.converter.line_number}}.</p>
    {% elif process.messages|length == 0 %}
      <p>The import has completed successfully.</p>
    {% else %}
      <p>The import failed:</p>
      <ul>
        {% for message in process.messages %}
          <li>{{message}}</li>
        {% endfor %}
      </ul>
    {% endif %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[67]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[DNO Contract]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.util import Properties
from java.io import StringReader
from net.sf.chellow.physical import Configuration
from net.sf.chellow.ui import Report
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    contract_id = inv.getLong('dno_contract_id')
    contract = Contract.get_dno_by_id(sess, contract_id)
    rate_scripts = sess.query(RateScript).from_statement("select * from rate_script where rate_script.contract_id = :contract_id order by start_date desc").params(contract_id=contract_id).all()
    config = Configuration.getConfiguration()
    properties = Properties()
    properties.load(StringReader(config.getProperties()))

    reports = []
    for key in properties.propertyNames():
        if key.startswith('dno.report.'):
            dno_report_id = properties.get(key)
            if dno_report_id is not None:
                reports.append(Report.getReport(int(dno_report_id)))

    render(inv, template, {'contract': contract, 'rate_scripts': rate_scripts, 'reports': reports})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>Chellow &gt; DNO Contracts &gt; {{contract.name}}</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/137/output/">DNO Contracts</a> &gt;
      {{ contract.name }}
      [<a href="{{context_path}}/reports/139/output/?dno_contract_id={{contract.id}}">edit</a>]
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tbody>
        <tr>
          <th>Name</th>
          <td>{{contract.name}}</td>
        </tr>
        <tr>
          <th>Start Date</th>
          <td>{{ contract.start_rate_script.start_date|hh_format }}</td>
        </tr>
        <tr>
          <th>Finish Date</th>
          <td>{{ contract.finish_rate_script.start_date|hh_format }}</td>
        </tr>
        <tr>
          <th>Custom Reports</th>
          <td>
            <ul>
              {% for report in custom_reports %}
                <li>
                  <a href="{{context_path}}/reports/{{ report.id }}/output/?dno_id={{contract.id}}">{{report.name}}</a>
                </li>
              {% endfor %}
            </ul>
          </td>
        </tr>
        <tr>
          <th>Party</th>
          <td>
            <a href="{{context_path}}/reports/47/output/?party_id={{ contract.party.id }}">{{ contract.party.name }}</a>
          </td>
        </tr>
        <tr>
          <th>Line Loss Factor Classes</th>
          <td>
            <a href="{{context_path}}/reports/49/output/?dno_contract_id={{ contract.id }}">LLFCs</a>
          </td>
        </tr>
      </tbody>
    </table>

    <br/>
    <table>
      <caption>
        Rate Scripts
        [<a href="{{context_path}}/reports/243/output/?dno_contract_id={{contract.id}}">add</a>]
      </caption>
      <thead>
        <tr>
          <th></th>
          <th>From</th>
          <th>To</th>
        </tr>
      </thead>
      <tbody>
        {% for rate_script in rate_scripts %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/69/output/?dno_rate_script_id={{rate_script.id}}">View</a>
            </td>
            <td>{{ rate_script.start_date|hh_format }}</td>
            <td>{{ rate_script.finish_date|hh_format }}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>

    <h2>Script</h2>
    <pre>{{ contract.charge_script }}</pre>

  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[69]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[DNO Contract Rate Script]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    rate_script_id = inv.getLong('dno_rate_script_id')
    rate_script = RateScript.get_dno_by_id(sess, rate_script_id)
    render(inv, template, {'rate_script': rate_script})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; DNO Contracts &gt; {{rate_script.contract.name}} &gt;
      {{rate_script.start_date|hh_format}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/137/output/">DNO Contracts</a> &gt;
      <a href="{{context_path}}/reports/67/output/?dno_contract_id={{rate_script.contract.id}}">{{rate_script.contract.name}}</a> &gt;
      {{rate_script.start_date|hh_format}}
      [<a href="{{context_path}}/reports/285/output/?dno_rate_script_id={{rate_script.id}}">edit</a>]
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tbody>
        <tr>
          <th>Start Date</th>
          <td>{{rate_script.start_date|hh_format}}</td>
        </tr>
        <tr>
          <th>Finish Date</th>
          <td>{{rate_script.finish_date|hh_format}}</td>
        </tr>
      </tbody>
    </table>

    <h2>Script</h2>

    <pre>{{rate_script.script}}</pre>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[71]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Participants]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'Participant', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    participants = sess.query(Participant).from_statement("select * from participant order by participant.code").all()
    render(inv, template, {'participants': participants})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; Participants</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      Participants
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <thead>
        <tr>
          <th>Code</th>
          <th>Name</th>
        </tr>
      </thead>
      <tbody>
        {% for participant in participants %}
          <tr>
            <td>
              <a href="{{ context_path }}/reports/73/output/?participant_id={{ participant.id }}">{{ participant.code }}</a>
            </td>
            <td>{{ participant.name }}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[73]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Participant]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'Participant', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    participant_id = inv.getLong('participant_id')
    participant = Participant.get_by_id(sess, participant_id)
    render(inv, template, {'participant': participant})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; Market Participants &gt; {{ participant.name}}</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/71/output/">Market Participants</a>
      &gt; {{ participant.name }}
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tbody>
        <tr>
          <th>Code</th>
          <td>{{ participant.code }}</td>
        </tr>
        <tr>
          <th>Name</th>
          <td>{{ participant.name }}</td>
        </tr>
      </tbody>
    </table>
    <br/>
    <table>
      <caption>Parties</caption>
      <thead>
        <tr>
          <th>Name</th>
          <th>Market Role</th>
          <th>DNO Code</th>
        </tr>
      </thead>
      <tbody>
        {% for party in participant.parties %}
          <tr>
            <td>
              <a href="{{ context_path }}/reports/47/output/?party_id={{ party.id }}">{{ party.name }}</a>
            </td>
            <td>
              <a href="{{ context_path }}/reports/123/output/?market_role_id={{ party.market_role.id }}">{{ party.market_role.description }}</a>
            </td>
            <td>
              {% if party.market_role.code == 'R' %}
                {{ party.dno_code }}
              {% endif %}
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[75]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Contracts]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'MarketRole', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    contracts = sess.query(Contract).join(MarketRole).filter(MarketRole.code == 'X').order_by(Contract.name)
    render(inv, template, {'contracts': contracts})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; Supplier Contracts</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      Supplier Contracts
      [<a href="{{context_path}}/reports/315/output/">add</a>]
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Start Date</th>
          <th>Finish Date</th>
          <th>Party</th>
        </tr>
      </thead>
      <tbody>
        {% for contract in contracts %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{contract.id}}">{{contract.name}}</a>
            </td>
            <td>{{contract.start_rate_script.start_date|hh_format}}</td>
            <td>{{contract.finish_rate_script.finish_date|hh_format}}</td>
            <td>
              <a href="{{context_path}}/reports/47/output/?party_id={{contract.party.id}}">{{contract.party.name}}</a>
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[77]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Contract]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import datetime
from dateutil.relativedelta import relativedelta

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()

    contract_id = inv.getLong('supplier_contract_id')
    if contract_id is None:
        contract_id = inv.getLong('supplier-contract-id')
    contract = Contract.get_supplier_by_id(sess, contract_id)
    rate_scripts = sess.query(RateScript).filter(RateScript.contract_id==contract.id).order_by(RateScript.start_date).all()

    now = datetime.datetime.utcnow() - relativedelta(months=1)
    month_start = datetime.datetime(now.year, now.month, 1)
    month_finish = month_start + relativedelta(months=1) - relativedelta(minutes=30)

    render(inv, template, {'contract': contract, 'month_start': month_start, 'month_finish': month_finish, 'rate_scripts': rate_scripts})

finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/" />
    <title>Chellow &gt; Supplier Contracts &gt; {{ contract.name }}</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/75/output/">Supplier Contracts</a>
      &gt; {{ contract.name }}
      [<a href="{{context_path}}/reports/317/output/?supplier_contract_id={{contract.id}}">edit</a>]
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <tbody>
        <tr>
          <th>Name</th>
          <td>{{ contract.name }}</td>
        </tr>
        <tr>
          <th>Supplier</th>
          <td>
            <a href="{{ context_path }}/reports/47/output/?party_id={{ contract.party.id }}">{{ contract.party.name }}</a>
          </td>
        </tr>
        <tr>
          <th>Start Date</th>
          <td>{{rate_scripts[0].start_date|hh_format}}</td>
        </tr>
        <tr>
          <th>Finish Date</th>
          <td>{{rate_scripts[-1].finish_date|hh_format}}</td>
        </tr>
      </tbody>
    </table>
    <br />
    <table>
      <caption>
        Rate Scripts [<a href="{{context_path}}/reports/325/output/?supplier_contract_id={{contract.id}}">add</a>]
      </caption>
      <thead>
        <tr>
          <th></th>
          <th>From</th>
          <th>To</th>
        </tr>
      </thead>
      <tbody>
        {% for rate_script in rate_scripts %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/79/output/?supplier_rate_script_id={{rate_script.id}}">view</a>
            </td>
            <td>{{rate_script.start_date|hh_format}}</td>
            <td>{{rate_script.finish_date|hh_format}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>

    <ul>
      <li>
        <a href="{{context_path}}/reports/89/output/?supplier_contract_id={{ contract.id }}">Batches</a>
      </li>
    </ul>

    <h3>CSV Downloads</h3>

    <form action="{{context_path}}/reports/87/output/">
      <fieldset>
        <input type="hidden" name="supplier_contract_id" value="{{contract.id}}"/>
        <legend>Download Supply Level Virtual Bills</legend>
        <br/>
        From {{ input_date('start', month_start) }} to
        {{ input_date('finish', month_finish) }}
        <input type="submit" value="Download"/>
      </fieldset>
    </form>
    <br/>
    <form action="{{context_path}}/reports/109/output/">
      <fieldset>
        <input type="hidden" name="supplier_contract_id" value="{{contract.id}}">
        <legend>Download Displaced Virtual Bills</legend>
        <br/>
        For <input name="months" value="1" maxlength="2" size="2">
        month(s) until the end of
        {{ input_date('finish', month_finish, 'month') }}
        <input type="submit" value="Download">
      </fieldset>
    </form>
    <br/>

    <h3>Script</h3>
    <pre>{{ contract.charge_script }}</pre>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[79]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Rate Script]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    rate_script_id = inv.getLong('supplier_rate_script_id')
    rate_script = RateScript.get_supplier_by_id(sess, rate_script_id)
    render(inv, template, {'rate_script': rate_script})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/" />
    <title>
      Chellow &gt; Supplier Contracts &gt; {{ rate_script.contract.name }}
      &gt; Rate Script {{ rate_script.id }}
    </title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/75/output/">Supplier Contracts</a>
      &gt;
      <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{rate_script.contract.id}}">{{rate_script.contract.name}}</a> &gt; Rate Script
      {{rate_script.start_date|hh_format}}
      [<a
      href="{{context_path}}/reports/319/output/?supplier_rate_script_id={{ rate_script.id}}">edit</a>]
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <tr>
        <th>Start Date</th>
        <td>{{ rate_script.start_date|hh_format }}</td>
      </tr>
      <tr>
        <th>Finish Date</th>
        <td>{{ rate_script.finish_date|hh_format }}</td>
      </tr>
    </table>

    <h2>Script</h2>

    <pre>{{rate_script.script}}</pre>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[81]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Contract Virtual Bills]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import datetime
import pytz
from sqlalchemy import or_
from dateutil.relativedelta import relativedelta

Monad.getUtils()['impt'](globals(), 'computer', 'db', 'utils')

hh_before, HH, hh_format = utils.hh_before, utils.HH, utils.hh_format
Contract, Era = db.Contract, db.Era

caches = {}

sess = None
try:
    sess = db.session()

    inv.getResponse().setContentType("text/csv")
    inv.getResponse().setHeader('Content-Disposition', 'attachment;filename="hhdc_vbs.csv"')
    pw = inv.getResponse().getWriter()
    end_year = inv.getInteger("end_year")
    end_month = inv.getInteger("end_month")
    months = inv.getInteger("months")
    contract_id = inv.getLong('hhdc_contract_id')

    contract = Contract.get_by_id(sess, contract_id)

    finish_date = datetime.datetime(end_year, end_month, 1, tzinfo=pytz.utc) + relativedelta(months=1) - HH

    start_date = datetime.datetime(end_year, end_month, 1, tzinfo=pytz.utc) - relativedelta(months=months - 1)

    forecast_date = computer.forecast_date()

    pw.print('Import MPAN Core, Export MPAN Core, Start Date, Finish Date')
    bill_titles = computer.contract_func(caches, contract, 'virtual_bill_titles', pw)()
    for title in bill_titles:
        pw.print(',' + title)
    pw.println('')
    pw.flush()

    for era in sess.query(Era).distinct().join(Era.hhdc_contract).filter(or_(Era.finish_date==None,Era.finish_date>=start_date), Era.start_date<=finish_date, Contract.id==contract.id).order_by(Era.supply_id):
        imp_mpan_core = era.imp_mpan_core
        if imp_mpan_core is None:
            imp_mpan_core_str = ''
            is_import = False
        else:
            is_import = True
            imp_mpan_core_str = imp_mpan_core

        exp_mpan_core = era.exp_mpan_core
        exp_mpan_core_str = '' if exp_mpan_core is None else exp_mpan_core

        if era.start_date > start_date:
            chunk_start = era.start_date
        else:
            chunk_start = start_date

        if hh_before(era.finish_date, finish_date):
            chunk_finish = era.finish_date
        else:
            chunk_finish = finish_date

        pw.print(imp_mpan_core_str + ',' + exp_mpan_core_str + ',' + hh_format(chunk_start) + ',' + hh_format(chunk_finish) + ',')
        supply_source = computer.SupplySource(sess, chunk_start, chunk_finish, forecast_date, era, is_import, pw, caches)
        bill = supply_source.contract_func(contract, 'virtual_bill')(supply_source)
        for title in bill_titles:
            pw.print('"' + str(bill.get(title, '')) + '",')
            if title in bill:
                del bill[title]
        keys = bill.keys()
        keys.sort()
        for k in keys:
            pw.print(',"' + k + '","' + str(bill[k]) + '"')
        pw.println('')
        pw.flush()

    pw.close()
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[83]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MOP Rate Script Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        rate_script_id = inv.getLong('mop_rate_script_id')
        rate_script = RateScript.get_mop_by_id(sess, rate_script_id)
        render(inv, template, {'rate_script': rate_script})
    else:
        set_read_write(sess)
        rate_script_id = inv.getLong('mop_rate_script_id')
        rate_script = RateScript.get_mop_by_id(sess, rate_script_id)
        contract = rate_script.contract
        if inv.hasParameter('delete'):
            contract.delete_rate_script(sess, rate_script)
            sess.commit()
            inv.sendSeeOther('/reports/107/output/?mop_contract_id='
                + str(contract.id))
        else:
            try:
                script = inv.getString('script')
                start_date = form_date(inv, 'start')
                if inv.hasParameter('has_finished'):
                    finish_date = form_date(inv, 'finish')
                else:
                    finish_date = None
                contract.update_rate_script(sess, rate_script, start_date, finish_date, script)
                sess.commit()
                inv.sendSeeOther('/reports/205/output/?mop_rate_script_id='
                        + str(rate_script.id))
            except UserException, e:
                render(inv, template, {'rate_script': rate_script, 'messages': [str(e)]}, 400)          
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; MOP Contracts &gt;
      {{ rate_script.contract.name }} &gt;
      {{ rate_script.start_date|hh_format }} &gt; Edit
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/185/output/">MOP Contracts</a> &gt;
      <a href="{{context_path}}/reports/107/output/?mop_contract_id={{rate_script.contract.id}}">{{rate_script.contract.name }}</a> &gt;
      <a href="{{context_path}}/reports/205/output/?mop_rate_script_id={{rate_script.id}}">{{rate_script.start_date|hh_format }}</a> &gt; Edit
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    {% if request.getMethod() == 'GET' and
        request.getParameter('delete') %}
      <form method="post" action=".">
        <fieldset>
          <legend>
            Are you sure you want to delete this rate script?
          </legend>
          <input type="hidden" name="mop_rate_script_id"
              value="{{rate_script.id}}">
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p>
        <a href="{{context_path}}/reports/205/output/?mop_rate_script_id={{rate_script_id}}">Cancel</a>
      </p>
    {% else %}
      <form action="." method="post">
        <fieldset>
          <legend>Update Rate Script</legend>
          <input type="hidden" name="mop_rate_script_id"
              value="{{rate_script.id}}">
          <br>
          <fieldset>
            <legend>Start date</legend>
            {{input_date('start', rate_script.start_date)}}
          </fieldset>
          <br />
          <fieldset>
            <legend>Finish date</legend>
            <label>
              Ended? {{input_checkbox('has_finished', rate_script.finish_date != None)}}
            </label>
            {{input_date('finish', rate_script.finish_date)}}
          </fieldset>
          <br>
          <br>
          Script
          <br>
          {{input_textarea('script', rate_script.script, 40, 80)}}
          <br />
          <br />
          <input type="submit" value="Update">
        </fieldset>
      </form>
      <br>
      <form action=".">
        <fieldset>
          <legend>Delete this Rate Script</legend>
          <input type="hidden" name="mop_rate_script_id"
              value="{{rate_script.id}}">
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[85]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CoPs]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['impt'](globals(), 'templater', 'db')
Cop = db.Cop

sess = None
try:
    sess = db.session()
    cops = sess.query(Cop).order_by(Cop.code)
    templater.render(inv, template, {'cops': cops})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; CoPs</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt; CoPs
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <thead>
        <tr>
          <th>Code</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {% for cop in cops %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/197/output/?cop_id={{cop.id}}">
                {{cop.code}}
              </a>
            </td>
            <td>{{cop.description}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[87]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Import Virtual Bills]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import System
from dateutil.relativedelta import relativedelta
import datetime
import pytz
from sqlalchemy import or_

Monad.getUtils()['impt'](globals(), 'utils', 'db', 'computer')

Contract, Era, Site, SiteEra = db.Contract, db.Era, db.Site, db.SiteEra
HH, hh_after, hh_format = utils.HH, utils.hh_after, utils.hh_format

caches = {}

sess = None

try:
    sess = db.session()

    inv.getResponse().setContentType("text/csv")
    inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="virtual_bills.csv"')
    pw = inv.getResponse().getWriter()

    start_date = utils.form_date(inv, 'start')
    finish_date = utils.form_date(inv, 'finish')

    contract_id = inv.getLong('supplier_contract_id')
    contract = Contract.get_supplier_by_id(sess, contract_id)

    forecast_date = computer.forecast_date()
    timing = System.currentTimeMillis()

    month_start = datetime.datetime(start_date.year, start_date.month, 1, tzinfo=pytz.utc)

    month_finish = month_start + relativedelta(months=1) - HH

    bill_titles = computer.contract_func(caches, contract, 'virtual_bill_titles', pw)()
    pw.print('MPAN Core,Site Code,Site Name,Account,From,To,' + ','.join(bill_titles))
    pw.println('')
    pw.flush()

    while not month_start > finish_date:
        period_start = start_date if month_start < start_date else month_start

        if month_finish > finish_date:
            period_finish = finish_date
        else:
            period_finish = month_finish

        for era in sess.query(Era).distinct().filter(or_(Era.imp_supplier_contract_id==contract.id, Era.exp_supplier_contract_id==contract.id), Era.start_date<=period_finish, or_(Era.finish_date==None, Era.finish_date>=period_start)):

            era_start = era.start_date
            if period_start < era_start:
                chunk_start = era_start
            else:
                chunk_start = period_start
            era_finish = era.finish_date
            if hh_after(period_finish, era_finish):
                chunk_finish = era_finish
            else:
                chunk_finish = period_finish
            
            polarities = []
            if era.imp_supplier_contract == contract:
                polarities.append(True)
            if era.exp_supplier_contract == contract:
                polarities.append(False)
            for polarity in polarities:
                data_source = computer.SupplySource(sess, chunk_start, chunk_finish, forecast_date, era, polarity, pw, caches)
            
                site = sess.query(Site).join(SiteEra).filter(SiteEra.era_id==era.id, SiteEra.is_physical==True).one()

                pw.print(','.join('"' + str(value) + '"' for value in [data_source.mpan_core, site.code , site.name, data_source.supplier_account, hh_format(data_source.start_date), hh_format(data_source.finish_date)]))
                pw.flush()

                computer.contract_func(caches, contract, 'virtual_bill', pw)(data_source)
                bill = data_source.supplier_bill
                for title in bill_titles:
                    pw.print(',"' + str(bill.get(title, '')) + '"')
                    if title in bill:
                        del bill[title]
                keys = bill.keys()
                keys.sort()
                for k in keys:
                    pw.print(',"' + k + '","' + str(bill[k]) + '"')
                pw.println('')
                pw.flush()

        month_start += relativedelta(months=1)
        month_finish = month_start + relativedelta(months=1) - HH
    pw.close()
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[89]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Batches]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Batch'], 
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH'],
        'templater': ['render']})


sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        contract_id = inv.getLong('supplier_contract_id')
        if contract_id is None:
            contract_id = inv.getLong('supplier-contract-id')
        contract = Contract.get_supplier_by_id(sess, contract_id)
        batches = sess.query(Batch).filter(Batch.contract == contract).order_by(Batch.reference.desc())
        render(inv, template, {'contract': contract, 'batches': batches})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>
      Chellow &gt; Supplier Contracts &gt; {{contract.name}} &gt; Batches
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/75/output/">Supplier Contracts</a> &gt;
      <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{contract.id}}">{{contract.name}}</a> &gt;
      Batches
      [<a href="{{context_path}}/reports/287/output/?supplier_contract_id={{contract.id}}">add</a>]
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <caption>Batches</caption>
      <thead>
        <tr>
          <th>Reference</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {% for batch in batches %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/91/output/?supplier_batch_id={{batch.id}}">{{batch.reference}}</a>
            </td>
            <td>{{batch.description}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[91]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Batch]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Batch', 'Participant', 'set_read_write', 'session', 'Bill', 'Report'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})


sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        batch_id = inv.getLong('supplier_batch_id')
        if batch_id is None:
            batch_id = inv.getLong('batch-id')
        batch = Batch.get_by_id(sess, batch_id)
        bills = sess.query(Bill).filter(Bill.batch == batch).order_by(Bill.reference, Bill.start_date).all()
        config_contract = Contract.get_non_core_by_name(sess, 'configuration')
        properties = config_contract.make_properties()
        fields = {'batch': batch, 'bills': bills}
        if 'batch_reports' in properties:
            batch_reports = []
            for report_id in properties['batch_reports']:
                batch_reports.append(Report.get_by_id(sess, report_id))
            fields['batch_reports'] = batch_reports
        render(inv, template, fields)
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Supplier Contracts &gt; {{batch.contract.name}} &gt;
      Batches &gt; {{batch.reference}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/75/output/">Supplier Contracts</a> &gt;
      <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{batch.contract.id}}">{{batch.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/89/output/?supplier_contract_id={{batch.contract.id}}">Batches</a> &gt;
      {{batch.reference}}
      [<a href="{{context_path}}/reports/289/output/?supplier_batch_id={{batch.id}}">edit</a>]
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tr>
        <th>Reference</th>
        <td>{{batch.reference}}</td>
      </tr>
      <tr>
        <th>Description</th>
        <td>{{batch.description}}</td>
      </tr>
      <tr>
        <th>Number Of Bills</th>
        <td>{{ bills|length }}</td>
      </tr>
      {% if batch_reports %}
        <tr>
          <th>Custom Reports</th>
          <td>
            <ul>
              {% for report in batch_reports %}
                <li>
                  <a href="{{context_path}}/reports/{{report.id}}/output/?batch_id={{batch.id}}">{{report.name}}</a>
                </li>
              {% endfor %}
            </ul>
          </td>
        </tr>
      {% endif %}
    </table>
    <br>
    <ul>
      <li>
        <a href="{{context_path}}/reports/111/output/?batch_id={{batch.id}}">Check Bills</a>
      </li>
      <li>
        <a href="{{context_path}}/reports/321/output/?supplier_batch_id={{batch.id}}">Bill Imports</a>
      </li>
    </ul>
    <table>
      <caption>
        Bills
        [<a href="{{context_path}}/reports/313/output/?supplier_batch_id={{batch.id}}">add</a>]
      </caption>
      <thead>
        <tr>
          <th>View</th>
          <th>Reference</th>
          <th>Account</th>
          <th>Issued</th>
          <th>From</th>
          <th>To</th>
          <th>kWh</th>
          <th>Net</th>
          <th>VAT</th>
          <th>Gross</th>
          <th>Type</th>
        </tr>
      </thead>
      <tbody>
        {% for bill in bills %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/105/output/?supplier_bill_id={{bill.id}}">View</a>
            </td>
            <td>{{bill.reference}}</td>
            <td>{{bill.account}}</td>
            <td>{{bill.issue_date|hh_format}}</td>
            <td>{{bill.start_date|hh_format}}</td>
            <td>{{bill.finish_date|hh_format}}</td>
            <td>{{bill.kwh}}</td>
            <td>{{bill.net}}</td>
            <td>{{bill.vat}}</td>
            <td>{{bill.gross}}</td>
            <td>
              <a href="{{context_path}}/reports/201/output/?bill_type_id={{bill.bill_type.id}}" title="{{bill.bill_type.description}}">{{bill.bill_type.code}}</a>
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[93]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Batches]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')
Contract, Batch = db.Contract, db.Batch

sess = None
try:
    sess = db.session()
    if inv.getRequest().getMethod() == 'GET':
        contract_id = inv.getLong('hhdc_contract_id')
        contract = Contract.get_hhdc_by_id(sess, contract_id)
        batches = sess.query(Batch).filter(Batch.contract_id == contract.id).order_by(Batch.reference.desc()).all()
        templater.render(inv, template, {'contract': contract, 'batches': batches})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>
      Chellow &gt; HHDC Contracts &gt; {{ contract.name }} &gt; Batches
    </title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{ context_path }}/reports/115/output/?hhdc_contract_id={{ contract.id }}">{{ contract.name }}</a> &gt;
      Batches
      [<a href="{{ context_path }}/reports/281/output/?hhdc_contract_id={{ contract.id }}">add</a>]
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <caption>Batches</caption>
      <thead>
        <tr>
          <th>Reference</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {% for batch in batches %}
          <tr>
            <td>
              <a href="{{ context_path }}/reports/203/output/?hhdc_batch_id={{ batch.id }}">
                {{ batch.reference }}
              </a>
            </td>
            <td>{{ batch.description }}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[95]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[TPRs]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'Tpr', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    tprs = sess.query(Tpr).order_by(Tpr.code).all()
    render(inv, template, {'tprs': tprs})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
        href="{{ context_path }}/reports/19/output/" />
    <title>Chellow &gt; TPRs</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt; TPRs
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <ul>
      {% for tpr in tprs %}
        <li>
          <a href="{{ context_path }}/reports/97/output/?tpr_id={{ tpr.id }}">{{ tpr.code }}</a>
        </li>
      {% endfor %}
    </ul>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[97]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[TPR]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'Tpr', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    tpr_id = inv.getLong('tpr_id')
    tpr = Tpr.get_by_id(sess, tpr_id)
    render(inv, template, {'tpr': tpr})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/" />
    <title>Chellow &gt; TPRs &gt; {{ tpr.code }}</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/95/output/">TPRs</a> &gt;
      {{ tpr.code }}
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <tr>
        <th>Code</th>
        <td>{{tpr.code}}</td>
      </tr>
      <tr>
        <th>Teleswitch or Clock</th>
        <td>
          {% if tpr.is_teleswitch %}
            Teleswitch
          {% else %}
            Clock
          {% endif %}
        </td>
      </tr>
      <tr>
        <th>GMT or Clock Time</th>
        <td>
          {% if tpr.is_gmt %}
            GMT
          {% else %}
            Clock Time
          {% endif %}
        </td>
      </tr>
    </table>
    
    <br />
    <table>
      <caption>Clock Intervals</caption>
      <thead>
        <tr>
          <th>Day Of Week</th>
          <th>Start Day</th>
          <th>Start Month</th>
          <th>End Day</th>
          <th>End Month</th>
          <th>Start Hour</th>
          <th>Start Minute</th>
          <th>End Hour</th>
          <th>End Minute</th>
        </tr>
      </thead>
      <tbody>
        {% for ci in tpr.clock_intervals %}
          <tr>
            <td>{{ ci.day_of_week }}</td>
            <td>{{ ci.start_day}}</td>
            <td>{{ ci.start_month }}</td>
            <td>{{ ci.end_day }}</td>
            <td>{{ ci.end_month }}</td>
            <td>{{ ci.start_hour }}</td>
            <td>{{ ci.start_minute }}</td>
            <td>{{ ci.end_hour }}</td>
            <td>{{ ci.end_minute }}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>

    <h3>SSCs</h3>

    <ul>
      {% for mr in tpr.measurement_requirements %}
        <li>
          <a href="{{ context_path }}/reports/127/output/?ssc_id={{ mr.ssc.id }}">{{ mr.ssc.code }}</a>
        </li>
      {% endfor %}
    </ul>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[99]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplies]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'Era', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    if inv.hasParameter('search_pattern'):
        pattern = inv.getString("search_pattern")
        pattern = pattern.strip()
        reduced_pattern = pattern.replace(" ", "")
        if inv.hasParameter("max_results"):
            max_results = inv.getInteger('max_results')
        else:
            max_results = 50
        eras = sess.query(Era).from_statement("select e1.* from era as e1 inner join (select e2.supply_id, max(e2.start_date) as max_start_date from era as e2 where replace(lower(e2.imp_mpan_core), ' ', '') like lower(:reducedPattern) or lower(e2.imp_supplier_account) like lower(:pattern) or replace(lower(e2.exp_mpan_core), ' ', '') like lower(:reducedPattern) or lower(e2.exp_supplier_account) like lower(:pattern) or lower(e2.hhdc_account) like lower(:pattern) or lower(e2.mop_account) like lower(:pattern) or lower(e2.msn) like lower(:pattern) group by e2.supply_id) as sq on e1.supply_id = sq.supply_id and e1.start_date = sq.max_start_date limit :max_results").params(pattern="%" + pattern + "%", reducedPattern="%" + reduced_pattern + "%", max_results=max_results).all()
        if len(eras) == 1:
            inv.sendTemporaryRedirect("/reports/7/output/?supply_id=" + str(eras[0].supply.id))
        else:
            render(inv, template, {'eras': eras, 'max_results': max_results})
    else:
        render(inv, template, {})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>Chellow &gt; Supplies</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt; Supplies
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <form action="{{context_path}}/reports/99/output/">
      <fieldset>
        <legend>
          Search for supply eras by MPAN core, account number or meter serial
          number
        </legend>
        {{input_text('search_pattern', '')}}
        <input type="submit" value="Search">
      </fieldset>
    </form>
    {% if eras %}
      <p>
        Only the first {{max_results}} supply eras of the search results are shown.
      </p>
      <table>
        <caption>Supplies</caption>
        <thead>
          <tr>
            <th rowspan="3">Supply</th>
            <th rowspan="3">Meter Serial Number</th>
            <th colspan="2">HHDC</th>
            <th colspan="3">Import</th>
            <th colspan="3">Export</th>
          </tr>
          <tr>
            <th rowspan="2">Contract</th>
            <th rowspan="2">Account</th>
            <th rowspan="2">Mpan</th>
            <th colspan="2">Supplier</th>
            <th rowspan="2">Mpan</th>
            <th colspan="2">Supplier</th>
          </tr>
          <tr>
            <th>Contract</th>
            <th>Account</th> 
            <th>Contract</th>
            <th>Account</th> 
          </tr>
        </thead>
        <tbody>
          {% for era in eras %}
            <tr>
              <td>
                <a href="{{context_path}}/reports/7/output/?supply_id={{era.supply_id}}">supply</a>
              </td>
              <td>{{era.msn}}</td>
              <td>
                <a href="{{context_path}}/reports/115/output/?hhdc_contract_id={{ era.hhdc_contract.id}}">{{era.hhdc_contract.name}}</a>
              </td>
              <td>{{era.hhdc_account}}</td>
              <td>
                {% if era.imp_mpan_core %}
                  {{era.pc.code}} {{era.mtc.code}} {{era.imp_llfc.code}}
                  {{era.imp_mpan_core}}
                {% endif %}
              </td>
              <td>
                {% if era.imp_mpan_core %}
                  <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{era.imp_supplier_contract.id}}">{{era.imp_supplier_contract.name}}</a>
                {% endif %}
              </td>
              <td>
                {% if era.imp_mpan_core %}
                  {{era.imp_supplier_account}}
                {% endif %}
              </td>
              <td>
                {% if era.exp_mpan_core %}
                  {{era.pc.code}} {{era.mtc.code}} {{era.exp_llfc.code}}
                  {{era.exp_mpan_core}}
                {% endif %}
              </td>
              <td>
                {% if era.exp_mpan_core %}
                  <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{era.exp_supplier_contract.id}}">{{era.exp_supplier_contract.name}}</a>
                {% endif %}
              </td>
              <td>
                {% if era.exp_mpan_core %}
                  {{era.exp_supplier_account}}
                {% endif %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    {% elif request.getParameter('search_pattern') %}
      <p>No supplies matched your search</p>
    {% endif %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[101]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supply Virtual Bill]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import pytz
import datetime
from sqlalchemy import or_
from dateutil.relativedelta import relativedelta
from java.lang import System

Monad.getUtils()['impt'](globals(), 'templater', 'db', 'computer', 'utils')

Supply, Era = db.Supply, db.Era

HH, hh_before = utils.HH, utils.hh_before

sess = None
try:
    sess = db.session()

    supply_id = inv.getLong("supply_id")
    supply = Supply.get_by_id(sess, supply_id)

    start_date = utils.form_date(inv, 'start')
    finish_date = utils.form_date(inv, 'finish')
    forecast_date = computer.forecast_date()

    net_gbp = 0
    caches = {}
    meras = []
    debug = ''

    month_start = datetime.datetime(start_date.year, start_date.month, 1, tzinfo=pytz.utc)

    while not month_start > finish_date:
        month_finish = month_start + relativedelta(months=1) - HH

        chunk_start = start_date if start_date > month_start else month_start

        if finish_date < month_finish:
            chunk_finish = finish_date
        else:
            chunk_finish = month_finish

        for era in sess.query(Era).filter(Era.supply_id==supply.id, Era.imp_mpan_core!=None, Era.start_date<=chunk_finish, or_(Era.finish_date==None, Era.finish_date>=chunk_start)):
            if era.start_date > chunk_start:
                block_start = era.start_date
            else:
                block_start = chunk_start

            debug += 'found an era'

            if hh_before(chunk_finish, era.finish_date):
                block_finish = chunk_finish
            else:
                block_finish = era.finish_date

            mpan_core = era.imp_mpan_core
            contract = era.imp_supplier_contract
            data_source = computer.SupplySource(sess, block_start, block_finish, forecast_date, era, True, System.err, caches)
            headings = ['id', 'supplier_contract', 'account', 'start date', 'finish date']
            data = [data_source.id, contract.name, data_source.supplier_account, data_source.start_date, data_source.finish_date]
            mera = {'headings': headings, 'data': data}

            meras.append(mera)
            computer.contract_func(caches, contract, 'virtual_bill', System.err)(data_source)
            bill = data_source.supplier_bill
            net_gbp += bill['net-gbp']

            for title in computer.contract_func(caches, contract, 'virtual_bill_titles', System.err)():
                if title == 'consumption-info':
                    del bill[title]
                    continue
                headings.append(title)
                data.append(bill[title])
                if title in bill:
                    del bill[title]

            for k in sorted(bill.keys()):
                headings.append(k)
                data.append(bill[k])

            if len(meras) > 1:
                if meras[-2]['headings'] == mera['headings']:
                    del mera['headings']

        month_start += relativedelta(months=1)

    templater.render(inv, template, {'supply': supply, 'start_date': start_date, 'finish_date': finish_date, 'meras': meras, 'net_gbp': net_gbp})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/" />
    <title>Chellow &gt; Supplies &gt; {{supply.id}} &gt; Virtual Bill</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/99/output/">Supplies</a> &gt;
      <a href="{{context_path}}/reports/7/output/?supply_id={{supply.id}}">
        {{supply.id}}
      </a> &gt; Virtual Bill
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <form action=".">
      <fieldset>
        <input type="hidden" name="supply_id" value="{{supply.id}}">
        <legend>Show Virtual Bills</legend>
        <br>
        From {{input_date('start', start_date)}} to
        {{input_date('finish', finish_date)}} <input type="submit" value="Show">
      </fieldset>
    </form>

    <br>

    <table><caption>Summary</caption>
      <tr>
        <th>From</th>
        <td>{{start_date|hh_format}}</td>
      </tr>
      <tr>
        <th>To</th>
        <td>{{finish_date|hh_format}}</td>
      </tr>
      <tr>
        <th>Net GBP</th>
        <td>{{net_gbp}}</td>
      </tr>
    </table>

    <br>

    <table><caption>Import Supplier Virtual Bill</caption>
      {% for mera in meras %}
        {% if mera.headings %}
          <thead>
            <tr>
              {% for heading in mera.headings %}
                <th>{{heading}}</th>
              {% endfor %}
            </tr>
          </thead>
        {% endif %}
        <tbody>
          <tr>
            {% for datum in mera.data %}
                <td>{{datum}}</td>
            {% endfor %}
          </tr>
        </tbody>
      {% endfor %}
    </table>

  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[103]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Libraries]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import datetime
import pytz
import os
from java.lang import System
import shutil
import StringIO
import tarfile

Monad.getUtils()['impt'](globals(), 'utils', 'templater')


def make_fields(lib_path, message=None):
    messages = [] if message is None else [str(message)]
    files = []
    for fl in sorted(os.listdir(lib_path)):
        full_file = os.path.join(lib_path, fl)
        statinfo = os.stat(full_file)
        files.append({'name': fl, 'last_modified': datetime.datetime.utcfromtimestamp(statinfo.st_mtime), 'size': statinfo.st_size, 'creation_date': datetime.datetime.utcfromtimestamp(statinfo.st_ctime) })
    return {'files': files, 'messages': messages}

try:
    lib_path = Monad.getContext().getRealPath("/WEB-INF/lib-python")
    if inv.getRequest().getMethod() == 'GET':
        templater.render(inv, template, make_fields(lib_path))
    else:
        if inv.hasParameter("delete"):
            name = inv.getString("name")
            shutil.rmtree(os.path.join(lib_path, name))
            inv.sendSeeOther("/reports/103/output/")
        else:
            file_item = inv.getFileItem("import_file")
            stream = file_item.getInputStream()
            f = StringIO.StringIO()
            bt = stream.read()
            while bt != -1:
                f.write(chr(bt))
                bt = stream.read()
            f.seek(0)
            t = tarfile.open(name=None, mode='r:gz', fileobj=f)
            t.extractall(lib_path)
            t.close()
            inv.sendSeeOther("/reports/103/output/")
except utils.UserException, e:
    render(inv, template, make_fields(lib_path, e))]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/" />
    <title>Chellow &gt; System &gt; Libraries</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/171/output/">System</a> &gt;
      Libraries
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table><caption>Libraries</caption>
      <thead>
        <tr>
          <th>Name</th>
          <th>Size</th>
          <th>Creation Date</th>
          <th>Last Modified</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        {% for file in files %}
          <tr>
            <td>{{file.name}}</td>
            <td>{{file.size}} B</td>
            <td>{{file.creation_date|hh_format}}</td>
            <td>{{file.last_modified|hh_format}}</td>
            <td>
              <form method="post" action=".">
                <fieldset style="border: none;">
                  <input type="hidden" name="name" value="{{file.name}}">
                  <input type="submit" name="delete" value="Delete">
                </fieldset>
              </form>
          </tr>
        {% endfor %}
      </tbody>
    </table>

    <br>

    <form enctype="multipart/form-data" method="post" action=".">
      <fieldset>
        <legend>Upload library</legend>
        <input type="file" name="import_file" size="45"
          value="{{request.getParameter('import_file')}}">
        <input type="submit" value="Import">
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[105]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Bill]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import collections
from java.lang import System

Monad.getUtils()['imprt'](globals(), {
        'db': ['Bill', 'RegisterRead', 'Era', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    bill_id = inv.getLong('supplier_bill_id')
    bill = Bill.get_by_id(sess, bill_id)
    register_reads = sess.query(RegisterRead).from_statement("select * from register_read where bill_id = :bill_id order by present_date desc").params(bill_id=bill.id)
    fields = {'bill': bill, 'register_reads': register_reads}
    try:
        breakdown_dict = eval(bill.breakdown, {})
        
        raw_lines = []
        for key in ('raw_lines', 'raw-lines'):
            try:
                raw_lines += breakdown_dict[key]
                del breakdown_dict[key]
            except KeyError:
                pass

        rows = set()
        columns = set()
        grid = collections.defaultdict(dict)

        for k, v in breakdown_dict.items():
            if k.endswith('-gbp'):
                columns.add('gbp')
                row_name = k[:-4]
                rows.add(row_name)
                grid[row_name]['gbp'] = v
                del breakdown_dict[k]

        for k, v in breakdown_dict.items():
            for row_name in sorted(list(rows), key=len, reverse=True):
                if k.startswith(row_name + '-'):
                    col_name = k[len(row_name) + 1:]
                    columns.add(col_name)
                    grid[row_name][col_name] = v
                    del breakdown_dict[k]
                    break

        for k, v in breakdown_dict.items():    
            pair = k.split('-')
            row_name = '-'.join(pair[:-1])
            column_name = pair[-1]
            rows.add(row_name)
            columns.add(column_name)
            grid[row_name][column_name] = v

        column_list = sorted(list(columns))
        for rate_name in [col for col in column_list if col.endswith('rate')]:
            column_list.remove(rate_name)
            column_list.append(rate_name)

        if 'gbp' in column_list:
            column_list.remove('gbp')
            column_list.append('gbp')

        row_list = sorted(list(rows))
        fields.update({'raw_lines': raw_lines, 'row_list': row_list, 'column_list': column_list, 'grid': grid})
    except SyntaxError, e:
        pass
    render(inv, template, fields)
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Supplier Contracts &gt; {{bill.batch.contract.name}} &gt;
      Batches &gt; {{bill.batch.reference}} &gt; {{bill.reference}}
    </title>
    </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/75/output/">Supplier Contracts</a> &gt;
      <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{bill.batch.contract.id}}">{{bill.batch.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/89/output/?supplier-contract-id={{bill.batch.contract.id}}">Batches</a> &gt;
      <a href="{{context_path}}/reports/91/output/?batch-id={{bill.batch.id}}">
      {{bill.batch.reference}}</a> &gt;
      Bill {{bill.id}}
      [<a href="{{context_path}}/reports/165/output/?supplier_bill_id={{bill.id}}">edit</a>]
    </p>
   {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br>
    <table><caption>Bill</caption>
      <thead>
        <tr>
          <th>Supply</th>
          <th>Reference</th>
          <th>Account</th>
          <th>Issue Date</th>
          <th>From</th>
          <th>To</th>
          <th>kWh</th>
          <th>Net</th>
          <th>VAT</th>
          <th>Gross</th>
          <th>Type</th>
          <th>Check</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>
            <a href="{{context_path}}/reports/7/output/?supply_id={{bill.supply.id}}">Supply</a>
          </td>
          <td>{{bill.reference}}</td>
          <td>{{bill.account}}</td>
          <td>{{bill.issue_date.strftime('%Y-%m-%d %H:%M')}}</td>
          <td>{{bill.start_date|hh_format }}</td>
          <td>{{bill.finish_date|hh_format }}</td>
          <td>{{bill.kwh}}</td>
          <td>{{bill.net}}</td>
          <td>{{bill.vat}}</td>
          <td>{{bill.gross}}</td>
          <td>
            <a href="{{context_path}}/reports/201/output/?bill_type_id={{bill.bill_type.id}}" title="{{bill.bill_type.description}}">{{bill.bill_type.code}}</a>
          </td>
          <td>
            <a href="{{context_path}}/reports/111/output/?bill_id={{bill.id}}">Check</a>
          </td>
        </tr>
      </tbody>
    </table>
    <br>
    <br>
    <table>
      <caption>
        Reads
        [<a href="{{context_path}}/reports/189/output/?supplier_bill_id={{bill.id}}">add</a>]
      </caption>
      <thead>
        <tr>
          <th rowspan="2">Edit</th>
          <th rowspan="2">MPAN</th>
          <th rowspan="2">Coefficient</th>
          <th rowspan="2">Units</th>
          <th rowspan="2">TPR</th>
          <th rowspan="2">Meter Serial Number</th>
          <th colspan="3">Previous</th>
          <th colspan="3">Present</th>
        </tr>
        <tr>
          <th>Date</th>
          <th>Value</th>
          <th>Type</th>
          <th>Date</th>
          <th>Value</th>
          <th>Type</th>
        </tr>
      </thead>
      <tbody>
        {% for read in register_reads %}
          <tr>
            <td>
              [<a href="{{context_path}}/reports/31/output/?supplier_read_id={{read.id}}">edit</a>]
            </td>
            <td>{{read.mpan_str}}</td>
            <td>{{read.coefficient}}</td>
            <td>{{read.units_as_str()}}</td>
            <td>
              <a href="{{context_path}}/reports/97/output/?tpr_id={{read.tpr.id}}">{{read.tpr.code}}</a>
            </td>
            <td>{{read.msn}}</td>
            <td>{{read.previous_date|hh_format}}</td>
            <td>{{read.previous_value}}</td>
            <td>
              <a title="{{read.previous_type.description}}"
              href="{{context_path}}/reports/143/output/?type-id={{read.previous_type.id}}">{{read.previous_type.code}}</a>
            </td>
            <td>{{read.present_date|hh_format}}</td>
            <td>{{read.present_value}}</td>
            <td>
              <a title="{{read.present_type.description}}"
              href="{{context_path}}/reports/143/output/?type-id={{read.present_type.id}}">{{read.present_type.code}}</a>
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>

    <h3>Breakdown</h3>

    <pre>
      {%- for line in raw_lines -%}
        {{line}}<br>
      {%- endfor -%}
    </pre>
    <br>

    <table>
      <thead>
        <tr>
          <th>element</th>
          {% for col in column_list %}
            <th>{{col}}</th>
          {% endfor %}
        </tr>  
      </thead>
      <tbody>
        {% for row in row_list %}
          <tr>
            <td>{{row}}</td>
            {% for col in column_list %}
              <td>{{grid[row][col]}}</td>
            {% endfor %}
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[107]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MOP Contract]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import datetime
from dateutil.relativedelta import relativedelta
import pytz

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')

HH = utils.HH
Contract, RateScript = db.Contract, db.RateScript

sess = None
try:
    sess = db.session()
    contract_id = inv.getLong('mop_contract_id')
    contract = Contract.get_mop_by_id(sess, contract_id)
    rate_scripts = sess.query(RateScript).filter(RateScript.contract_id==contract.id).order_by(RateScript.start_date.desc()).all()
    now = datetime.datetime.utcnow().replace(tzinfo=pytz.utc)
    last_month_start = datetime.datetime(now.year, now.month, 1, tzinfo=pytz.utc) - relativedelta(months=1)
    last_month_finish = last_month_start + relativedelta(months=1) - HH
    templater.render(inv, template, {'contract': contract, 'rate_scripts': rate_scripts, 'last_month_start': last_month_start, 'last_month_finish': last_month_finish})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; MOP Contracts &gt; {{contract.name}}</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/185/output/">MOP Contracts</a> &gt;
      {{contract.name}}
      [<a href="{{context_path}}/reports/151/output/?mop_contract_id={{contract.id}}">edit</a>]
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tbody>
        <tr>
          <th>Party</th>
          <td>
            <a href="{{context_path}}/reports/47/output/?party_id={{contract.party.id}}">{{contract.party.name}}</a>
          </td>
        </tr>
        <tr>
          <th>Name</th>
          <td>{{contract.name}}</td>
        </tr>
        <tr>
          <th>Start Date</th>
          <td>{{contract.start_rate_script.start_date|hh_format}}</td>
        </tr>
        <tr>
          <th>Finish Date</th>
          <td>{{contract.finish_rate_script.finish_date|hh_format}}</td>
        </tr>
      </tbody>
    </table>
    <br>
    <table>
      <caption>
        Rate Scripts
        [<a href="{{context_path}}/reports/351/output/?mop_contract_id={{contract.id}}">add</a>]
      </caption>
      <thead>
        <tr>
          <th></th>
          <th>From</th>
          <th>To</th>
        </tr>
      </thead>
      <tbody>
        {% for rate_script in rate_scripts %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/205/output/?mop_rate_script_id={{rate_script.id}}">view</a>
            </td>
            <td>{{rate_script.start_date|hh_format}}</td>
            <td>{{rate_script.finish_date|hh_format}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>

    <ul>
      <li>
        <a href="{{context_path}}/reports/191/output/?mop_contract_id={{contract.id}}">Batches</a>
      </li>
    </ul>

    <form action="{{context_path}}/reports/231/output/">
      <fieldset>
        <legend>Download Virtual Bills</legend>
        <input type="hidden" name="mop_contract_id" value="{{contract.id}}">

        From {{input_date('start', last_month_start)}} to
        {{input_date('finish', last_month_finish)}}
        <input type="submit" value="Download"/>
      </fieldset>
    </form>


    <h2>Script</h2>

    <pre>{{contract.charge_script}}</pre>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[109]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Displaced Virtual Bills]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import datetime
from dateutil.relativedelta import relativedelta
import pytz
from sqlalchemy import or_

Monad.getUtils()['impt'](globals(), 'utils', 'db', 'computer')

HH, hh_format = utils.HH, utils.hh_format
Site, Era, SiteEra, Supply = db.Site, db.Era, db.SiteEra, db.Supply
Source, Contract = db.Source, db.Contract

caches = {}

sess = None
try:
    sess = db.session()

    end_year = inv.getInteger('finish_year')
    end_month = inv.getInteger('finish_month')
    months = inv.getInteger('months')

    inv.getResponse().setContentType("text/csv")
    inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="displaced.csv"')
    pw = inv.getResponse().getWriter()

    pw.print('Site Code,Site Name,Associated Site Ids,From,To,Gen Types,CHP kWh,LM kWh, Turbine kWh')
    pw.flush()

    finish_date = datetime.datetime(end_year, end_month, 1, tzinfo=pytz.utc) + relativedelta(months=1) - HH

    start_date = datetime.datetime(end_year, end_month, 1, tzinfo=pytz.utc) - relativedelta(months=months-1)

    forecast_date = computer.forecast_date()

    if inv.hasParameter('site_id'):
        site_id = inv.getLong('site_id')
        site = Site.get_by_id(sess, site_id)
        sites = sess.query(Site).filter(Site.id==site.id)
        contract = None
        bill_titles = ['net-gbp']
    elif inv.hasParameter('supplier_contract_id'):
        contract_id = inv.getLong('supplier_contract_id')
        contract = Contract.get_supplier_by_id(sess, contract_id)
        sites = sess.query(Site).join(SiteEra).join(Era).join(Supply).join(Source).filter(or_(Era.finish_date==None, Era.finish_date>=start_date), Era.start_date<=finish_date, or_(Source.code.in_(('gen', 'gen-net')), Era.exp_mpan_core!=None)).distinct()
        bill_titles = computer.contract_func(caches, contract, 'displaced_virtual_bill_titles', pw)()
    else:
        raise UserException("Need a site_id or contract_id.")

    for title in bill_titles:
        if title == 'total-msp-kwh':
            title = 'total-displaced-msp-kwh'
        pw.print(',' + title)
    pw.println('')
    pw.flush()

    for site in sites:
        month_start = start_date
        month_finish = month_start + relativedelta(months=1) - HH
        while not month_finish > finish_date:
            for site_group in site.groups(sess, month_start, month_finish, True):
                if site_group.start_date > month_start:
                    chunk_start = site_group.start_date
                else:
                    chunk_start = month_start
                if site_group.finish_date > month_finish:
                    chunk_finish = month_finish
                else:
                    chunk_finish = site_group.finish_date

                displaced_era = computer.displaced_era(sess, site_group, chunk_start, chunk_finish)
                if displaced_era is None:
                    continue
                supplier_contract = displaced_era.imp_supplier_contract
                if contract is not None and contract != supplier_contract:
                    continue
        
                linked_sites = ','.join(a_site.code for a_site in site_group.sites if not a_site == site)
                generator_types = ' '.join(sorted([supply.generator_type.code for supply in site_group.supplies if supply.generator_type is not None]))

                pw.print(','.join('"' + value + '"' for value in [site.code, site.name, linked_sites, hh_format(chunk_start), hh_format(chunk_finish), generator_types]))

                total_gen_breakdown = {}

                results = iter(sess.execute("select supply.id, hh_datum.value, hh_datum.start_date, channel.imp_related, source.code, generator_type.code as gen_type_code from hh_datum, channel, source, era, supply left outer join generator_type on supply.generator_type_id = generator_type.id where hh_datum.channel_id = channel.id and channel.era_id = era.id and era.supply_id = supply.id and supply.source_id = source.id and channel.channel_type = 'ACTIVE' and not (source.code = 'net' and channel.imp_related is true) and hh_datum.start_date >= :chunk_start and hh_datum.start_date <= :chunk_finish and supply.id = any(:supply_ids) order by hh_datum.start_date, supply.id", params={'chunk_start': chunk_start, 'chunk_finish': chunk_finish, 'supply_ids': [s.id for s in site_group.supplies]}))
                try:
                    res = results.next()
                    hh_data = []
                    hhChannelValue = res.value
                    hhChannelStartDate = res.start_date
                    imp_related = res.imp_related
                    source_code = res.code
                    gen_type = res.gen_type_code
                    hh_date = chunk_start

                    while hh_date <= finish_date:
                        gen_breakdown = {}
                        exported = 0
                        while hhChannelStartDate == hh_date:
                            if not imp_related and source_code in ('net', 'gen-net'):
                                exported += hhChannelValue
                            if (imp_related and source_code == 'gen') or (not imp_related and source_code == 'gen-net'):
                                gen_breakdown[gen_type] = gen_breakdown.setdefault(gen_type, 0) + hhChannelValue

                            if (not imp_related and source_code == 'gen') or (imp_related and source_code == 'gen-net'):
                                gen_breakdown[gen_type] = gen_breakdown.setdefault(gen_type, 0) - hhChannelValue

                            try:
                                res = results.next()
                                source_code = res.code
                                hhChannelValue = res.value
                                hhChannelStartDate = res.start_date
                                imp_related = res.imp_related
                                gen_type = res.gen_type_code
                            except StopIteration:
                                hhChannelStartDate = None

                        displaced = sum(gen_breakdown.itervalues()) - exported
                        added_so_far = 0
                        for key in sorted(gen_breakdown.iterkeys()):
                            kwh = gen_breakdown[key]
                            if kwh + added_so_far > displaced:
                                total_gen_breakdown[key] = total_gen_breakdown.get(key, 0) + displaced - added_so_far
                                break
                            else:
                                total_gen_breakdown[key] = total_gen_breakdown.get(key, 0) + kwh
                                added_so_far += kwh
                    
                        hh_date += HH
                except StopIteration:
                    pass

                for title in ['chp', 'lm', 'turb']:
                    pw.print(',' + str(total_gen_breakdown.get(title, '')))

                site_ds = computer.SiteSource(sess, site, chunk_start, chunk_finish, forecast_date, pw, caches, displaced_era)
                disp_func = computer.contract_func(caches, supplier_contract, 'displaced_virtual_bill', pw)
                bill = disp_func(site_ds)
                for title in bill_titles:
                    pw.print(',"' + str(bill.get(title, '')) + '"')
                    if title in bill:
                        del bill[title]
                keys = bill.keys()
                keys.sort()
                for k in keys:
                    pw.print(',"' + k + '","' + str(bill[k]) + '"')
                pw.println('')
                pw.flush()

            month_start += relativedelta(months=1)
            month_finish = month_start + relativedelta(months=1) - HH

    pw.close()
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[111]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Bill Checker]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import collections
import operator
import pytz
import datetime
from dateutil.relativedelta import relativedelta
from sqlalchemy import or_

Monad.getUtils()['impt'](globals(), 'templater', 'db', 'computer', 'utils')

HH, hh_before, hh_format = utils.HH, utils.hh_before, utils.hh_format
Batch, Bill, Era, Site, SiteEra = db.Batch, db.Bill, db.Era, db.Site, db.SiteEra

caches = {}

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="bill_check.csv"')
pw = inv.getResponse().getWriter()

forecast_date = datetime.datetime.max.replace(tzinfo=pytz.utc)

sess = None
try:
    sess = db.session()

    if inv.hasParameter('batch_id'):
        batch_id = inv.getLong("batch_id")
        batch = Batch.get_by_id(sess, batch_id)
        bills = sess.query(Bill).filter(Bill.batch_id==batch.id).order_by(Bill.reference)
    elif inv.hasParameter('bill_id'):
        bill_id = inv.getLong("bill_id")
        bill = Bill.get_by_id(sess, bill_id)
        bills = sess.query(Bill).filter(Bill.id==bill.id)
        batch = bill.batch

    contract = batch.contract
    market_role_code = contract.market_role.code

    vbf = computer.contract_func(caches, contract, 'virtual_bill', pw)
    if vbf is None:
        raise UserException('The contract ' + contract.name + " doesn't have a function virtual_bill.")

    virtual_bill_titles_func = computer.contract_func(caches, contract, 'virtual_bill_titles', pw)
    if virtual_bill_titles_func is None:
        raise UserException('The contract ' + contract.name + " doesn't have a function virtual_bill_titles.")
    virtual_bill_titles = virtual_bill_titles_func()

    pw.println("batch,bill-reference,bill-type,bill-kwh,bill-net-gbp,bill-vat-gbp, bill-start-date,bill-finish-date,bill-mpan-core,site-code,site-name,covered-from,covered-to,covered-bills," + ','.join('covered-' + val + ',virtual-' + val + (',difference-' + val if val.endswith('-gbp') else '') for val in virtual_bill_titles))
    pw.flush()

    for bill in bills:
        problem = ''
        supply = bill.supply

        read_dict = {}
        for read in bill.reads:
            gen_start = read.present_date.replace(hour=0).replace(minute=0)
            gen_finish = gen_start + relativedelta(days=1) - HH
            msn_match = False
            read_msn = read.msn
            for read_era in supply.find_eras(sess, gen_start, gen_finish):
                if read_msn == read_era.msn:
                    msn_match = True
                    break

            if not msn_match:
                problem += "The MSN " + read_msn + " of the register read " + str(read.id) + " doesn't match the MSN of the era."

            for dt, type in [(read.present_date, read.present_type), (read.previous_date, read.previous_type)]:
                key = str(dt) + "-" + read.msn
                try:
                    if type != read_dict[key]:
                        problem += " Reads taken on " + str(dt) + " have differing read types."
                except KeyError:
                    read_dict[key] = type        

        bill_start = bill.start_date
        bill_finish = bill.finish_date

        era = supply.find_era_at(sess, bill.finish_date)
        if era is None:
            pw.println(",,,,,,,,,,Extraordinary! There isn't a era for this bill!")
            continue

        pw.print(','.join('"' + str(val) + '"' for val in [batch.reference, bill.reference, bill.bill_type.code, bill.kwh, bill.net, bill.vat, hh_format(bill_start), hh_format(bill_finish), era.imp_mpan_core]) + ",")

        msn = era.msn

        covered_start = bill_start
        covered_finish = bill_finish
        covered_bill_ids = []
        covered_bdown = {'sum-msp-kwh': 0, 'net-gbp': 0, 'vat-gbp': 0}
        covered_primary_bill = None
        enlarged = True

        while enlarged:
            enlarged = False
            for covered_bill in sess.query(Bill).filter(Bill.supply_id==supply.id, Bill.start_date<=covered_finish, Bill.finish_date>=covered_start).order_by(Bill.issue_date.desc(), Bill.start_date):
                if market_role_code != covered_bill.batch.contract.market_role.code:
                    continue

                if covered_primary_bill is None and len(covered_bill.reads) > 0:
                    covered_primary_bill = covered_bill
                if covered_bill.start_date < covered_start:
                    covered_start = covered_bill.start_date
                    enlarged = True
                    break
                if covered_bill.finish_date > covered_finish:
                    covered_finish = covered_bill.finish_date
                    enlarged = True
                    break

        for covered_bill in sess.query(Bill).filter(Bill.supply_id==supply.id, Bill.start_date<=covered_finish, Bill.finish_date>=covered_start).order_by(Bill.issue_date.desc(), Bill.start_date):
            if market_role_code != covered_bill.batch.contract.market_role.code:
                continue
            covered_bill_ids.append(covered_bill.id)
            covered_bdown['net-gbp'] += float(covered_bill.net)
            covered_bdown['vat-gbp'] += float(covered_bill.vat)
            covered_bdown['sum-msp-kwh'] += float(covered_bill.kwh)
            if len(covered_bill.breakdown) > 0:
                covered_rates = collections.defaultdict(set)
                for k, v in eval(covered_bill.breakdown, {}).iteritems():

                    if k.endswith('rate'):
                        covered_rates[k].add(v)
                    elif k != 'raw-lines':
                        try:
                            covered_bdown[k] += v
                        except KeyError:
                            covered_bdown[k] = v
                        except TypeError, detail:
                            raise UserException("For key " + str(k) + " the value " + str(v) + " can't be added to the existing value " + str(covered_bdown[k]) + ". " + str(detail))
                for k, v in covered_rates.iteritems():
                    covered_bdown[k] = v.pop() if len(v) == 1 else None

        virtual_bill = {}

        for era in sess.query(Era).filter(Era.supply_id==supply.id, Era.imp_mpan_core!=None, Era.start_date<=covered_finish, or_(Era.finish_date==None, Era.finish_date>=covered_start)).distinct():
            site = sess.query(Site).join(SiteEra).filter(SiteEra.is_physical==True, SiteEra.era_id==era.id).one()

            if covered_start > era.start_date:
                chunk_start = covered_start
            else:
                chunk_start = era.start_date

            if hh_before(covered_finish, era.finish_date):
                chunk_finish = covered_finish
            else:
                chunk_finish = era.finish_date

            data_source = computer.SupplySource(sess, chunk_start, chunk_finish, forecast_date, era, True, pw, caches, covered_primary_bill)
            vbf(data_source)

            if market_role_code == 'X':
                vb = data_source.supplier_bill
            elif market_role_code == 'C':
                vb = data_source.dc_bill
            elif market_role_code == 'M':
                vb = data_source.mop_bill
            else:
                raise UserException("Odd market role.")

            for k, v in vb.iteritems():
                try:
                    virtual_bill[k] += v
                except KeyError:
                    virtual_bill[k] = v
                except TypeError, detail:
                    raise UserException("For key " + str(k) + " and value " + str(v) + ". " + str(detail))

        values = [site.code, site.name, hh_format(covered_start), hh_format(covered_finish), ';'.join(str(id).replace(',', '') for id in covered_bill_ids)]
        for title in virtual_bill_titles:
            try:
                cov_val = covered_bdown[title]
                values.append(cov_val)
                del covered_bdown[title]
            except KeyError:
                cov_val = None
                values.append('')

            try:
                virt_val = virtual_bill[title]
                values.append(virt_val)
                del virtual_bill[title]
            except KeyError:
                virt_val = None
                values.append('')

            if title.endswith('-gbp'):
                if all(isinstance(val, (int, float)) for val in [cov_val, virt_val]):
                    values.append(cov_val - virt_val)
                else:
                    values.append('')

        for title in sorted(virtual_bill.keys()):
            values += ['virtual-' + title, virtual_bill[title]]
            if title in covered_bdown:
                values += ['covered-' + title, covered_bdown[title]]
            else:
                values += ['','']

        pw.println(','.join('"' + str(value) + '"' for value in values))
        pw.flush()
    pw.close()
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[113]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Contracts]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    hhdc_contracts = sess.query(Contract).from_statement("select contract.* from contract, market_role where contract.market_role_id = market_role.id and market_role.code = 'C' order by contract.name").all()
    render(inv, template, {'hhdc_contracts': hhdc_contracts})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; HHDC Contracts</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      HHDC Contracts
      [<a href="{{ context_path }}/reports/277/output/">add</a>]
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Start Date</th>
          <th>Finish Date</th>
          <th>HHDC</th>
        </tr>
      </thead>
      <tbody>
        {% for contract in hhdc_contracts %}
          <tr>
            <td>
              <a href="{{ context_path }}/reports/115/output/?hhdc_contract_id={{ contract.id }}">{{ contract.name }}</a>
            </td>
            <td>{{ contract.start_rate_script.start_date|hh_format }}</td>
            <td>{{ contract.finish_rate_script.finish_date|hh_format }}</td>
            <td>
              <a href="{{ context_path }}/reports/47/output/?party_id={{ contract.party.id }}">{{ contract.party.name }}</a>
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[115]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Contract]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import datetime
import pytz
from dateutil.relativedelta import relativedelta

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')

RateScript = db.RateScript

sess = None
rate_scripts = None
try:
    sess = db.session()
    contract_id = inv.getLong('hhdc_contract_id')
    contract = db.Contract.get_hhdc_by_id(sess, contract_id)
    rate_scripts = sess.query(RateScript).filter(RateScript.contract_id == contract.id).order_by(RateScript.start_date.desc()).all()
    now = datetime.datetime.now(pytz.utc)
    last_month_finish = datetime.datetime(now.year, now.month, 1) - relativedelta(minutes=30)
    templater.render(inv, template, {'contract': contract, 'rate_scripts': rate_scripts, 'last_month_finish': last_month_finish})
except utils.UserException, e:
    if str(e).startswith("There isn't a contract"):
        inv.sendNotFound(str(e))
    else:
        templater.render(inv, template, {'messages': [str(e)], 'contract': contract, 'rate_scripts': rate_scripts})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; HHDC Contracts &gt; {{contract.name}}</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/113/output/">HHDC Contracts</a> &gt;
      {{contract.name}}
      [<a href="{{context_path}}/reports/279/output/?hhdc_contract_id={{contract.id}}">edit</a>]
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tbody>
        <tr>
          <th>Party</th>
          <td>
            <a href="{{ context_path }}/reports/47/output/?party_id={{ contract.party.id }}">{{ contract.party.name }}</a>
          </td>
        </tr>
        <tr>
          <th>Name</th>
          <td>{{ contract.name }}</td>
        </tr>
        <tr>
          <th>Start Date</th>
          <td>{{ contract.start_rate_script.start_date|hh_format }}</td>
        </tr>
        <tr>
          <th>Finish Date</th>
          <td>{{ contract.finish_rate_script.finish_date|hh_format }}</td>
        </tr>
      </tbody>
    </table>

    <br />
    <table>
      <caption>
        Rate Scripts
        [<a href="{{context_path}}/reports/383/output/?hhdc_contract_id={{contract.id}}">add</a>]
      </caption>
      <thead>
        <tr>
          <th></th>
          <th>From</th>
          <th>To</th>
        </tr>
      </thead>
      <tbody>
        {% for rate_script in rate_scripts %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/173/output/?hhdc_rate_script_id={{rate_script.id}}">view</a>
            </td>
            <td>{{rate_script.start_date|hh_format}}</td>
            <td>{{rate_script.finish_date|hh_format}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>

    <ul>
      <li>
        <a href="{{context_path}}/reports/93/output/?hhdc_contract_id={{ contract.id }}">Batches</a>
      </li>
      <li>
        <a href="{{context_path}}/reports/37/output/?hhdc-contract-id={{contract.id}}&amp;hidden_days=5">Channel Snags</a>
      </li>
      <li>
        <a href="{{context_path}}/reports/213/output/?hhdc_contract_id={{contract.id}}">Automatic HH Data Importer</a>
      </li>
      <li>
        [<a href="{{context_path}}/reports/211/output/?hhdc_contract_id={{ contract.id }}">HH data imports</a>]
      </li>
    </ul>
    <br>
    <form action="{{context_path}}/reports/81/output/">
      <fieldset>
        <legend>Download Virtual Bills</legend>
        <input type="hidden" name="hhdc_contract_id" value="{{contract.id}}">
        <br>
        For <input name="months" value="1" maxlength="2" size="2">
        month(s) until the end of
        {{input_date('end', last_month_finish, 'month')}}
        <input type="submit" value="Download">
      </fieldset>
    </form>
               
    <h2>Script</h2>
    
    <pre>{{contract.charge_script}}</pre>

    <h2>Properties</h2>
    
    <pre>{{ contract.properties }}</pre>

    <h2>State</h2>
    
    <pre>{{ contract.state }}</pre>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[117]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Channel Snag]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import datetime
import pytz
from dateutil.relativedelta import relativedelta
from java.lang import System

Monad.getUtils()['imprt'](globals(), {
        'db': ['Channel', 'Era', 'HhDatum', 'Snag', 'set_read_write', 'session'], 
        'utils': ['UserException', 'HH', 'hh_after'],
        'templater': ['render']})

def make_fields(sess, snag, message=None):
    messages = [] if message is None else [str(message)]
    return {'messages': messages, 'snag': snag}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        snag_id = inv.getLong('snag_id')
        snag = Snag.get_by_id(sess, snag_id)
        render(inv, template, make_fields(sess, snag))
except UserException, e:
    render(inv, template, make_fields(sess, snag, e), 400)
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; HHDC Contracts &gt;
      {{snag.channel.era.hhdc_contract.name}} &gt; Channel Snags &gt;
      {{snag.id}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{context_path}}/reports/115/output/?hhdc_contract_id={{snag.channel.era.hhdc_contract.id}}">{{snag.channel.era.hhdc_contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/37/output/?hhdc_contract_id={{snag.channel.era.hhdc_contract.id}}&amp;hidden_days=5">Channel Snags</a> &gt;
      {{snag.id}} [<a href="{{context_path}}/reports/365/output/?snag_id={{snag.id}}">edit</a>]
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{message}}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <tbody>
        <tr>
          <th>Date Created</th>
          <td>{{snag.date_created|hh_format}}</td>
        </tr>
        <tr>
          <th>Ignored?</th>
          <td>
            {% if snag.is_ignored %}
              Ignored
            {% else %}
              Not ignored
            {% endif %}
          </td>
        </tr>
        <tr>
          <th>Description</th>
          <td>{{snag.description}}</td>
        </tr>
        <tr>
          <th>Channel</th>
          <td>
            {% if snag.channel.imp_related %}
              Import
            {% else %}
              Export
            {% endif %}
            {{snag.channel.channel_type}}
            channel of <a href="{{context_path}}/reports/7/output/?supply_id={{snag.channel.era.supply.id}}">supply {{snag.channel.era.supply.name}}</a>
          </td>
        </tr>
        <tr>
          <th>Start Date</th>
          <td>{{snag.start_date|hh_format}}</td>
        </tr>
        <tr>
          <th>Finish Date</th>
          <td>{{snag.finish_date|hh_format}}</td>
        </tr>
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[119]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Site Group Snag]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import datetime
import pytz
from dateutil.relativedelta import relativedelta
from java.lang import System

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')

def make_fields(sess, snag, message=None):
    messages = [] if message is None else [str(message)]
    return {'messages': messages, 'snag': snag}

sess = None
try:
    sess = db.session()
    if inv.getRequest().getMethod() == 'GET':
        snag_id = inv.getLong('site_snag_id')
        snag = db.Snag.get_by_id(sess, snag_id)
        templater.render(inv, template, make_fields(sess, snag))
except UserException, e:
    templater.render(inv, template, make_fields(sess, snag, e), 400)
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; Site Snags &gt; {{snag.id}}</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/39/output/">Site Snags</a> &gt;
      {{snag.id}}
      [<a href="{{context_path}}/reports/373/output/?site_snag_id={{snag.id}}">edit</a>]
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{message}}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tbody>
        <tr>
          <th>Date Created</th>
          <td>{{snag.date_created|hh_format}}</td>
        </tr>
        <tr>
          <th>Ignored?</th>
          <td>
            {% if snag.is_ignored %}
              Ignored
            {% else %}
              Not ignored
            {% endif %}
          </td>
        </tr>
        <tr>
          <th>Description</th>
          <td>{{snag.description}}</td>
        </tr>
        <tr>
          <th>Site</th>
          <td>
            <a href="{{context_path}}/reports/5/output/?site_id={{snag.site.id}}">{{snag.site.code}}</a>
          </td>
        </tr>
        <tr>
          <th>Start Date</th>
          <td>{{snag.start_date|hh_format}}</td>
        </tr>
        <tr>
          <th>Finish Date</th>
          <td>{{snag.finish_date|hh_format}}</td>
        </tr>
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[121]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Market Roles]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'MarketRole', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    market_roles = sess.query(MarketRole).from_statement("select market_role.* from market_role order by market_role.code").all()
    render(inv, template, {'market_roles': market_roles})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; Market Roles</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
        Market Roles
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <thead>
        <tr>
          <th>Code</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {% for role in market_roles %}
          <tr>
            <td>
              <a href="{{ context_path }}/reports/123/output/?market_role_id={{ role.id }}">{{ role.code }}</a>
            </td>
            <td>{{ role.description }}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[123]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Market Role]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'MarketRole', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    market_role_id = inv.getLong('market_role_id')
    market_role = MarketRole.get_by_id(sess, market_role_id)
    render(inv, template, {'market_role': market_role})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; Market Roles &gt; {{ market_role.description }}</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/121/output/">Market Roles</a> &gt;
      {{ market_role.description }}
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tr>
        <th>Code</th>
        <td>{{ market_role.code }}</td>
      </tr>
      <tr>
        <th>Description</th>
        <td>{{ market_role.description }}</td>
      </tr>
    </table>
    <br />
    <table>
      <caption>Parties</caption>
      <thead>
        <tr>
          <th>Name</th>
          <th>Participant</th>
          {% if market_role.code == 'R' %}
            <th>DNO Code</th>
          {% endif %}
        </tr>
      </thead>
      <tbody>
        {% for party in market_role.parties %}
          <tr>
            <td>
              <a href="{{ context_path }}/reports/47/output/?party_id={{ party.id }}">{{ party.name }}</a>
            </td>
            <td>
              <a href="{{ context_path }}/reports/73/output/?participant_id={{ party.participant.id }}">{{ party.participant.code }}</a>
            </td>
            {% if market_role.code == 'R' %}
              <td>{{ party.dno_code }}</td>
            {% endif %}
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[125]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[SSCs]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'Ssc', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    sscs = sess.query(Ssc).options(joinedload_all('measurement_requirements.tpr')).order_by(Ssc.code).all()
    render(inv, template, {'sscs': sscs})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
        href="{{ context_path }}/reports/19/output/" />
    <title>Chellow &gt; SSCs</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt; SSCs
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <thead>
        <tr>
          <th>Code</th>
          <th>Description</th>
          <th>Imp / Exp</th>
          <th>From</th>
          <th>To</th>
          <th>Tprs</th>
        </tr>
      </thead>
      <tbody>
        {% for ssc in sscs %}
          <tr>
            <td>
              <a href="{{ context_path }}/reports/127/output/?ssc_id={{ ssc.id }}">{{ ssc.code }}</a>
            </td>
            <td>{{ ssc.description }}</td>
            <td>
              {%- if ssc.is_import -%}
                Import
              {%- else -%}
                Export
              {%- endif -%}
            </td>
            <td>{{ ssc.valid_from|hh_format }}</td>
            <td>{{ ssc.valid_to|hh_format }}</td>
            <td>
              {%- for mr in ssc.measurement_requirements -%}
                <a href="{{ context_path }}/reports/97/output/?tpr_id={{ mr.tpr.id }}">{{ mr.tpr.code }}</a>
                {%- if not loop.last %}, {% endif %}
              {%- endfor -%}
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[127]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[SSC]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'Ssc', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    ssc_id = inv.getLong('ssc_id')
    ssc = Ssc.get_by_id(sess, ssc_id)
    render(inv, template, {'ssc': ssc})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/" />
    <title>
      Chellow &gt; SSCs &gt; {{ ssc.description }}
    </title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/125/output/">SSCs</a> &gt;
      {{ ssc.code }}
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <tr>
        <th>Code</th>
        <td>{{ ssc.code }}</td>
      </tr>
      <tr>
        <th>Description</th>
        <td>{{ ssc.description }}</td>
      </tr>
      <tr>
        <th>Is Import?</th>
        <td>
          {% if ssc.is_import %}
            Import
          {% else %}
            Export
          {% endif %}
        </td>
      </tr>
      <tr>
        <th>From</th>
        <td>{{ ssc.valid_from|hh_format }}</td>
      <tr>
      </tr>
        <th>To</th>
        <td>{{ ssc.valid_to|hh_format }}</td>
      </tr>
    </table>

    <h4>TPRs</h4>

    <ul>
      {% for mr in ssc.measurement_requirements %}
        <li><a href="{{ context_path }}/reports/97/output/?tpr_id={{ mr.tpr.id }}">{{ mr.tpr.code }}</a>
        </li>
      {% endfor %}
    </ul>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[129]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Meter Types]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['impt'](globals(), 'templater', 'db')
MeterType, Party = db.MeterType, db.Party

sess = None
try:
    sess = db.session()
    meter_types = sess.query(MeterType).order_by(MeterType.code)
    templater.render(inv, template, {'meter_types': meter_types})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; Meter Types</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt; Meter Types
    </p>
    <br>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <thead>
        <tr>
          <th>Code</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {% for meter_type in meter_types %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/131/output/?meter_type_id={{meter_type.id}}">
                {{meter_type.code}}
              </a>
            </td>
            <td>{{meter_type.description}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[131]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Meter Type]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['impt'](globals(), 'templater', 'db')
MeterType, Party = db.MeterType, db.Party

sess = None
try:
    sess = db.session()
    meter_type_id = inv.getLong('meter_type_id')
    meter_type = MeterType.get_by_id(sess, meter_type_id)
    templater.render(inv, template, {'meter_type': meter_type})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; Meter Types &gt; {{meter_type.description}}</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/129/output/">Meter Types</a> &gt;
      {{meter_type.description}}
    </p>
    <br>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <tr>
        <th>Code</th>
        <td>{{meter_type.code}}</td>
      </tr>
      <tr>
        <th>Description</th>
        <td>{{meter_type.description}}</td>
      </tr>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[133]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MTC Payment Types]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'MeterPaymentType', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    meter_payment_types = sess.query(MeterPaymentType).from_statement("""select * from meter_payment_type order by code""").all()
    render(inv, template, {'meter_payment_types': meter_payment_types})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
        href="{{ context_path }}/reports/19/output/" />
    <title>Chellow &gt; Meter Payment Types</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      Meter Payment Types
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <thead>
        <tr>
          <th>Code</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {% for meter_payment_type in meter_payment_types %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/135/output/?meter_payment_type_id={{meter_payment_type.id}}">{{meter_payment_type.code}}</a>
            </td>
            <td>{{ meter_payment_type.description }}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[135]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MTC Payment Type]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['MeterPaymentType', 'Ssc', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    meter_payment_type_id = inv.getLong('meter_payment_type_id')
    meter_payment_type = MeterPaymentType.get_by_id(sess, meter_payment_type_id)
    render(inv, template, {'meter_payment_type': meter_payment_type})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/" />
    <title>
      Chellow &gt; Meter Payment Types &gt; {{meter_payment_type.code}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/133/output/">Meter Payment Types</a>
      &gt; {{meter_payment_type.description}}
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tr>
        <th>Code</th>
        <td>{{meter_payment_type.code}}</td>
      </tr>
      <tr>
        <th>Description</th>
        <td>{{meter_payment_type.description}}</td>
      </tr>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[137]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[DNO Contracts]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    dno_contracts = sess.query(Contract).from_statement("select contract.* from contract, market_role where contract.market_role_id = market_role.id and market_role.code = 'R' order by contract.name").all()
    render(inv, template, {'dno_contracts': dno_contracts})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>Chellow &gt; DNO Contracts</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      DNO Contracts
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <p>
    <table>
      <thead>
        <tr>
          <th>Code</th>
          <th>Name</th>
          <th>Start Date</th>
          <th>Finish Date</th>
        </tr>
      </thead>
      <tbody>
        {% for contract in dno_contracts %}
          <tr>
            <td>
              <a href="{{ context_path }}/reports/67/output/?dno_contract_id={{ contract.id }}">{{ contract.name }}</a>
            </td>
            <td>
              {{ contract.party.name }}
            </td>
            <td>{{ contract.start_rate_script.start_date|hh_format }}</td>
            <td>{{ contract.finish_rate_script.finish_date|hh_format }}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[139]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[DNO]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        contract_id = inv.getLong('dno_contract_id')
        contract = Contract.get_dno_by_id(sess, contract_id)
        render(inv, template, {'contract': contract})
    else:
        set_read_write(sess)
        contract_id = inv.getLong('dno_contract_id')
        contract = Contract.get_dno_by_id(sess, contract_id)
        name = inv.getString('name')
        charge_script = inv.getString('charge_script')
        contract.update(sess, True, name, contract.party,
                    charge_script, '{}')
        sess.commit()
        inv.sendSeeOther('/reports/67/output/?dno_contract_id='
                + str(contract.id))
except UserException, e:
    render(inv, template, {'contract': contract, 'messages': [str(e)]})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>
      Chellow &gt; DNO Contracts &gt; {{contract.name}} &gt; Edit
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/137/output/">DNO Contracts</a> &gt;
      <a href="{{context_path}}/reports/67/output/?dno_contract_id={{contract.id}}">{{contract.name}}</a> &gt; Edit
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <form action="{{context_path}}/reports/139/output/" method="post">
      <fieldset>
        <legend>Update Contract</legend>
        <input type="hidden" name="dno_contract_id" value="{{contract.id}}">
        <br />
        <label>
          Name {{ input_text('name', contract.name) }}
        </label>
        <br>
        <br>
        Charge script
        <br>
        {{ input_textarea('charge_script', contract.charge_script, 40, 80) }}
        <br>
        <br>
        <input type="submit" value="Update">
      </fieldset>
    </form>
    <br />
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[141]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Read Types]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

types_element = doc.createElement('read-types')
source.appendChild(types_element)
for type in Hiber.session().createQuery("from ReadType type order by type.code").list():
    types_element.appendChild(type.toXml(doc))]]></value>
		<value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Read Types
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Read Types'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/read-types/read-type">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/143/output/?type-id={@id}">
                                        <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[143]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Read Type]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import ReadType

type_id = inv.getLong('type-id')
type = ReadType.getReadType(type_id)
source.appendChild(type.toXml(doc))]]></value>
		<value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Read Types &gt;
                    <xsl:value-of
                        select="/source/read-type/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/141/output/">
                        <xsl:value-of select="'Read Types'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/read-type/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/read-type/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/read-type/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[145]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Sites HH Data Selector]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from datetime import datetime
from dateutil.relativedelta import relativedelta

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException', 'HH'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    now = datetime.utcnow()
    start_date = datetime(now.year, now.month, 1) - relativedelta(months=1)
    finish_date = datetime(now.year, now.month, 1) - HH

    render(inv, template, {'start_date': start_date, 'finish_date': finish_date})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; CSV Sites HH Data</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      CSV Sites HH Data
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <form action="{{context_path}}/reports/183/output/">
      <fieldset>
        <legend>Download</legend>
        <br>
        From {{input_date('start', start_date)}} to
        {{input_date('finish', finish_date)}}
        <input type="submit" value="Download">
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[147]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Supplies Duration Selector]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.util import Properties
from java.io import StringReader
from net.sf.chellow.physical import Configuration
from net.sf.chellow.ui import Report
from sqlalchemy.orm import joinedload_all
import datetime
from dateutil.relativedelta import relativedelta
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException', 'HH'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    last_month = datetime.datetime.now(pytz.utc) - relativedelta(months=1)
    last_month_start = datetime.datetime(last_month.year, last_month.month, 1, tzinfo=pytz.utc)
    last_month_finish = last_month_start + relativedelta(months=1) - HH
    render(inv, template, {'last_month_start': last_month_start, 'last_month_finish': last_month_finish})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; CSV Supplies Duration</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      CSV Supplies Duration
      </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <form action="{{context_path}}/reports/149/output/">
      <fieldset>
        <legend>Download</legend>
        <br>
        <p>
          From {{input_date('start', last_month_start)}} to
          {{input_date('finish', last_month_finish)}}
          <input type="submit" value="Download">
        </p>
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[149]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Supplies Duration]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import System
import datetime
from sqlalchemy import or_, func, not_, Float, cast
import pytz

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater', 'computer', 'duos')

Supply, Era, RegisterRead, Bill = db.Supply, db.Era, db.RegisterRead, db.Bill
ReadType, HhDatum, Channel = db.ReadType, db.HhDatum, db.Channel
BillType = db.BillType

hh_before, HH, hh_format = utils.hh_before, utils.HH, utils.hh_format

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="output.csv"')
pw = inv.getResponse().getWriter()

NORMAL_READ_TYPES = 'C', 'N', 'N3'
forecast_date = datetime.datetime.max.replace(tzinfo=pytz.utc)

def mpan_bit(supply, is_import, num_hh, eras, chunk_start, chunk_finish):
    mpan_core_str = ''
    llfc_code = ''
    sc_str = ''
    supplier_contract_name = ''
    gsp_kwh = ''
    for era in eras:
        mpan_core = era.imp_mpan_core if is_import else era.exp_mpan_core
        if mpan_core is None:
            continue
        mpan_core_str = mpan_core
        if is_import:
            supplier_contract_name = era.imp_supplier_contract.name
            llfc = era.imp_llfc
            sc = era.imp_sc
        else:
            supplier_contract_name = era.exp_supplier_contract.name
            llfc = era.exp_llfc
            sc = era.exp_sc
        llfc_code = llfc.code
        sc_str = str(sc)
        if llfc.is_import and era.pc.code == '00' and supply.source.code not in ('gen') and supply.dno_contract.name != '99':
            if gsp_kwh == '':
                gsp_kwh = 0

            if chunk_start > era.start_date:
                block_start = chunk_start
            else:
                block_start = era.start_date

            if hh_before(chunk_finish, era.finish_date):
                block_finish = chunk_finish
            else:
                block_finish = era.finish_date

            supply_source = computer.SupplySource(sess, block_start, block_finish, forecast_date, era, is_import, pw, caches)

            duos.duos_vb(supply_source)

            gsp_kwh += sum([datum['gsp-kwh'] for datum in supply_source.hh_data])

    md = 0
    sum_kwh = 0
    non_actual = 0
    date_at_md = None
    kvarh_at_md = None
    num_na = 0

    for datum in sess.query(HhDatum).join(Channel).join(Era).filter(Era.supply_id==supply.id, Channel.imp_related==is_import, Channel.channel_type=='ACTIVE', HhDatum.start_date>=chunk_start, HhDatum.start_date<=chunk_finish):
        hh_value = float(datum.value)
        hh_status = datum.status
        if hh_value > md:
            md = hh_value
            date_at_md = datum.start_date
            kvarh_at_md = sess.query(cast(func.max(HhDatum.value), Float)).join(Channel).join(Era).filter(Era.supply_id==supply.id, Channel.imp_related==is_import, Channel.channel_type!='ACTIVE', HhDatum.start_date==date_at_md).one()[0]

        sum_kwh += hh_value
        if hh_status != 'A':
            non_actual = non_actual + hh_value
            num_na = num_na + 1

    kw_at_md = md * 2
    if kvarh_at_md is None:
        kva_at_md = 'None'
    else:
        kva_at_md = (kw_at_md ** 2 + (kvarh_at_md * 2) ** 2) ** 0.5

    num_bad = str(num_hh - sess.query(HhDatum).join(Channel).join(Era).filter(Era.supply_id==supply.id, Channel.imp_related==is_import, Channel.channel_type=='ACTIVE', HhDatum.start_date>=chunk_start, HhDatum.start_date<=chunk_finish).count() + num_na)
    
    date_at_md_str = '' if date_at_md is None else hh_format(date_at_md)
        
    return ','.join(str(val) for val in [llfc_code, mpan_core_str, sc_str, supplier_contract_name, sum_kwh, non_actual, gsp_kwh, kw_at_md, date_at_md_str, kva_at_md, num_bad])


sess = None
try:
    sess = db.session()
    start_date = utils.form_date(inv, 'start')
    finish_date = utils.form_date(inv, 'finish')

    caches = {}

    pw.println("Supply Id, Supply Name, Source, Generator Type, Site Ids, Site Names, From, To, PC, MTC, CoP, SSC, Normal Reads,Type,Import LLFC, Import MPAN Core, Import Supply Capacity,Import Supplier,Import Total MSP kWh, Import Non-actual MSP kWh, Import Total GSP kWh,Import MD / kW, Import MD Date, Import MD / kVA, Import Bad HHs,Export LLFC, Export MPAN Core, Export Supply Capacity,Export Supplier,Export Total MSP kWh, Export Non-actual MSP kWh,Export GSP kWh, Export MD / kW, Export MD Date, Export MD / kVA, Export Bad HHs")

    supplies = sess.query(Supply).join(Era).filter(or_(Era.finish_date==None, Era.finish_date>=start_date), Era.start_date<=finish_date).order_by(Supply.id).distinct()

    if inv.hasParameter('supply_id'):
        supply_id = inv.getLong('supply_id')
        supplies = supplies.filter(Supply.id==Supply.get_by_id(sess, supply_id).id)

    for supply in supplies:
        site_codes = ''
        site_names = ''
        eras = supply.find_eras(sess, start_date, finish_date)

        era = eras[-1]
        for site_era in era.site_eras:
            site = site_era.site
            site_codes = site_codes + site.code + ', '
            site_names = site_names + site.name + ', '
        site_codes = site_codes[:-2]
        site_names = site_names[:-2]

        generator_type = supply.generator_type
        generator_type = '' if generator_type is None else generator_type.code

        ssc = era.ssc
        ssc_code = '' if ssc is None else ssc.code

        prime_reads = {}
        for read in sess.query(RegisterRead).join(Bill).join(RegisterRead.previous_type).filter(Bill.supply_id==supply.id, RegisterRead.previous_date>=start_date, RegisterRead.previous_date<=finish_date, ReadType.code.in_(NORMAL_READ_TYPES)):

            prime_bill = sess.query(Bill).join(BillType).filter(Bill.supply_id==supply.id, Bill.start_date<=(read.previous_date - HH), Bill.finish_date>=(read.previous_date - HH)).order_by(Bill.issue_date.desc(), BillType.code).first()

            if prime_bill is not None and read.bill.id == prime_bill.id:
                key = str(read.previous_date) + "_" + read.msn
                if key not in prime_reads:
                    if sess.query(RegisterRead).join(Bill).join(RegisterRead.previous_type).filter(Bill.id==prime_bill.id, RegisterRead.previous_date==read.previous_date, RegisterRead.msn==read.msn, not_(ReadType.code.in_(NORMAL_READ_TYPES))).count() is not None:
                        prime_reads[key] = read
                
        for read in sess.query(RegisterRead).join(Bill).join(RegisterRead.present_type).filter(Bill.supply_id==supply.id, RegisterRead.present_date>=start_date, RegisterRead.present_date<=finish_date, ReadType.code.in_(NORMAL_READ_TYPES)):
            prime_bill = sess.query(Bill).join(BillType).filter(Bill.supply_id==supply.id, Bill.start_date<=read.present_date, Bill.finish_date>=read.present_date).order_by(Bill.issue_date.desc(), BillType.code).first()
            if prime_bill is not None and read.bill.id == prime_bill.id:
                key = str(read.present_date) + "_" + read.msn
                if key not in prime_reads:
                    if sess.query(RegisterRead).join(RegisterRead.present_type).filter(RegisterRead.bill_id==prime_bill.id, RegisterRead.present_date==read.present_date, RegisterRead.msn==read.msn, not_(ReadType.code.in_(NORMAL_READ_TYPES))).count() is not None:
                        prime_reads[key] = read
        supply_type = era.make_meter_category()

        if eras[0].start_date > start_date:
            chunk_start = eras[0].start_date
        else:
            chunk_start = start_date

        if hh_before(finish_date, era.finish_date):
            chunk_finish = finish_date
        else:
            chunk_finish = era.finish_date

        num_hh = utils.totalseconds(chunk_finish - (chunk_start - HH)) / (30 * 60)

        pw.print(','.join(('"' + str(value) + '"') for value in [supply.id, supply.name, supply.source.code, generator_type, site_codes, site_names, hh_format(start_date), hh_format(finish_date), era.pc.code, era.mtc.code, era.cop.code, ssc_code, len(prime_reads), supply_type]) + ',')
        pw.flush()
        pw.println(mpan_bit(supply, True, num_hh, eras, chunk_start, chunk_finish) + "," + mpan_bit(supply, False, num_hh, eras, chunk_start, chunk_finish))
        pw.flush()
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[151]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Mop Contract Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from sqlalchemy.sql.expression import text
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'Participant', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})


def make_fields(sess, contract, message=None):
    parties = sess.query(Party).from_statement("""select party.* from party, market_role, participant where party.market_role_id = market_role.id and party.participant_id = participant.id and market_role.code = 'M' order by participant.code""").all()
    initial_date = datetime.now(pytz.utc)
    if message is None:
        messages = []
    else:
        messages = [str(message)]
    return {'contract': contract, 'parties': parties, 'initial_date': datetime(initial_date.year, initial_date.month, initial_date.day), 'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        contract_id = inv.getLong('mop_contract_id')
        contract = Contract.get_mop_by_id(sess, contract_id)
        render(inv, template, make_fields(sess, contract))
    else:
        set_read_write(sess)
        contract_id = inv.getLong('mop_contract_id')
        contract = Contract.get_mop_by_id(sess, contract_id)
        if inv.hasParameter("update_state"):
            state = inv.getString("state")
            contract.state = state
            sess.commit()
            inv.sendSeeOther("/reports/107/output/?mop_contract_id=" +
                    str(contract.id))
        elif inv.hasParameter("ignore_snags"):
            ignore_date = form_date(inv, "ignore")
            sess.execute(text("""update snag set is_ignored = true from channel, era where snag.channel_id = channel.id and channel.era_id = era.id and era.hhdc_contract_id = :contract_id and snag.finish_date < :ignore_date"""), params=dict(contract_id=contract.id, ignore_date=ignore_date))
            sess.commit()
            inv.sendSeeOther("/reports/107/output/?mop_contract_id=" +
                    str(contract.id))
        elif inv.hasParameter("delete"):
            contract.delete(sess)
            sess.commit()
            inv.sendSeeOther("/reports/185/output/");
        else:
            party_id = inv.getLong("party_id")
            name = inv.getString("name")
            charge_script = inv.getString("charge_script")
            properties = inv.getString("properties")
            party = Party.get_by_id(sess, party_id)
            contract.update(sess, False, name, party, charge_script,
                    properties)
            sess.commit()
            inv.sendSeeOther("/reports/107/output/?mop_contract_id=" +
                    str(contract.id))
except UserException, e:
    render(inv, template, make_fields(sess, contract, e))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; MOP Contracts &gt; {{contract.name}}</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/185/output/">MOP Contracts</a> &gt;
      <a href="{{ context_path }}/reports/107/output/?mop_contract_id={{ contract.id }}">{{ contract.name }}</a>
      &gt; Edit
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    {% if request.getMethod() == 'GET' and request.getParameter('view') == 'confirm-delete' %}
      <form method="post" action=".">
        <fieldset>
          <legend>
            Are you sure you want to delete this contract?
          </legend>
          <input type="hidden" name="mop_contract_id"
            value="{{ contract.id }}"
          >
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p>
        <a href="{{ context_path }}/reports/151/output/?mop_contract_id={{ contract.id }}">Cancel</a>
      </p>
    {% else %}
      <form action="{{ context_path }}/reports/151/output/" method="post">
        <fieldset>
          <legend>Update Contract</legend>
          <input type="hidden" name="mop_contract_id"
            value="{{ contract.id }}"
          >
          <br>
          <label>Party</label>
          <select name="party_id">
            {% for party in parties %}
              {{ input_option('party_id', party.id, party.participant.code + ' : ' + party.name, contract.party.id) }}
            {% endfor %}
          </select>
          <br>
          <label>
            Name <input name="name" value="
              {%- if request.getParameter('name') -%}
                {{ request.getParameter('name') }}
              {%- else -%}
                {{ contract.name }}
              {%- endif -%}
            ">
          </label>
          <br>
          <br>
          Charge script
          <br>
          <textarea name="charge_script" rows="40" cols="80">
            {%- if request.getParameter('charge_script') -%}
              {{ request.getParameter('charge_script') }}
            {%- else -%}
              {{ contract.charge_script }}
            {%- endif -%}
          </textarea>
          <br />
          <br>
          Properties
          <br>
          <textarea name="properties" rows="40" cols="80">
            {%- if request.getParameter('properties') -%}
              {{ request.getParameter('properties') }}
            {%- else -%}
              {{ contract.properties }}
            {%- endif -%}
          </textarea>
          <br />
          <br />
          <h4>Example</h4>
          <code><pre>
has.importer=yes
file.type=.df2
hostname=example.com
username=username
password=password
directory0=downloads1
directory1=downloads2
          </pre></code>
          <input type="submit" value="Update">
        </fieldset>
      </form>
      <br />
      <br />
      <form action="." method="post">
        <fieldset>
          <legend>Update State</legend>
          <input type="hidden" name="mop_contract_id"
                  value="{{ contract.id }}">
          <label>State</label>
          <br>
          {{ input_textarea('state', contract.state, 40, 80) }}
          <br>
          <input type="submit" name="update_state" value="Update">
        </fieldset>
      </form>
      <br>
 
      <form action=".">
        <fieldset>
          <legend>Delete this contract</legend>
          <input type="hidden" name="mop_contract_id" value="{{contract.id}}">
          <input type="hidden" name="view" value="confirm-delete">
          <input type="submit" value="Delete">
        </fieldset>
      </form>
      <br>
    {% endif %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[153]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Bills Selector]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from datetime import datetime
from dateutil.relativedelta import relativedelta

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    init = datetime.utcnow()
    init = datetime(init.year, init.month, 1) - relativedelta(months=1)

    render(inv, template, {'init': init})

finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; CSV Bills</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      CSV Bills
    </p>
    
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    
    <form action="{{context_path}}/reports/27/output/">
      <fieldset>
        <legend>Download</legend>
        <br>
        For {{input_text('months', 1, 2, 2)}}
        month(s) finishing at the end of
        {{input_date('end', init, resolution='month')}}
        <input type="submit" value="Download">
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[155]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Supplies Monthly Duration Selector]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from datetime import datetime
from dateutil.relativedelta import relativedelta

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    init = datetime.utcnow()
    init = datetime(init.year, init.month, 1) - relativedelta(months=1)

    render(inv, template, {'init': init})

finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/" />
    <title>Chellow &gt; CSV Supplies Monthly Duration</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      CSV Supplies Monthly Duration
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <form action="{{context_path}}/reports/177/output/">
      <fieldset>
        <legend>Download</legend>
        <br/>
        For {{input_text('months', 1, 2, 2)}}
        month(s) finishing at the end of
        {{input_date('end', init, resolution='month')}}
        <input type="submit" value="Download">
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[157]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Supplies Snapshot Selector]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import datetime
import pytz
from dateutil.relativedelta import relativedelta

Monad.getUtils()['impt'](globals(), 'templater', 'db')

sess = None
try:
    sess = db.session()
    now = datetime.datetime.now(pytz.utc)
    templater.render(inv, template, {'last_month': datetime.datetime(now.year, now.month, 1, tzinfo=pytz.utc) - relativedelta(months=1)})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; CSV Supplies Snapshot</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      CSV Supplies Snapshot
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <form action="{{context_path}}/reports/33/output/">
      <fieldset>
        <legend>Supply level information</legend>
        <br>
        <fieldset>
          <legend>For the end of</legend>
          {{input_date(None, last_month, 'month')}}
        </fieldset>
        <br>
        <input type="submit" value="Download">
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[159]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Sites Monthly Duration Selector]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from datetime import datetime
from dateutil.relativedelta import relativedelta

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException', 'HH'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    now = datetime.utcnow()
    month_start = datetime(now.year, now.month, 1) - relativedelta(months=1)
    month_finish = datetime(now.year, now.month, 1) - HH

    render(inv, template, {'month_start': month_start, 'month_finish': month_finish})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; CSV Sites Monthly Duration</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      CSV Sites Monthly Duration
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <form action="{{context_path}}/reports/161/output/">
      <fieldset>
        <legend>Download</legend>
        <br>
        For {{input_text('months', '1', 2, 2)}}
        month(s) finishing at the end of
        {{input_date('finish', month_finish, resolution='month')}}
        <input type="submit" value="Download">
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[161]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Sites Monthly Duration]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import datetime
import os
import sys
import traceback
import threading
import pytz
from dateutil.relativedelta import relativedelta
from sqlalchemy import or_

Monad.getUtils()['impt'](globals(), 'templater', 'db', 'utils', 'computer')

Site, Era, Bill = db.Site, db.Era, db.Bill
HH, hh_after, hh_format = utils.HH, utils.hh_after, utils.hh_format
totalseconds = utils.totalseconds

caches = {}

year = inv.getInteger("finish_year")
month = inv.getInteger("finish_month")
months = inv.getInteger("months")

if inv.hasParameter('site_id'):
    st_id = inv.getLong('site_id')
else:
    st_id = None
    
finish_date = datetime.datetime(year, month, 1, tzinfo=pytz.utc) + relativedelta(months=1) - HH
start_date = datetime.datetime(year, month, 1, tzinfo=pytz.utc) - relativedelta(months=months-1)

def process_site(sess, site, month_start, month_finish, forecast_date, tmp_file):
    site_code = site.code
    associates = []
    sources = []
    generator_types = []
    metering_type = 'no-supply'
    problem = ''
    month_data = {}

    for stream_name in ['import-net', 'export-net', 'import-gen', 'export-gen', 'import-3rd-party', 'export-3rd-party', 'msp', 'used', 'used-3rd-party']:
        month_data[stream_name + '-kwh'] = 0
        month_data[stream_name + '-gbp'] = 0

    has_3rd_party = False
    third_party_contracts = {}
    
    billed_gbp = 0
    billed_kwh = 0

    for group in site.groups(sess, month_start, month_finish, False):
        for cand_site in group.sites:
            cand_site_code = cand_site.code
            if cand_site_code != site_code and cand_site_code not in associates:
                associates.append(cand_site_code)
        for cand_supply in group.supplies:
            for cand_era in cand_supply.find_eras(sess, month_start, month_finish):
                if cand_era.imp_mpan_core is not None and metering_type != 'hh':
                    if cand_era.pc.code == '00':
                        metering_type = 'hh'
                    elif metering_type != 'amr':
                        if len(cand_era.channels) > 0:
                            metering_type = 'amr'
                        elif metering_type != 'nhh':
                            if cand_era.mtc.meter_type.code not in ['UM', 'PH']:
                                metering_type = 'nhh'
                            else:
                                metering_type = 'unmetered'

    for group in site.groups(sess, month_start, month_finish, True):
        if group.start_date > start_date:
            chunk_start = group.start_date
        else:
            chunk_start = start_date

        if group.finish_date > finish_date:
            chunk_finish = finish_date
        else:
            chunk_finish = group.finish_date

        for supply in group.supplies:
            source_code = supply.source.code
            if source_code not in sources:
                sources.append(source_code)

            if supply.generator_type is not None:
                gen_type = supply.generator_type.code
                if gen_type not in generator_types:
                    generator_types.append(gen_type)

            for era in sess.query(Era).filter(Era.supply_id==supply.id, Era.start_date<=chunk_finish, or_(Era.finish_date==None, Era.finish_date>=chunk_start)):
                tmp_file.write(' ')

                imp_mpan_core = era.imp_mpan_core

                # GBP
                if imp_mpan_core is None:
                    continue

                if era.start_date > chunk_start:
                    bill_start = era.start_date
                else:
                    bill_start = chunk_start
                if hh_after(era.finish_date, chunk_finish):
                    bill_finish = chunk_finish
                else:
                    bill_finish = era.finish_date

                supplier_contract = era.imp_supplier_contract
                if source_code in ('net', 'gen-net', '3rd-party', '3rd-party-reverse'):
                    #tmp_file.write("starting vbill, " + str(System.currentTimeMillis()))
                    supply_source = computer.SupplySource(sess, bill_start, bill_finish, forecast_date, era, True, tmp_file, caches)
                    if supply_source.measurement_type not in ['hh', 'amr']:
                        kwh = sum(hh['msp-kwh'] for hh in supply_source.hh_data)
                        if source_code in ('net', 'gen-net'):
                            month_data['import-net-kwh'] += kwh
                        elif source_code in ('3rd-party', '3rd-party-reverse'):
                            month_data['import-3rd-party-kwh'] += kwh

                    #tmp_file.write("finished init from mpan, " + str(System.currentTimeMillis()))
                    import_vb_function = computer.contract_func(caches, supplier_contract, 'virtual_bill', tmp_file)
                    if import_vb_function is None:
                        problem += "Can't find the virtual_bill function in the supplier contract. "
                    else:
                        import_vb_function(supply_source)
                        v_bill = supply_source.supplier_bill
                        #tmp_file.write("finishing vbill, " + str(System.currentTimeMillis()))
                        
                        if 'problem' in v_bill and len(v_bill['problem']) > 0:
                            problem += 'Supplier Problem: ' + v_bill['problem']

                        try:
                            gbp = v_bill['net-gbp']
                        except KeyError:
                            problem += 'For the supply ' + import_mpan.toString() + ' the virtual bill ' + str(v_bill) + ' from the contract ' + supplier_contract.getName() + ' does not contain the net-gbp key.'
                        if source_code in ('net', 'gen-net'):
                            month_data['import-net-gbp'] += gbp
                        elif source_code in ('3rd-party', '3rd-party-reverse'):
                            month_data['import-3rd-party-gbp'] += gbp

                    dc_contract = era.hhdc_contract
                    if dc_contract is not None:
                        dc_bill = supply_source.contract_func(dc_contract, 'virtual_bill')(supply_source)
                        gbp = dc_bill['net-gbp']
                        if 'problem' in dc_bill and len(dc_bill['problem']) > 0:
                            problem += 'DC Problem: ' + dc_bill['problem']
                        if source_code in ('net', 'gen-net'):
                            month_data['import-net-gbp'] += gbp
                        elif source_code in ('3rd-party', '3rd-party-reverse'):
                            month_data['import-3rd-party-gbp'] += gbp

                    mop_contract = era.mop_contract
                    if mop_contract is not None:
                        mop_bill_function = supply_source.contract_func(mop_contract, 'virtual_bill')
                        if mop_bill_function is not None:
                            mop_bill = mop_bill_function(supply_source)
                            gbp = mop_bill['net-gbp']
                            if 'problem' in mop_bill and len(mop_bill['problem']) > 0:
                                problem += 'MOP Problem: ' + mop_bill['problem']
                            if source_code in ('net', 'gen-net'):
                                month_data['import-net-gbp'] += gbp
                            elif source_code in ('3rd-party', '3rd-party-reverse'):
                                month_data['import-3rd-party-gbp'] += gbp

            for bill in sess.query(Bill).filter(Bill.supply_id==supply.id, Bill.start_date<=chunk_finish, Bill.finish_date>=chunk_start):
                bill_start = bill.start_date
                bill_finish = bill.finish_date
                bill_duration = totalseconds(bill_finish - bill_start) + (30 * 60)
                overlap_duration = totalseconds(min(bill_finish, chunk_finish)  - max(bill_start, chunk_start)) + (30 * 60)
                overlap_proportion = float(overlap_duration) / bill_duration
                billed_gbp += overlap_proportion * float(bill.net)
                billed_kwh += overlap_proportion * float(bill.kwh)

        #tmp_file.println("getting site ds, " + str(System.currentTimeMillis()))

        displaced_era = computer.displaced_era(sess, group, chunk_start, chunk_finish)
        site_ds = computer.SiteSource(sess, site, chunk_start, chunk_finish, forecast_date, tmp_file, caches, displaced_era)
        if displaced_era != None:
            #tmp_file.println("starting displaced, " + str(System.currentTimeMillis()))
            month_data['msp-gbp'] += computer.contract_func(caches, displaced_era.imp_supplier_contract, 'displaced_virtual_bill', tmp_file)(site_ds)['net-gbp']

            #tmp_file.println("finishing displaced, " + str(System.currentTimeMillis()))

        #tmp_file.println("finishing site ds " + str(System.currentTimeMillis()))

        for stream_name in ('import-3rd-party', 'export-3rd-party', 'import-net', 'export-net', 'import-gen', 'export-gen', 'msp'):
            name = stream_name + '-kwh'
            month_data[name] += sum(hh[name] for hh in site_ds.hh_data)

        month_data['used-3rd-party-kwh'] = month_data['import-3rd-party-kwh'] - month_data['export-3rd-party-kwh']
        month_data['used-3rd-party-gbp'] = month_data['import-3rd-party-gbp']
        month_data['used-gbp'] += month_data['import-net-gbp'] + month_data['msp-gbp'] + month_data['used-3rd-party-gbp']

        month_data['used-kwh'] += month_data['msp-kwh'] + month_data['used-3rd-party-kwh'] + month_data['import-net-kwh']

    sources.sort()
    generator_types.sort()

    result = [site.code, site.name, ','.join(associates), ','.join(sources), '.'.join(generator_types), hh_format(month_finish), month_data['import-net-kwh'], month_data['msp-kwh'], month_data['export-net-kwh'], month_data['used-kwh'], month_data['export-gen-kwh'], month_data['import-gen-kwh'], month_data['import-3rd-party-kwh'], month_data['export-3rd-party-kwh'], month_data['import-net-gbp'], month_data['msp-gbp'], 0, month_data['used-gbp'], month_data['used-3rd-party-gbp'], billed_kwh, billed_gbp, metering_type, problem]
    #tmp_file.println("Finished call method " + str(System.currentTimeMillis()))
    #count = Hiber.session().createQuery("select count(*) from hh_datum").uniqueResult()
    #tmp_file.println("Rows " + str(count))
    return result

def long_process():
    now = datetime.datetime.now(pytz.utc)
    
    sess = None
    try:
        sess = db.session()
        if st_id is None:
            st = None
            base_name = "site_monthly_duration_for_all_site_for_" + str(months) + "_to_" + str(year) + "_" + str(month) + ".csv"
        else:
            st = Site.get_by_id(sess, st_id)
            base_name = "site_monthly_duration_for_" + st.code + "_" + str(months) + "_to_" + str(year) + "_" + str(month) + ".csv"
        running_name = "RUNNING_" + base_name
        finished_name = "FINISHED_" + base_name

        download_path = Monad.getContext().getRealPath("/downloads")
        os.chdir(download_path)
        tmp_file = open(running_name, "w")

        forecast_date = computer.forecast_date()

        tmp_file.write("Site Id,Site Name,Associated Site Ids,Sources,Generator Types,Month,Metered Imported kWh,Metered Displaced kWh,Metered Exported kWh,Metered Used kWh,Metered Parasitic kWh,Metered Generated kWh,Metered 3rd Party Import kWh,Metered 3rd Party Export kWh,Metered Imported GBP,Metered Displaced GBP,Metered Exported GBP,Metered Used GBP,Metered 3rd Party Import GBP,Billed Imported kWh,Billed Imported GBP,Metering Type,Problem")

        for i in range(months):
            sites = sess.query(Site).order_by(Site.code)
            if st is not None:
                sites = sites.filter(Site.id==st.id)
            for site in sites:
                #tmp_file.write("starting site, " + str(System.currentTimeMillis()))
                #tmp_file.write("starting site, " + str(System.currentTimeMillis()))

                month_start = start_date + relativedelta(months=i)
                month_finish = month_start + relativedelta(months=1) - HH
                #tq = process_site(sess, site, month_start, month_finish, forecast_date,  tmp_file)
                #tmp_file.write('printing, ' + str(System.currentTimeMillis()) + ',' + ','.join('"' + str(value) + '"' for value in tq))
                tmp_file.write('\r\n' + ','.join('"' + str(value) + '"' for value in process_site(sess, site, month_start, month_finish, forecast_date, tmp_file)))
                #tmp_file.write("finishing site, " + str(System.currentTimeMillis()))
                tmp_file.flush()

    except:
        tmp_file.write("Problem " + traceback.format_exc())
    finally:
        try:
            if sess is not None:
                sess.close()
        except:
            tmp_file.write("\nProblem closing session.")
        finally:
            tmp_file.close()
            os.rename(running_name, finished_name)

        
threading.Thread(target=long_process).start()
inv.sendSeeOther("/reports/251/output/")]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[163]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Bills]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import Account

account_id = inv.getLong('account-id')
account = Account.getAccount(account_id)
bills_element = doc.createElement('bills')
source.appendChild(bills_element)
bills_element.appendChild(account.toXml(doc, XmlTree('contract')))
for bill in Hiber.session().createQuery("from Bill bill where bill.account = :account order by bill.startDate.date").setEntity('account', account).list():
    bills_element.appendChild(bill.toXml(doc))]]></value>
		<value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />

    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/bills/account/hhdc-contract/@name" />
                    &gt; Accounts &gt;
                    <xsl:value-of
                        select="/source/bills/account/@reference" />
                    &gt; Bills
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/113/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={/source/bills/account/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/bills/account/hhdc-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/109/output/?hhdc-contract-id={/source/bills/account/hhdc-contract/@id}">
                        <xsl:value-of select="'Accounts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/111/output/?account-id={/source/bills/account/@id}">
                        <xsl:value-of
                            select="/source/bills/account/@reference" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Bills'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>Bills</caption>
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Net</th>
                            <th>VAT</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/bills/bill">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/87/output/?bill-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(day-start-date/@year, '-', day-start-date/@month, '-', day-start-date/@day)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(day-finish-date/@year, '-', day-finish-date/@month, '-', day-finish-date/@day)" />
                                </td>
                                <td>
                                    <xsl:value-of select="@net" />
                                </td>
                                <td>
                                    <xsl:value-of select="@vat" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[165]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Bill Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from sqlalchemy.sql.expression import text
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Bill', 'BillType', 'Batch', 'Participant', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date', 'form_decimal'],
        'templater': ['render']})


def make_fields(sess, bill, message=None):
    bill_types = sess.query(BillType).from_statement("select * from bill_type order by code")
    messages = [] if message is None else [str(message)]
    return {'bill': bill, 'bill_types': bill_types, 'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        bill_id = inv.getLong('supplier_bill_id')
        bill = Bill.get_by_id(sess, bill_id)
        render(inv, template, make_fields(sess, bill))
    else:
        set_read_write(sess)
        bill_id = inv.getLong('supplier_bill_id')
        bill = Bill.get_by_id(sess, bill_id)
        if inv.hasParameter('update'):
            account = inv.getString("account")
            reference = inv.getString("reference")
            issue_date = form_date(inv, "issue")
            start_date = form_date(inv, "start")
            finish_date = form_date(inv, "finish")
            kwh = form_decimal(inv, "kwh")
            net = form_decimal(inv, "net")
            vat = form_decimal(inv, "vat")
            gross = form_decimal(inv, "gross")
            type_id = inv.getLong("bill_type_id")
            breakdown = inv.getString("breakdown")
            bill_type = BillType.get_by_id(sess, type_id)

            bill.update(account, reference, issue_date, start_date, finish_date, kwh, net, vat, gross, bill_type, breakdown)
            sess.commit()
            inv.sendSeeOther("/reports/105/output/?supplier_bill_id=" +
                    str(bill.id))
        elif inv.hasParameter("delete"):
            bill.delete(sess)
            sess.commit()
            inv.sendSeeOther("/reports/91/output/?supplier_batch_id=" + str(bill.batch.id))
except UserException, e:
    render(inv, template, make_fields(sess, bill, e))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Supplier Contracts &gt; {{bill.batch.contract.name}} &gt;
      Batches &gt; {{bill.batch.reference}} &gt; Bills &gt; {{bill.id}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/75/output/">Supplier Contracts</a> &gt;
      <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{bill.batch.contract.id}}">{{bill.batch.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/89/output/?supplier_contract_id={{bill.batch.contract.id}}">Batches</a> &gt;
      <a href="{{context_path}}/reports/91/output/?supplier_batch_id={{bill.batch.id}}">{{bill.batch.reference}}</a> &gt;
      <a href="{{context_path}}/reports/105/output/?supplier_bill_id={{bill.id}}">Bill {{bill.id}}</a> &gt;
      Edit
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br>
    {% if request.getParameter('confirm_delete') %}
      <form method="post" action=".">
        <fieldset>
          <legend>Are you sure you want to delete this bill?</legend>
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p><a href=".">Cancel</a></p>
    {% else %}
      <form action="." method="post">
        <fieldset>
          <input type="hidden" name="supplier_bill_id" value="{{bill.id}}">
          <legend>Update This Bill</legend>
          <p>
            <a href="{{context_path}}/reports/7/output/?supply_id={{bill.supply.id}}">Supply</a>
          </p>
          <label>
            Reference {{input_text('reference', bill.reference)}}
          </label>
          <br>
          <label>
            Account {{input_text('account', bill.account)}}
          </label>
          <br><br>
          <fieldset>
            <legend>Issue Date</legend>
            {{input_date('issue', bill.issue_date)}}
          </fieldset>
          <br>
          <fieldset>
            <legend>Start Date</legend>
            {{input_date('start', bill.start_date)}}
          </fieldset>
          <br>
          <fieldset>
            <legend>Finish Date</legend>
            {{input_date('finish', bill.finish_date)}}
          </fieldset>
          <br>
          <label>
            kWh {{input_text('kwh', '' ~ bill.kwh)}}
          </label>
          <br>
          <label>
            Net {{input_text('net', '' ~ bill.net)}}
          </label>
          <br>
          <label>
            VAT {{input_text('vat', '' ~ bill.vat)}}
          </label>
          <br>
          <label>Gross {{input_text('gross', '' ~ bill.gross)}}</label>
          <br>
          <label>Type
            <select name="bill_type_id">
              {% for type in bill_types %}
                {{input_option('type_id', type.id, type.code + ' ' + type.description, initial=bill.bill_type.id)}}
              {% endfor %}
            </select>
          </label>
          <br><br>
          <label>
            Breakdown <br>
            {{input_textarea('breakdown', bill.breakdown, 10, 80)}}
          </label>
          <br>
          Example Breakdown

          <pre>
{'raw_lines': ['"net-gbp", "unrestricted-kwh", "unrestricted-rate", "unrestricted-gbp"',
 '"100", "1000", "0.1", "100"'],
 'unrestricted-kwh': 1000, 'unrestricted-rate': 0.1, 'unrestricted-gbp': 100}          </pre>
          <br>
          <input type="submit" name="update" value="Update">
        </fieldset>
      </form>
      <br>
      <form action=".">
        <fieldset>
          <legend>Delete This Bill</legend>
          <input type="hidden" name="supplier_bill_id" value="{{bill.id}}">
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[167]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Supplies HH Data Selector]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from datetime import datetime
from dateutil.relativedelta import relativedelta

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException', 'HH'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    now = datetime.utcnow()
    start_date = datetime(now.year, now.month, 1) - relativedelta(months=1)
    finish_date = datetime(now.year, now.month, 1) - HH

    render(inv, template, {'start_date': start_date, 'finish_date': finish_date})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>Chellow &gt; CSV Supplies HH Duration</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      CSV Supplies HH Duration
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br>
    <form action="{{context_path}}/reports/169/output/">
      <fieldset>
        <legend>48 Column Format</legend>
        <br/>
        <select name="imp_related">
          <option value="true">Import Related</option>
          <option value="false">Export Related</option>
        </select>
        <select name="channel_type">
          <option value="ACTIVE">ACTIVE</option>
          <option value="REACTIVE_IMP">REACTIVE_IMP</option>
          <option value="REACTIVE_EXP">REACTIVE_EXP</option>
        </select> from {{input_date('start', start_date)}} to
        {{input_date('finish', finish_date)}}
        <input type="submit" value="Download">
      </fieldset>
    </form>
    <br><br>
    <form action="{{context_path}}/reports/187/output/">
      <fieldset>
        <legend>HH Per Row Format</legend>
        <br/>
        From {{input_date('start', start_date)}} to
        {{input_date('finish', finish_date)}}
        <input type="submit" value="Download">
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[169]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Supplies HH Data]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from datetime import datetime
from dateutil.relativedelta import relativedelta
from java.util.zip import ZipOutputStream, ZipEntry
from java.io import PrintWriter, OutputStreamWriter
import pytz

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')

Channel, Supply, HhDatum, Era = db.Channel, db.Supply, db.HhDatum, db.Era
form_date, HH = utils.form_date, utils.HH

sess = None
try:
    sess = db.session()
    start_date = form_date(inv, 'start')
    finish_date = form_date(inv, 'finish')
    imp_related = inv.getBoolean('imp_related')
    channel_type = inv.getString('channel_type')
    
    #inv.getResponse().setContentType('text/csv')
    #inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="report.csv"')
    #pw = inv.getResponse().getWriter()
    #pw.println('hello')
    #pw.flush()

    if inv.hasParameter('supply_id'):
        supply_id = inv.getLong('supply_id')
        supplies = sess.query(Supply).from_statement("select * from supply where id = :supply_id").params(supply_id=supply_id)
        file_name = "supplies_hh_data_" + str(supply_id) + "_" + finish_date.strftime('%Y%m%d%M%H') + ".csv"
        inv.getResponse().setContentType('text/csv')
        inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="' + file_name + '"')
        pw = inv.getResponse().getWriter()
        zout = None
    else:
        supplies = sess.query(Supply).from_statement("select distinct supply.* from supply, era where era.supply_id = supply.id and (era.finish_date is null or era.finish_date >= :start_date) and era.start_date <= :finish_date").params(start_date=start_date, finish_date=finish_date)
        file_name = "supplies_hh_data_" + finish_date.strftime('%Y%m%d%M%H') + ".zip"
        inv.getResponse().setContentType('application/zip')
        inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="' + file_name + '"')
        sout = inv.getResponse().getOutputStream()
        zout = ZipOutputStream(sout)
        pw = PrintWriter(OutputStreamWriter(zout, 'UTF-8'))

    for supply in supplies:
        era = supply.find_era_at(sess, finish_date)
        if era is None or era.imp_mpan_core is None:
            mpan_core_str = "NA"
        else:
            mpan_core_str = era.imp_mpan_core
        if zout is not None:
            zout.putNextEntry(ZipEntry(mpan_core_str + '_' + str(supply.id) + '.csv'))
        pw.print("MPAN Core,Date,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48")
        current_date = start_date
        hh_data = iter(sess.query(HhDatum).join(Channel).join(Era).filter(Era.supply_id==supply.id, HhDatum.start_date>=start_date, HhDatum.start_date<=finish_date, Channel.imp_related==imp_related, Channel.channel_type==channel_type).order_by(HhDatum.start_date))

        try:
            datum = hh_data.next()
        except StopIteration:
            datum = None

        while not current_date > finish_date:
            if current_date.hour == 0 and current_date.minute == 0:
                pw.print("\r\n" + mpan_core_str + "," + current_date.strftime('%Y-%m-%d'))
            pw.print(",")

            if datum is not None and datum.start_date == current_date:
                pw.print(str(datum.value))
                try:
                    datum = hh_data.next()
                except StopIteration:
                    datum = None
            current_date += HH
        pw.flush()
    pw.close()
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[171]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Admin: System]]></value>
		<value><![CDATA[from java.text import DecimalFormat
from java.lang import Runtime, System, Thread
from java.io import StringWriter, InputStreamReader
from net.sf.chellow.monad import Hiber, Monad, MonadMessage
from java.lang.management import OperatingSystemMXBean, ManagementFactory
from com.jezhumble.javasysmon import JavaSysMon
from net.sf.chellow.ui import ContextListener
from net.sf.chellow.billing import Contract

interrupt_id = None
if inv.getRequest().getMethod() == "POST":
    if inv.hasParameter('interrupt'):
        interrupt_id = inv.getLong('thread-id')
        Monad.getUtils()['imprt'](globals(), {
        'db': ['HhDatum', 'Site', 'Supply', 'set_read_write', 'session'], 
        'utils': ['UserException', 'HH', 'form_date'],
        'templater': ['render', 'on_start_report', 'get_report']})

    elif inv.hasParameter('run_shutdown'):
        shutdown_contract = Contract.getNonCoreContract('shutdown')
        shutdown_contract.callFunction('on_shut_down', [Monad.getContext()])
        source.appendChild(MonadMessage("Shut down successfully.").toXml(doc))
        
    elif inv.hasParameter('run_startup'):
        startup_contract = Contract.getNonCoreContract('startup')
        startup_contract.callFunction('on_start_up', [Monad.getContext()])
    elif inv.hasParameter('cancel_backend'):
        backend_pid = inv.getLong('backend_pid')
        con = Hiber.session().connection()
        stmt = con.createStatement()
        stmt.execute("select pg_terminate_backend(" + str(backend_pid) + ")")
        stmt.close()
        Hiber.commit()
        source.appendChild(MonadMessage("Cancelled backend.").toXml(doc))

df = DecimalFormat("###,###,###,###,##0")
runtime = Runtime.getRuntime()
source.setAttribute("free-memory", df.format(runtime.freeMemory()))
source.setAttribute("max-memory", df.format(runtime.maxMemory()))
source.setAttribute("total-memory", df.format(runtime.totalMemory()))
source.setAttribute("available-processors", str(runtime.availableProcessors()))

source.setAttribute("system-load-average", str(ManagementFactory.getOperatingSystemMXBean().getSystemLoadAverage()))

mon = JavaSysMon()
source.setAttribute('cpu-frequency-in-hz', df.format(mon.cpuFrequencyInHz()))
source.setAttribute('current-pid', df.format(mon.currentPid()))
source.setAttribute('num-cpus', df.format(mon.numCpus()))
source.setAttribute('os-name', mon.osName())
source.setAttribute('uptime-in-seconds', df.format(mon.uptimeInSeconds()))
cpu = mon.cpuTimes()
source.setAttribute('idle-millis', df.format(cpu.getIdleMillis()))
source.setAttribute('system-millis', df.format(cpu.getSystemMillis()))
source.setAttribute('total-millis', df.format(cpu.getTotalMillis()))
source.setAttribute('user-millis', df.format(cpu.getUserMillis()))

props = doc.createElement('properties')
source.appendChild(props)
sw = StringWriter()
System.getProperties().store(sw, None)
props.setTextContent(sw.toString())

req_map = dict([[entry.getKey(), entry.getValue()] for entry in inv.getMonad().getServletConfig().getServletContext().getAttribute('net.sf.chellow.request_map').entrySet()])

for entry in Thread.getAllStackTraces().entrySet():
    thread_element = doc.createElement('thread')
    source.appendChild(thread_element)
    thread = entry.getKey()

    if interrupt_id is not None:
        request = get_report(thread.getId())
        if request is not None:
            request.getResponse().getOutputStream().close()

    if thread.getId() == interrupt_id:
        thread.interrupt()
    #if thread.getId() == 43:
    #    thread.stop()

    trace = ''.join([str(item) + "\r\n" for item in entry.getValue()])
    thread_element.setTextContent(trace + " " + str(dir(thread)))
    thread_element.setAttribute('id', str(thread.getId()))
    thread_element.setAttribute('name', thread.getName())
    thread_element.setAttribute('is-interrupted', str(thread.isInterrupted()))
    thread_element.setAttribute('status', thread.getState().toString())
    thread_element.setAttribute('request', req_map.get(thread.getId()))

con = Hiber.session().connection()
db_metadata = con.getMetaData()
source.setAttribute("db-product-name", db_metadata.getDatabaseProductName())
source.setAttribute("db-product-version", db_metadata.getDatabaseProductVersion())
source.setAttribute("db-driver-name", db_metadata.getDriverName())
source.setAttribute("db-driver-version", db_metadata.getDriverVersion())
istream = InputStreamReader(Monad.getContext().getResource("/WEB-INF/VERSION").openStream(), "UTF-8")
c = istream.read()
sr = StringWriter()
while c != -1:
    sr.write(c)
    c = istream.read()
source.setAttribute("chellow-version", sr.toString())

source.setAttribute('transaction-isolation', str(con.getTransactionIsolation()))

pstmt = con.prepareStatement("select * from pg_stat_activity")
rs = pstmt.executeQuery()
rs_meta = rs.getMetaData()
pg_stat_activity_el = doc.createElement('pg-stat-activity')
source.appendChild(pg_stat_activity_el)
for i in range(1, rs_meta.getColumnCount() + 1):
    column_el = doc.createElement('column')
    pg_stat_activity_el.appendChild(column_el)
    column_el.setAttribute('name', rs_meta.getColumnName(i) + ' (' + rs_meta.getColumnTypeName(i) + ')')

while rs.next():
    row_el = doc.createElement('row')
    pg_stat_activity_el.appendChild(row_el)
    for i in range(1, rs_meta.getColumnCount() + 1):
        cell_el = doc.createElement('cell')
        row_el.appendChild(cell_el)
        cell_el.setAttribute('value', rs.getString(i))

settings_el = doc.createElement('pg-settings')
source.appendChild(settings_el)
for setting in ('autovacuum', 'autovacuum_naptime', 'autovacuum_max_workers', 'autovacuum_vacuum_threshold', 'autovacuum_analyze_threshold', 'autovacuum_vacuum_scale_factor', 'autovacuum_analyze_scale_factor', 'max_pred_locks_per_transaction', 'track_counts', 'track_activities', 'port', 'listen_addresses'):
    pstmt = con.prepareStatement("show " + setting)
    rs = pstmt.executeQuery()
    while rs.next():
        setting_el = doc.createElement('setting')
        settings_el.appendChild(setting_el)
        setting_el.setAttribute('name', setting)
        setting_el.setAttribute('value', str(rs.getString(setting)))

pstmt = con.prepareStatement("select * from pg_stat_all_tables where schemaname = 'public'")
rs = pstmt.executeQuery()
rs_meta = rs.getMetaData()
pg_stat_all_tables_el = doc.createElement('pg-stat-all-tables')
source.appendChild(pg_stat_all_tables_el)
for i in range(1, rs_meta.getColumnCount() + 1):
    column_el = doc.createElement('column')
    pg_stat_all_tables_el.appendChild(column_el)
    column_el.setAttribute('name', rs_meta.getColumnName(i) + ' (' + rs_meta.getColumnTypeName(i) + ')')

while rs.next():
    row_el = doc.createElement('row')
    pg_stat_all_tables_el.appendChild(row_el)
    for i in range(1, rs_meta.getColumnCount() + 1):
        cell_el = doc.createElement('cell')
        row_el.appendChild(cell_el)
        cell_el.setAttribute('value', rs.getString(i))

rs.close()

pstmt = con.prepareStatement("select t.relname as table_name, i.relname as index_name, array_to_string(array_agg(a.attname), ', ') as column_names from pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace where t.oid = ix.indrelid and i.oid = ix.indexrelid and a.attrelid = t.oid and a.attnum = ANY(ix.indkey) and t.relkind = 'r' and t.relnamespace = pg_namespace.oid and pg_namespace.nspname = 'public' group by t.relname, i.relname, pg_namespace.nspname order by t.relname, i.relname""")
rs = pstmt.executeQuery()
rs_meta = rs.getMetaData()
table_el = doc.createElement('pg-indexes')
source.appendChild(table_el)
for i in range(1, rs_meta.getColumnCount() + 1):
    column_el = doc.createElement('column')
    table_el.appendChild(column_el)
    column_el.setAttribute('name', rs_meta.getColumnName(i) + ' (' + rs_meta.getColumnTypeName(i) + ')')

while rs.next():
    row_el = doc.createElement('row')
    table_el.appendChild(row_el)
    for i in range(1, rs_meta.getColumnCount() + 1):
        cell_el = doc.createElement('cell')
        row_el.appendChild(cell_el)
        cell_el.setAttribute('value', rs.getString(i))

rs.close()


py_libs_el = doc.createElement('py-libs')
source.appendChild(py_libs_el)
import sqlalchemy
py_lib_el = doc.createElement('py-lib')
py_libs_el.appendChild(py_lib_el)
py_lib_el.setAttribute('name', 'SQLAlchemy')
py_lib_el.setAttribute('version', sqlalchemy.__version__)

import pg8000
py_lib_el = doc.createElement('py-lib')
py_libs_el.appendChild(py_lib_el)
py_lib_el.setAttribute('name', 'pg8000')
py_lib_el.setAttribute('version', pg8000.__version__)

'''
con.rollback()
con.setAutoCommit(True)
#pstmt = con.prepareStatement("vacuum analyze")
pstmt = con.prepareStatement("create index hh_datum_channel_id_idx on hh_datum (channel_id)")
pstmt.execute()
pstmt.close()
con.setAutoCommit(False)
''']]></value>
		<value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; System</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'System'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
<p><a href=".">Refresh</a></p>
<p>Chellow Version
                    <a href="https://bitbucket.org/ww_tlocke/chellow/commits/{/source/@chellow-version}" ><xsl:value-of select="/source/@chellow-version" /></a></p>
                <table style="text-align: right">
                    <caption>JVM memory (bytes)</caption>
                    <tr>
                        <th>Max</th>
                        <td>
                            <xsl:value-of select="/source/@max-memory" />
                        </td>
                    </tr>
                    <tr>
                        <th>Total</th>
                        <td>
                            <xsl:value-of
                                select="/source/@total-memory" />
                        </td>
                    </tr>
                    <tr>
                        <th>Free</th>
                        <td>
                            <xsl:value-of select="/source/@free-memory" />
                        </td>
                    </tr>
                </table>
                <br/>
                <table>
                <tr>
                  <td>Available Processors</td>
                  <td><xsl:value-of select="/source/@available-processors"/></td>
                </tr>
                <tr>
                  <td>System Load Average</td>
                  <td><xsl:value-of select="/source/@system-load-average"/></td>
                </tr>
                </table>
<br/>
    <table><caption>JavaSysMon</caption>
      <tr>
          <td>CPU Frequency (Hz)</td>
          <td><xsl:value-of select="/source/@cpu-frequency-in-hz"/></td>
      </tr>
      <tr>
          <td>Current PID</td>
          <td><xsl:value-of select="/source/@current-pid"/></td>
      </tr>
      <tr>
          <td>Number Of CPU cores</td>
          <td><xsl:value-of select="/source/@num-cpus"/></td>
      </tr>
      <tr>
          <td>OS Name</td>
          <td><xsl:value-of select="/source/@os-name"/></td>
      </tr>
      <tr>
          <td>Uptime (s)</td>
          <td><xsl:value-of select="/source/@uptime-in-seconds"/></td>
      </tr>
      <tr>
          <td>Idle ms</td>
          <td><xsl:value-of select="/source/@idle-millis"/></td>
      </tr>
      <tr>
          <td>System ms</td>
          <td><xsl:value-of select="/source/@system-millis"/></td>
      </tr>
      <tr>
          <td>Total ms</td>
          <td><xsl:value-of select="/source/@total-millis"/></td>
      </tr>
      <tr>
          <td>User ms</td>
          <td><xsl:value-of select="/source/@user-millis"/></td>
      </tr>
    </table>

<br/>

<table><caption>All Live Threads</caption>
<tr><th>Id</th><th>Name</th><th>Interrupted?</th><th>Status</th><th>Request</th><th>Stack Trace</th>
</tr>
<xsl:for-each select="/source/thread">
<tr>
   <td><xsl:value-of select="@id"/></td>
   <td><xsl:value-of select="@name"/></td>
   <td><xsl:value-of select="@is-interrupted"/>
       <xsl:if test="@is-interrupted='False'">
       <form method="post" action=".">
           <input type="hidden" name="thread-id" value="{@id}" />
           <input type="submit" name="interrupt" value="Interrupt" />
       </form> 
       </xsl:if>
   </td>
   <td><xsl:value-of select="@status"/></td>
   <td><xsl:value-of select="@request"/></td>
   <td><pre><xsl:value-of select="."/></pre></td>
</tr>
</xsl:for-each>
</table>

<h4>Java System Properties</h4>

<pre><xsl:value-of select="/source/properties"/></pre>

<h4>DBMS Properties</h4>

<table>
<tr><th>Product Name</th><td><xsl:value-of select="/source/@db-product-name" /></td></tr>
<tr><th>Product Version</th><td><xsl:value-of select="/source/@db-product-version"/></td></tr>
<tr><th>Driver Name</th><td><xsl:value-of select="/source/@db-driver-name"/></td></tr>
<tr><th>Driver Version</th><td><xsl:value-of select="/source/@db-driver-version"/></td></tr>
<tr><th>Transaction Isolation (of current connection)</th><td><xsl:value-of select="/source/@transaction-isolation"/></td></tr>
  <xsl:for-each select="/source/pg-settings/setting">
    <tr>
      <th><xsl:value-of select="@name"/></th>
      <td><xsl:value-of select="@value"/></td>
    </tr>
  </xsl:for-each>
</table>

<h4>PostgreSQL Current Activity</h4>

<table>
    <thead>
        <tr>
            <th>Cancel</th>
            <xsl:for-each select="/source/pg-stat-activity/column">
                <th><xsl:value-of select="@name"/></th>
            </xsl:for-each>
        </tr>
    </thead>
    <tbody>
        <xsl:for-each select="/source/pg-stat-activity/row">
            <tr>
                <td>
                  <form action="." method="post">
                    <fieldset>
                      <input type="hidden" name="backend_pid" value="{cell[3]/@value}" />
                      <input type="submit" name="cancel_backend" value="Cancel" />
                    </fieldset>
                  </form>
                </td>
                <xsl:for-each select="cell">
                    <td><xsl:value-of select="@value"/></td>
                </xsl:for-each>
            </tr>
        </xsl:for-each>
    </tbody>
</table>

<h4>PostgreSQL pg_stat_all_tables</h4>

<table>
    <thead>
        <tr>
            <xsl:for-each select="/source/pg-stat-all-tables/column">
                <th><xsl:value-of select="@name"/></th>
            </xsl:for-each>
        </tr>
    </thead>
    <tbody>
        <xsl:for-each select="/source/pg-stat-all-tables/row">
            <tr>
                <xsl:for-each select="cell">
                    <td><xsl:value-of select="@value"/></td>
                </xsl:for-each>
            </tr>
        </xsl:for-each>
    </tbody>
</table>

<h4>PostgreSQL indexes</h4>

<table>
    <thead>
        <tr>
            <xsl:for-each select="/source/pg-indexes/column">
                <th><xsl:value-of select="@name"/></th>
            </xsl:for-each>
        </tr>
    </thead>
    <tbody>
        <xsl:for-each select="/source/pg-indexes/row">
            <tr>
                <xsl:for-each select="cell">
                    <td><xsl:value-of select="@value"/></td>
                </xsl:for-each>
            </tr>
        </xsl:for-each>
    </tbody>
</table>

<br/>

<table>
  <caption>Python Libraries</caption>
  <thead>
    <th>Library</th>
    <th>Version</th>
  </thead>
  <tbody>
    <xsl:for-each select="/source/py-libs/py-lib">
      <tr>
        <td><xsl:value-of select="@name"/></td>
        <td><xsl:value-of select="@version"/></td>
      </tr>
    </xsl:for-each>
  </tbody>
</table>

<br/>

<form method="post" action="{/source/request/@context-path}/reports/171/output/">
  <fieldset>
      <legend>Run shutdown script</legend>
      <input type="submit" name="run_shutdown" value="Run"/>
  </fieldset>
</form>
<form method="post" action="{/source/request/@context-path}/reports/171/output/">
  <fieldset>
      <legend>Run startup script</legend>
      <input type="submit" name="run_startup" value="Run" />
  </fieldset>
</form>

<ul>
<li><a href="{/source/request/@context-path}/reports/375/output/">Clogs</a></li>
          <li><a href="{/source/request/@context-path}/reports/103/output/">Libraries</a></li>
        </ul>      
      </body>
    </html>
  </xsl:template>
</xsl:stylesheet>
]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[173]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Rate Script]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    rate_script_id = inv.getLong('hhdc_rate_script_id')
    rate_script = RateScript.get_hhdc_by_id(sess, rate_script_id)
    render(inv, template, {'rate_script': rate_script})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; HHDC Contracts &gt; {{rate_script.contract.name}}
      &gt; Rate Script {{rate_script.id}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/113/output/">HHDC Contracts</a>
      &gt;
      <a href="{{context_path}}/reports/115/output/?hhdc_contract_id={{rate_script.contract.id}}">{{rate_script.contract.name}}</a> &gt;
      {{rate_script.start_date|hh_format}}
      [<a
      href="{{context_path}}/reports/249/output/?hhdc_rate_script_id={{rate_script.id}}">edit</a>]
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <tr>
        <th>Start Date</th>
        <td>{{ rate_script.start_date|hh_format }}</td>
      </tr>
      <tr>
        <th>Finish Date</th>
        <td>{{ rate_script.finish_date|hh_format }}</td>
      </tr>
    </table>

    <h2>Script</h2>

    <pre>{{rate_script.script}}</pre>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[175]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Supplies TRIAD Selector]]></value>
		<value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
if cal.get(Calendar.MONTH) < Calendar.MARCH:
    cal.add(Calendar.YEAR, -1)
source.setAttribute('year', str(cal.get(Calendar.YEAR)))]]></value>
		<value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
              <link rel="stylesheet" type="text/css" href="{/source/request/@context-path}/reports/19/output/" />
            <title>Chellow &gt; CSV Supplies TRIAD</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Supplies TRIAD'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/41/output/">
                    <fieldset>
                        <legend>Download Supplies TRIAD CSV</legend>
                        <br/>
                        <xsl:value-of select="'For financial year ending March '"/>
                        <input name="year" value="{/source/@year}" size="4" maxlength="4"/>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                        <input type="reset" value="Reset"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[177]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Supplies Monthly Duration]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import datetime
from dateutil.relativedelta import relativedelta
import pytz
from sqlalchemy import or_, cast, Float, func
from java.lang import System

Monad.getUtils()['impt'](globals(), 'computer', 'db', 'utils')

HH, hh_format, hh_after = utils.HH, utils.hh_format, utils.hh_after
totalseconds, UserException = utils.totalseconds, utils.UserException
Supply, Era, Site, SiteEra = db.Supply, db.Era, db.Site, db.SiteEra
HhDatum, Channel, Bill = db.HhDatum, db.Channel, db.Bill

sess = None
try:
    sess = db.session()

    year = inv.getInteger("end_year")
    month = inv.getInteger("end_month")
    months = inv.getInteger("months")

    caches = {}

    finish_date = datetime.datetime(year, month, 1, tzinfo=pytz.utc) + relativedelta(months=1) - HH
    start_date = datetime.datetime(year, month, 1, tzinfo=pytz.utc) - relativedelta(months=months-1)

    field_names = ['supply-name', 'source-code', 'generator-type', 'month', 'pc-code', 'msn', 'site-code', 'site-name', 'metering-type', 'import-mpan-core', 'metered-import-kwh', 'metered-import-net-gbp', 'metered-import-estimated-kwh', 'billed-import-kwh', 'billed-import-net-gbp', 'export-mpan-core', 'metered-export-kwh', 'metered-export-estimated-kwh', 'billed-export-kwh', 'billed-export-net-gbp', 'problem', 'timestamp']

    inv.getResponse().setContentType("text/csv")
    inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="supplies_monthly_duration.csv"')
    pw = inv.getResponse().getWriter()
    pw.println('supply-id,' + ','.join(field_names))
    pw.flush()

    supplies = sess.query(Supply).join(Era).distinct()

    if inv.hasParameter('supply_id'):
        supply_id = inv.getLong('supply_id')
        supply = Supply.get_by_id(sess, supply_id)
        supplies = supplies.filter(Supply.id==supply.id)

    #raw_bill_query = Hiber.session().createQuery("from Bill bill where bill.supply = :supply and bill.finishDate.date <= :finishDate and bill.finishDate.date >= :startDate")

    forecast_date = computer.forecast_date()

    for i in range(months):
        month_start = start_date + relativedelta(months=i)
        month_finish = month_start + relativedelta(months=1) - HH

        for supply in supplies.filter(Era.start_date<=month_finish, or_(Era.finish_date==None, Era.finish_date>=month_start)):

            generator_type = supply.generator_type
            if generator_type is None:
                generator_type = ''
            else:
                generator_type = generator_type.code

            source_code = supply.source.code
            eras = supply.find_eras(sess, month_start, month_finish)
            era = eras[-1]
            metering_type = era.make_meter_category()

            site = sess.query(Site).join(SiteEra).filter(SiteEra.era_id == era.id, SiteEra.is_physical == True).one()
            
            values = {'supply-name': supply.name, 'source-code': source_code, 'generator-type': generator_type, 'month': hh_format(month_finish), 'pc-code': era.pc.code, 'msn': era.msn, 'site-code': site.code, 'site-name': site.name, 'metering-type': metering_type, 'problem': ''}

            pw.print(str(supply.id) + ',')

            for is_import, pol_name in [(True, 'import'), (False, 'export')]:
                if is_import:
                    mpan_core = era.imp_mpan_core
                else:
                    mpan_core = era.exp_mpan_core

                values[pol_name + '-mpan-core'] = mpan_core
                kwh = 0
                est_kwh = 0

                if metering_type in ['hh', 'amr']:
                    est_kwh = sess.query(HhDatum.value).join(Channel).join(Era).filter(HhDatum.status == 'E', Era.supply_id == supply.id, Channel.channel_type == 'ACTIVE', Channel.imp_related == is_import, HhDatum.start_date >= month_start, HhDatum.start_date <= month_finish).first()
                    if est_kwh is None:
                        est_kwh = 0
                    else:
                        est_kwh = est_kwh[0]

                if not (is_import and source_code in ('net', 'gen-net')):
                    kwh_sum = sess.query(cast(func.sum(HhDatum.value), Float)).join(Channel).join(Era).filter(Era.supply_id == supply.id, Channel.channel_type == 'ACTIVE', Channel.imp_related == is_import, HhDatum.start_date >= month_start, HhDatum.start_date <= month_finish).one()[0]
                    if kwh_sum is not None:
                        kwh += kwh_sum

                values['metered-' + pol_name + '-estimated-kwh'] = est_kwh
                values['metered-' + pol_name + '-kwh'] = kwh
                values['metered-' + pol_name + '-net-gbp'] = 0
                values['billed-' + pol_name + '-kwh'] = 0
                values['billed-' + pol_name + '-net-gbp'] = 0
                values['billed-' + pol_name + '-apportioned-kwh'] = 0
                values['billed-' + pol_name + '-apportioned-net-gbp'] = 0
                values['billed-' + pol_name + '-raw-kwh'] = 0
                values['billed-' + pol_name + '-raw-net-gbp'] = 0

            #p w.println('starting eras, ' + str(System.currentTimeMillis()))

            for bill in sess.query(Bill).filter(Bill.supply_id==supply.id, Bill.start_date<=month_finish, Bill.finish_date>=month_start):
                bill_start = bill.start_date
                bill_finish = bill.finish_date
                bill_duration = totalseconds(bill_finish - bill_start) + 30 * 60
                overlap_duration = totalseconds(min(bill_finish, month_finish) - max(bill_start, month_start)) + 30 * 60
                overlap_proportion = float(overlap_duration) / float(bill_duration)
                values['billed-import-net-gbp'] += overlap_proportion * float(bill.net)
                values['billed-import-kwh'] += overlap_proportion * float(bill.kwh)

            for era in eras:
                if era.start_date > month_start:
                    chunk_start = era.start_date
                else:
                    chunk_start = month_start
                if hh_after(era.finish_date, month_finish):
                    chunk_finish = month_finish
                else:
                    chunk_finish = era.finish_date

                import_mpan_core = era.imp_mpan_core
                if import_mpan_core is None:
                    continue

                supplier_contract = era.imp_supplier_contract

                if source_code in ['net', 'gen-net', '3rd-party']:
                    #p w.println("starting vbill, " + str(System.currentTimeMillis()))
                    supply_source = computer.SupplySource(sess, chunk_start, chunk_finish, forecast_date, era, True, pw, caches)

                    #p w.println('sum msp kwh ' + str(supply_source.summary['sum-msp-kwh']))
                    values['metered-import-kwh'] += sum(datum['msp-kwh'] for datum in supply_source.hh_data)

                    #p w.println("finished init from mpan, " + str(System.currentTimeMillis()))
                    import_vb_function = supply_source.contract_func(supplier_contract, 'virtual_bill')
                    if import_vb_function is None:
                        values['problem'] += "Can't find the virtual_bill function in the supplier contract. "
                    else:
                        import_vb_function(supply_source)
                        values['metered-import-net-gbp'] += supply_source.supplier_bill['net-gbp']

                    #p w.println("done virtual bill , " + str(System.currentTimeMillis()))

                    supply_source.contract_func(era.hhdc_contract, 'virtual_bill')(supply_source)
                    values['metered-import-net-gbp'] += supply_source.dc_bill['net-gbp']

                    mop_func = supply_source.contract_func(era.mop_contract, 'virtual_bill')
                    if mop_func is None:
                        values['problem'] += " MOP virtual_bill function can't be found."
                    else:
                        mop_func(supply_source)
                        values['metered-import-net-gbp'] += supply_source.mop_bill['net-gbp']
                        if len(supply_source.mop_bill['problem']) > 0:
                            values['problem'] += " MOP virtual bill problem: " + mop_bill['problem']
                            
            values['timestamp'] = System.currentTimeMillis()
            pw.println(','.join('"' + str(values[name]) + '"' for name in field_names))
            pw.flush()
        #pw.println("finishing site " + str(System.currentTimeMillis() - timing))
    pw.close()
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[179]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Sites TRIAD Selector]]></value>
		<value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
if cal.get(Calendar.MONTH) < Calendar.MARCH:
    cal.add(Calendar.YEAR, -1)
source.setAttribute('year', str(cal.get(Calendar.YEAR)))]]></value>
		<value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
      href="{/source/request/@context-path}/reports/19/output/" />
                <title>Chellow &gt; CSV Sites TRIAD</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Sites TRIAD'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/181/output/">
                    <fieldset>
                        <legend>Download Sites TRIAD CSV</legend>
                        <br/>
                        <xsl:value-of select="'For financial year ending March '"/>
                        <input name="year" value="{/source/@year}" size="4" maxlength="4"/>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                        <input type="reset" value="Reset"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[181]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Sites TRIAD]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import pytz
import datetime
from sqlalchemy import or_

Monad.getUtils()['impt'](globals(), 'computer', 'db', 'utils', 'triad', 'duos')

HH = utils.HH
Site, SiteEra, Era, Supply = db.Site, db.SiteEra, db.Era, db.Supply
Source, Channel = db.Source, db.Channel

caches = {}

sess = None
try:
    sess = db.session()
    inv.getResponse().setContentType("text/csv")
    inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="output.csv"')
    year = inv.getInteger('year')

    pw = inv.getResponse().getWriter()

    march_finish = datetime.datetime(year, 4, 1, tzinfo=pytz.utc) - HH
    march_start = datetime.datetime(year, 3, 1, tzinfo=pytz.utc)

    pw.println("Site Code, Site Name, Displaced TRIAD 1 Date, Displaced TRIAD 1 MSP kW, Displaced TRIAD LAF, Displaced TRIAD 1 GSP kW, Displaced TRIAD 2 Date, Displaced TRIAD 2 MSP kW, Displaced TRIAD 2 LAF, Displaced TRIAD 2 GSP kW, Displaced TRIAD 3 Date, Displaced TRIAD 3 MSP kW, Displaced TRIAD 3 LAF, Displaced TRIAD 3 GSP kW, Displaced GSP kW, Displaced Rate GBP / kW, GBP")
    pw.flush()

    forecast_date = computer.forecast_date()

    if inv.hasParameter('site_id'):
        site_id = inv.getLong('site_id')
        sites = sess.query(Site).filter(Site.id==Site.get_by_id(site_id).id)
    else:
        sites = sess.query(Site).join(SiteEra).join(Era).join(Supply).join(Source).filter(Source.code.in_(('gen', 'gen-net')), Era.start_date<=march_finish, or_(Era.finish_date==None, Era.finish_date>= march_start)).distinct()

    for site in sites:
        for site_group in site.groups(sess, march_start, march_finish, True):
            if site_group.start_date > march_start:
                chunk_start = site_group.start_date
            else:
                chunk_start = march_start

            if not site_group.finish_date < march_finish:
                chunk_finish = march_finish
            else:
                continue

            pw.print('"' + site.code + '","' + site.name + '"')

            displaced_era = computer.displaced_era(sess, site_group, chunk_start, chunk_finish)
            if displaced_era is None:
                continue

            site_ds = computer.SiteSource(sess, site, chunk_start, chunk_finish, forecast_date, pw, caches, displaced_era)
            duos.duos_vb(site_ds)
            triad.triad_bill(site_ds)

            bill = site_ds.supplier_bill
            values = []
            for i in range(3):
                triad_prefix = 'triad-actual-' + str(i)
                for suffix in ['-date', '-msp-kw', '-laf', '-gsp-kw']:
                    values.append(bill[triad_prefix + suffix])

            values += [bill['triad-actual-' + suf] for suf in ['gsp-kw', 'rate', 'gbp']]

            for value in values:
                pw.print("," + str(value))
            pw.println('')
            pw.flush()

    pw.close()
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[183]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Sites HH Data]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from datetime import datetime
from dateutil.relativedelta import relativedelta
from java.util.zip import ZipOutputStream, ZipEntry
from java.io import PrintWriter, OutputStreamWriter
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['HhDatum', 'Site', 'Supply', 'set_read_write', 'session'], 
        'utils': ['UserException', 'HH', 'form_date'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    start_date = form_date(inv, 'start')
    finish_date = form_date(inv, 'finish')
    
    #inv.getResponse().setContentType('text/csv')
    #inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="report.csv"')
    #pw = inv.getResponse().getWriter()
    #pw.println('hello')
    #pw.flush()

    if inv.hasParameter('site_id'):
        site_id = inv.getLong('site_id')
        site = Site.get_by_id(sess, site_id)
        sites = sess.query(Site).from_statement("select * from site where id = :site_id").params(site_id=site_id)
        file_name = "sites_hh_data_" + str(site_id) + "_" + finish_date.strftime('%Y%m%d%M%H') + ".csv"
        inv.getResponse().setContentType('text/csv')
        inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="' + file_name + '"')
        pw = inv.getResponse().getWriter()
        zout = None
    else:
        sites = sess.query(Site).from_statement("select site.* from site, site_era, era where site_era.site_id = site.id and site_era.era_id = era.id and site_era.is_physical is true and (era.finish_date is null or era.finish_date >= :start_date) and era.start_date <= :finish_date").params(start_date=start_date, finish_date=finish_date)
        file_name = "supplies_hh_data_" + finish_date.strftime('%Y%m%d%M%H') + ".zip"
        inv.getResponse().setContentType('application/zip')
        inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="' + file_name + '"')
        sout = inv.getResponse().getOutputStream()
        zout = ZipOutputStream(sout)
        pw = PrintWriter(OutputStreamWriter(zout, 'UTF-8'))

    for site in sites:
        for group in site.groups(sess, start_date, finish_date, True):
            if zout is not None:
                zout.putNextEntry(ZipEntry(site.code + '_' + group.finish_date.strftime('%Y%m%d%M%H') + '.csv'))
            pw.print("Site Code, Site Name, Associated Site Codes, Sources, Generator Types, From, To,Type,Date," + ','.join(map(str, range(1, 49))))
            pw.flush()
            associates = ' '.join(site.code for site in group.sites[1:])
            source_codes = ' '.join(sorted(set(sup.source.code for sup in group.supplies)))
            gen_types = ' '.join(sorted(set(sup.generator_type.code for sup in group.supplies if sup.generator_type is not None)))
            group_start_str = group.start_date.strftime('%Y-%m-%d %H:%M')
            group_finish_str = group.finish_date.strftime('%Y-%m-%d %H:%M')
            for hh in group.hh_data(sess):
                hh_start = hh['start_date']
                if hh_start.hour == 0 and hh_start.minute == 0:
                    pw.print("\r\n" + ','.join('"' + str(val) + '"' for val in [site.code, site.name, associates, source_codes, gen_types, group_start_str, group_finish_str, 'used', hh_start.strftime('%Y-%m-%d')]))
                used_gen_kwh = hh['imp_gen'] - hh['exp_net'] - hh['exp_gen']
                used_3p_kwh = hh['imp_3p'] - hh['exp_3p']
                used_kwh = hh['imp_net'] + used_gen_kwh + used_3p_kwh
                pw.print(',' + str(round(used_kwh, 2)))
            pw.flush()
    pw.close()
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[185]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MOP Contracts]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    mop_contracts = sess.query(Contract).from_statement("select contract.* from contract, market_role where contract.market_role_id = market_role.id and market_role.code = 'M' order by contract.name").all()
    render(inv, template, {'mop_contracts': mop_contracts})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; MOP Contracts</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      MOP Contracts
      [<a href="{{context_path}}/reports/361/output/">add</a>]
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Start Date</th>
          <th>Finish Date</th>
          <th>MOP</th>
        </tr>
      </thead>
      <tbody>
        {% for contract in mop_contracts %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/107/output/?mop_contract_id={{contract.id}}">{{contract.name}}</a>
            </td>
            <td>{{contract.start_rate_script.start_date|hh_format }}</td>
            <td>{{contract.finish_rate_script.finish_date|hh_format}}</td>
            <td>
              <a href="{{context_path}}/reports/47/output/?party_id={{contract.party.id}}">{{contract.party.name}}</a>
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[187]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Supplies HH Data Row]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad, Hiber, UserException
from sqlalchemy import or_
import collections
import copy

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')

HhDatum, Channel, Era, Supply = db.HhDatum, db.Channel, db.Era, db.Supply
Site, SiteEra = db.Site, db.SiteEra
hh_format = utils.hh_format

start_date = utils.form_date(inv, 'start')
finish_date = utils.form_date(inv, 'finish')

if finish_date < start_date:
    raise UserException("The finish date can't be before the start date.")

file_name = "hh_data_row_" + start_date.strftime("%Y%m%d%H%M") + ".csv"

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="' + file_name + '"')
pw = inv.getResponse().getWriter()

sess = None
try:
    sess = db.session()        
    if inv.getRequest().getMethod() == 'GET':
        eras = sess.query(Site, Era).join(SiteEra).join(Era).filter(Era.start_date<=finish_date, or_(Era.finish_date==None, Era.finish_date>=start_date), SiteEra.is_physical==True).order_by(Era.supply_id, Era.start_date)
        if inv.hasParameter('supply_id'):
            supply_id = inv.getLong('supply_id')
            sup = Supply.get_by_id(sess, supply_id)
            eras = eras.filter(Era.supply_id==sup.id)

        pw.println("Site Code, Imp MPAN Core, Exp Mpan Core, Start Date, Import ACTIVE, Import ACTIVE Status, Import REACTIVE_IMP, Import REACTIVE_IMP Status, Import REACTIVE_EXP, Import REACTIVE_EXP Status, Export ACTIVE, Export ACTIVE Status, Export REACTIVE_IMP, Export REACTIVE_IMP Status, Export REACTIVE_EXP, Export REACTIVE_EXP Status")
        pw.flush()

        for site, era in eras:
            imp_mpan_core = era.imp_mpan_core
            imp_mpan_core_str = '' if imp_mpan_core is None else imp_mpan_core
            exp_mpan_core = era.exp_mpan_core
            exp_mpan_core_str = '' if exp_mpan_core is None else exp_mpan_core

            for hh_start_date, imp_active, imp_active_status, imp_reactive_imp, imp_reactive_imp_status, imp_reactive_exp, imp_reactive_exp_status, exp_active, exp_active_status, exp_reactive_imp, exp_reactive_imp_status, exp_reactive_exp, exp_reactive_exp_status in sess.execute("""
select hh_base.start_date, max(imp_active.value), max(imp_active.status),
    max(imp_reactive_imp.value), max(imp_reactive_imp.status),
    max(imp_reactive_exp.value), max(imp_reactive_exp.status),
    max(exp_active.value), max(exp_active.status),
    max(exp_reactive_imp.value), max(imp_reactive_imp.status),
    max(exp_reactive_imp.value), max(imp_reactive_exp.status)
from hh_datum hh_base
    join channel on hh_base.channel_id = channel.id
    left join hh_datum imp_active
        on (imp_active.id = hh_base.id and channel.imp_related is true and
            channel.channel_type = 'ACTIVE')
    left join hh_datum imp_reactive_imp
        on (imp_reactive_imp.id = hh_base.id and channel.imp_related is true and
            channel.channel_type = 'REACTIVE_IMP')
    left join hh_datum imp_reactive_exp
        on (imp_reactive_exp.id = hh_base.id and channel.imp_related is true and
            channel.channel_type = 'REACTIVE_EXP')
    left join hh_datum exp_active
        on (exp_active.id = hh_base.id and channel.imp_related is false and
            channel.channel_type = 'ACTIVE')
    left join hh_datum exp_reactive_imp
                on (exp_reactive_imp.id = hh_base.id and channel.imp_related is
                false and channel.channel_type = 'REACTIVE_IMP')
    left join hh_datum exp_reactive_exp
                on (exp_reactive_exp.id = hh_base.id and channel.imp_related is false
                and channel.channel_type = 'REACTIVE_EXP')
where era_id = :era_id
    and hh_base.start_date between :start_date and :finish_date
group by hh_base.start_date
order by hh_base.start_date
    """, params={'era_id': era.id, 'start_date': start_date, 'finish_date': finish_date}):
                pw.println(','.join('"' + ('' if v is None else str(v)) + '"' for v in (site.code, imp_mpan_core_str, exp_mpan_core_str, hh_format(hh_start_date), imp_active, imp_active_status, imp_reactive_imp, imp_reactive_imp_status, imp_reactive_exp, imp_reactive_exp_status, exp_active, exp_active_status, exp_reactive_imp, exp_reactive_imp_status, exp_reactive_exp, exp_reactive_exp_status)))
                pw.flush()
    pw.close()
finally:
    sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[189]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Read Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from sqlalchemy.sql.expression import text
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Bill', 'BillType', 'ReadType', 'Tpr', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date', 'form_decimal'],
        'templater': ['render']})


def make_fields(sess, bill, message=None):
    read_types = sess.query(ReadType).from_statement("select * from read_type order by code")
    tprs = sess.query(Tpr).from_statement("select * from tpr order by code")
    messages = [] if message is None else [str(message)]
    return {'bill': bill, 'read_types': read_types, 'tprs': tprs, 'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        bill_id = inv.getLong('supplier_bill_id')
        bill = Bill.get_by_id(sess, bill_id)
        render(inv, template, make_fields(sess, bill))
    else:
        set_read_write(sess)
        bill_id = inv.getLong('supplier_bill_id')
        bill = Bill.get_by_id(sess, bill_id)
        tpr_id = inv.getLong("tpr_id")
        tpr = Tpr.get_by_id(sess, tpr_id)
        coefficient = form_decimal(inv, "coefficient")
        units_str = inv.getString("units")
        msn = inv.getString("msn")
        mpan_str = inv.getString("mpan")
        previous_date = form_date(inv, "previous")
        previous_value = form_decimal(inv, "previous_value")
        previous_type_id = inv.getLong("previous_type_id")
        previous_type = ReadType.get_by_id(sess, previous_type_id)
        present_date = form_date(inv, "present")
        present_value = form_decimal(inv, "present_value")
        present_type_id = inv.getLong("present_type_id")
        present_type = ReadType.get_by_id(sess, present_type_id)

        bill.insert_read(sess, tpr, coefficient, units_str, msn, mpan_str, previous_date, previous_value, previous_type, present_date, present_value, present_type)
        sess.commit()
        inv.sendSeeOther("/reports/105/output/?supplier_bill_id=" +
                    str(bill.id))
except UserException, e:
    render(inv, template, make_fields(sess, bill, e))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Supplier Contracts &gt; {{bill.batch.contract.name}} &gt;
      Batches &gt; {{bill.batch.reference}} &gt; Bills &gt; {{bill.id}} &gt;
      Add Read
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/75/output/">Supplier Contracts</a> &gt;
      <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{bill.batch.contract.id}}">{{bill.batch.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/89/output/?supplier_contract_id={{bill.batch.contract.id}}">Batches</a> &gt;
      <a href="{{context_path}}/reports/91/output/?supplier_batch_id={{bill.batch.id}}">{{bill.batch.reference}}</a> &gt;
      <a href="{{context_path}}/reports/105/output/?supplier_bill_id={{bill.id}}">Bill {{bill.id}}</a> &gt; Add Read
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <br>
    <form action="." method="post">
      <fieldset>
        <input type="hidden" name="supplier_bill_id" value="{{bill.id}}">
        <legend>Add New Register Read</legend>
        <br>
        <label>MPAN {{input_text('mpan', '')}}</label>
        <br>
        <label>Coefficient {{input_text('coefficient', '1')}}</label>
        <br>
        <label>Meter Serial Number {{input_text('msn', '1')}}</label>
        <br>
        <label>Units {{input_text('units', 'kWh')}}</label>
        <br>
        <label>TPR
          <select name="tpr_id">
            {% for tpr in tprs %}
              {{input_option('tpr_id', tpr.id, tpr.code)}}
            {% endfor %}
          </select>
        </label>
        <br>
        <br>
        <fieldset>
          <legend>Previous Read</legend>
          <fieldset>
            <legend>Date</legend>
            {{input_date('previous', None)}}
          </fieldset>
          <br>
          <label>Value {{input_text('previous_value', 0)}}</label>
          <br>
          <label>Type
            <select name="previous_type_id">
              {% for read_type in read_types %}
                {{input_option('previous_type_id', read_type.id, read_type.code + ' ' + read_type.description)}}
              {% endfor %}
            </select>
          </label>
        </fieldset>
        <br>
        <br>
        <fieldset>
          <legend>Present Read</legend>
          <fieldset>
            <legend>Date</legend>
            {{input_date('present', None)}}
          </fieldset>
          <br>
          <label>Value {{input_text('present_value', 0)}}</label>
          <br>
          <label>Type
            <select name="present_type_id">
              {% for read_type in read_types %}
                {{input_option('present_type_id', read_type.id, read_type.code + ' ' + read_type.description)}}
              {% endfor %}
            </select>
          </label>
        </fieldset>
        <br>
        <br>
        <input type="submit" value="Add">
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[191]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MOP Batches]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')
Contract, Batch = db.Contract, db.Batch

sess = None
try:
    sess = db.session()
    if inv.getRequest().getMethod() == 'GET':
        contract_id = inv.getLong('mop_contract_id')
        contract = Contract.get_mop_by_id(sess, contract_id)
        batches = sess.query(Batch).filter(Batch.contract_id == contract.id).order_by(Batch.reference.desc()).all()
        templater.render(inv, template, {'contract': contract, 'batches': batches})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; MOP Contracts &gt; {{contract.name}} &gt; Batches
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/185/output/">MOP Contracts</a> &gt;
      <a href="{{context_path}}/reports/107/output/?mop_contract_id={{contract.id}}">{{contract.name}}</a>
      &gt; Batches
      [<a href="{{context_path}}/reports/353/output/?mop_contract_id={{contract.id}}">add</a>]
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <caption>Batches</caption>
      <thead>
        <tr>
          <th>Reference</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {% for batch in batches %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/193/output/?mop_batch_id={{batch.id}}">
                {{batch.reference}}
              </a>
            </td>
            <td>{{batch.description}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[193]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MOP Batch]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Batch', 'Participant', 'set_read_write', 'session', 'Bill', 'Report'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})


sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        batch_id = inv.getLong('mop_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        bills = sess.query(Bill).filter(Bill.batch_id==batch.id).order_by(Bill.reference).all()

        config_contract = Contract.get_non_core_by_name(sess, 'configuration')
        properties = config_contract.make_properties()
        fields = {'batch': batch, 'bills': bills}
        if 'batch_reports' in properties:
            batch_reports = []
            for report_id in properties['batch_reports']:
                batch_reports.append(Report.get_by_id(sess, report_id))
            fields['batch_reports'] = batch_reports
        render(inv, template, fields)
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; MOP Contracts &gt; {{batch.contract.name}} &gt;
      Batches &gt; {{batch.reference}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/185/output/">MOP Contracts</a> &gt;
      <a href="{{context_path}}/reports/107/output/?mop_contract_id={{batch.contract.id}}">{{batch.contract.name}}</a>
      &gt;
      <a href="{{context_path}}/reports/191/output/?mop_contract_id={{batch.contract.id}}">Batches</a>
      &gt; {{ batch.reference }}
      [<a href="{{context_path}}/reports/355/output/?mop_batch_id={{batch.id}}">edit</a>]
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tr>
        <th>Reference</th>
        <td>{{ batch.reference }}</td>
      </tr>
      <tr>
        <th>Description</th>
        <td>{{ batch.description }}</td>
      </tr>
      <tr>
        <th>Number Of Bills</th>
        <td>{{ bills|length }}</td>
      </tr>
      {% if batch_reports %}
        <tr>
          <th>Custom Reports</th>
          <td>
            <ul>
              {% for report in batch_reports %}
                <li>
                  <a href="{{context_path}}/reports/{{report.id}}/output/?batch_id={{batch.id}}">{{report.name}}</a>
                </li>
              {% endfor %}
            </ul>
          </td>
        </tr>
      {% endif %}
    </table>
    <br>
    <ul>
      <li>
        <a href="{{context_path}}/reports/111/output/?batch_id={{batch.id}}">Check Bills</a>
      </li>
      <li>
        [<a href="{{context_path}}/reports/331/output/?mop_batch_id={{batch.id}}">Bill Imports</a>]
      </li>
    </ul>
    <table>
      <caption>Bills [<a href="{{context_path}}/reports/357/output/?mop_batch_id={{batch.id}}">add</a>]</caption>
      <thead>
        <tr>
          <th>View</th>
          <th>Reference</th>
          <th>Supply</th>
          <th>Account</th>
          <th>Issue Date</th>
          <th>From</th>
          <th>To</th>
          <th>kWh</th>
          <th>Net</th>
          <th>VAT</th>
          <th>Gross</th>
          <th>Type</th>
        </tr>
      </thead>
      <tbody>
        {% for bill in bills %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/359/output/?mop_bill_id={{bill.id}}">View</a>
            </td>
            <td>{{bill.reference}}</td>
            <td>
              <a href="{{context_path}}/reports/7/output/?supply_id={{bill.supply.id}}">supply</a>
            </td>
            <td>{{ bill.account }}</td>
            <td>{{ bill.issue_date|hh_format }}</td>
            <td>{{ bill.start_date|hh_format }}</td>
            <td>{{ bill.finish_date|hh_format }}</td>
            <td>{{ bill.kwh }}</td>
            <td>{{ bill.net }}</td>
            <td>{{ bill.vat }}</td>
            <td>{{ bill.gross }}</td>
            <td>
              <a href="{{context_path}}/reports/201/output/?bill_type_id={{bill.bill_type.id}}" title="{{bill.bill_type.description}}">{{bill.bill_type.code}}</a>
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[195]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[ECOES Comparison]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import System
from org.apache.http.protocol import HTTP
from org.apache.http.client.entity import UrlEncodedFormEntity
from org.apache.http.util import EntityUtils
from org.apache.http import HttpHost
from org.apache.http.conn.params import ConnRoutePNames
from org.apache.http.impl.client import DefaultHttpClient
from org.apache.http.message import BasicNameValuePair
from org.apache.http.client.methods import HttpGet, HttpPost

import csv
import urllib
import StringIO

Monad.getUtils()['imprt'](globals(), {
        'db': ['Source', 'Era', 'Contract', 'HhDatum', 'Site', 'Supply', 'set_read_write', 'session'], 
        'utils': ['UserException', 'HH', 'form_date'],
        'templater': ['render']})

sess = None
try:
    sess = session()

    inv.getResponse().setContentType("text/csv")
    inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="output.csv"')
    pw = inv.getResponse().getWriter()

    props = Contract.get_non_core_by_name(sess, 'configuration').make_properties()

    ECOES_USER_NAME_KEY = 'ecoes.user.name'
    try:
        user_name = props[ECOES_USER_NAME_KEY]
    except KeyError:
        raise UserException("The property " + ECOES_USER_NAME_KEY + " cannot be found in the configuration properties.")

    ECOES_PASSWORD_KEY = 'ecoes.password'
    try:
        password = props[ECOES_PASSWORD_KEY]
    except KeyError:
        raise UserException("The property " + ECOES_PASSWORD_KEY + " cannot be found in the configuration properties.")

    PROXY_HOST_KEY = 'proxy.host'
    PROXY_PORT_KEY = 'proxy.port'

    proxy_host = props.get(PROXY_HOST_KEY)

    client = DefaultHttpClient()
    if proxy_host is not None:
        proxy_port = props.get(PROXY_PORT_KEY)
        if proxy_port is None:
            raise UserException("The property " + PROXY_HOST_KEY + " is set, but the property " + PROXY_PORT_KEY + " is not.")

        proxy = HttpHost(proxy_host, int(proxy_port), "http")
        client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy)

    http_get = HttpGet('http://www.ecoes.co.uk/')
    response = client.execute(http_get)
    EntityUtils.consume(response.getEntity())
    http_post = HttpPost("https://www.ecoes.co.uk/login.asp")
    http_post.setEntity(UrlEncodedFormEntity([BasicNameValuePair("username", user_name), BasicNameValuePair("password", password), BasicNameValuePair('beenHereBefore', '1'), BasicNameValuePair('forceLogout', '1')], HTTP.UTF_8))
    response = client.execute(http_post)
    location_header = response.getFirstHeader('Location')
    location = location_header.getValue()
    EntityUtils.consume(response.getEntity())
    guid = urllib.quote_plus(location[19:])

    mpans = sess.query(Era.imp_mpan_core).join(Supply, Source).join(Supply.dno_contract).filter(Contract.name!='99', Era.finish_date==None, Source.code!='3rd-party', Era.imp_mpan_core!=None).distinct().order_by(Era.imp_mpan_core).all() + sess.query(Era.exp_mpan_core).join(Supply, Source).join(Supply.dno_contract).filter(Contract.name!='99', Era.finish_date==None, Source.code!='3rd-party', Era.exp_mpan_core!=None).distinct().order_by(Era.exp_mpan_core).all()

    mpans = [v[0] for v in mpans]

    http_get = HttpGet('http://www.ecoes.co.uk/saveportfolioMpans.asp?guid=' + guid)

    pw.print("MPAN Core,MPAN Core No Spaces,ECOES PC,Chellow PC,ECOES MTC,Chellow MTC,ECOES LLFC,Chellow LLFC,ECOES SSC,Chellow SSC,ECOES Supplier, Chellow Supplier,ECOES DC,Chellow DC,ECOES MOP,Chellow MOP,ECOES GSP Group,Chellow GSP Group,ECOES MSN, Chellow MSN,ECOES Meter Type,Chellow Meter Type,Problem")
    pw.flush()

    entity = client.execute(http_get).getEntity()
    csv_is = entity.getContent()
    f = StringIO.StringIO()
    bt = csv_is.read()
    while bt != -1:
        f.write(chr(bt))
        bt = csv_is.read()
    f.seek(0)
    parser = iter(csv.reader(f))
    parser.next()  # Skip titles

    for values in parser:
        problem = ''

        ecoes_titles = ['mpan-core', 'address-line-1', 'address-line-2', 'address-line-3', 'address-line-4', 'address-line-5', 'address-line-6', 'address-line-7', 'address-line-8', 'address-line-9', 'post-code', 'supplier', 'registration-from', 'mtc', 'mtc-date', 'llfc', 'llfc-from', 'pc', 'ssc', 'measurement-class', 'energisation-status', 'da', 'dc', 'mop', 'mop-appoint-date', 'gsp-group', 'gsp-effective-from', 'dno', 'msn', 'meter-install-date', 'meter-type', 'map-id']

        ecoes = dict(zip(ecoes_titles, values))

        mpan_spaces = ecoes['mpan-core'][:2] + ' ' + ecoes['mpan-core'][2:6] + ' ' + ecoes['mpan-core'][6:10] + ' ' + ecoes['mpan-core'][-3:]

        disconnected = len(ecoes['supplier']) == 0
        current_chell = mpan_spaces in mpans

        if disconnected and current_chell:
            problem += "Disconnected in ECOES, but current in Chellow. "
        elif not disconnected and not current_chell:
            problem += "In ECOES (energized or de-energized), but not current in Chellow. "

        if current_chell:
            mpans.remove(mpan_spaces)
            supply = Supply.get_by_mpan_core(sess, mpan_spaces)
            era = supply.find_era_at(sess, None)
            if era.imp_mpan_core == mpan_spaces:
                supplier_contract = era.imp_supplier_contract
                llfc = era.imp_llfc
            else:
                supplier_contract = era.exp_supplier_contract
                llfc = era.exp_llfc

            chellow_pc = era.pc.code
            try:
                if int(ecoes['pc']) != int(chellow_pc):
                    problem += "The PCs don't match. "
            except ValueError:
                problem += "Can't parse the PC. "

            chellow_mtc = era.mtc.code
            try:
                if int(ecoes['mtc']) != int(chellow_mtc):
                    problem += "The MTCs don't match. "
            except ValueError:
                problem += "Can't parse the MTC. "

            chellow_llfc = llfc.code
            try:
                if int(ecoes['llfc']) != int(chellow_llfc):
                    problem += "The LLFCs don't match. "
            except ValueError:
                problem += "Can't parse the LLFC. "

            chellow_ssc = era.ssc
            if chellow_ssc is None:
                chellow_ssc = ''
                chellow_ssc_int = None
            else:
                chellow_ssc = chellow_ssc.code
                chellow_ssc_int = int(chellow_ssc)

            ecoes_ssc_int = int(ecoes['ssc']) if len(ecoes['ssc']) > 0 else None

            if ecoes_ssc_int != chellow_ssc_int and not (ecoes_ssc_int is None and chellow_ssc_int is None):
                problem += "The SSCs don't match. "

            chellow_supplier = supplier_contract.party.participant.code
            if chellow_supplier != ecoes['supplier']:
                problem += "The supplier codes don't match. "

            hhdc_contract = era.hhdc_contract
            if hhdc_contract is None:
                chellow_dc = ''
            else:
                chellow_dc = hhdc_contract.party.participant.code

            if chellow_dc != ecoes['dc']:
                problem += "The DC codes don't match. "

            mop_contract = era.mop_contract
            if mop_contract is None:
                chellow_mop = ''
            else:
                chellow_mop = mop_contract.party.participant.code

            if chellow_mop != ecoes['mop']:
                problem += "The MOP codes don't match. "

            chellow_gsp_group = supply.gsp_group.code
            if chellow_gsp_group != ecoes['gsp-group']:
                 problem += "The GSP group codes don't match. "

            chellow_msn = era.msn
            if chellow_msn is None:
                chellow_msn = ''
            if chellow_msn != ecoes['msn']:
                problem += "The meter serial numbers don't match. "

            if chellow_pc == '00':
                chellow_meter_type = 'H'
            elif len(era.channels) > 0:
                chellow_meter_type = 'RCAMR'
            elif era.mtc.meter_type.code in ['UM', 'PH']:
                chellow_meter_type = ''
            else:
                chellow_meter_type = 'N'

            if chellow_meter_type != ecoes['meter-type']:
                problem += "The meter types don't match. See http://dtc.mrasco.com/DataItem.aspx?ItemCounter=0483 "        
        else:
            chellow_pc = ''
            chellow_mtc = ''
            chellow_llfc = ''
            chellow_ssc = ''
            chellow_supplier = ''
            chellow_dc = ''
            chellow_mop = ''
            chellow_gsp_group = ''
            chellow_msn = ''
            chellow_meter_type = ''

        if len(problem) > 0:
            pw.print('\n' + ','.join('"' + str(val) + '"' for val in [mpan_spaces, ecoes['mpan-core'], ecoes['pc'], chellow_pc, ecoes['mtc'], chellow_mtc, ecoes['llfc'], chellow_llfc, ecoes['ssc'], chellow_ssc, ecoes['supplier'], chellow_supplier, ecoes['dc'], chellow_dc, ecoes['mop'], chellow_mop, ecoes['gsp-group'], chellow_gsp_group, ecoes['msn'], chellow_msn, ecoes['meter-type'], chellow_meter_type, problem]))
        else:
            pw.print(' ')
        pw.flush()
        sess.expunge_all()

    EntityUtils.consume(entity)
    pw.println(str(mpans))
    for mpan_core in mpans:
        supply = Supply.get_by_mpan_core(sess, mpan_core)
        era = supply.find_era_at(sess, None)
        if era.imp_mpan_core == mpan_core:
            supplier_contract = era.imp_supplier_contract
            llfc = era.imp_llfc
        else:
            supplier_contract = era.exp_supplier_contract
            llfc = era.exp_llfc

        ssc = era.ssc
        ssc = '' if ssc is None else ssc.code

        hhdc_contract = era.hhdc_contract
        if hhdc_contract is None:
            dc = ''
        else:
            dc = hhdc_contract.party.participant.code

        mop_contract = era.mop_contract
        if mop_contract is None:
            mop = ''
        else:
            mop = mop_contract.party.participant.code

        msn = era.msn
        if msn is None:
            msn = ''

        if era.pc.code == '00':
            meter_type = 'H'
        else:
            if len(era.channels) > 0:
                meter_type = 'RCAMR'
            else:
                meter_type = 'N'

        pw.print('\n' + ','.join('"' + str(val) + '"' for val in [mpan_core, mpan_core.replace(' ', ''), '', era.pc.code, '', era.mtc.code, '', llfc.code, '', ssc, '', supplier_contract.party.participant.code, '', dc, '', mop, '', supply.gsp_group.code, '', msn, '', meter_type, 'In Chellow, but not in ECOES.']))
        pw.flush()
    pw.close()
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[197]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CoP]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['impt'](globals(), 'templater', 'db')

sess = None
try:
    sess = db.session()
    cop_id = inv.getLong('cop_id')
    cop = db.Cop.get_by_id(sess, cop_id)
    templater.render(inv, template, {'cop': cop})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/" />
    <title>Chellow &gt; CoPs &gt; {{cop.description}}</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/85/output/">CoPs</a> &gt;
      {{cop.description}}
    </p>
    <br>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <tr>
        <th>Code</th>
        <td>{{cop.code}}</td>
      </tr>
      <tr>
        <th>Description</th>
        <td>{{cop.description}}</td>
      </tr>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[199]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Bill Types]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'BillType', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    bill_types = sess.query(BillType).order_by(BillType.code)
    render(inv, template, {'bill_types': bill_types})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; Bill Types</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      Bill Types
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <thead>
        <tr>
          <th>Code</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {% for bill_type in bill_types %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/201/output/?bill_type_id={{bill_type.id}}">{{bill_type.code}}</a>
            </td>
            <td>{{bill_type.description}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[201]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Bill Type]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'BillType', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    bill_type_id = inv.getLong('bill_type_id')
    bill_type = BillType.get_by_id(sess, bill_type_id)
    render(inv, template, {'bill_type': bill_type})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; Bill Types &gt; {{bill_type.code}}</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/199/output/">Bill Types</a> &gt;
      {{bill_type.code}}
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tr>
        <th>Code</th>
        <td>{{bill_type.code}}</td>
      </tr>
      <tr>
        <th>Description</th>
        <td>{{bill_type.description}}</td>
      </tr>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[203]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Batch]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Batch', 'Participant', 'set_read_write', 'session', 'Bill', 'Report'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})


sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        batch_id = inv.getLong('hhdc_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        bills = sess.query(Bill).filter(Bill.batch_id==batch.id).order_by(Bill.reference).all()

        config_contract = Contract.get_non_core_by_name(sess, 'configuration')
        properties = config_contract.make_properties()
        fields = {'batch': batch, 'bills': bills}
        if 'batch_reports' in properties:
            batch_reports = []
            for report_id in properties['batch_reports']:
                batch_reports.append(Report.get_by_id(sess, report_id))
            fields['batch_reports'] = batch_reports
        render(inv, template, fields)
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>
      Chellow &gt; HHDC Contracts &gt; {{ batch.contract.name }} &gt;
      Batches &gt; {{ batch.reference }}
    </title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{ context_path }}/reports/115/output/?hhdc_contract_id={{ batch.contract.id }}">{{ batch.contract.name }}</a> &gt;
      <a href="{{ context_path }}/reports/93/output/?hhdc_contract_id={{ batch.contract.id }}">Batches</a> &gt;
      {{ batch.reference }}
      [<a href="{{context_path}}/reports/283/output/?hhdc_batch_id={{batch.id}}">edit</a>]
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tr>
        <th>Reference</th>
        <td>{{ batch.reference }}</td>
      </tr>
      <tr>
        <th>Description</th>
        <td>{{ batch.description }}</td>
      </tr>
      <tr>
        <th>Number Of Bills</th>
        <td>{{ bills|length }}</td>
      </tr>
      {% if batch_reports %}
        <tr>
          <th>Custom Reports</th>
          <td>
            <ul>
              {% for report in batch_reports %}
                <li>
                  <a href="{{ context_path }}/reports/{{ report.id }}/output/?batch_id={{ batch.id }}">{{ report.name}}</a>
                </li>
              {% endfor %}
            </ul>
          </td>
        </tr>
      {% endif %}
    </table>
    <br>
    <ul>
      <li>
        <a href="{{ context_path }}/reports/111/output/?batch_id={{ batch.id }}">Check Bills</a>
      </li>
      <li>
        [<a href="{{context_path}}/reports/327/output/?hhdc_batch_id={{batch.id}}">Bill Imports</a>]
      </li>
    </ul>
    <table>
      <caption>Bills [<a href="{{context_path}}/reports/349/output/?hhdc_batch_id={{batch.id}}">add</a>]</caption>
      <thead>
        <tr>
          <th>View</th>
          <th>Reference</th>
          <th>Supply</th>
          <th>Account</th>
          <th>Issue Date</th>
          <th>From</th>
          <th>To</th>
          <th>kWh</th>
          <th>Net</th>
          <th>VAT</th>
          <th>Gross</th>
          <th>Type</th>
        </tr>
      </thead>
      <tbody>
        {% for bill in bills %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/345/output/?hhdc_bill_id={{bill.id}}">View</a>
            </td>
            <td>{{ bill.reference }}</td>
            <td>
              <a href="{{ context_path }}/reports/7/output/?supply-id={{ bill.supply.id }}">supply</a>
            </td>
            <td>{{ bill.account }}</td>
            <td>{{ bill.issue_date|hh_format }}</td>
            <td>{{ bill.start_date|hh_format }}</td>
            <td>{{ bill.finish_date|hh_format }}</td>
            <td>{{ bill.kwh }}</td>
            <td>{{ bill.net }}</td>
            <td>{{ bill.vat }}</td>
            <td>{{ bill.gross }}</td>
            <td>
              <a href="{{context_path}}/reports/201/output/?bill_type_id={{bill.bill_type.id}}" title="{{bill.bill_type.description}}">{{bill.bill_type.code}}</a>
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[205]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MOP Rate Script]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException', 'NotFoundException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    rate_script_id = inv.getLong('mop_rate_script_id')
    rate_script = RateScript.get_mop_by_id(sess, rate_script_id)
    render(inv, template, {'rate_script': rate_script})
except NotFoundException, e:
    inv.sendNotFound(str(e))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; MOP Contracts &gt; {{rate_script.contract.name}} &gt;
      Rate Script {{rate_script.start_date|hh_format}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/185/output/">MOP Contracts</a> &gt;
      <a href="{{context_path}}/reports/107/output/?mop_contract_id={{rate_script.contract.id}}">{{rate_script.contract.name}}</a> &gt;
      {{rate_script.start_date|hh_format}}
      [<a href="{{context_path}}/reports/83/output/?mop_rate_script_id={{rate_script.id}}">edit</a>]
    </p>
    
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <tr>
        <th>Start Date</th>
        <td>{{rate_script.start_date|hh_format}}</td>
      </tr>
      <tr>
        <th>Finish Date</th>
        <td>{{rate_script.finish_date|hh_format}}</td>
      </tr>
    </table>

    <h2>Script</h2>

    <pre>
      {{rate_script.script}}
    </pre>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[207]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV CRC]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import pytz
import datetime
from dateutil.relativedelta import relativedelta
from sqlalchemy import or_, func
import math

Monad.getUtils()['impt'](globals(), 'utils', 'db')
HH, totalseconds, hh_after = utils.HH, utils.totalseconds, utils.hh_after
hh_format = utils.hh_format
Supply, RegisterRead, Bill = db.Supply, db.RegisterRead, db.Bill
BillType, Era, Site, SiteEra = db.BillType, db.Era, db.Site, db.SiteEra
HhDatum, Channel, Source = db.HhDatum, db.Channel, db.Source
ReadType = db.ReadType

sess = None
try:
    sess = db.session()
    year = inv.getInteger('year')

    ACTUAL_READ_TYPES = ['N', 'N3', 'C', 'X', 'CP']
    inv.getResponse().setContentType("text/csv")
    inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="output.csv"')
    pw = inv.getResponse().getWriter()
    pw.println("Chellow Supply Id, MPAN Core, Site Id, Site Name, From, To, NHH Breakdown, Actual HH Normal Days, Actual AMR Normal Days, Actual NHH Normal Days, Actual Unmetered Normal Days, Max HH Normal Days, Max AMR Normal Days, Max NHH Normal Days, Max Unmetered Normal Days, Total Actual Normal Days, Total Max Normal Days,Data Type, HH kWh, AMR kWh, NHH kWh, Unmetered kwh, Total kWh")
    pw.flush()

    year_start = datetime.datetime(year, 4, 1, tzinfo=pytz.utc)
    year_finish = year_start + relativedelta(years=1) - HH

    supplies = sess.query(Supply).join(Era).join(Source).filter(Source.code.in_(('net', 'gen-net')), Era.imp_mpan_core!=None, Era.start_date<=year_finish, or_(Era.finish_date==None, Era.finish_date>=year_start)).distinct()

    if inv.hasParameter('supply-id'):
        supply_id = inv.getLong('supply-id')
        supply = Supply.get_by_id(sess, supply_id)
        supplies = supplies.filter(Supply.id==supply.id)

    meter_types = ['hh', 'amr', 'nhh', 'unmetered']

    for supply in supplies.all():
        normal_kwh = dict([(mtype, 0) for mtype in meter_types])
        total_kwh = dict([(mtype, 0) for mtype in meter_types])
        normal_days = dict([(mtype, 0) for mtype in meter_types])
        max_normal_days = dict([(mtype, 0) for mtype in meter_types])

        breakdown = ''
        chunk_start = year_finish
        chunk_finish = year_start

        pw.print(str(supply.id) + ',')
        pw.flush()

        for era in sess.query(Era).filter(Era.supply_id==supply.id, Era.start_date<=year_finish, or_(Era.finish_date==None, Era.finish_date>=year_start)):

            meter_type = era.make_meter_category()

            era_start = era.start_date
            period_start = era_start if era_start > year_start else year_start

            era_finish = era.finish_date
            if hh_after(era_finish, year_finish):
                period_finish = year_finish
            else:
                period_finish = era_finish

            if period_start < chunk_start:
                chunk_start = period_start

            if period_finish > chunk_finish:
                chunk_finish = period_finish

            #p w.println("Doing a era from " + str(period_start) + " to " + str(period_finish))

            max_normal_days[meter_type] += float(totalseconds(period_finish - period_start) + 60 * 30) / (60 * 60 * 24)

            mpan_core = era.imp_mpan_core
            site = sess.query(Site).join(SiteEra).filter(SiteEra.is_physical==True, SiteEra.era_id==era.id).one()

            if meter_type == 'nhh':

                read_list = []
                read_keys = {}
                pairs = []
                
                prior_pres_reads = iter(sess.query(RegisterRead).join(Bill).join(BillType).join(RegisterRead.present_type).filter(RegisterRead.units==0, ReadType.code.in_(ACTUAL_READ_TYPES), Bill.supply_id==supply.id, RegisterRead.present_date<chunk_start, BillType.code!='W').order_by(RegisterRead.present_date.desc()))
                prior_prev_reads = iter(sess.query(RegisterRead).join(Bill).join(BillType).join(RegisterRead.previous_type).filter(RegisterRead.units==0, ReadType.code.in_(ACTUAL_READ_TYPES), Bill.supply_id==supply.id, RegisterRead.previous_date<chunk_start, BillType.code!='W').order_by(RegisterRead.previous_date.desc()))
                next_pres_reads = iter(sess.query(RegisterRead).join(Bill).join(BillType).join(RegisterRead.present_type).filter(RegisterRead.units==0, ReadType.code.in_(ACTUAL_READ_TYPES), Bill.supply_id==supply.id, RegisterRead.present_date>=chunk_start, BillType.code!='W').order_by(RegisterRead.present_date))
                next_prev_reads = iter(sess.query(RegisterRead).join(Bill).join(BillType).join(RegisterRead.previous_type).filter(RegisterRead.units==0, ReadType.code.in_(ACTUAL_READ_TYPES), Bill.supply_id==supply.id, RegisterRead.previous_date>=chunk_start, BillType.code!='W').order_by(RegisterRead.previous_date))

                for is_forwards in [False, True]:
                    if is_forwards:
                        pres_reads = next_pres_reads
                        prev_reads = next_prev_reads
                        read_list.reverse()
                    else:
                        pres_reads = prior_pres_reads
                        prev_reads = prior_prev_reads

                    prime_pres_read = None
                    prime_prev_read = None
                    while True:
                        #s elf.pw.println('starting mid loop, ' + str(System.currentTimeMillis()))
              
                        while prime_pres_read is None:
                            #s elf.pw.println('starting pres loop, ' + str(System.currentTimeMillis()))
                            try:
                                pres_read = pres_reads.next()
                            except StopIteration:
                                break
                                
                            pres_date = pres_read.present_date
                            pres_msn = pres_read.msn
                            read_key = '_'.join([str(pres_date), pres_msn]) 
                            if read_key in read_keys:
                                continue

                            pres_bill = sess.query(Bill).join(RegisterRead).join(BillType).filter(Bill.supply_id==supply.id, Bill.finish_date>=pres_read.present_date, Bill.start_date<=pres_read.present_date, BillType.code!='W').order_by(Bill.issue_date.desc(), BillType.code).first()

                            if pres_bill != pres_read.bill:
                                continue
                                                        
                            reads = dict((read.tpr.code, float(read.present_value) * float(read.coefficient)) for read in sess.query(RegisterRead).filter(RegisterRead.units==0, RegisterRead.bill_id==pres_bill.id, RegisterRead.present_date==pres_date, RegisterRead.msn==pres_msn))

                            prime_pres_read = {'date': pres_date, 'reads': reads, 'msn': pres_msn}
                            read_keys[read_key] = None

                        while prime_prev_read is None:
                            try:
                                prev_read = prev_reads.next()
                            except StopIteration:
                                break
                                
                            prev_date = prev_read.previous_date
                            prev_msn = prev_read.msn
                            read_key = '_'.join([str(prev_date), prev_msn])
                            if read_key in read_keys:
                                continue

                            prev_bill = sess.query(Bill).join(BillType).filter(Bill.supply_id==supply.id, Bill.finish_date>=prev_read.bill.start_date, Bill.start_date<=prev_read.bill.start_date, BillType.code!='W').order_by(Bill.issue_date.desc(), BillType.code).first()
                            if prev_bill != prev_read.bill:
                                continue

                            reads = dict((read.tpr.code, float(read.previous_value) * float(read.coefficient)) for read in sess.query(RegisterRead).filter(RegisterRead.units==0, RegisterRead.bill_id==prev_bill.id, RegisterRead.previous_date==prev_date, RegisterRead.msn==prev_msn))

                            prime_prev_read = {'date': prev_date, 'reads': reads, 'msn': prev_msn}
                            read_keys[read_key] = None

                        if prime_pres_read is None and prime_prev_read is None:
                            break
                        elif prime_pres_read is None:
                            read_list.append(prime_prev_read)
                            prime_prev_read = None
                        elif prime_prev_read is None:
                            read_list.append(prime_pres_read)
                            prime_pres_read = None
                        else:
                            if is_forwards:
                                if prime_prev_read['date'] == prime_pres_read['date'] or prime_pres_read['date'] < prime_prev_read['date']:
                                    read_list.append(prime_pres_read)
                                    prime_pres_read = None
                                else:
                                    read_list.append(prime_prev_read)
                                    prime_prev_read = None
                            else:
                                if prime_prev_read['date'] == prime_pres_read['date'] or prime_prev_read['date'] > prime_pres_read['date']:
                                    read_list.append(prime_prev_read)
                                    prime_prev_read = None
                                else:
                                    read_list.append(prime_pres_read)
                                    prime_pres_read = None

                        if len(read_list) > 1:
                            if is_forwards:
                                aft_read = read_list[-2]
                                fore_read = read_list[-1]
                            else:
                                aft_read = read_list[-1]
                                fore_read = read_list[-2]

                            if aft_read['msn'] == fore_read['msn']:
                                pair_start_date = aft_read['date'] + HH
                                pair_finish_date = fore_read['date']

                                num_hh = float(totalseconds(pair_finish_date + HH - pair_start_date)) / (30 * 60)

                                tprs = {}
                                for tpr_code, initial_val in aft_read['reads'].iteritems():
                                    if tpr_code in fore_read['reads']:
                                        end_val = fore_read['reads'][tpr_code]
                                    else:
                                        continue
                            
                                    kwh =  end_val - initial_val

                                    if kwh < 0:
                                        digits = int(math.log10(initial_val)) + 1
                                        kwh = 10 ** digits + kwh

                                    tprs[tpr_code] = float(kwh) / num_hh

                                pairs.append({'start-date': pair_start_date, 'finish-date': pair_finish_date, 'tprs': tprs})
                        
                                if len(pairs) > 0 and (not is_forwards or (is_forwards and read_list[-1]['date'] > chunk_finish)):
                                        break

                breakdown += 'read list - \n' + str(read_list) + "\n"
                if len(pairs) == 0:
                    pairs.append({'start-date': chunk_start, 'finish-date': chunk_finish, 'tprs': {'00001': 0}})
                else:
                    for pair in pairs:
                        pair_start = pair['start-date']
                        pair_finish = pair['finish-date']
                        if pair_start >= year_start and pair_finish <= year_finish:
                            normal_days[meter_type] += float(totalseconds(pair_finish - pair_start) + 60 * 30) / (60 * 60 * 24)


                # smooth
                for i in range(1, len(pairs)):
                    pairs[i - 1]['finish-date'] = pairs[i]['start-date'] - HH

                # stretch
                if pairs[0]['start-date'] > chunk_start:
                    pairs[0]['start-date'] = chunk_start

                if pairs[-1]['finish-date'] < chunk_finish:
                    pairs[-1]['finish-date'] = chunk_finish

                # chop
                pairs = [pair for pair in pairs if not pair['start-date'] > chunk_finish and not pair['finish-date'] < chunk_start]

                # squash  
                if pairs[0]['start-date'] < chunk_start:
                    pairs[0]['start-date'] = chunk_start

                if pairs[-1]['finish-date'] > chunk_finish:
                    pairs[-1]['finish-date'] = chunk_finish


                for pair in pairs:
                    pair_hhs = float(totalseconds(pair['finish-date'] - pair['start-date']) + 30 * 60) / (60 * 30)
                    pair['pair_hhs'] = pair_hhs
                    for tpr_code, pair_kwh in pair['tprs'].iteritems():
                        total_kwh[meter_type] += pair_kwh * pair_hhs

                breakdown += 'pairs - \n' + str(pairs)

            elif meter_type == 'hh':
                kwh_res = sess.query(func.sum(HhDatum.value)).join(Channel).filter(Channel.imp_related==True, Channel.channel_type=='ACTIVE', Channel.era_id==era.id, HhDatum.start_date>=period_start, HhDatum.start_date<=period_finish).one()[0]
                if kwh_res is not None:
                    total_kwh[meter_type] += float(kwh_res)
                normal_days[meter_type] += float(sess.query(func.count(HhDatum.value)).join(Channel).filter(Channel.imp_related==True, Channel.channel_type=='ACTIVE', Channel.era_id==era.id, HhDatum.start_date>=period_start, HhDatum.start_date<=period_finish, HhDatum.status=='A').one()[0]) / 48
            elif meter_type == 'amr':
                kwh_res = sess.query(func.sum(HhDatum.value)).join(Channel).filter(Channel.imp_related==True, Channel.channel_type=='ACTIVE', Channel.era_id==era.id, HhDatum.start_date>=period_start, HhDatum.start_date<=period_finish).one()[0]
                if kwh_res is not None:
                    total_kwh[meter_type] += float(kwh_res)
                normal_days[meter_type] += float(sess.query(func.count(HhDatum.value)).join(Channel).filter(Channel.imp_related==True, Channel.channel_type=='ACTIVE', Channel.era_id==era.id, HhDatum.start_date>=period_start, HhDatum.start_date<=period_finish, HhDatum.status=='A').one()[0]) / 48

            elif meter_type == 'unmetered':
                bills = sess.query(Bill).filter(Bill.supply_id==supply.id, Bill.finish_date>=period_start, Bill.start_date<=period_finish)
                for bill in bills:
                    total_kwh[meter_type] += float(bill.kwh)
                normal_days[meter_type] += float(totalseconds(period_finish - period_start) + 60 * 30) / (60 * 60 * 24)

        # for full year 183
        total_normal_days = sum(normal_days.values())
        total_max_normal_days = sum(max_normal_days.values())
        is_normal = float(total_normal_days) / total_max_normal_days >= float(183) / 365

        vals = [mpan_core, site.code, site.name, hh_format(year_start), hh_format(year_finish), breakdown] + [normal_days[type] for type in meter_types] + [max_normal_days[type] for type in meter_types] + [total_normal_days, total_max_normal_days, "Actual" if is_normal else "Estimated"] + [total_kwh[type] for type in meter_types] + [sum(total_kwh.values())]
        pw.println(','.join('"' + str(val) + '"' for val in vals))
        pw.flush()

        # avoid a long running transaction
        sess.rollback()
finally:
    if sess is not None:
        sess.close()

pw.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[209]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV CRC Selector]]></value>
		<value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
if cal.get(Calendar.MONTH) < Calendar.MARCH:
    cal.add(Calendar.YEAR, -1)
source.setAttribute('year', str(cal.get(Calendar.YEAR)))]]></value>
		<value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; CSV CRC</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV CRC'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/207/output/">
                    <fieldset>
                        <legend>Download CRC CSV</legend>
                        <br/>
                        <xsl:value-of select="'For financial year starting April '"/>
                        <input name="year" value="{/source/@year}" size="4" maxlength="4"/>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
                <br/>
                <form action="{/source/request/@context-path}/reports/215/output/">
                    <fieldset>
                        <legend>Download CRC Special Events CSV</legend>
                        <br/>
                        <xsl:value-of select="'For financial year starting April '"/>
                        <input name="year" value="{/source/@year}" size="4" maxlength="4"/>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[211]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Contract HH Data Imports]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.io import InputStreamReader
import StringIO

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Batch', 'set_read_write'],
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH'],
        'templater': ['render'],
        'general_import': ['start_general_process', 'get_general_process_ids', 'get_general_process'],
        'hh_importer': ['start_hh_import_process', 'get_hh_import_processes']})


def make_fields(sess, contract, message=None):
    messages = None if message is None else [str(message)]
    return {'contract': contract, 'processes': get_hh_import_processes(contract.id), 'messages': messages}

sess = None
try:
    sess = session()
    hh_importer_contract = Contract.get_non_core_by_name(sess, 'hh_importer')

    if inv.getRequest().getMethod() == 'GET':
        hhdc_contract_id = inv.getLong('hhdc_contract_id')
        contract = Contract.get_hhdc_by_id(sess, hhdc_contract_id)

        render(inv, template, make_fields(sess, contract))
    else:
        hhdc_contract_id = inv.getLong('hhdc_contract_id')
        contract = Contract.get_hhdc_by_id(sess, hhdc_contract_id)
        file_item = inv.getFileItem("import_file")
        stream = InputStreamReader(file_item.getInputStream(), 'utf-8')
        f = StringIO.StringIO()
        bt = stream.read()
        while bt != -1:
            f.write(unichr(bt))
            bt = stream.read()
        f.seek(0)
        hh_import_process = start_hh_import_process(hhdc_contract_id, f, file_item.getName(), file_item.getSize())
        inv.sendSeeOther("/reports/65/output/?hhdc_contract_id=" + str(contract.id) + "&process_id=" + str(hh_import_process.id))
except UserException, e:
    render(inv, template, make_fields(sess, contract, e), 400)
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; HHDC Contracts &gt; {{contract.name}} &gt; HH Data Imports
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{context_path}}/reports/115/output/?hhdc_contract_id={{contract.id}}">{{contract.name}}</a>
      &gt; HH Data Imports
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <form enctype="multipart/form-data" method="post" action=".">
      <fieldset>
        <input type="hidden" name="hhdc_contract_id" value="{{contract.id}}">
        <legend>Import HH data</legend>
        <br>
        <input type="file" name="import_file" size="45"
                            value="{{request.getParameter('import_file')}}">
        <input type="submit" value="Import">
      </fieldset>
    </form>

    {% if processes|length > 0 %}
      <ul>
        {% for proc in processes %}
          <li>
            <a href="{{context_path}}/reports/65/output/?hhdc_contract_id={{contract.id}}&amp;process_id={{proc.id}}">{{proc.id}}</a>
          </li>
        {% endfor %}
      </ul>
    {% endif %}

  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[213]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Contract HH Importer]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import threading

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Batch', 'set_read_write'],
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH'],
        'templater': ['render'],
        'hh_importer': ['get_hh_import_task']})

def make_fields(contract, task, message=None):
    messages = None if message is None else [str(message)]
    return {'task': task, 'messages': messages, 'contract': contract}

sess = None
task = None
try:
    sess = session()
    contract_id = inv.getLong('hhdc_contract_id')
    contract = Contract.get_hhdc_by_id(sess, contract_id)

    if inv.getRequest().getMethod() == 'GET':
        task = get_hh_import_task(contract)   
        render(inv, template, make_fields(contract, task))
    else:
        task = get_hh_import_task(contract)
        task.go()
        inv.sendSeeOther("/reports/213/output/?hhdc_contract_id=" + str(contract.id))
except UserException, e:
    render(inv, template, make_fields(contract, task, e), 400)
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; HHDC Contracts &gt; {{contract.name}} &gt;
      Automatic HH Data Downloader
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{context_path}}/reports/115/output/?hhdc_contract_id={{contract.id}}">{{contract.name}}</a> &gt;
      Automatic HH Data Downloader
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{message}}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <p><a href=".?hhdc_contract_id={{contract.id}}">Refresh page</a></p>

    {% if task %}

      <table>
        <tr>
          <th>Is Locked?</th>
          <th>Is stopping?</th>
        </tr>
        <tr>
          <td>{{task.is_locked()}}</td>
          <td>{{task.stopped.isSet()}}</td>
        </tr>
      </table>
      <br>

      {% if not task.is_locked() %}
        <form action="." method="post">
          <fieldset>
            <legend>Import Now</legend>
            <input type="hidden" name="hhdc_contract_id" value="{{contract.id}}">
            <input type="submit" value="Import" name="now">
          </fieldset>
        </form>
      {% endif %}

      <h3>Log</h3>

      <p>{{task.get_status()}}</p>

      <ul>
        {% for message in task.messages %}
          <li>{{message}}</li>
        {% endfor %}
      </ul>
    {% else %}
      <p>The importer task has not been started.</p>
    {% endif %}
  </body>
</html>
]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[215]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV CRC Special Events]]></value>
		<value><![CDATA[from java.lang import System
from net.sf.chellow.monad import Monad
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Era', 'Supply', 'session', 'Site', 'SiteEra'], 
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before'],
        'templater': ['render'],
        'bsuos': []})

year = inv.getInteger('year')

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="output.csv"')
pw = inv.getResponse().getWriter()

pw.print("MPAN Core,Site Id,Site Name,Date,Event,")
pw.flush()

year_start = datetime(year, 4, 1, tzinfo=pytz.utc)
year_finish = prev_hh(datetime(year + 1, 4, 1, tzinfo=pytz.utc))

def add_event(events, date, code, era=None, mpan_core=None):
    if era is None:
        mpan_cores = [mpan_core]
    else:
        mpan_cores = []
        if era.imp_mpan_core is not None:
            mpan_cores.append(era.imp_mpan_core)
        if era.exp_mpan_core is not None:
            mpan_cores.append(era.exp_mpan_core)

    for mpan_core in mpan_cores:
        events.append({'date': date, 'code': code, 'mpan-core': mpan_core})

sess = None
try:
    sess = session()
    if inv.hasParameter('supply_id'):
        supply_id = inv.getLong('supply_id')
        supply = Supply.get_by_id(supply_id)
        supplies = sess.query(Supply).from_statement("select * from Supply supply where id = :supply_id").params(supply_id=supply_id)
    else:
        supplies = sess.query(Supply).from_statement("select distinct supply.* from supply, era, source where era.supply_id = supply.id and supply.source_id = source.id and source.code in ('net', 'gen-net', 'gen') and era.start_date <= :finish_date and (era.finish_date is null or era.finish_date >= :start_date)").params(start_date=year_start, finish_date=year_finish)

    for supply in supplies:
        eras = sess.query(Era).from_statement("select * from era where era.supply_id = :supply_id and era.start_date <= :finish_date and (era.finish_date is null or era.finish_date >= :start_date) order by era.start_date").params(supply_id=supply.id, start_date= year_start, finish_date=year_finish).all()
        events = []
        first_era = eras[0]
        first_era_start = first_era.start_date
        if hh_after(first_era_start, year_start):
            add_event(events, first_era_start, "New Supply", first_era)

        last_era = eras[-1]
        last_era_finish = last_era.finish_date
        if hh_before(last_era_finish, year_finish):
            add_event(events, last_era_finish, "Disconnection", last_era)
    
        prev_era = first_era
        for era in eras[1:]:
            if era.msn != prev_era.msn:
                add_event(events, era.start_date, "Meter Change", era)
            if era.pc.code != prev_era.pc.code:
               add_event(events, era.start_date, "Change Of Profile Class", era)

            if era.mop_contract_id != prev_era.mop_contract_id:
                add_event(events, era.start_date, "Change Of MOP", era)

            if era.hhdc_contract_id != prev_era.hhdc_contract_id:
                add_event(events, era.start_date, "Change Of DC", era)

            for is_import in [True, False]:
                if era.imp_mpan_core is None:
                    mpan_core = era.exp_mpan_core
                else:
                    mpan_core = era.imp_mpan_core

                if is_import:
                    cur_sup = era.imp_supplier_contract
                    prev_sup = prev_era.imp_supplier_contract
                else:
                    cur_sup = era.exp_supplier_contract
                    prev_sup = prev_era.exp_supplier_contract
            
                if cur_sup is None and prev_sup is not None:
                    add_event(events, era.start_date, "End of supply", mpan_core)
                elif cur_sup is not None and prev_sup is None:
                    add_event(events, era.start_date, "Start of supply", None, mpan_core)
                elif cur_sup is not None and prev_sup is not None and cur_sup != prev_sup:
                    add_event(events, era.start_date, "Change Of Supplier", None, mpan_core)
        
            prev_era = era

        if len(events) > 0:
            site = sess.query(Site).join(SiteEra).filter(SiteEra.is_physical==True, SiteEra.era_id==last_era.id).one()

            for event in events:
                pw.println('')
                pw.print(','.join('"' + str(val) + '"' for val in [event['mpan-core'], site.code, site.name, event['date'].strftime("%Y-%m-%d %H:%M"), event['code']]) + ',')
        else:
            pw.print(' ')
        pw.flush()
    pw.close()
finally:
    sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[217]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Register Reads Selector]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from datetime import datetime
from dateutil.relativedelta import relativedelta

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    init = datetime.utcnow()
    init = datetime(init.year, init.month, 1) - relativedelta(months=1)

    render(inv, template, {'init': init})

finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; CSV Register Reads</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      CSV Register Reads
    </p>
    
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    
    <form action="{{context_path}}/reports/219/output/">
      <fieldset>
        <legend>Download</legend>
        <br>
        For {{input_text('months', 1, 2, 2)}}
        month(s) finishing at the end of
        {{input_date('end', init, resolution='month')}}
        <input type="submit" value="Download">
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[219]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Register Reads]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import datetime
import pytz
from dateutil.relativedelta import relativedelta
from sqlalchemy import or_, and_

Monad.getUtils()['impt'](globals(), 'utils', 'db')

HH, hh_format = utils.HH, utils.hh_format
RegisterRead, Bill, Supply, Era = db.RegisterRead, db.Bill, db.Supply, db.Era

sess = None
try:
    sess = db.session()

    year = inv.getInteger("end_year")
    month = inv.getInteger("end_month")
    months = inv.getInteger("months")

    finish_date = datetime.datetime(year, month, 1, tzinfo=pytz.utc) + relativedelta(months=1) - HH

    start_date = datetime.datetime(year, month, 1, tzinfo=pytz.utc) - relativedelta(months=months-1)

    reads = sess.query(RegisterRead).filter(or_(and_(RegisterRead.present_date>=start_date, RegisterRead.present_date<=finish_date), and_(RegisterRead.previous_date>=start_date, RegisterRead.previous_date<=finish_date))).join(Bill).order_by(Bill.supply_id)

    if inv.hasParameter('supply_id'):
        supply_id = inv.getLong('supply_id')
        supply = Supply.get_by_id(sess, supply_id)
        reads = reads.filter(Bill.supply_id==supply.id)

    inv.getResponse().setContentType("text/csv")
    inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="reads_' + datetime.datetime.now(pytz.utc).strftime("%Y%M%d%H%m") + '.csv"')
    pw = inv.getResponse().getWriter()
    pw.println("Duration Start,Duration Finish,Supply Id,Import MPAN Core,Export MPAN Core,Batch Reference,Bill Id,Bill Reference,Bill Issue Date,Bill Type,Register Read Id,TPR,Coefficient,Previous Read Date,Previous Read Value,Previous Read Type,Present Read Date,Present Read Value,Present Read Type")
    pw.flush()

    for read in reads:
        bill = read.bill
        supply = bill.supply
        batch = bill.batch

        era = supply.find_era_at(sess, bill.start_date)
        if era is None:
            eras = sess.query(Era).filter(Era.supply_id==supply.id).order_by(Era.start_date).all()
            if bill.start_date < eras[0].start_date:
                era = eras[0]
            else:
                era = eras[-1]

        pw.println(','.join('"' + ('' if value is None else str(value)) + '"' for value in [hh_format(start_date), hh_format(finish_date), supply.id, era.imp_mpan_core, era.exp_mpan_core, batch.reference,bill.id, bill.reference, hh_format(bill.issue_date), bill.bill_type.code, read.id, 'md' if read.tpr is None else read.tpr.code, read.coefficient, hh_format(read.previous_date), read.previous_value, read.previous_type.code, hh_format(read.present_date), read.present_value, read.present_type.code]))
        pw.flush()

    pw.close()

finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[221]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[System Price Importer]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import Thread
from sqlalchemy.orm import joinedload_all
import sys

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater', 'system_price_bmreports')

Contract = db.Contract


sess = None
importer = None
try:
    sess = db.session()
    if inv.getRequest().getMethod() == "GET":
        importer = system_price_bmreports.get_importer()
        contract = Contract.get_non_core_by_name(sess, 'system_price_bmreports')
        templater.render(inv, template, {'importer': importer, 'contract': contract})
    else:
        importer = system_price_bmreports.get_importer()
        contract = Contract.get_non_core_by_name(sess, 'system_price_bmreports')
        importer.go()
        inv.sendSeeOther("/reports/221/output/")
except utils.UserException, e:
    sess.rollback()
    templater.render(inv, template, {'messages': [str(e)], 'importer': importer,
        'contract': contract})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path }}/reports/19/output/">
    <title>
      Chellow &gt; Non-core Contracts &gt; {{ contract.name }} &gt;
      Automatic Importer
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/259/output/">Non-Core Contracts</a> &gt;
      <a href="{{ context_path }}/reports/267/output/?non_core_contract_id={{ contract.id }}">{{ contract.name }}</a>
      &gt; Automatic Importer
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <p>
      <a href=".">Refresh page</a>{{ debug }}
    </p>
    {% if importer %}
      <table>
        <tr>
          <th>Is Locked?</th>
          <td>{{ importer.is_locked() }}</td>
        </tr>
      </table>
      <br/>
      {% if not importer.is_locked() %}
        <form action="{{context_path}}/reports/221/output/" method="post">
          <fieldset>
            <legend>Import Now</legend>
            <input type="submit" value="Import">
          </fieldset>
        </form>
      {% endif %}

      <h3>Log</h3>
        
      <ul>
        {% for message in importer.messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% else %}
      <p>Importer not present.</p>
    {% endif %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[223]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Transmission Loss Multiplier Importer]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import System
from sqlalchemy.orm import joinedload_all
import sys

Monad.getContext().getAttribute("net.sf.chellow.utils")['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render'],
        'tlms': ['get_tlm_importer']})


sess = None
importer = None
try:
    sess = session()
    if inv.getRequest().getMethod() == "GET":
        importer = get_tlm_importer()
        contract = Contract.get_non_core_by_name(sess, 'tlms')
        render(inv, template, {'importer': importer, 'contract': contract})
    else:
        importer = get_tlm_importer()
        contract = Contract.get_non_core_by_name(sess, 'tlms')
        importer.go()
        inv.sendSeeOther("/reports/223/output/")
except UserException, e:
    sess.rollback()
    render(inv, template, {'messages': [str(e)], 'importer': importer,
        'contract': contract})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path }}/reports/19/output/">
    <title>
      Chellow &gt; Non-core Contracts &gt; TLM &gt; Automatic Importer
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/259/output/">Non-Core Contracts</a> &gt;
      <a href="{{ context_path }}/reports/267/output/?non_core_contract_id={{contract.id}}">{{contract.name}}</a>
      &gt; Automatic Importer
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <p>
      <a href=".">Refresh page</a>{{ debug }}
    </p>
    {% if importer %}
      <table>
        <tr>
          <th>Is Locked?</th>
          <td>{{importer.is_locked()}}</td>
        </tr>
      </table>
      <br/>
      {% if not importer.is_locked() %}
        <form action="." method="post">
          <fieldset>
            <legend>Import Now</legend>
            <input type="submit" value="Import" name="now">
          </fieldset>
        </form>
      {% endif %}

      <h3>Log</h3>
        
      <ul>
        {% for message in importer.messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% else %}
      <p>Importer not present.</p>
    {% endif %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[225]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[RCRC Importer]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import System
from sqlalchemy.orm import joinedload_all
import sys

Monad.getContext().getAttribute("net.sf.chellow.utils")['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render'],
        'rcrc': ['get_rcrc_importer']})


sess = None
importer = None
try:
    sess = session()
    if inv.getRequest().getMethod() == "GET":
        importer = get_rcrc_importer()
        contract = Contract.get_non_core_by_name(sess, 'rcrc')
        render(inv, template, {'importer': importer, 'contract': contract})
    else:
        importer = get_rcrc_importer()
        contract = Contract.get_non_core_by_name(sess, 'rcrc')
        importer.go()
        inv.sendSeeOther("/reports/225/output/")
except UserException, e:
    sess.rollback()
    render(inv, template, {'messages': [str(e)], 'importer': importer,
        'contract': contract})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path }}/reports/19/output/">
    <title>
      Chellow &gt; Non-core Contracts &gt; RCRC &gt; Automatic Importer
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/259/output/">Non-Core Contracts</a> &gt;
      <a href="{{ context_path }}/reports/267/output/?non_core_contract_id={{ contract.id }}">{{ contract.name }}</a>
      &gt; Automatic Importer
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <p>
      <a href=".">Refresh page</a>{{ debug }}
    </p>
    {% if importer %}
      <table>
        <tr>
          <th>Is Locked?</th>
          <td>{{importer.is_locked()}}</td>
        </tr>
      </table>
      <br/>
      {% if not importer.is_locked() %}
        <form action="." method="post">
          <fieldset>
            <legend>Import Now</legend>
            <input type="submit" value="Import" name="now">
          </fieldset>
        </form>
      {% endif %}

      <h3>Log</h3>
        
      <ul>
        {% for message in importer.messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% else %}
      <p>Importer not present.</p>
    {% endif %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[227]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Importer: BSUoS]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import Thread
from sqlalchemy.orm import joinedload_all
import sys

Monad.getContext().getAttribute("net.sf.chellow.utils")['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render'],
        'bsuos': ['get_bsuos_importer']})


sess = None
importer = None
try:
    sess = session()
    if inv.getRequest().getMethod() == "GET":
        importer = get_bsuos_importer()
        contract = Contract.get_non_core_by_name(sess, 'bsuos')
        render(inv, template, {'importer': importer, 'contract': contract})
    else:
        importer = get_bsuos_importer()
        contract = Contract.get_non_core_by_name(sess, 'bsuos')
        importer.go()
        inv.sendSeeOther("/reports/227/output/")
except UserException, e:
    sess.rollback()
    render(inv, template, {'messages': [str(e)], 'importer': importer,
        'contract': contract})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path }}/reports/19/output/">
    <title>
      Chellow &gt; Non-core Contracts &gt; BSUoS &gt; Automatic Importer
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/259/output/">Non-Core Contracts</a> &gt;
      <a href="{{ context_path }}/reports/267/output/?non_core_contract_id={{ contract.id }}">{{ contract.name }}</a>
      &gt; Automatic Importer
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <p>
      <a href=".">Refresh page</a>{{ debug }}
    </p>
    {% if importer %}
      <table>
        <tr>
          <th>Is Locked?</th>
          <td>{{ importer.is_locked() }}</td>
        </tr>
      </table>
      <br/>
      {% if not importer.is_locked() %}
        <form action="{{context_path}}/reports/227/output/" method="post">
          <fieldset>
            <legend>Import Now</legend>
            <input type="submit" value="Import" name="now">
          </fieldset>
        </form>
      {% endif %}

      <h3>Log</h3>
        
      <ul>
        {% for message in importer.messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% else %}
      <p>Importer not present.</p>
    {% endif %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[229]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MOP Contract Virtual Bill Selector]]></value>
		<value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.billing import Contract

contract_id = inv.getLong('mop_contract_id')
if not inv.isValid():
    raise UserException()

contract = Contract.getMopContract(contract_id)


cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(contract.toXml(doc))]]></value>
		<value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
<head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; MOP Contracts &gt;
                    <xsl:value-of select="/source/mop-contract/@name" /> &gt; Virtual Bills
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/185/output/">
                        <xsl:value-of select="'MOP Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/107/output/?mop-contract-id={/source/mop-contract/@id}">
                    <xsl:value-of
                        select="/source/mop-contract/@name" />
                    </a>
                    &gt;
                    Virtual Bills
                </p>

                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/231/output/">
                    <fieldset>
                        <legend>Download Virtual Bills</legend>
                        <input type="hidden" name="contract-id" value="{/source/mop-contract/@id}"/>
<br/>
<xsl:value-of select="'For '"/>
<input name="months" value="1" maxlength="2" size="2" />
<xsl:value-of select="' month(s) until the end of '"/>
                        <input name="end-year" value="{/source/date/@year}" maxlength="4" size="4" /><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[231]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MOP Contract Virtual Bills]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy import or_

Monad.getUtils()['impt'](globals(), 'templater', 'db', 'utils', 'computer')

Contract, Era = db.Contract, db.Era
hh_format = utils.hh_format
    
inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'attachment;filename="output.csv"')
pw = inv.getResponse().getWriter()

start_date = utils.form_date(inv, 'start')
finish_date = utils.form_date(inv, 'finish')
contract_id = inv.getLong('mop_contract_id')

caches = {}

sess = None
try:
    sess = db.session()

    contract = Contract.get_mop_by_id(sess, contract_id)

    forecast_date = computer.forecast_date()

    pw.print('Import MPAN Core, Export MPAN Core, Start Date, Finish Date')
    bill_titles = computer.contract_func(caches, contract, 'virtual_bill_titles', pw)()
    for title in bill_titles:
        pw.print(',' + title)
    pw.println('')
    pw.flush()

    for era in sess.query(Era).filter(or_(Era.finish_date==None, Era.finish_date>=start_date), Era.start_date<=finish_date, Era.mop_contract_id==contract.id).order_by(Era.supply_id):
        import_mpan_core = era.imp_mpan_core
        if import_mpan_core is None:
            import_mpan_core_str = ''
        else:
            mpan_core = import_mpan_core
            is_import = True
            import_mpan_core_str = mpan_core

        export_mpan_core = era.exp_mpan_core
        if export_mpan_core is None:
            export_mpan_core_str = ''
        else:
            is_import = False
            mpan_core = export_mpan_core
            export_mpan_core_str = mpan_core

        pw.print(import_mpan_core_str + ',' + export_mpan_core_str + ',' + hh_format(start_date) + ',' + hh_format(finish_date) + ',')
        supply_source = computer.SupplySource(sess, start_date, finish_date, forecast_date, era, is_import, pw, caches)
        bill = computer.contract_func(caches, contract, 'virtual_bill', pw)(supply_source)
        for title in bill_titles:
            pw.print('"' + str(bill.get(title, '')) + '",')
            if title in bill:
                del bill[title]
        for k in sorted(bill.keys()):
            pw.print(',"' + k + '","' + str(bill[k]) + '"')
        pw.println('')
        pw.flush()
    pw.close()
finally:
    if sess is None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[233]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[DC Channel Snags CSV]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from sqlalchemy.sql.expression import text, select
from sqlalchemy import and_
import datetime
from dateutil.relativedelta import relativedelta
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['HhDatum', 'Site', 'Supply', 'set_read_write', 'session', 'Contract', 'Snag', 'Channel', 'Era', 'SiteEra'], 
        'utils': ['UserException', 'HH', 'form_date'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    contract_id = inv.getLong('hhdc_contract_id')
    days_hidden = inv.getInteger('days_hidden')
    
    file_name = "channel_snags.csv"
    inv.getResponse().setContentType('text/csv')
    inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="' + file_name + '"')
    pw = inv.getResponse().getWriter()
    pw.println("Hidden Days, Chellow Id,Imp MPAN Core,Exp MPAN Core, Site Code,Site Name,Snag Description,Import Related?,Channel Type,Start Date,Finish Date,Days Since Snag Finished,Duration Of Snag (Days),Is Ignored?")
    pw.flush()

    contract = Contract.get_hhdc_by_id(sess, contract_id)

    MILLIS_IN_DAY = 1000 * 60 * 60 * 24

    now = datetime.datetime.now(pytz.utc)
    cutoff_date = now - relativedelta(days=days_hidden)

    for snag, channel, era, supply, site_era, site in sess.query(Snag, Channel, Era, Supply, SiteEra, Site).join(Channel, Era, Supply, SiteEra, Site).filter(SiteEra.is_physical==True, Era.hhdc_contract_id==contract.id, Snag.start_date < cutoff_date).order_by(Site.code, Supply.id, Channel.imp_related, Channel.channel_type, Snag.description, "snag.start_date", "snag.id"):
        snag_start = snag.start_date
        snag_finish = snag.finish_date
        if snag_finish is None:
            snag_finish_str = ''
            duration = now - snag_start
            age_of_snag = datetime.timedelta(0)
        else:
            snag_finish_str = snag_finish.strftime("%Y-%m-%d %H:%M")
            duration = snag_finish - snag_start
            age_of_snag = now - snag_finish

        pw.println(','.join('"' + str(val) + '"' for val in [days_hidden, snag.id, era.imp_mpan_core, era.exp_mpan_core, site.code, site.name, snag.description, channel.imp_related, channel.channel_type, snag_start.strftime("%Y-%m-%d %H:%M"), snag_finish_str, age_of_snag.days + float(age_of_snag.seconds) / (3600 * 24), duration.days + float(duration.seconds) / (3600 * 24), snag.is_ignored]))
        pw.flush()
    pw.close()
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[235]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Overall Profile Selector]]></value>
		<value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))]]></value>
		<value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
            href="{/source/request/@context-path}/reports/19/output/" />
                <title>Chellow &gt; CSV Overall Profile</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Overall Profile'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/237/output/">
                    <fieldset>
                        <legend>Download</legend>
<br/>
                        <xsl:value-of select="'For '"/>
                        <input name="months" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='months']">
                                <xsl:value-of select="/source/request/parameter[@name='months']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
<xsl:value-of select="' month(s) finishing at the end of '"/>
                        <input name="year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[237]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Overall Profile]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.lang import System
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate
from java.util.zip import ZipOutputStream, ZipEntry
from java.io import OutputStreamWriter, PrintWriter
from java.text import SimpleDateFormat
import collections

year = inv.getInteger("year")
month = inv.getInteger("month")
months = inv.getInteger("months")

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
start_date = HhStartDate(cal.getTime())

file_format = SimpleDateFormat("yyyy-MM-dd")
file_format.setCalendar(cal)

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename="overall-profile_' + file_format.format(Date()) + '.csv"')
pw = inv.getResponse().getWriter()

date_format = SimpleDateFormat("yyyy,MM,dd,HH,mm,dd/MM/yyy HH:mm,")
date_format.setCalendar(cal)

con = Hiber.session().connection()

hh_date = start_date.getDate().getTime()
finish_date_millis = finish_date.getDate().getTime()
stmt = con.prepareStatement("select hh_datum.value, channel.is_import, source.code as source_code, pc.code as pc_code from hh_datum, channel, supply_era, supply, source, pc where hh_datum.channel_id = channel.id and channel.supply_era_id = supply_era.id and supply_era.supply_id = supply.id and supply.source_id = source.id and supply_era.pc_id = pc.id and channel.is_kwh is true and hh_datum.start_date = ?", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
stmt.setFetchSize(100)

prefixes = ['total', 'hh', 'amr']
suffixes = ['export-kwh', 'import-kwh', 'parasitic-kwh', 'generated-kwh', '3rd-party-import-kwh', '3rd-party-export-kwh']

title_map = dict([(prefix, dict([(suffix, prefix + '-' + suffix) for suffix in suffixes])) for prefix in prefixes])

titles = ['year', 'month', 'day', 'hour', 'minute', 'date', 'total-used-kwh', 'total-displaced-kwh'] + [title_map[prefix][suffix] for prefix in prefixes for suffix in suffixes]

pw.println(','.join(titles))
pw.flush()

while hh_date <= finish_date_millis:
    values = collections.defaultdict(int)
    stmt.setTimestamp(1, Timestamp(hh_date))
    rs = stmt.executeQuery()
    while rs.next():
        hh_val = rs.getFloat("value")
        is_import = rs.getBoolean("is_import")
        source_code = rs.getString("source_code")
        pc_code = rs.getInt("pc_code")
        if pc_code == 0:
            prefix = 'hh'
        else:
            prefix = 'amr'
        type_map = title_map[prefix]
        if not is_import and source_code in ('net', 'gen-net'):
            values[type_map['export-kwh']] += hh_val
        if is_import and source_code in ('net', 'gen-net'):
            values[type_map['import-kwh']] += hh_val
        if (is_import and source_code == 'gen') or (not is_import and source_code == 'gen-net'):
            values[type_map['generated-kwh']] += hh_val
        if (not is_import and source_code == 'gen') or (is_import and source_code == 'gen-net'):
            values[type_map['parasitic-kwh']] += hh_val
        if (is_import and source_code == '3rd-party') or (not is_import and source_code == '3rd-party-reverse'):
            values[type_map['3rd-party-import-kwh']] += hh_val
        if (not is_import and source_code == '3rd-party') or (is_import and source_code == '3rd-party-reverse'):
            values[type_map['3rd-party-export-kwh']] += hh_val

    for suffix in suffixes:
        values[title_map['total'][suffix]] = values[title_map['amr'][suffix]] + values[title_map['hh'][suffix]]
    values['total-displaced-kwh'] = values['total-generated-kwh'] - values['total-export-kwh'] - values['total-parasitic-kwh']
    values['total-used-kwh'] = values['total-displaced-kwh'] + values['total-import-kwh'] + values['total-3rd-party-import-kwh'] - values['total-3rd-party-export-kwh']
    pw.println(date_format.format(Date(hh_date)) + ','.join(str(values[title]) for title in titles[6:]))
    pw.flush()
    hh_date = HhStartDate.getNext(cal, hh_date)
pw.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[239]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supply Notes Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from sqlalchemy.sql.expression import text
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Supply', 'Batch', 'Participant', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date', 'form_str', 'form_int'],
        'templater': ['render']})


def make_fields(sess, supply, message=None):
    messages = [] if message is None else [str(message)]
    return {'supply': supply, 'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        supply_id = inv.getLong('supply_id')
        supply = Supply.get_by_id(sess, supply_id)
        render(inv, template, make_fields(sess, supply))
    else:
        set_read_write(sess)
        supply_id = form_int(inv, 'supply_id')
        supply = Supply.get_by_id(sess, supply_id)
        body = form_str(inv, 'body')
        category = form_str(inv, 'category')
        is_important = inv.getBoolean('is_important')
        if len(supply.note.strip()) == 0:
            supply.note = "{'notes': []}"
        note_dict = eval(supply.note)
        note_dict['notes'].append({'category': category, 'is_important': is_important, 'body': body})
        supply.note = str(note_dict)
        sess.commit()
        inv.sendSeeOther("/reports/369/output/?supply_id=" + str(supply_id))
except UserException, e:
    render(inv, template, make_fields(sess, supply, e))
finally:
    sess.close()
]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; Supplies &gt; {{supply.id}} &gt; Notes &gt; Add</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/99/output/">Supplies</a>  &gt;
      <a href="{{context_path}}/reports/7/output/?supply_id={{supply.id}}">{{supply.id}}</a>  &gt;
      <a href="{{context_path}}/reports/369/output/?supply_id={{supply.id}}">Notes</a>  &gt;
      Add
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <form action="." method="post">
      <input type="hidden" name="supply_id" value="{{supply.id}}">
      Category {{input_text('category')}}
      <br>
      Important?{{input_checkbox('is_important')}}
      <br>
      {{input_textarea('body', '', 30, 80)}}
    <br>
    <input type="submit" value="Add">
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[241]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[CSV Daily Supplier Virtual Bill]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import datetime
from dateutil.relativedelta import relativedelta
import pytz

Monad.getUtils()['impt'](globals(), 'utils', 'db', 'computer')

HH, hh_after = utils.HH, utils.hh_after
Supply, Site, SiteEra = db.Supply, db.Site, db.SiteEra

sess = None
try:
    sess = db.session()

    inv.getResponse().setContentType("text/csv")
    inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="daily_supplier_virtual_bill.csv"')
    pw = inv.getResponse().getWriter()

    start_year = inv.getInteger("start_year")
    start_month = inv.getInteger("start_month")
    start_day = inv.getInteger("start_day")

    finish_year = inv.getInteger("finish_year")
    finish_month = inv.getInteger("finish_month")
    finish_day = inv.getInteger("finish_day")

    start_date = datetime.datetime(start_year, start_month, start_day, tzinfo=pytz.utc)
    finish_date = datetime.datetime(finish_year, finish_month, finish_day, tzinfo=pytz.utc) + relativedelta(months=1) - HH

    caches = {}

    is_import = inv.getBoolean('is_import')

    supply_id = inv.getLong('supply_id')
    supply = Supply.get_by_id(sess, supply_id)

    forecast_date = computer.forecast_date()

    day_start = start_date

    prev_bill_titles = []

    while not day_start > finish_date:
        day_finish = day_start + relativedelta(days=1) - HH

        for era in supply.find_eras(sess, day_start, day_finish):
            if era.start_date > day_start:
                chunk_start = era.start_date
            else:
                chunk_start = day_start

            if hh_after(era.finish_date, day_finish):
                chunk_finish = day_finish
            else:
                chunk_finish = era.finish_date

            ss = computer.SupplySource(sess, chunk_start, chunk_finish, forecast_date, era, is_import, pw, caches)
 
            sup_con = ss.supplier_contract
            bill_titles = computer.contract_func(caches, sup_con, 'virtual_bill_titles', pw)()
            if bill_titles != prev_bill_titles:
                pw.println('MPAN Core,Site Code,Site Name,Account,From,To,' + ','.join(bill_titles))
                pw.flush()
                prev_bill_titles = bill_titles

            site = sess.query(Site).join(SiteEra).filter(SiteEra.era_id==era.id, SiteEra.is_physical==True).one()
            pw.print(','.join('"' + str(value) + '"' for value in [ss.mpan_core, site.code , site.name, ss.supplier_account, ss.start_date, ss.finish_date]))
            pw.flush()

            bill = computer.contract_func(caches, sup_con, 'virtual_bill', pw)(ss)
            for title in bill_titles:
                pw.print(',"' + str(bill.get(title, '')) + '"')
                if title in bill:
                    del bill[title]

            for k in sorted(bill.keys()):
                pw.print(',"' + k + '","' + str(bill[k]) + '"')
            pw.println('')
            pw.flush()

        day_start += relativedelta(days=1)
    pw.close()
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[243]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[DNO Contract Rate Script Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})

def page_fields(contract, message=None):
    now = datetime.now(pytz.utc)
    initial_date = datetime(now.year, now.month, 1, tzinfo=pytz.utc)
    messages = None if message is None else [message]
    return {'contract': contract, 'initial_date': initial_date,
        'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        contract_id = inv.getLong('dno_contract_id')
        contract = Contract.get_dno_by_id(sess, contract_id)
        render(inv, template, page_fields(contract))
    else:
        set_read_write(sess)
        contract_id = inv.getLong('dno_contract_id')
        contract = Contract.get_dno_by_id(sess, contract_id)
        start_date = form_date(inv, 'start')
        rate_script = contract.insert_rate_script(sess, start_date, '')
        sess.commit()
        inv.sendSeeOther('/reports/69/output/?dno_rate_script_id='
                + str(rate_script.id))
except UserException, e:
        render(inv, template, page_fields(contract, str(e)))
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>
      Chellow &gt; DNO Contracts &gt; {{ contract.name }}
      &gt; Add Rate Script
    </title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/137/output/">DNO Contracts</a> &gt;
      <a href="{{ context_path }}/reports/67/output/?dno_contract_id={{ contract.id }}">{{ contract.name }}</a> &gt; Add Rate Script
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br />
    <form action="{{ context_path }}/reports/243/output/" method="post">
      <fieldset>
        <legend>Add a rate script</legend>
        <input type="hidden" name="dno_contract_id" value="{{ contract.id }}"
        >
        <br />
        <fieldset>
          <legend>Start Date</legend>
          {{ input_date('start', initial_date) }}
        </fieldset>
        <br />
        <br />
        <input type="submit" value="Add" />
      </fieldset>
    </form>
  </body>
</html>]]>
		</value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[245]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Scenario Runner Selector]]></value>
		<value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.physical import HhStartDate


source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))
source.appendChild(MonadDate.getHoursXml(doc))
source.appendChild(HhStartDate.getHhMinutesXml(doc))

supplier_contracts_elem = doc.createElement('supplier-contracts')
source.appendChild(supplier_contracts_elem)
for contract in Hiber.session().createQuery("from Contract contract order by contract.name").list():
    supplier_contracts_elem.appendChild(contract.toXml(doc))

cal = MonadDate.getCalendar()
cal.setTime(Date())
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MINUTE, -30)
to_date = HhStartDate(cal.getTime())
to_date.setLabel('to')
source.appendChild(to_date.toXml(doc))

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1)
from_date = HhStartDate(cal.getTime())
from_date.setLabel('from')
source.appendChild(from_date.toXml(doc))]]></value>
		<value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
      href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; Scenario Runner</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Scenario Runner'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/247/output/">
                    <fieldset>
                        <legend>Run Scenario</legend>
<br/>
                        <xsl:value-of select="'Use '"/>
                        <select name="contract-id">
                            <xsl:for-each select="/source/supplier-contracts/supplier-contract">
                                <option value="{@id}">
                                    <xsl:value-of select="@name"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' instead of '"/>
                        <select name="replaced-contract-id">
                            <xsl:for-each select="/source/supplier-contracts/supplier-contract">
                                <option value="{@id}">
                                    <xsl:value-of select="@name"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <br/><br/><xsl:value-of select="' from '"/>
                        <input name="from-year" value="{/source/hh-start-date[@label='from']/@year}" maxlength="4" size="4"/><xsl:value-of select="'-'"/>
                        <select name="from-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='from']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="'-'"/>
                        <select name="from-day">
                            <xsl:for-each select="/source/days/day">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='from']/@day">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="' '"/>
                        <select name="from-hour">
                            <xsl:for-each select="/source/hours/hour">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='from']/@hour">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="':'"/>
                        <select name="from-minute">
                            <xsl:for-each select="/source/hh-minutes/minute">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='from']/@minute">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' to '"/>
<input name="to-year" value="{/source/hh-start-date[@label='to']/@year}" maxlength="4" size="4"/><xsl:value-of select="'-'"/>
                        <select name="to-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='to']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="'-'"/>
                        <select name="to-day">
                            <xsl:for-each select="/source/days/day">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='to']/@day">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="' '"/>
                        <select name="to-hour">
                            <xsl:for-each select="/source/hours/hour">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='to']/@hour">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="':'"/>
                        <select name="to-minute">
                            <xsl:for-each select="/source/hh-minutes/minute">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='to']/@minute">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <br/><br/>
                        <input type="submit" value="Run"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[247]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Scenario Runner]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date
from net.sf.chellow.physical import MpanCore, HhStartDate, Supply
from net.sf.chellow.billing import SupplierContract, NonCoreContract, Dno
from java.text import DecimalFormat, SimpleDateFormat
from java.lang import System

df = SimpleDateFormat("yyyyMMdd'T'HHmm'Z'")
cal = MonadDate.getCalendar()
df.setCalendar(cal)

inv.getResponse().setContentType("text/csv")
inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="scenario_' + df.format(Date()) + '.csv"')
pw = inv.getResponse().getWriter()
pw.flush()

to_date = inv.getDateTime('to')
from_date = inv.getDateTime('from')
contract_id = inv.getLong('contract-id')
replaced_contract_id = inv.getLong('replaced-contract-id')

if not inv.isValid():
    raise UserException()

to_date = HhStartDate(to_date)
from_date = HhStartDate(from_date)

contract = SupplierContract.getSupplierContract(contract_id)
replaced_contract = SupplierContract.getSupplierContract(replaced_contract_id)

computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])

site_query = Hiber.session().createQuery("select supGen.site from SiteEra supGen where supGen.era = :era and supGen.isPhysical = true")

pw.print('Original Contract,New Contract,MPAN Core,Site Code,Site Name,Account,From,To')
pw.flush()
contract_function = comterp.get('contract_function') 
vb_func = contract_function(contract, 'virtual_bill', pw)
if vb_func is None:
    raise UserException("There isn't a virtual_bill function in the contract " + contract.getName())

titles_func = contract_function(contract, 'virtual_bill_titles', pw)
if titles_func is None:
    raise UserException("There isn't a virtual_bill_titles function in the contract " + contract.getName())

bill_titles = titles_func()
for title in bill_titles:
    pw.print(',' + title)
pw.println('')
pw.flush()

supply_source_class = comterp.get('SupplySource')

forecast_date = comterp.get('forecast_date')()
timing = System.currentTimeMillis()

cal = MonadDate.getCalendar()
cal.setTime(from_date.getDate())
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
month_start = HhStartDate(cal.getTime())

while not month_start.after(to_date):
    cal.setTime(month_start.getDate())
    cal.add(Calendar.MONTH, 1)
    cal.add(Calendar.MINUTE, -30)
    month_finish = HhStartDate(cal.getTime())
    period_from = from_date if from_date.after(month_start) else month_start
    period_to = to_date if to_date.before(month_finish) else month_finish

    eras = Hiber.session().createQuery("from Era era where ((era.importMpan is not null and era.importMpan.supplierContract = :replacedContract) or (era.exportMpan is not null and era.exportMpan.supplierContract = :replacedContract)) and era.startDate.date <= :monthFinish and (era.finishDate is null or era.finishDate.date >= :monthStart)").setEntity('replacedContract', replaced_contract).setTimestamp('monthFinish', period_to.getDate()).setTimestamp('monthStart', period_from.getDate()).scroll()
    while eras.next():
        era = eras.get(0)

        gen_start = era.getStartDate()
        chunk_start = gen_start if period_from.before(gen_start) else period_from
        gen_finish = era.getFinishDate()
        chunk_finish = gen_finish if period_to.after(gen_finish) else period_to
        import_mpan = era.getImportMpan()
        if import_mpan is not None and import_mpan.getSupplierContract().equals(contract):
            mpan = import_mpan
        else:
            mpan = era.getExportMpan()

        data_source = supply_source_class(chunk_start, chunk_finish, forecast_date, mpan, comterp, pw)

        site = site_query.setEntity('era', data_source.supply_era).uniqueResult()
        pw.print(','.join('"' + str(value) + '"' for value in [replaced_contract.getName(), contract.getName(), data_source.mpan_core_str, site.getCode() , site.getName(), data_source.supplier_account, data_source.start_date, data_source.finish_date]))
        pw.flush()
        bill = vb_func(data_source)
        for title in bill_titles:
            if title in bill:
                pw.print(',"' + str(bill[title]) + '"')
                del bill[title]
            else:
                pw.print(',')                
        keys = bill.keys()
        keys.sort()
        for k in keys:
            pw.print(',"' + k + '","' + str(bill[k]) + '"')
        pw.println('')
        pw.flush()
        Hiber.session().clear()
    eras.close()
    cal.setTime(month_start.getDate())
    cal.add(Calendar.MONTH, 1)
    month_start = HhStartDate(cal.getTime())
pw.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[249]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Rate Script Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException', 'NotFoundException', 'form_date'],
        'templater': ['render']})


sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        rate_script_id = inv.getLong('hhdc_rate_script_id')
        rate_script = RateScript.get_hhdc_by_id(sess, rate_script_id)
        render(inv, template, {'rate_script': rate_script})
    else:
        set_read_write(sess)
        rate_script_id = inv.getLong('hhdc_rate_script_id')
        rate_script = RateScript.get_hhdc_by_id(sess, rate_script_id)
        contract = rate_script.contract
        if inv.hasParameter('delete'):
            contract.delete_rate_script(sess, rate_script)
            sess.commit()
            inv.sendSeeOther('/reports/115/output/?hhdc_contract_id='
                + str(contract.id))
        else:
            script = inv.getString('script')
            start_date = form_date(inv, 'start')
            has_finished = inv.getBoolean('has_finished')
            finish_date = form_date(inv, 'finish') if has_finished else None
            contract.update_rate_script(sess, rate_script, start_date, finish_date, script)
            sess.commit()
            inv.sendSeeOther('/reports/173/output/?hhdc_rate_script_id='
                    + str(rate_script.id))
except NotFoundException, e:
    inv.sendNotFound(str(e))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; HHDC Contracts &gt;
      {{rate_script.contract.name}} &gt; Rate Scripts &gt;
      {{rate_script.start_date|hh_format}} &gt; Edit
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{context_path}}/reports/115/output/?hhdc_contract_id={{rate_script.contract.id}}">{{rate_script.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/173/output/?hhdc_rate_script_id={{rate_script.id}}">{{rate_script.start_date|hh_format}}</a>
      &gt; Edit
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    {% if request.getMethod() == 'GET' and
        request.getParameter('delete') %}
      <form method="post" action=".">
        <fieldset>
          <legend>
            Are you sure you want to delete this rate script?
          </legend>
          <input type="hidden" name="hhdc_rate_script_id" value="{{rate_script.id}}">
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p>
        <a href=".">Cancel</a>
      </p>
    {% else %}
      <form action="." method="post">
        <fieldset>
          <legend>Update Rate Script</legend>
          <input type="hidden" name="hhdc_rate_script_id"
              value="{{rate_script.id}}">
          <br>
          <fieldset>
            <legend>Start date</legend>
            {{ input_date('start', rate_script.start_date) }}
          </fieldset>
          <br />
          <fieldset>
            <legend>Finish date</legend>
            <label>
              Ended? {{ input_checkbox('has_finished', rate_script.finish_date != None) }}
            </label>
            {{ input_date('finish', rate_script.finish_date) }}
          </fieldset>
          <br>
          <br>
          Script
          <br>
          {{ input_textarea('script', rate_script.script, 40, 80) }}
          <br />
      <br />
      <input type="submit" value="Update">
          <input type="reset" value="Reset">
        </fieldset>
      </form>
      <br />
      <form action=".">
        <fieldset>
          <legend>Delete this Rate Script</legend>
          <input type="hidden" name="hhdc_rate_script_id"
              value="{{rate_script.id}}">
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[251]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Report Monitor]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import os
import datetime

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})


download_path = Monad.getContext().getRealPath("/downloads")

files = []

for fl in os.listdir(download_path):
  statinfo = os.stat(fl)
  files.append({'name': fl, 'last_modified': datetime.datetime.utcfromtimestamp(statinfo.st_mtime), 'size': statinfo.st_size, 'creation_date': datetime.datetime.utcfromtimestamp(statinfo.st_ctime) })

render(inv, template, {'files': files})]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/" />
    <title>Chellow &gt; Report Downloads</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      Report Downloads
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}


    <p><a href=".">Refresh</a> the page.</p>


    <table><caption>Report Files</caption>
      <thead>
        <tr>
          <th>Name</th>
          <th>Size</th>
          <th>Creation Date</th>
          <th>Last Modified</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        {% for file in files %}
          <tr>
            <td><a href="{{ context_path }}/reports/253/output/?name={{ file.name }}">{{ file.name }}</a></td>
            <td>{{ file.size }} B</td>
            <td>{{ file.creation_date|hh_format }}</td>
            <td>{{ file.last_modified|hh_format }}</td>
            <td>
              <form method="post" action="{{ context_path }}/reports/253/output/">
                <fieldset style="border: none;">
                  <input type="hidden" name="name" value="{{ file.name }}">
                  <input type="submit" name="delete" value="Delete">
                </fieldset>
              </form>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[253]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Report Downloader]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Hiber, UserException, Monad
import os

name = inv.getString("name")
head, name = os.path.split(os.path.normcase(os.path.normpath(name)))

download_path = Monad.getContext().getRealPath("/downloads")

method = inv.getRequest().getMethod()

if method == 'GET':
    fl = open(os.path.join(download_path, name))

    inv.getResponse().setContentType("text/csv")
    inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="' + name + '"')

    pw = inv.getResponse().getWriter()
    for line in fl:
        pw.print(line)

    pw.close()
    fl.close()
elif method == 'POST':
    os.remove(name)
    inv.sendSeeOther("/reports/251/output/")
else:
    raise UserException("Don't recognize the method: " + method)]]></value>
    	<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[255]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Users]]></value>
		<value><![CDATA[from java.lang import System
from net.sf.chellow.monad import Monad, Hiber
from sqlalchemy.orm import joinedload_all
import sys

Monad.getUtils()['imprt'](globals(), {
        'db': [
                'Contract', 'Party', 'User', 'set_read_write', 'session', 
                'UserRole'], 
        'utils': ['UserException'],
        'templater': ['render']})

def users_context(sess, message=None):
    users = sess.query(User).order_by(User.email_address).all()
    parties = sess.query(Party).from_statement("select party.* from party, " +
            "market_role, participant where party.market_role_id = market_role.id " +
            "and party.participant_id = participant.id order by " +
            "market_role.code, participant.code").all()
    fields = {'users': users, 'parties': parties, 'messages': None if message is None else [message]}
    user = inv.getUser()
    if user is not None:
        fields['current_user'] = user
    return fields

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'POST':
        set_read_write(sess)
        
        email_address = inv.getString('email_address')
        password = inv.getString('password')
        user_role_id = inv.getLong('user_role_id')
        role = UserRole.get_by_id(sess, user_role_id)
        try:
            party = None
            if role.code == 'party-viewer':
                party_id = inv.getLong('party_id')
                party = sess.query(Party).get(party_id)
            user = User.insert(sess, email_address, User.digest(password), role,
                    party)
            sess.commit()
            inv.sendSeeOther('/reports/257/output/?user_id=' + str(user.id))
        except UserException, e:
            sess.rollback()
            render(inv, template, users_context(sess, message=str(e)), 400)
    else:
        render(inv, template, users_context(sess))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; Users</title>
    <style type="text/css">
      label {
        width: 10em;
        float: left;
      }
    </style>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/">Chellow</a> &gt; Users
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <ul>
      {% if current_user is defined %}
        <li>
          <a href="{{context_path}}/reports/257/output/?user_id={{current_user.id}}">Me</a>
        </li>
      {% endif %}
    </ul>

    {% if users|length > 0 %}
      <table>
        <thead>
          <tr>
            <th></th>
            <th>Email Address</th>
            <th>Role</th>
            <th>Party</th>
          </tr>
        </thead>
        <tbody>
          {% for user in users %}
            <tr>
              <td><a href="{{ context_path }}/reports/257/output/?user_id={{user.id}}">view</a></td>
              <td>{{ user.email_address }}</td>
              <td>{{ user.user_role.code }}</td>
              <td>{{ user.party.name }}</td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    {% endif %}
    <br />
    <form method="post" action=".">
      <fieldset>
        <legend>Add new user</legend>
        <br />
        <label>Email Address</label>
        <input name="email_address" value="
          {%- if request.getParameter('email_address') -%}
            {{ request.getParameter('email_address') }}
          {%- endif -%}
        ">
        <br />
        <label>Password</label>
        <input type="password" name="password">
        <br />
        <br />
        <fieldset>
          <legend>Role</legend>
          <input type="radio" name="user_role_id" value="1"
            {% if request.getParameter('user_role_id') %}
              {% if request.getParameter('user_role_id') == '1' %}
                checked
              {% endif %}
            {% else %}
              checked
            {% endif %}
          >
          Editor
          <br />
          <input type="radio" name="user_role_id" value="3"
            {% if request.getParameter('user_role_id') == '3' %}
              checked
            {% endif %}
          >
          Viewer
          <br />
          <input type="radio" name="user_role_id" value="2"
            {% if request.getParameter('user_role_id') == '2' %}
              checked
            {% endif %}
          >
          Party Viewer
          <select name="party_id">
            {% for party in parties %}
              <option value="{{ party.id }}"
                {%- if request.getParameter('user_role_id') == party.id -%}
                  selected
                {% endif %}
              >{{ party.name }} {{ party.participant.code }}
                {{ party.market_role.description }}
              </option>
            {% endfor %}
          </select>
        </fieldset>
        <br />
        <br />
        <input type="submit" value="Add" />
        <input type="reset" value="Reset" />
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[257]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[User]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from net.sf.chellow.physical import User as JUser
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': [
                'Contract', 'Party', 'User', 'set_read_write', 'session', 
                'UserRole'], 
        'utils': ['UserException'],
        'templater': ['render']})

def user_fields(sess, user, message=None):
    parties = sess.query(Party).from_statement("""select party.* from party,
        market_role, participant where party.market_role_id = market_role.id
        and party.participant_id = participant.id order by market_role.code, 
        participant.code""").all()
    return {'user': user, 'parties': parties,
            'messages': None if message is None else [message]}


sess = None
try:
    sess = session()

    if inv.getRequest().getMethod() == 'GET':
        user_id = inv.getInteger('user_id')
        user = User.get_by_id(sess, user_id)
        render(inv, template, user_fields(sess, user))
    else:
        set_read_write(sess)
        user_id = inv.getInteger('user_id')
        user = User.get_by_id(sess, user_id)
        if inv.hasParameter('delete'):
            sess.delete(user)
            sess.commit()
            inv.sendSeeOther('/reports/255/output/?user_id=' + str(user.id))
        elif inv.hasParameter('current_password'):
            current_password = inv.getString('current_password')
            new_password = inv.getString('new_password')
            confirm_new_password = inv.getString('confirm_new_password')
            if user.password_digest != JUser.digest(current_password):
                raise UserException("The current password is incorrect.")
            if new_password != confirm_new_password:
                raise UserException("The new passwords aren't the same.")
            if len(new_password) < 6:
                raise UserException("The password must be at least 6 " +
                        "characters long.")
            user.password_digest = JUser.digest(new_password)
            sess.commit()
            inv.sendSeeOther('/reports/255/output/?user_id=' + str(user.id))
        else:
            email_address = inv.getString('email_address')
            role_id = inv.getInteger('user_role_id')
            role = UserRole.get_by_id(sess, role_id)
            party = None
            if role.code == 'party-viewer':
                party_id = inv.getInteger('party_id')
                party = Party.get_by_id(sess, party_id)
            user.update(email_address, role, party)
            sess.commit()
            inv.sendSeeOther('/reports/255/output/?user_id=' + str(user.id))
except UserException, e:
    render(inv, template, user_fields(sess, user, str(e)))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css" href="{{ context_path }}/reports/19/output/" />
    <title>Chellow &gt; Users &gt; {{ user.email_address }}</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/">Chellow</a> &gt; <a href="{{ context_path }}/reports/255/output/">Users</a> &gt;
      {{ user.email_address }}
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    {% if request.getParameter('delete') %}
      <form method="post" action=".">
        <fieldset>
          <input type="hidden" name="user_id" value="{{user.id}}">
          <legend>
            Do you really want to delete the user '{{ user.email_address }}'?
          </legend>
          <input type="submit" name="delete" value="Delete">
          <p><a href=".">Cancel</a></p>
        </fieldset>
      </form>
    {% else %}
      <form method="post" action=".">
        <fieldset>
          <input type="hidden" name="user_id" value="{{ user.id }}"/>
          <legend>Update details</legend>
          <br />
          <label>
            Email Address
            <input name="email_address" size="100" value="
              {%- if request.getParameter('email_address') -%}
                {{ request.getParameter('email_address') }}
              {%- else -%}
                {{ user.email_address }}
              {%- endif -%}
            ">
          </label>
          <br />
          <br />
          <fieldset>
            <legend>Role</legend>
            <label>
              <input type="radio" name="user_role_id" value="1"
                {%- if request.getParameter('user_role_id') -%}
                  {%- if request.getParameter('user_role_id') == '1' %}
                    checked
                  {%- endif -%}
                {%- else -%}
                  {%- if user.user_role.id == 1 %}
                    checked
                  {%- endif -%}
                {%- endif -%}
              >
              Editor
            </label>
            <br />
            <label>
              <input type="radio" name="user_role_id" value="3"
                {% if request.getParameter('user_role_id') %}
                  {% if request.getParameter('user_role_id') == '3' %}
                    checked
                  {% endif %}
                {% else %}
                  {% if user.user_role.id == 3 %}
                    checked
                  {% endif %}
                {% endif %}
              >
              Viewer
            </label>
            <br />
            <label>
              <input type="radio" name="user_role_id" value="2"
                {%- if request.getParameter('user_role_id') -%}
                  {%- if request.getParameter('user_role_id') == '2' -%}
                    checked
                  {%- endif -%}
                {%- else -%}
                  {%- if user.user_role.id == 2 -%}
                    checked
                  {% endif %}
                {% endif %}
              >
              Party Viewer
            </label>
            <select name="party_id">
              {% for party in parties %}
                <option value="{{ party.id }}"
                  {%- if request.getParameter('party_id') -%}
                    {%- if request.getParameter('party_id') == party.id %}
                      selected
                    {%- endif -%}
                  {%- else -%}
                    {%- if user.party.id == party.id %}
                      selected
                    {%- endif -%}
                  {%- endif -%}
                >
                  {{ party.name }} {{ party.participant.code }}
                  {{ party.market_role.description }}
                </option>
              {% endfor %}
            </select>
          </fieldset>
          <br />
          <br />
          <input type="submit" value="Update" />
          <input type="reset" value="Reset" />
        </fieldset>
      </form>
      <br />
      <br />
      <form method="post" action=".">
        <fieldset>
          <input type="hidden" name="user_id" value="{{ user.id }}"/>
          <legend>Change password</legend>
          <br />
          <label>
            Current password
            <input type="password" name="current_password" />
          </label>
          <br />
          <br />
          <label>
            New password
            <input type="password" name="new_password" />
          </label>
          <br />
          <label>
            Confirm new Password
            <input type="password" name="confirm_new_password" />
          </label>
          <br />
          <br />
          <input type="submit" value="Change" />
          <input type="reset" value="Reset" />
        </fieldset>
      </form>
      <br />
      <form action=".">
        <fieldset>
          <input type="hidden" name="user_id" value="{{user.id}}">
          <legend>Delete this user</legend>
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[259]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Non-core Contracts]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    non_core_contracts = sess.query(Contract).from_statement("select contract.* from contract, market_role where contract.market_role_id = market_role.id and market_role.code = 'Z' order by contract.name").all()
    render(inv, template, {'non_core_contracts': non_core_contracts})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; Non-Core Contracts &gt</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      Non-Core Contracts
      [<a href="{{ context_path }}/reports/265/output/">add</a>]
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br />

    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Start Date</th>
          <th>Finish Date</th>
        </tr>
      </thead>
      <tbody>
        {% for contract in non_core_contracts %}
          <tr>
            <td>
              <a href="{{ context_path }}/reports/267/output/?non_core_contract_id={{ contract.id }}">{{ contract.name }}</a>
            </td>
            <td>{{ contract.start_rate_script.start_date|hh_format }}</td>
            <td>{{ contract.finish_rate_script.finish_date|hh_format }}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[261]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[User Roles]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'UserRole', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    user_roles = sess.query(UserRole).order_by(UserRole.code)
    render(inv, template, {'user_roles': user_roles})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; User Roles</title>
  </head>
  <body>
    <p>
      <a href="{{context_path }}/reports/1/output/">Chellow</a> &gt; User Roles
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <thead>
        <th>Code</th>
      </thead>
      <tbody>
        {% for user_role in user_roles %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/263/output/?user_role_id={{ user_role.id }}">{{user_role.code}}</a>
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[263]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[User Role]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'UserRole', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    user_role_id = inv.getLong('user_role_id')
    user_role = UserRole.get_by_id(sess, user_role_id)
    render(inv, template, {'user_role': user_role})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; User Roles &gt; {{user_role.code}}</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/261/output/">User Roles</a> &gt;
      {{user_role.code}}
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tr>
        <th>Code</th>
        <td>{{user_role.code}}</td>
      </tr>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[265]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Non-core Contract Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'Participant', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})

def make_fields():
    initial_date = datetime.utcnow().replace(tzinfo=pytz.utc)
    initial_date = datetime(initial_date.year, initial_date.month, 1)
    return {'initial_date': initial_date}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        render(inv, template, make_fields())
    else:
        set_read_write(sess)
        name = inv.getString('name')
        is_core = inv.getBoolean('is_core')
        start_date = form_date(inv, 'start')
        contract = Contract.insert_non_core(sess, is_core, name, '{}', '{}',
                start_date, None, '{}')
        sess.commit()
        inv.sendSeeOther('/reports/267/output/?non_core_contract_id=' +
            str(contract.id))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; Non-core Contracts</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/259/output/">Non-core Contracts</a>
      &gt; Add
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <form action="{{ context_path }}/reports/265/output/" method="post">
      <fieldset>
        <legend>Add a non-core contract</legend>
        <br />
    <label>
          Is Core?
          <input type="checkbox" name="is_core" value="true"
            {% if request.getParameter('is_core') %}
              checked
            {% endif %}
          >
        </label>
        <br />
        <br />
        <label>
          Name
          <input name="name" value="
            {%- if request.getParameter('name') -%}
              {{ request.getParameter('name') }}
            {%- endif -%}
          ">
        </label>
        <br />
        <br />
        <fieldset>
          <legend>Start Date</legend>
          {{ input_date('start', initial_date) }}
        </fieldset>
        <br />
        <br />
        <input type="submit" value="Add">
        <input type="reset" value="Reset">
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[267]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Non-core Contract]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    contract_id = inv.getLong('non_core_contract_id')
    contract = Contract.get_non_core_by_id(sess, contract_id)
    rate_scripts = sess.query(RateScript).from_statement("select * from rate_script where rate_script.contract_id = :contract_id order by start_date desc").params(contract_id=contract_id).all()
    render(inv, template, {'contract': contract, 'rate_scripts': rate_scripts})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; Non-Core Contracts &gt; {{ contract.name }}</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/259/output/">Non-Core Contracts</a>
      &gt; {{ contract.name }} [<a href="{{ context_path }}/reports/269/output/?non_core_contract_id={{ contract.id }}">edit</a>]
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br />

    <table>
      <tr>
        <th>Is Core?</th>
        <td>{{ contract.is_core }}</td>
      </tr>
    </table>
    {% if contract.name == 'bsuos' %}
      <p>
        <a href="{{ context_path }}/reports/227/output/">Automatic Importer</a>
      </p>
    {% elif contract.name == 'tlms' %}
      <p>
        <a href="{{ context_path }}/reports/223/output/">Automatic Importer</a>
      </p>
    {% elif contract.name == 'system_price_bmreports' %}
      <p>
        <a href="{{ context_path }}/reports/221/output/">Automatic Importer</a>
      </p>
    {% elif contract.name == 'system_price_elexon' %}
      <p>
        <a href="{{ context_path }}/reports/385/output/">Automatic Importer</a>
      </p>
    {% elif contract.name == 'rcrc' %}
      <p>
        <a href="{{ context_path }}/reports/225/output/">Automatic Importer</a>
      </p>
    {% endif %}
    <br>
    <table>
      <caption>
          Rate Scripts
          [<a href="{{ context_path }}/reports/275/output/?non_core_contract_id={{ contract.id }}">add</a>]
      </caption>
      <thead>
        <tr>
          <th></th>
          <th>Start Date</th>
          <th>Finish Date</th>
        </tr>
      </thead>
      <tbody>
        {% for rate_script in rate_scripts %}
          <tr>
            <td>
              <a href="{{ context_path }}/reports/271/output/?rate_script_id={{ rate_script.id }}">View</a>
            </td>
            <td>{{ rate_script.start_date|hh_format }}</td>
            <td>{{ rate_script.finish_date|hh_format }}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>

    <h3>Charge Script</h3>

    <pre>{{ contract.charge_script }}</pre>

    <h3>Properties</h3>

    <pre>{{ contract.properties }}</pre>

  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[269]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Non-core Contract Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        contract_id = inv.getLong('non_core_contract_id')
        contract = Contract.get_non_core_by_id(sess, contract_id)
        render(inv, template, {'contract': contract})
    else:
        set_read_write(sess)
        contract_id = inv.getLong('non_core_contract_id')
        contract = Contract.get_non_core_by_id(sess, contract_id)
        if inv.hasParameter('delete'):
            contract.delete(sess)
            sess.commit()
            inv.sendSeeOther('/reports/259/output/')
        else:
            name = inv.getString('name')
            charge_script = inv.getString('charge_script')
            properties = inv.getString('properties')
            contract.update(sess, contract.is_core, name, contract.party,
                    charge_script, properties)
            sess.commit()
            inv.sendSeeOther('/reports/267/output/?non_core_contract_id='
                + str(contract.id))
except UserException, e:
    render(inv, template, {'contract': contract, 'messages': [str(e)]})
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; Non-core Contracts &gt;    {{ contract.name }}</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/259/output/">Non-core Contracts</a>
      &gt;
      <a href="{{ context_path }}/reports/267/output/?non_core_contract_id={{ contract.id }}">{{ contract.name }}</a>
      &gt; Edit
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    {% if request.getMethod() == 'GET' and request.getParameter('view') == 'confirm-delete' %}
      <form method="post" action="{{ context_path }}/reports/269/output/">
        <fieldset>
          <legend>
            Are you sure you want to delete this contract?
          </legend>
          <input type="hidden" name="non_core_contract_id"
            value="{{ contract.id }}"
          >
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p>
        <a href="{{ context_path }}/reports/269/output/?non_core_contract_id={{ contract.id }}">Cancel</a>
      </p>
    {% else %}
      <p>
        Is Core? {{ contract.is_core }}
      </p>
      <form action="{{ context_path }}/reports/269/output/" method="post">
        <fieldset>
          <legend>Update Contract</legend>
          <input type="hidden" name="non_core_contract_id"
            value="{{ contract.id }}"
          >
          <br>
          <label>
            Name <input name="name" value="
              {%- if request.getParameter('name') -%}
                {{ request.getParameter('name') }}
              {%- else -%}
                {{ contract.name }}
              {%- endif -%}
            ">
          </label>
          <br>
          <br>
          Charge script
          <br>
          <textarea name="charge_script" rows="40" cols="80">
            {%- if request.getParameter('charge_script') -%}
              {{ request.getParameter('charge_script') }}
            {%- else -%}
              {{ contract.charge_script }}
            {%- endif -%}
          </textarea>
          <br>
          <br>
          Properties
          <br>
          {{ input_textarea('properties', contract.properties, 20, 80) }}
          <br />
          <br />
          <input type="submit" value="Update">
        </fieldset>
      </form>
      <br />
      <form action="{{ context_path }}/reports/269/output/">
        <fieldset>
          <legend>Delete this contract</legend>
          <input type="hidden" name="non_core_contract_id"
              value="{{ contract.id }}">
          <input type="hidden" name="view" value="confirm-delete">
          <input type="submit" value="Delete">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[271]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Non-core Contract Rate Script]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException', 'NotFoundException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    rate_script_id = inv.getLong('rate_script_id')
    rate_script = RateScript.get_non_core_by_id(sess, rate_script_id)
    render(inv, template, {'rate_script': rate_script})
except NotFoundException, e:
    inv.sendNotFound(str(e))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/" />
    <title>
      Chellow &gt; Non-core Contracts &gt; {{ rate_script.contract.name }}
      &gt; {{ rate_script.start_date|hh_format }}
    </title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/259/output/">Non-core Contracts</a>
      &gt;
      <a href="{{ context_path }}/reports/267/output/?non_core_contract_id={{ rate_script.contract.id }}">{{ rate_script.contract.name }}</a> &gt;
      {{ rate_script.start_date|hh_format }} [<a
      href="{{ context_path }}/reports/273/output/?rate_script_id={{ rate_script.id }}">edit</a>]
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <tr>
        <th>Start Date</th>
        <td>{{ rate_script.start_date|hh_format }}</td>
      </tr>
      <tr>
        <th>Finish Date</th>
        <td>{{ rate_script.finish_date|hh_format }}</td>
      </tr>
    </table>

    <h2>Script</h2>

    <pre>{{ rate_script.script }}</pre>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[273]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Non-core Contract Rate Script Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException', 'NotFoundException', 'form_date'],
        'templater': ['render']})


sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        rate_script_id = inv.getLong('rate_script_id')
        rate_script = RateScript.get_non_core_by_id(sess, rate_script_id)
        render(inv, template, {'rate_script': rate_script})
    else:
        set_read_write(sess)
        rate_script_id = inv.getLong('rate_script_id')
        rate_script = RateScript.get_non_core_by_id(sess, rate_script_id)
        contract = rate_script.contract
        if inv.hasParameter('delete'):
            contract.delete_rate_script(sess, rate_script)
            sess.commit()
            inv.sendSeeOther('/reports/267/output/?non_core_contract_id='
                + str(contract.id))
        else:
            script = inv.getString('script')
            start_date = form_date(inv, 'start')
            if inv.hasParameter('has_finished'):
                finish_date = form_date(inv, 'finish')
            else:
                finish_date = None
            contract.update_rate_script(sess, rate_script, start_date, finish_date, script)
            sess.commit()
            inv.sendSeeOther('/reports/271/output/?rate_script_id='
                    + str(rate_script.id))
except NotFoundException, e:
    inv.sendNotFound(str(e))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>
      Chellow &gt; Non-core Contracts &gt;
      {{ rate_script.contract.name }} &gt; Rate Scripts &gt;
      {{ rate_script.start_date|hh_format }} &gt; Edit
    </title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/259/output/">Non-core Contracts</a>
      &gt;
      <a href="{{ context_path }}/reports/267/output/?non_core_contract_id={{ rate_script.contract.id }}">{{ rate_script.contract.name }}</a> &gt;
      <a href="{{ context_path }}/reports/271/output/?rate_script_id={{ rate_script.id }}">{{ rate_script.start_date|hh_format }}</a> &gt; Edit
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    {% if request.getMethod() == 'GET' and
        request.getParameter('delete') %}
      <form method="post" action="{{ context_path }}/reports/273/output/">
        <fieldset>
          <legend>
            Are you sure you want to delete this rate script?
          </legend>
          <input type="hidden" name="rate_script_id"
              value="{{ rate_script.id }}">
          <input type="submit" name="delete" value="Delete" />
        </fieldset>
      </form>
      <p>
        <a href="{{ context_path }}/reports/273/output/?rate_script_id={{ rate_script_id }}">Cancel</a>
      </p>
    {% else %}
      <form action="{{ context_path }}/reports/273/output/" method="post">
        <fieldset>
          <legend>Update Rate Script</legend>
          <input type="hidden" name="rate_script_id"
              value="{{ rate_script.id }}">
          <br />
          <fieldset>
            <legend>Start date</legend>
            {{ input_date('start', rate_script.start_date) }}
          </fieldset>
          <br />
          <fieldset>
            <legend>Finish date</legend>
            <label>
              Ended? {{ input_checkbox('has_finished', rate_script.finish_date != None) }}
            </label>
            {{ input_date('finish', rate_script.finish_date) }}
          </fieldset>
          <br>
          <br>
          Script
          <br>
          {{ input_textarea('script', rate_script.script, 40, 80) }}
          <br />
      <br />
      <input type="submit" value="Update">
          <input type="reset" value="Reset">
        </fieldset>
      </form>
      <br />
      <form action="{{ context_path }}/reports/273/output/">
        <fieldset>
          <legend>Delete this Rate Script</legend>
          <input type="hidden" name="rate_script_id"
              value="{{ rate_script.id }}">
          <input type="submit" name="delete" value="Delete" />
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[275]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Non-Core Contract Rate Script Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})

def page_fields(contract, message=None):
    now = datetime.now(pytz.utc)
    initial_date = datetime(now.year, now.month, 1, tzinfo=pytz.utc)
    messages = None if message is None else [message]
    return {'contract': contract, 'initial_date': initial_date,
        'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        contract_id = inv.getLong('non_core_contract_id')
        contract = Contract.get_non_core_by_id(sess, contract_id)
        render(inv, template, page_fields(contract))
    else:
        set_read_write(sess)
        contract_id = inv.getLong('non_core_contract_id')
        contract = Contract.get_non_core_by_id(sess, contract_id)
        start_date = form_date(inv, 'start')
        rate_script = contract.insert_rate_script(sess, start_date, '')
        sess.commit()
        inv.sendSeeOther('/reports/271/output/?rate_script_id='
                + str(rate_script.id))
except UserException, e:
        render(inv, template, page_fields(contract, str(e)))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>
      Chellow &gt; Non-Core Contracts &gt; {{ contract.name }}
      &gt; Add Rate Script
    </title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/259/output/">Non-Core Contracts</a>
      &gt;
      <a href="{{ context_path }}/reports/267/output/?non_core_contract_id={{ contract.id }}">{{ contract.name }}</a> &gt; Add Rate Scripts
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br />
    <form action="{{ context_path }}/reports/275/output/" method="post">
      <fieldset>
        <legend>Add a rate script</legend>
        <input type="hidden" name="non_core_contract_id"
            value="{{ contract.id }}"
        >
        <br />
        <fieldset>
          <legend>Start Date</legend>
          {{ input_date('start', initial_date) }}
        </fieldset>
        <br />
        <br />
        <input type="submit" value="Add" />
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[277]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Contract Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'Participant', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})

def make_fields(sess, message=None):
    initial_date = datetime.utcnow().replace(tzinfo=pytz.utc)
    initial_date = datetime(initial_date.year, initial_date.month, 1)
    parties = sess.query(Party).from_statement("select party.* from party, market_role, participant where party.market_role_id = market_role.id and party.participant_id = participant.id and market_role.code = 'C' order by participant.code").all()
    return {'initial_date': initial_date, 'parties': parties, 'messages': None if message is None else [str(message)]}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        render(inv, template, make_fields(sess))
    else:
        set_read_write(sess)
        participant_id = inv.getLong('participant_id')
        name = inv.getString('name')
        start_date = form_date(inv, 'start')
        participant = Participant.get_by_id(sess, participant_id)
        contract = Contract.insert_hhdc(sess, name, participant, '{}', '{}',
            start_date, None, '{}')
        sess.commit()
        inv.sendSeeOther('/reports/115/output/?hhdc_contract_id=' +
            str(contract.id))
except UserException, e:
    render(inv, template, make_fields(sess, e))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; HHDC Contracts &gt; Add</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/113/output/">HHDC Contracts</a>
      &gt; Add
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <form action="{{ context_path }}/reports/277/output/" method="post">
      <fieldset>
        <legend>Add a HHDC contract</legend>
        <br />
        <label>
          Participant
          <select name="participant_id">
            {% for party in parties %}
              {{ input_option('participant_id', party.participant.id,
                  party.participant.code + " : " + party.name) }}
            {% endfor %}
          </select>
        </label>
        <br />
        <br />
        <label>
          Name
          <input name="name" value="
            {%- if request.getParameter('name') -%}
              {{ request.getParameter('name') }}
            {%- endif -%}
          ">
        </label>
        <br />
        <br />
        <fieldset>
          <legend>Start Date</legend>
          {{ input_date('start', initial_date) }}
        </fieldset>
        <br />
        <br />
        <input type="submit" value="Add">
        <input type="reset" value="Reset">
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[279]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Contract Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from sqlalchemy.sql.expression import text
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'Participant', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})


def make_fields(sess, contract, message=None):
    parties = sess.query(Party).from_statement("""select party.* from party, market_role, participant where party.market_role_id = market_role.id and party.participant_id = participant.id and market_role.code = 'C' order by participant.code""").all()
    initial_date = datetime.now(pytz.utc)
    if message is None:
        messages = []
    else:
        messages = [str(message)]
    return {'contract': contract, 'parties': parties, 'initial_date': datetime(initial_date.year, initial_date.month, initial_date.day), 'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        contract_id = inv.getLong('hhdc_contract_id')
        contract = Contract.get_hhdc_by_id(sess, contract_id)
        render(inv, template, make_fields(sess, contract))
    else:
        set_read_write(sess)
        contract_id = inv.getLong('hhdc_contract_id')
        contract = Contract.get_hhdc_by_id(sess, contract_id)
        if inv.hasParameter("update_state"):
            state = inv.getString("state")
            contract.state = state
            sess.commit()
            inv.sendSeeOther("/reports/115/output/?hhdc_contract_id=" +
                    str(contract.id))
        elif inv.hasParameter("ignore_snags"):
            ignore_date = form_date(inv, "ignore")
            sess.execute(text("""update snag set is_ignored = true from channel, era where snag.channel_id = channel.id and channel.era_id = era.id and era.hhdc_contract_id = :contract_id and snag.finish_date < :ignore_date"""), params=dict(contract_id=contract.id, ignore_date=ignore_date))
            sess.commit()
            inv.sendSeeOther("/reports/115/output/?hhdc_contract_id=" +
                    str(contract.id))
        elif inv.hasParameter("delete"):
            contract.delete(sess)
            sess.commit()
            inv.sendSeeOther("/reports/113/output/");
        else:
            party_id = inv.getLong("party_id")
            name = inv.getString("name")
            charge_script = inv.getString("charge_script")
            properties = inv.getString("properties")
            party = Party.get_by_id(sess, party_id)
            contract.update(sess, False, name, party, charge_script,
                    properties)
            sess.commit()
            inv.sendSeeOther("/reports/115/output/?hhdc_contract_id=" +
                    str(contract.id))
except UserException, e:
    render(inv, template, make_fields(sess, contract, e))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; HHDC Contracts &gt; {{contract.name}}</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{ context_path }}/reports/115/output/?hhdc_contract_id={{ contract.id }}">{{ contract.name }}</a>
      &gt; Edit
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    {% if request.getMethod() == 'GET' and request.getParameter('view') == 'confirm-delete' %}
      <form method="post" action="{{ context_path }}/reports/279/output/">
        <fieldset>
          <legend>
            Are you sure you want to delete this contract?
          </legend>
          <input type="hidden" name="hhdc_contract_id"
            value="{{ contract.id }}"
          >
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p>
        <a href="{{ context_path }}/reports/279/output/?hhdc_contract_id={{ contract.id }}">Cancel</a>
      </p>
    {% else %}
      <form action="{{ context_path }}/reports/279/output/" method="post">
        <fieldset>
          <legend>Update Contract</legend>
          <input type="hidden" name="hhdc_contract_id"
            value="{{ contract.id }}"
          >
          <br>
          <label>Party</label>
          <select name="party_id">
            {% for party in parties %}
              {{ input_option('party_id', party.id, party.participant.code + ' : ' + party.name, contract.party.id) }}
            {% endfor %}
          </select>
          <br>
          <label>
            Name <input name="name" value="
              {%- if request.getParameter('name') -%}
                {{ request.getParameter('name') }}
              {%- else -%}
                {{ contract.name }}
              {%- endif -%}
            ">
          </label>
          <br>
          <br>
          Charge script
          <br>
          <textarea name="charge_script" rows="40" cols="80">
            {%- if request.getParameter('charge_script') -%}
              {{ request.getParameter('charge_script') }}
            {%- else -%}
              {{ contract.charge_script }}
            {%- endif -%}
          </textarea>
          <br />
          <br>
          Properties
          <br>
          <textarea name="properties" rows="40" cols="80">
            {%- if request.getParameter('properties') -%}
              {{ request.getParameter('properties') }}
            {%- else -%}
              {{ contract.properties }}
            {%- endif -%}
          </textarea>
          <br />
          <br />
          <h4>Example</h4>
          <code><pre>
{
    'has_importer': True,
    'file_type': '.df2',
    'hostname': 'example.com',
    'username': 'username',
    'password': 'password',
    'directories': ['downloads1', 'downloads2']}
          </pre></code>
          <input type="submit" value="Update">
        </fieldset>
      </form>
      <br />
      <br />
      <form action="{{ context_path }}/reports/279/output/" method="post">
        <fieldset>
          <legend>Update State</legend>
          <input type="hidden" name="hhdc_contract_id"
                  value="{{ contract.id }}">
          <label>State</label>
          <br>
          {{ input_textarea('state', contract.state, 40, 80) }}
          <br>
          <input type="submit" name="update_state" value="Update">
        </fieldset>
      </form>
      <br>
 
      <form action="{{ context_path }}/reports/279/output/">
        <fieldset>
          <legend>Delete this contract</legend>
          <input type="hidden" name="hhdc_contract_id" value="{{contract.id}}">
          <input type="hidden" name="view" value="confirm-delete">
          <input type="submit" value="Delete">
        </fieldset>
      </form>
      <br>
      <form method="post" action="{{ context_path }}/reports/279/output/">
        <fieldset>
          <legend>Ignore all snags before</legend>
          <input type="hidden" name="hhdc_contract_id" value="{{contract.id}}">
          <br>
          {{ input_date('ignore', initial_date) }}
          <input type="submit" name="ignore_snags" value="Ignore">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[281]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Batch Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Batch', 'set_read_write'],
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH'],
        'templater': ['render']})


def make_fields(sess, contract, message=None):
        batches = sess.query(Batch).filter(Batch.contract == contract).order_by(Batch.reference.desc())
        messages = None if message is None else [str(e)]
        return {'contract': contract, 'batches': batches, 'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        contract_id = inv.getLong('hhdc_contract_id')
        contract = Contract.get_hhdc_by_id(sess, contract_id)
        render(inv, template, make_fields(sess, contract))
    else:
        set_read_write(sess)
        contract_id = inv.getLong('hhdc_contract_id')
        contract = Contract.get_hhdc_by_id(sess, contract_id)
        reference = inv.getString("reference")
        description = inv.getString("description")

        batch = contract.insert_batch(sess, reference, description)
        sess.commit()
        inv.sendSeeOther("/reports/203/output/?hhdc_batch_id=" + str(batch.id))

except UserException, e:
    render(inv, template, make_fields(sess, contract, e))
finally:
    if sess is not None:
        sess.close()
]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; HHDC Contracts &gt; {{ contract.name }} &gt; Batches &gt; Add
    </title>
    <style>
      label {
        width: 6em;
        float: left;
      }
    </style>
  </head>
  <body>
    <p>
      <a href="{{context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{ context_path }}/reports/115/output/?hhdc_contract_id={{ contract.id }}">{{ contract.name }}</a> &gt;
      <a href="{{ context_path }}/reports/93/output/?hhdc_contract_id={{ contract.id }}">Batches</a> &gt;
      Add
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <form action="{{ context_path }}/reports/281/output/" method="post">
      <fieldset>
        <legend>Add a batch</legend>
        <input type="hidden" name="hhdc_contract_id" value="{{ contract.id }}">
        <br>
        <label>Reference</label> {{input_text('reference', '')}}
        <br>
        <label>Description</label> {{input_text('description', '')}}
        <br>
        <br>
        <input type="submit" value="Add">
      </fieldset>
    </form>

    <table>
      <caption>Existing Batches</caption>
      <thead>
        <tr>
          <th>Reference</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {% for batch in batches %}
          <tr>
            <td>{{batch.reference}}</td>
            <td>{{batch.description}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[283]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Batch Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from sqlalchemy.sql.expression import text
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Batch', 'Participant', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})


def make_fields(sess, batch, message=None):
    messages = [] if message is None else [str(message)]
    return {'batch': batch, 'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        batch_id = inv.getLong('hhdc_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        render(inv, template, make_fields(sess, batch))
    else:
        set_read_write(sess)
        batch_id = inv.getLong('hhdc_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        if inv.hasParameter('update'):
            reference = inv.getString('reference')
            description = inv.getString('description')
            batch.update(sess, reference, description)
            sess.commit()
            inv.sendSeeOther("/reports/203/output/?hhdc_batch_id=" +
                    str(batch.id))
        elif inv.hasParameter("delete"):
            contract = batch.contract
            batch.delete(sess)
            sess.commit()
            inv.sendSeeOther("/reports/93/output/?hhdc_contract_id=" + str(contract.id))
except UserException, e:
    render(inv, template, make_fields(sess, batch, e))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>
      Chellow &gt; HHDC Contracts &gt; {{batch.contract.name}} &gt;
      Batches &gt; {{batch.reference}} &gt; Edit
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{context_path}}/reports/115/output/?hhdc_contract_id={{batch.contract.id}}">{{batch.contract.name}}</a>
      &gt;
      <a href="{{context_path}}/reports/93/output/?hhdc_contract_id={{batch.contract.id}}">Batches</a>
      &gt;
      <a href="{{context_path}}/reports/203/output/?hhdc_batch_id={{batch.id}}">{{batch.reference}}</a>
      &gt; Edit
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br>
    {% if request.getMethod() == 'GET' and request.getParameter('confirm_delete') %}
      <form method="post" action=".">
        <fieldset>
          <legend>Delete</legend>
          <input type="hidden" name="hhdc_batch_id" value="{{batch.id}}">
          <p>Are you sure you want to delete this batch and all its bills?</p>
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p><a href=".">Cancel</a></p>
    {% else %}
      <form action="." method="post">
        <fieldset>
          <legend>Update batch</legend>
          <input type="hidden" name="hhdc_batch_id" value="{{batch.id}}">
          <br>
          <label>
            Reference {{input_text('reference', batch.reference)}}
          </label>
          <br>
          <label>
            Description {{input_text('description', batch.description)}}
          </label>
          <br>
          <br>
          <input type="submit" name="update" value="Update">
        </fieldset>
      </form>
      <br>
      <form action=".">
        <fieldset>
          <legend>Delete this batch</legend>
          <input type="hidden" name="hhdc_batch_id" value="{{batch.id}}">
   <input type="submit" name="confirm_delete" value="Delete">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[285]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[DNO Contract Rate Script Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        rate_script_id = inv.getLong('dno_rate_script_id')
        rate_script = RateScript.get_dno_by_id(sess, rate_script_id)
        render(inv, template, {'rate_script': rate_script})
    else:
        set_read_write(sess)
        rate_script_id = inv.getLong('dno_rate_script_id')
        rate_script = RateScript.get_dno_by_id(sess, rate_script_id)
        contract = rate_script.contract
        if inv.hasParameter('delete'):
            contract.delete_rate_script(sess, rate_script)
            sess.commit()
            inv.sendSeeOther('/reports/67/output/?dno_contract_id='
                + str(contract.id))
        else:
            try:
                script = inv.getString('script')
                start_date = form_date(inv, 'start')
                if inv.hasParameter('has_finished'):
                    finish_date = form_date(inv, 'finish')
                else:
                    finish_date = None
                contract.update_rate_script(sess, rate_script, start_date, finish_date, script)
                sess.commit()
                inv.sendSeeOther('/reports/69/output/?dno_rate_script_id='
                        + str(rate_script.id))
            except UserException, e:
                render(inv, template, {'rate_script': rate_script, 'messages': [str(e)]}, 400)          
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>
      Chellow &gt; DNO Contracts &gt;
      {{ rate_script.contract.name }} &gt;
      {{ rate_script.start_date|hh_format }} &gt; Edit
    </title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/137/output/">DNO Contracts</a> &gt;
      <a href="{{ context_path }}/reports/67/output/?dno_contract_id={{ rate_script.contract.id }}">{{ rate_script.contract.name }}</a> &gt;
      <a href="{{ context_path }}/reports/69/output/?dno_rate_script_id={{ rate_script.id }}">{{ rate_script.start_date|hh_format }}</a> &gt; Edit
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    {% if request.getMethod() == 'GET' and
        request.getParameter('delete') %}
      <form method="post" action="{{ context_path }}/reports/285/output/">
        <fieldset>
          <legend>
            Are you sure you want to delete this rate script?
          </legend>
          <input type="hidden" name="dno_rate_script_id"
              value="{{ rate_script.id }}">
          <input type="submit" name="delete" value="Delete" />
        </fieldset>
      </form>
      <p>
        <a href="{{ context_path }}/reports/285/output/?rate_script_id={{ rate_script_id }}">Cancel</a>
      </p>
    {% else %}
      <form action="{{ context_path }}/reports/285/output/" method="post">
        <fieldset>
          <legend>Update Rate Script</legend>
          <input type="hidden" name="dno_rate_script_id"
              value="{{rate_script.id}}">
          <br>
          <fieldset>
            <legend>Start date</legend>
            {{ input_date('start', rate_script.start_date) }}
          </fieldset>
          <br />
          <fieldset>
            <legend>Finish date</legend>
            <label>
              Ended? {{ input_checkbox('has_finished', rate_script.finish_date != None) }}
            </label>
            {{ input_date('finish', rate_script.finish_date) }}
          </fieldset>
          <br>
          <br>
          Script
          <br>
          {{ input_textarea('script', rate_script.script, 40, 80) }}
          <br />
      <br />
      <input type="submit" value="Update">
          <input type="reset" value="Reset">
        </fieldset>
      </form>
      <br />
      <form action="{{ context_path }}/reports/285/output/">
        <fieldset>
          <legend>Delete this Rate Script</legend>
          <input type="hidden" name="dno_rate_script_id"
              value="{{ rate_script.id }}">
          <input type="submit" name="delete" value="Delete" />
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[287]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Batch Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Batch', 'set_read_write'],
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH'],
        'templater': ['render']})


def make_fields(sess, contract, message=None):
    batches = sess.query(Batch).filter(Batch.contract == contract).order_by(Batch.reference.desc())
    messages = [] if message is None else [str(e)]
    return {'contract': contract, 'batches': batches, 'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        contract_id = inv.getLong('supplier_contract_id')
        contract = Contract.get_supplier_by_id(sess, contract_id)
        render(inv, template, make_fields(sess, contract))
    else:
        set_read_write(sess)
        contract_id = inv.getLong('supplier_contract_id')
        contract = Contract.get_supplier_by_id(sess, contract_id)
        reference = inv.getString("reference")
        description = inv.getString("description")

        batch = contract.insert_batch(sess, reference, description)
        sess.commit()
        inv.sendSeeOther("/reports/91/output/?supplier_batch_id=" + str(batch.id))

except UserException, e:
    sess.rollback()
    render(inv, template, make_fields(sess, contract, e), 400)
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>
      Chellow &gt; Supplier Contracts &gt; {{contract.name}} &gt; Batches &gt;
      Add
    </title>
    <style>
      label {
        width: 6em;
        float: left;
      }
    </style>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/75/output/">Supplier Contracts</a> &gt;
      <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{contract.id}}">{{contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/89/output/?supplier_contract_id={{contract.id}}">Batches</a> &gt;
      Add
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <form action="{{context_path}}/reports/287/output/" method="post">
      <fieldset>
        <legend>Add a batch</legend>
        <input type="hidden" name="supplier_contract_id" value="{{contract.id}}">
        <br>
        <label>Reference</label> {{ input_text('reference', '') }}
        <br>
        <label>Description</label> {{ input_text('description', '') }}
        <br>
        <br>
        <input type="submit" value="Add">
      </fieldset>
    </form>
    <br>
    <table>
      <caption>Existing Batches</caption>
      <thead>
        <tr>
          <th>Reference</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {% for batch in batches %}
          <tr>
            <td>{{batch.reference}}</td>
            <td>{{batch.description}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]>
		</value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[289]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Batch Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from sqlalchemy.sql.expression import text
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Batch', 'Participant', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})


def make_fields(sess, batch, message=None):
    messages = [] if message is None else [str(message)]
    return {'batch': batch, 'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        batch_id = inv.getLong('supplier_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        render(inv, template, make_fields(sess, batch))
    else:
        set_read_write(sess)
        batch_id = inv.getLong('supplier_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        if inv.hasParameter('update'):
            reference = inv.getString('reference')
            description = inv.getString('description')
            batch.update(sess, reference, description)
            sess.commit()
            inv.sendSeeOther("/reports/91/output/?supplier_batch_id=" +
                    str(batch.id))
        elif inv.hasParameter("delete"):
            contract_id = batch.contract.id
            batch.delete(sess)
            sess.commit()
            inv.sendSeeOther("/reports/89/output/?supplier_contract_id=" + str(contract_id))
except UserException, e:
    render(inv, template, make_fields(sess, batch, e), 400)
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>
      Chellow &gt; Supplier Contracts &gt; {{batch.contract.name}} &gt;
      Batches &gt; {{batch.reference}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/75/output/">Supplier Contracts</a> &gt;
      <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{batch.contract.id}}">{{batch.contract.name}}</a>
      &gt;
      <a href="{{context_path}}/reports/89/output/?supplier_contract_id={{batch.contract.id}}">Batches</a>
      &gt;
      <a href="{{context_path}}/reports/91/output/?supplier_batch_id={{batch.id}}">{{batch.reference}}</a> &gt; Edit
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br>
    {% if request.getMethod() == 'GET' and request.getParameter('confirm_delete') %}
      <form method="post" action=".">
        <fieldset>
          <legend>Delete</legend>
          <input type="hidden" name="supplier_batch_id" value="{{batch.id}}">
          <p>Are you sure you want to delete this batch and all its bills?</p>
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p><a href=".">Cancel</a></p>
    {% else %}
      <form action="." method="post">
        <fieldset>
          <legend>Update batch</legend>
          <input type="hidden" name="supplier_batch_id" value="{{batch.id}}">
          <br>
          <label>
            Reference {{input_text('reference', batch.reference)}}
          </label>
          <br>
          <label>
            Description {{input_text('description', batch.description)}}
          </label>
          <br>
          <br>
          <input type="submit" name="update" value="Update">
        </fieldset>
      </form>
      <br>
      <form action=".">
        <fieldset>
          <legend>Delete this batch</legend>
          <input type="hidden" name="supplier_batch_id" value="{{batch.id}}">
   <input type="submit" name="confirm_delete" value="Delete">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[291]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supply CSV Virtual Bills]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import datetime
import pytz
from dateutil.relativedelta import relativedelta
from sqlalchemy import or_
from java.lang import System

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater', 'computer')

Supply, Era, Site, SiteEra = db.Supply, db.Era, db.Site, db.SiteEra
HH, hh_format = utils.HH, utils.hh_format

caches = {}

supply_id = inv.getLong('supply_id')

sess = None
try:
    sess = db.session()
    supply = Supply.get_by_id(sess, supply_id)

    start_date = utils.form_date(inv, 'start')
    finish_date = utils.form_date(inv, 'finish')

    file_name = 'supply_virtual_bills_' + str(supply.id)

    inv.getResponse().setContentType("text/csv")
    inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="' + file_name + '.csv"')
    pw = inv.getResponse().getWriter()

    forecast_date = computer.forecast_date()

    prev_titles = None

    month_start = datetime.datetime(start_date.year, start_date.month, 1, tzinfo=pytz.utc)

    output = {}
    while not month_start > finish_date:
        month_finish = month_start + relativedelta(months=1) - HH
        period_start = month_start if month_start > start_date else start_date
        period_finish = finish_date if month_finish > finish_date else month_finish
        for era in sess.query(Era).filter(Era.supply_id==supply.id, Era.start_date<period_finish, or_(Era.finish_date==None, Era.finish_date>period_start)).order_by(Era.start_date):

            chunk_start = era.start_date if era.start_date > period_start else period_start

            chunk_finish = period_finish if utils.hh_before(period_finish, era.finish_date) else era.finish_date

            site = sess.query(Site).join(SiteEra).filter(SiteEra.era_id==era.id, SiteEra.is_physical==True).one()

            ds = computer.SupplySource(sess, chunk_start, chunk_finish, forecast_date, era, True, pw, caches)

            titles = ['MPAN Core', 'Site Code', 'Site Name', 'Account', 'From', 'To', '']

            output_line = [ds.mpan_core, site.code , site.name, ds.supplier_account, hh_format(ds.start_date), hh_format(ds.finish_date), '']
            
            mop_titles = ds.contract_func(era.mop_contract, 'virtual_bill_titles')()
            titles.extend(['mop-' + t for t in mop_titles])

            ds.contract_func(era.mop_contract, 'virtual_bill')(ds)
            bill = ds.mop_bill
            for title in mop_titles:
                output_line.append(bill.get(title, ''))
                if title in bill:
                    del bill[title]
            for k in sorted(bill.keys()):
                output_line.extend([k, bill[k]]) 

            output_line.append('')
            dc_titles = ds.contract_func(era.hhdc_contract, 'virtual_bill_titles')()
            titles.append('')
            titles.extend(['dc-' + t for t in dc_titles])

            ds.contract_func(era.hhdc_contract, 'virtual_bill')(ds)
            bill = ds.dc_bill
            for title in dc_titles:
                output_line.append(bill.get(title, ''))
                if title in bill:
                    del bill[title]
            for k in sorted(bill.keys()):
                output_line.extend([k, bill[k]])

            if era.imp_supplier_contract is not None:
                output_line.append('')
                imp_supplier_titles = ds.contract_func(era.imp_supplier_contract, 'virtual_bill_titles')()
                titles.append('')
                titles.extend(['imp-supplier-' + t for t in imp_supplier_titles])

                ds.contract_func(era.imp_supplier_contract, 'virtual_bill')(ds)
                bill = ds.supplier_bill
                for title in imp_supplier_titles:
                    output_line.append(bill.get(title, ''))
                    if title in bill:
                        del bill[title]

                for k in sorted(bill.keys()):
                    output_line.extend([k, bill[k]]) 

            if era.exp_supplier_contract is not None:
                ds = computer.SupplySource(sess, chunk_start, chunk_finish, forecast_date, era, False, pw, caches)

                output_line.append('')
                exp_supplier_titles = ds.contract_func(era.exp_supplier_contract, 'virtual_bill_titles')()
                titles.append('')
                titles.extend(['exp-supplier-' + t for t in exp_supplier_titles])

                ds.contract_func(era.exp_supplier_contract, 'virtual_bill')(ds)
                bill = ds.supplier_bill
                for title in exp_supplier_titles:
                    output_line.append(bill.get(title, ''))
                    if title in bill:
                        del bill[title]

                for k in sorted(bill.keys()):
                    output_line.extend([k, bill[k]]) 

            if titles != prev_titles:
                prev_titles != titles
                pw.println(','.join('"' + str(v) + '"' for v in titles)) 
            pw.println(','.join('"' + str(v) + '"' for v in output_line))
            pw.flush()

        month_start += relativedelta(months=1)

finally:
    if sess is not None:
        sess.close()

pw.close()]]>
		</value>
		<value><![CDATA[]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[293]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[General Imports]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import System
from java.io import InputStreamReader
import tempfile
import StringIO

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Batch', 'set_read_write'],
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH'],
        'templater': ['render'],
        'general_import': ['start_general_process', 'get_general_process_ids', 'get_general_process']})


def make_fields(sess, message=None):
    messages = [] if message is None else [str(e)]
    return {'messages': messages, 'process_ids': sorted(get_general_process_ids(), reverse=True)}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        render(inv, template, make_fields(sess))
    else:
        file_item = inv.getFileItem("import_file")
        file_name = file_item.getName()
        if not file_name.endswith('.csv'):
            raise UserException("The file name should have the extension .csv.")
        stream = InputStreamReader(file_item.getInputStream(), 'utf-8')
        f = StringIO.StringIO()
        bt = stream.read()
        while bt != -1:
            f.write(chr(bt))
            bt = stream.read()
        id = start_general_process(f)
        inv.sendSeeOther("/reports/295/output/?process_id=" + str(id))
except UserException, e:
    render(inv, template, make_fields(sess, e))
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>
      Chellow &gt; General Import
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      General Import
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    
    <form enctype="multipart/form-data" method="post" action=".">
      <fieldset>
        <legend>Import CSV File</legend>
        <input type="file" name="import_file" size="45"
          value="{{request.getParameter('import_file')}}">
        <input type="submit" value="Import">
      </fieldset>
    </form>
    {% if process_ids %}
      <ul>
        {% for id in process_ids %}
          <li>
            <a href="{{context_path}}/reports/295/output/?process_id={{id}}">{{id}}</a>
          </li>
        {% endfor %}
      </ul>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[295]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[General Import]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import System
import tempfile

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Batch', 'set_read_write'],
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH'],
        'templater': ['render'],
        'general_import': ['start_general_process', 'get_general_process_ids', 'get_general_process']})


sess = None
try:
    sess = session()
    proc_id = inv.getLong('process_id')
    proc = get_general_process(proc_id)
    fields = proc.get_fields()
    fields['is_alive'] = proc.isAlive()
    fields['process_id'] = proc_id
    render(inv, template, fields)
except UserException, e:
    render(inv, template, {'messages': [str(e)], 'process_id': proc_id})
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; General Import &gt; {{process_id}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/293/output/">General Import</a> &gt;
      {{process_id}}
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    

    {% if line_number %}
      <p>Line number {{line_number}}.</p>
    {% endif %}

    {% if is_alive %}
        <p>Still running. Refresh the page to see latest progress.</p>
    {% else %}
        {% if error_message %}
            <p>The import has failed with the message:</p>
            <pre>{{error_message}}</pre>
        {% else %}
            <p>The file has been imported successfully.</p>
        {% endif %}
    {% endif %}

    {% if csv_line %}
      <table>
        <caption>Failed Line</caption>
        <tbody>
          <tr>
            {% for title, value in csv_line %}
              <th>{{title}}</th>
            {% endfor %}
          </tr>
          <tr>
            {% for title, value in csv_line %}
              <td>{{value}}</td>
            {% endfor %}
          </tr>
        </tbody>
      </table>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[297]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Site Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Site', 'set_read_write'],
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH'],
        'templater': ['render']})


def make_fields(sess, message=None):
        messages = [] if message is None else [str(e)]
        return {'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        render(inv, template, make_fields(sess))
    else:
        set_read_write(sess)
        code = inv.getString("code")
        name = inv.getString("name")
        site = Site.insert(sess, code, name)
        sess.commit()
        inv.sendSeeOther("/reports/5/output/?site_id=" + str(site.id))
except UserException, e:
    render(inv, template, make_fields(sess, e))
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Sites &gt; Add
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/3/output/">Sites</a> &gt; Add
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{message}}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <form action="." method="post">
      <fieldset>
        <legend>Add a site</legend>
        <br>
        <label>
          Code {{ input_text('code', '') }}
        </label>
        <br>
        <label>
          Name {{ input_text('name', '') }}
        </label>
        <br>
        <br>
        <input type="submit" value="Add">
      </fieldset>
    </form>
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[299]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Channel Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from datetime import datetime
import pytz

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')

Channel = db.Channel

def make_fields(sess, era, message=None):
    channels = sess.query(Channel).filter(Channel.era_id==era.id).order_by(Channel.imp_related, Channel.channel_type)
    return {'era': era, 'channels': channels, 'messages': None if message is None else [str(message)]}

sess = None
try:
    sess = db.session()
    if inv.getRequest().getMethod() == 'GET':
        era_id = inv.getLong('era_id')
        era = db.Era.get_by_id(sess, era_id)
        templater.render(inv, template, make_fields(sess, era))
    else:
        db.set_read_write(sess)
        era_id = inv.getLong('era_id')
        imp_related = inv.getBoolean('imp_related')
        channel_type = inv.getString('channel_type')
       
        era = db.Era.get_by_id(sess, era_id)
        channel = era.insert_channel(sess, imp_related, channel_type)
        sess.commit()
        inv.sendSeeOther('/reports/301/output/?channel_id=' + str(channel.id))
except utils.UserException, e:
    templater.render(inv, template, make_fields(sess, era, e))
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Supplies &gt;
      Supply {{era.supply.id}} Era {{era.start_date|hh_format}} &gt; Add Channel
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/99/output/">Supplies</a> &gt;
      <a href="{{context_path}}/reports/7/output/?supply_id={{era.supply.id}}">Supply {{era.supply.id}} Era {{era.start_date|hh_format}}</a> &gt;
      Add Channel
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table><caption>Existing Channels</caption>
      <thead>
        <tr>
          <th>Import / Export Related?</th>
          <th>Type</th>
        </tr>
      </thead>
      <tbody>
        {% for channel in channels %}
          <tr>
            <td>
              {% if channel.imp_related %}
                Import
              {% else %}
                Export
              {% endif %}
            </td>
            <td>
              {{channel.channel_type}}
            </td>
          </tr>
        {% endfor %}
      <tbody>
    </table>
    <br>
    <form action="." method="post">
      <fieldset>
        <input type="hidden" name="era_id" value="{{era.id}}">
        <legend>Add a channel</legend>
        <br />
        <label>
          <select name="imp_related">
            {% for lb, vl in (('Import Related', 'true'), ('Export Related', 'false')) %}
              {{input_option('is_import', vl, lb)}}
            {% endfor %}
          </select>
        </label>
        <label>
          <select name="channel_type">
            {{input_option('channel_type', 'ACTIVE', 'ACTIVE')}}
            {{input_option('channel_type', 'REACTIVE_IMP', 'REACTIVE_IMP')}}
            {{input_option('channel_type', 'REACTIVE_EXP', 'REACTIVE_EXP')}}
          </select>
        </label>
        <input type="submit" value="Add">
      </fieldset>
    </form>
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[301]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Channel]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import datetime
import pytz
from dateutil.relativedelta import relativedelta
from java.lang import System

Monad.getUtils()['imprt'](globals(), {
        'db': ['Channel', 'Era', 'HhDatum', 'Snag', 'set_read_write', 'session'], 
        'utils': ['UserException', 'HH', 'hh_after'],
        'templater': ['render']})

def make_fields(sess, channel, start_date, message=None):
    messages = [] if message is None else [str(message)]
    fields = {'messages': messages, 'channel': channel, 'start_date': start_date}
    if start_date is not None:
        finish_date = start_date + relativedelta(months=1) - HH
        era = channel.era
        if hh_after(finish_date, era.finish_date):
            messages.append("The finish date is after the end of the era.")
        if start_date < era.start_date:
            messages.append("The start date is before the start of the era.")
        hh_data = sess.query(HhDatum).filter(HhDatum.channel_id == channel.id, HhDatum.start_date >= start_date, HhDatum.start_date <= finish_date).order_by(HhDatum.start_date)
        snags = sess.query(Snag).filter(Snag.channel_id == channel.id).order_by(Snag.start_date)
        fields.update({'hh_data': hh_data, 'snags': snags})
    return fields

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        channel_id = inv.getLong('channel_id')
        channel = Channel.get_by_id(sess, channel_id)
        if inv.hasParameter('start_year'):
            start_year = inv.getInteger('start_year')
            start_month = inv.getInteger('start_month')
            try:
                start_date = datetime.datetime(start_year, start_month, 1, tzinfo=pytz.utc)
            except ValueError, e:
                start_date = None
                raise UserException("Invalid date: " + str(e))
        else:
            era_finish = channel.era.finish_date
            if era_finish is None:
                start_date = datetime.datetime.utcnow().replace(tzinfo=pytz.utc)
            else:
                start_date = datetime.datetime(era_finish.year, era_finish.month, 1, tzinfo=pytz.utc)
        
        render(inv, template, make_fields(sess, channel, start_date))
except UserException, e:
    render(inv, template, make_fields(sess, channel, start_date, e), 400)
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Supplies &gt;
      Supply {{channel.era.supply.name}} Era {{channel.era.start_date|hh_format}} &gt;
      Channel {% if channel.imp_related %}Import{% else %}Export{% endif %}
      {{channel.channel_type}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/99/output/">Supplies</a> &gt;
      <a href="{{context_path}}/reports/7/output/?supply_id={{channel.era.supply.id }}">Supply {{channel.era.supply.name}} Era {{channel.era.start_date|hh_format}}</a> &gt;
      Channel {% if channel.imp_related %}Import{% else %}Export{% endif %}
      {{channel.channel_type}}
      [<a href="{{context_path}}/reports/303/output/?channel_id={{channel.id}}">edit</a>]
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <form action=".">
      <fieldset>
        <legend>Show HH Data</legend>
        <input type="hidden" name="channel_id" value="{{channel.id}}">
        {{input_date('start', start_date, resolution='month')}}
        <input type="submit" value="Show">
      </fieldset>
    </form>
    <br>
    <table><caption>HH Data</caption>
      <thead>
        <tr>
          <th>Edit</th>
          <th>Start Time</th>
          <th>
            {% if channel.imp_related %}
              Import
            {% else %}
              Export
            {% endif %}

            {{channel.channel_type}}
          </th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        {% for hh in hh_data %}
          <tr>
            <td>
              [<a href="{{context_path}}/reports/309/output/?hh_datum_id={{hh.id}}">edit</a>]
            </td>
            <td>{{hh.start_date|hh_format}}</td>
            <td>{{hh.value}}</td>
            <td>{{hh.status}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
    <br>
    <table><caption>Snags</caption>
      <thead>
        <tr>
          <th>View</th>
          <th>Start Date</th>
          <th>Finish Date</th>
          <th>Description</th>
          <th>Ignored?</th>
        </tr>
      </thead>
      <tbody>
        {% for snag in snags %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/117/output/?snag_id={{snag.id}}">view</a>
            </td>
            <td>{{snag.start_date|hh_format}}</td>
            <td>{{snag.finish_date|hh_format}}</td>
            <td>{{snag.description}}</td>
            <td>
              {% if snag.is_ignored %}
                Ignored
              {% else %}
                Not ignored
              {% endif %}
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[303]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Channel Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Channel', 'Era', 'HhDatum', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date', 'form_decimal', 'hh_after', 'hh_before'],
        'templater': ['render']})

def make_fields(channel, message=None):
    messages = [] if message is None else [str(message)]
    now = datetime.datetime.utcnow().replace(tzinfo=pytz.utc)
    return {'channel': channel, 'now': now, 'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        channel_id = inv.getLong('channel_id')
        channel = Channel.get_by_id(sess, channel_id)
        render(inv, template, make_fields(channel))
    else:
        set_read_write(sess)
        channel_id = inv.getLong('channel_id')
        channel = Channel.get_by_id(sess, channel_id)
        if inv.hasParameter('delete'):
            supply_id = channel.era.supply.id
            channel.era.delete_channel(sess, channel.imp_related, channel.channel_type)
            sess.commit()
            inv.sendSeeOther('/reports/7/output/?supply_id=' + str(supply_id))
        elif inv.hasParameter('delete_data'):
            start_date = form_date(inv, 'start')
            finish_date = form_date(inv, 'finish')
            channel.delete_data(sess, start_date, finish_date)
            sess.commit()
            render(inv, template, make_fields(channel, "Data successfully deleted."))
        elif inv.hasParameter('insert'):
            start_date = form_date(inv, 'start')
            value = form_decimal(inv, 'value')
            status = inv.getString('status')
            if start_date < channel.era.start_date:
                raise UserException("The start date is before the start of this era.")
            if hh_after(start_date, channel.era.finish_date):
                raise UserException("The finish date is after the end of this era.")
            hh_datum = sess.query(HhDatum).filter(HhDatum.channel_id == channel.id, HhDatum.start_date == start_date).first()
            if hh_datum is not None:
                raise UserException("There's already a datum in this channel at this time.")
            mpan_core = channel.era.imp_mpan_core
            if mpan_core is None:
                mpan_core = channel.era.exp_mpan_core
            HhDatum.insert(sess, [{'start_date': start_date, 'value': value, 'status': status, 'mpan_core': mpan_core, 'channel_type': channel.channel_type}])
            sess.commit()
            now = datetime.datetime.utcnow().replace(tzinfo=pytz.utc)
            inv.sendSeeOther('/reports/301/output/?channel_id=' + str(channel_id) + "&start_year=" + str(now.year) + "&start_month=" + str(now.month))
except UserException, e:
    render(inv, template, make_fields(channel, e))
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Supplies &gt;
      Supply {{channel.era.supply.id}} Era {{channel.era.start_date|hh_format}} &gt;
      Channel {% if channel.imp_related %}Import{% else %}Export{% endif %}
      {{channel.channel_type}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/99/output/">Supplies</a> &gt;
      <a href="{{context_path}}/reports/7/output/?supply_id={{channel.era.supply.id }}">Supply {{channel.era.supply.name}} Era {{channel.era.start_date|hh_format}}</a> &gt;
      <a href="{{context_path}}/reports/301/output/?channel_id={{channel.id}}">Channel {% if channel.is_import %}Import{% else %}Export{% endif %}
      {{channel.channel_type}}</a> &gt;
      Edit

    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{message}}</li>
        {% endfor %}
      </ul>
    {% endif %}
    
    {% if request.getMethod() == 'GET' and request.getParameter('delete') %}
      <form method="post" action=".">
        <fieldset>
          <legend>
            Are you sure you want to delete this channel?
          </legend>
          <input type="hidden" name="channel_id" value="{{channel.id}}">
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p>
        <a href="{{context_path}}/reports/301/output/?channel_id={{channel.id}}">Cancel</a>
      </p>
    {% else %}
      <form action="." method="post">
        <fieldset>
          <legend>Delete HH Data</legend>
          <input type="hidden" name="channel_id" value="{{channel.id}}">
          From {{input_date('start', None, 'minute')}} to
          {{input_date('finish', None, 'minute')}}
          <input type="submit" name="delete_data" value="Delete">
        </fieldset>
      </form>
      <br>
      <form action="." method="post">
        <fieldset>
          <legend>Insert HH datum</legend>
          <input type="hidden" name="channel_id" value="{{channel.id}}">
          <label>
            Start Date {{input_date('start', None, 'minute')}}
          </label>
          <br>
          Value {{input_text('value', '')}}
          <br>
          <label>Status
            <select name="status">
              {{input_option('status', 'E', 'E')}}
              {{input_option('status', 'A', 'A')}}
            </select>
          </label>
          <br>
          <input type="submit" name="insert" value="Insert">
        </fieldset>
      </form>
      <br>
      <form action=".">
        <fieldset>
          <legend>
            Delete this channel
          </legend>
          <input type="hidden" name="channel_id" value="{{channel.id}}">
          <input type="hidden" name="start_year" value="{{now.year}}">
          <input type="hidden" name="start_month" value="{{now.month}}">
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[305]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supply Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Channel', 'Era', 'Supply', 'Source', 'GeneratorType', 'GspGroup', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date', 'form_decimal', 'hh_after', 'hh_before'],
        'templater': ['render']})

def make_fields(sess, supply, message=None):
    messages = [] if message is None else [str(message)]
    sources = sess.query(Source).order_by(Source.code)
    generator_types = sess.query(GeneratorType).order_by(GeneratorType.code)
    gsp_groups = sess.query(GspGroup).order_by(GspGroup.code)
    eras = sess.query(Era).filter(Era.supply == supply).order_by(Era.start_date.desc())
    return {'supply': supply, 'messages': messages, 'sources': sources, 'generator_types': generator_types, 'gsp_groups': gsp_groups, 'eras': eras}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        supply_id = inv.getLong('supply_id')
        supply = Supply.get_by_id(sess, supply_id)
        render(inv, template, make_fields(sess, supply))
    else:
        set_read_write(sess)
        supply_id = inv.getLong('supply_id')
        supply = Supply.get_by_id(sess, supply_id)

        if inv.hasParameter("delete"):
            supply.delete(sess)
            sess.commit()
            inv.sendSeeOther("/reports/99/output/")
        elif inv.hasParameter("insert_era"):
            start_date = form_date(inv, 'start')
            supply.insert_era_at(sess, start_date)
            sess.commit()
            inv.sendSeeOther("/reports/7/output/?supply_id=" + str(supply.id))
        else:
            name = inv.getString("name")
            source_id = inv.getLong("source_id")
            gsp_group_id = inv.getLong("gsp_group_id")
            source = Source.get_by_id(sess, source_id)
            if source.code in ('gen', 'gen-net'):
                generator_type_id = inv.getLong("generator_type_id")
                generator_type = GeneratorType.get_by_id(sess, generator_type_id)
            else:
                generator_type = None
            gsp_group = GspGroup.get_by_id(sess, gsp_group_id)
            supply.update(name, source, generator_type, gsp_group, supply.dno_contract)
            sess.commit()
            inv.sendSeeOther("/reports/7/output/?supply_id=" + str(supply.id))
except UserException, e:
    render(inv, template, make_fields(sess, supply, e), 400)
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Supplies &gt; {{supply.id}} &gt; Edit
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/99/output/">Supplies</a> &gt;
      <a href="{{context_path}}/reports/7/output/?supply_id={{supply.id}}">{{supply.id}}</a> &gt;
      Edit
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{message}}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <br>
    {% if request.getMethod() == 'GET' and request.getParameter('delete') %}
      <form method="post" action=".">
        <fieldset>
          <legend>Delete</legend>
          <input type="hidden" name="supply_id" value="{{supply.id}}">
          <p>Are you sure you want to delete this supply?</p>
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>

      <p>
        <a href="{{context_path}}/reports/7/output/?supply_id={{supply.id}}">Cancel</a>
      </p>
    {% else %}
      <form method="post" action=".">
        <fieldset>
          <legend>Update this supply</legend>
          <input type="hidden" name="supply_id" value="{{supply.id}}">
          <br>
          <label>Name</label> {{input_text('name', supply.name)}}
          <br>
          <br>
          <label>Source</label>
          <select name="source_id">
            {% for source in sources %}
              {{input_option('source_id', source.id, source.code, supply.source.id)}}
            {% endfor %}
          </select>
          <label>Generator Type (if source is 'gen' or 'gen-net')</label>
          <select name="generator_type_id">
            {% for generator_type in generator_types %}
              {{input_option('generator_type_id', generator_type.id, generator_type.code, supply.generator_type.id)}}
            {% endfor %}
          </select>
          <br>
          <br>
          <label>GSP Group</label>
          <select name="gsp_group_id">
            {% for gsp_group in gsp_groups %}
              {{input_option('gsp_group_id', gsp_group.id, gsp_group.code + ' '  + gsp_group.description, supply.gsp_group.id)}}
            {% endfor %}
          </select>
          <br>
          <br>
          <input type="submit" value="Update">
        </fieldset>
      </form>
      <br>
      <form action=".">
        <fieldset>
          <legend>Delete this supply</legend>
          <input type="hidden" name="supply_id" value="{{supply.id}}">
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <br>
      <form method="post" action=".">
        <fieldset>
          <legend>Insert a new era</legend>
          <input type="hidden" name="supply_id" value="{{supply.id}}">
          <br>
          <label>Start date</label> {{input_date('start', None)}}
          <input type="submit" name="insert_era" value="Insert">
        </fieldset>
      </form>
      <br>
      <table>
        <caption>Existing Eras</caption>
        <thead>
          <tr>
            <th>Start date</th>
            <th>Finish date</th>
            <th>Import Mpan Core</th>
            <th>Export Mpan Core</th>
          </tr>
        </thead>
        <tbody>
          {% for era in eras %}
            <tr>
              <td>{{era.start_date|hh_format}}</td>
              <td>{{era.finish_date|hh_format}}</td>
              <td>
                {% if era.imp_mpan_core %}
                  {{era.imp_mpan_core}}
                {% endif %}
              </td>
              <td>
                {% if era.exp_mpan_core %}
                  {{era.exp_mpan_core}}
                {% endif %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[307]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Era Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Channel', 'Era', 'Supply', 'Source', 'GeneratorType', 'GspGroup', 'Pc', 'Cop', 'Contract', 'MarketRole', 'SiteEra', 'Site', 'Mtc', 'Ssc', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date', 'form_decimal', 'hh_after', 'hh_before', 'validate_hh_start', 'parse_mpan_core'],
        'templater': ['render']})

def make_fields(sess, era, message=None):
    messages = [] if message is None else [str(message)]
    pcs = sess.query(Pc).order_by(Pc.code)
    cops = sess.query(Cop).order_by(Cop.code)
    gsp_groups = sess.query(GspGroup).order_by(GspGroup.code)
    mop_contracts = sess.query(Contract).join(MarketRole).filter(MarketRole.code == 'M').order_by(Contract.name)
    hhdc_contracts = sess.query(Contract).join(MarketRole).filter(MarketRole.code == 'C').order_by(Contract.name)
    supplier_contracts = sess.query(Contract).join(MarketRole).filter(MarketRole.code == 'X').order_by(Contract.name)
    site_eras = sess.query(SiteEra).join(Site).filter(SiteEra.era == era).order_by(Site.code).all()
    return {'era': era, 'messages': messages, 'pcs': pcs, 'cops': cops, 'gsp_groups': gsp_groups, 'mop_contracts': mop_contracts, 'hhdc_contracts': hhdc_contracts, 'supplier_contracts': supplier_contracts, 'site_eras': site_eras}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        era_id = inv.getLong('era_id')
        era = Era.get_by_id(sess, era_id)
        render(inv, template, make_fields(sess, era))
    else:
        set_read_write(sess)
        era_id = inv.getLong('era_id')
        era = Era.get_by_id(sess, era_id)

        if inv.hasParameter("delete"):
            supply = era.supply
            supply.delete_era(sess, era)
            sess.commit()
            inv.sendSeeOther("/reports/7/output/?supply_id=" + str(supply.id))
        elif inv.hasParameter("attach"):
            site_code = inv.getString("site_code")
            site = Site.get_by_code(sess, site_code)
            era.attach_site(sess, site)
            sess.commit()
            inv.sendSeeOther("/reports/7/output/?supply_id=" + str(era.supply.id))
        elif inv.hasParameter("detach"):
            site_id = inv.getLong("site_id")
            site = Site.get_by_id(sess, site_id)
            era.detach_site(sess, site)
            sess.commit()
            inv.sendSeeOther("/reports/7/output/?supply_id=" + str(era.supply.id))
        elif inv.hasParameter("locate"):
            site_id = inv.getLong("site_id")
            site = Site.get_by_id(sess, site_id)
            era.set_physical_location(sess, site)
            sess.commit()
            inv.sendSeeOther("/reports/7/output/?supply_id=" + str(era.supply.id))
        else:
            start_date = form_date(inv, 'start')
            is_ended = inv.getBoolean("is_ended")
            if is_ended:
                finish_date = form_date(inv, "finish")
                validate_hh_start(finish_date)
            else:
                finish_date = None
            mop_contract_id = inv.getLong("mop_contract_id")
            mop_contract = Contract.get_mop_by_id(sess, mop_contract_id)
            mop_account = inv.getString("mop_account")
            hhdc_contract_id = inv.getLong("hhdc_contract_id")
            hhdc_contract = Contract.get_hhdc_by_id(sess, hhdc_contract_id)
            hhdc_account = inv.getString("hhdc_account")
            msn = inv.getString("msn")
            pc_id = inv.getLong("pc_id")
            pc = Pc.get_by_id(sess, pc_id)
            mtc_code = inv.getString("mtc_code")
            mtc = Mtc.get_by_code(sess, era.supply.dno_contract.party, mtc_code)
            cop_id = inv.getLong("cop_id")
            cop = Cop.get_by_id(sess, cop_id)
            ssc_code = inv.getString("ssc_code")
            ssc_code = ssc_code.strip()
            ssc = None if len(ssc_code) == 0 else Ssc.get_by_code(sess, ssc_code)

            if inv.hasParameter('imp_mpan_core'):
                imp_mpan_core_raw = inv.getString('imp_mpan_core')
            else:
                imp_mpan_core_raw = None

            if imp_mpan_core_raw is None or len(imp_mpan_core_raw.strip()) == 0:
                imp_mpan_core = None
                imp_sc = None
                imp_supplier_contract = None
                imp_supplier_account = None
                imp_llfc_code = None
            else:
                imp_mpan_core = parse_mpan_core(imp_mpan_core_raw)
                imp_llfc_code = inv.getString('imp_llfc_code')
                imp_supplier_contract_id = inv.getLong("imp_supplier_contract_id")
                imp_supplier_contract = Contract.get_supplier_by_id(sess, imp_supplier_contract_id)
                imp_supplier_account = inv.getString("imp_supplier_account")
                imp_sc = inv.getInteger("imp_sc")

            if inv.hasParameter('exp_mpan_core'):
                exp_mpan_core_raw = inv.getString('exp_mpan_core')
            else:
                exp_mpan_core_raw = None

            if exp_mpan_core_raw is None or len(exp_mpan_core_raw.strip()) == 0:
                exp_mpan_core = None
                exp_llfc_code = None
                exp_sc = None
                exp_supplier_contract = None
                exp_supplier_account = None
            else:
                exp_mpan_core = parse_mpan_core(exp_mpan_core_raw)
                exp_llfc_code = inv.getString("exp_llfc_code")
                exp_sc = inv.getInteger("exp_sc")
                exp_supplier_contract_id = inv.getLong('exp_supplier_contract_id')
                exp_supplier_contract = Contract.get_supplier_by_id(sess, exp_supplier_contract_id)
                exp_supplier_account = inv.getString('exp_supplier_account')

            era.supply.update_era(sess, era, start_date, finish_date, mop_contract, mop_account, hhdc_contract, hhdc_account, msn, pc, mtc, cop, ssc, imp_mpan_core, imp_llfc_code, imp_supplier_contract, imp_supplier_account, imp_sc, exp_mpan_core, exp_llfc_code, exp_supplier_contract, exp_supplier_account, exp_sc)
            sess.commit()
            inv.sendSeeOther("/reports/7/output/?supply_id=" + str(era.supply.id))
except UserException, e:
    render(inv, template, make_fields(sess, era, e), 400)
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Supplies &gt; {{era.supply.id}} &gt;
      Era {{era.start_date|hh_format}} Edit
    </title>
    <style>
      label.aligned {
        width: 18em;
        float: left;
      }
    </style>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/99/output/">Supplies</a> &gt;
      <a href="{{context_path}}/reports/7/output/?supply_id={{era.supply.id}}">{{era.supply.id}}</a> &gt;
      Era {{era.start_date|hh_format}} Edit
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{message}}</li>
        {% endfor %}
      </ul>
    {% endif %}
    
    {% if request.getMethod() == 'GET' and request.getParameter('delete') %}
      <form method="post" action=".">
        <fieldset>
          <legend>
            Are you sure you want to delete this era?
          </legend>
          <input type="hidden" name="era_id" value="{{era.id}}">
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p>
        <a href="{{context_path}}/reports/307/output/?era_id={{era.id}}">Cancel</a>
      </p>
    {% else %}
      <table>
        <caption>Sites</caption>
        <thead>
          <tr>
            <th>Code</th>
            <th>Name</th>
            {% if site_eras|length > 1 %}
              <th></th>
              <th></th>
              <th></th>
            {% endif %}
          </tr>
        </thead>
        <tbody>
          {% for site_era in site_eras %}
            <tr>
              <td>
                {{site_era.site.code}}
              </td>
              <td>
                {{site_era.site.name}}
              </td>
              {% if site_eras|length > 1 %}
                <td>
                  {% if site_era.is_physical %}
                    Located here
                  {% else %}
                    <form method="post" action=".">
                      <fieldset>
                        <input type="hidden" name="era_id" value="{{era.id}}">
                        <input type="hidden" name="site_id" value="{{site_era.site.id}}">
                        <input type="submit" name="locate" value="Locate Here">
                      </fieldset>
                    </form>
                  {% endif %}
                </td>
                <td>
                  <form method="post" action=".">
                    <fieldset>
                      <legend>Detach from site</legend>
                      <input type="hidden" name="era_id" value="{{era.id}}">
                      <input type="hidden" name="site_id" value="{{site_era.site.id}}">
                      <input type="submit" name="detach" value="Detach">
                    </fieldset>
                  </form>
                </td>
              {% endif %}
            </tr>
          {% endfor %}
        </tbody>
      </table>
     
      <br>
      <form method="post" action=".">
        <fieldset>
          <legend>Attach to another site</legend>
          <input type="hidden" name="era_id" value="{{era.id}}">
          <label>Site Code {{input_text("site_code", '')}}</label>
          <input type="submit" name="attach" value="Attach">
        </fieldset>
      </form>
      <br>
      <form action="." method="post">
        <fieldset>
          <input type="hidden" name="era_id" value="{{era.id}}">
          <legend>Update this era</legend>
          <fieldset>
            <legend>Start date</legend>
            {{input_date('start', era.start_date)}}
          </fieldset>
          <br>

          <fieldset>
            <legend>End Date</legend>
            <label>Ended?
            {{input_checkbox('is_ended', era.finish_date is not none)}}
            </label>
            {{input_date('finish', era.finish_date)}}
          </fieldset>

          <br>
          <br>
          <label class="aligned">MOP Contract</label>
          <select name="mop_contract_id">
            {% for contract in mop_contracts %}
              {{input_option('mop_contract_id', contract.id, contract.name, era.mop_contract.id)}}
            {% endfor %}
          </select>
          <br>
          <label class="aligned">MOP Account</label>
          {{input_text('mop_account', era.mop_account)}}
          <br>
          <label class="aligned">HHDC Contract</label>
          <select name="hhdc_contract_id">
            {% for contract in hhdc_contracts %}
              {{input_option('hhdc_contract_id', contract.id, contract.name, era.hhdc_contract.id)}}
            {% endfor %}
          </select>

          <br>
          <label class="aligned">HHDC Account</label>
          {{input_text('hhdc_account', era.hhdc_account)}}
          <br>
          <label class="aligned">Meter Serial Number</label>
          {{input_text('msn', era.msn)}}
          <br>
          <label class="aligned">Profile Class</label>
          <select name="pc_id">
            {% for pc in pcs %}
              {{input_option('pc_id', pc.id, pc.code + ' - ' + pc.name, era.pc.id)}}
            {% endfor %}
          </select>
          <br>
          <label class="aligned">Meter Timeswitch Class</label>
          {{input_text('mtc_code', era.mtc.code, 3, 3)}}
          <br />
          <label class="aligned">CoP</label>
          <select name="cop_id">
            {% for cop in cops %}
              {{input_option('cop_id', cop.id, cop.code + ' ' + cop.description, era.cop.id)}}
            {% endfor %}
          </select>
          <br>
          <label class="aligned">SSC</label>
          {{input_text('ssc_code', era.ssc.code, 4, 4)}}
          <br>
          <br>
         
          <fieldset>
            <legend>Import MPAN</legend>
            <br>
            <label class="aligned">Line Loss Factor Class</label>
            {{input_text('imp_llfc_code', era.imp_llfc.code, 3,3)}}
            <br>
            <label class="aligned">MPAN Core</label>
            {{input_text('imp_mpan_core', era.imp_mpan_core|default(''), 16)}}
            <br>
            <label class="aligned">Agreed Supply Capacity (kVA)</label>
            {{input_text('imp_sc', era.imp_sc, 9, 9)}}
            <br>
            <label class="aligned">Supplier Contract</label>
            <select name="imp_supplier_contract_id">
              {% for contract in supplier_contracts %}
                {{input_option('imp_supplier_contract_id', contract.id, contract.name, era.imp_supplier_contract.id)}}
              {% endfor %}
            </select>
            <br>
            <label class="aligned">Supplier Account</label>
            {{input_text('imp_supplier_account', era.imp_supplier_account)}}
            <br>
          </fieldset>
          <br>
          <fieldset>
            <legend>Export MPAN</legend>
            <br>
            <label class="aligned">Line Loss Factor Class</label>
            {{input_text('exp_llfc_code', era.exp_llfc.code, 3, 3)}}
            <br>
            <label class="aligned">MPAN Core</label>
            {{input_text('exp_mpan_core', era.exp_mpan_core, 16)}}
            <br>
            <label class="aligned">Agreed Supply Capacity (kVA)</label>
            {{input_text('exp_sc', era.exp_sc, 9, 9)}}
            <br>
            <label class="aligned">Supplier Contract</label>
              <select name="exp_supplier_contract_id">
              {% for contract in supplier_contracts %}
                {{input_option('exp_supplier_contract_id', contract.id, contract.name, era.exp_supplier_contract.id)}}
              {% endfor %}
            </select>
            <br>
            <label class="aligned">Supplier Account</label>
            {{input_text('exp_supplier_account', era.supplier_account)}}
            <br>
          </fieldset>
          <br>
          <input type="submit" value="Update">

        </fieldset>
      </form>
      <br>
      {% if era.supply.eras|length > 1 %}
        <form action=".">
          <fieldset>
            <legend>Delete this era</legend>
            <input type="hidden" name="era_id" value="{{era.id}}">
            <input type="submit" name="delete" value="Delete">
          </fieldset>
        </form>
      {% endif %}
     
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[309]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HH Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import datetime
import pytz

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')

def make_fields(hh, message=None):
    messages = [] if message is None else [str(message)]
    return {'hh': hh, 'messages': messages}

sess = None
try:
    sess = db.session()
    if inv.getRequest().getMethod() == 'GET':
        hh_id = inv.getLong('hh_datum_id')
        hh = db.HhDatum.get_by_id(sess, hh_id)
        templater.render(inv, template, make_fields(hh))
    else:
        db.set_read_write(sess)
        hh_id = inv.getLong('hh_datum_id')
        hh = db.HhDatum.get_by_id(sess, hh_id)
        channel_id = hh.channel.id
        if inv.hasParameter('delete'):
            hh.channel.delete_data(sess, hh.start_date, hh.start_date)
            sess.commit()
            inv.sendSeeOther('/reports/301/output/?channel_id=' + str(channel_id))
        elif inv.hasParameter('update'):
            value = utils.form_decimal(inv, 'value')
            status = inv.getString('status')
            channel = hh.channel
            era = channel.era
            imp_mpan_core = era.imp_mpan_core
            exp_mpan_core = era.exp_mpan_core
            mpan_core = imp_mpan_core if channel.imp_related else exp_mpan_core
            db.HhDatum.insert(sess, [{'mpan_core': mpan_core, 'channel_type': channel.channel_type, 'start_date': hh.start_date, 'value': value, 'status': status}])
            sess.commit()
            inv.sendSeeOther('/reports/301/output/?channel_id=' + str(channel_id))
except utils.UserException, e:
    templater.render(inv, template, make_fields(channel, e), 400)
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Supplies &gt;
      Supply {{hh.channel.era.supply.id}} Era {{hh.channel.era.start_date|hh_format}} &gt;
      Channel {% if hh.channel.imp_related %}Import{% else %}Export{% endif %}
      {{hh.channel.channel_type}} &gt;
      HH {{hh.start_date|hh_format}} Edit
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/99/output/">Supplies</a> &gt;
      <a href="{{context_path}}/reports/7/output/?supply_id={{hh.channel.era.supply.id}}">Supply {{hh.channel.era.supply.name}} Era {{hh.channel.era.start_date|hh_format}}</a> &gt;
      <a href="{{context_path}}/reports/301/output/?channel_id={{hh.channel.id}}">Channel {% if hh.channel.imp_related %}Import{% else %}Export{% endif %} {{channel.channel_type}}</a> &gt;
      HH {{hh.start_date|hh_format}} Edit
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{message}}</li>
        {% endfor %}
      </ul>
    {% endif %}
    
    {% if request.getMethod() == 'GET' and request.getParameter('delete') %}
      <form method="post" action=".">
        <fieldset>
          <legend>
            Are you sure you want to delete this half-hour?
          </legend>
          <input type="hidden" name="hh_datum_id" value="{{hh.id}}">
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p>
        <a href="{{context_path}}/reports/301/output/?channel_id={{hh.channel.id}}">Cancel</a>
      </p>
    {% else %}
      <form action="." method="post">
        <fieldset>
          <legend>Update HH datum</legend>
          <input type="hidden" name="hh_datum_id" value="{{hh.id}}">
          <label>
            Start Date {{input_date('start', hh.start_date)}}
          </label>
          <br>
          Value {{input_text('value', hh.value)}}
          <br>
          <label>Status
            <select name="status">
              {% for rt in ['A', 'E'] %}
                {{input_option('status', rt, rt, hh.status)}}
              {% endfor %}
            </select>
          </label>
          <br>
          <input type="submit" name="update" value="Update">
        </fieldset>
      </form>
      <br>
      <form action=".">
        <fieldset>
          <legend>
            Delete this half-hour
          </legend>
          <input type="hidden" name="hh_id" value="{{hh.id}}">
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[311]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Site Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Channel', 'Era', 'Supply', 'Source', 'GeneratorType', 'GspGroup', 'Site', 'SiteEra', 'Contract', 'MarketRole', 'Pc', 'Cop', 'Ssc', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date', 'form_decimal', 'hh_after', 'hh_before', 'parse_mpan_core'],
        'templater': ['render']})

def make_fields(sess, site, message=None):
    messages = [] if message is None else [str(message)]
    sources = sess.query(Source).order_by(Source.code)
    generator_types = sess.query(GeneratorType).order_by(GeneratorType.code)
    gsp_groups = sess.query(GspGroup).order_by(GspGroup.code)
    eras = sess.query(Era).join(SiteEra).filter(SiteEra.site == site).order_by(Era.start_date.desc())
    mop_contracts = sess.query(Contract).join(MarketRole).filter(MarketRole.code == 'M').order_by(Contract.name)
    hhdc_contracts = sess.query(Contract).join(MarketRole).filter(MarketRole.code == 'C').order_by(Contract.name)
    supplier_contracts = sess.query(Contract).join(MarketRole).filter(MarketRole.code == 'X').order_by(Contract.name)
    pcs = sess.query(Pc).order_by(Pc.code)
    cops = sess.query(Cop).order_by(Cop.code)
    return {'site': site, 'messages': messages, 'sources': sources, 'generator_types': generator_types, 'gsp_groups': gsp_groups, 'eras': eras, 'mop_contracts': mop_contracts, 'hhdc_contracts': hhdc_contracts, 'supplier_contracts': supplier_contracts, 'pcs': pcs, 'cops': cops}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        site_id = inv.getLong('site_id')
        site = Site.get_by_id(sess, site_id)
        render(inv, template, make_fields(sess, site))
    else:
        set_read_write(sess)
        site_id = inv.getLong('site_id')
        site = Site.get_by_id(sess, site_id)

        if inv.hasParameter("delete"):
            site.delete(sess)
            sess.commit()
            inv.sendSeeOther("/reports/3/output/")
        elif inv.hasParameter("update"):
            code = inv.getString("code")
            name = inv.getString("name")
            site.update(code, name)
            sess.commit()
            inv.sendSeeOther("/reports/5/output/?site_id=" + str(site.id))
        elif inv.hasParameter("insert"):
            name = inv.getString("name")
            source_id = inv.getLong("source_id")
            source = Source.get_by_id(sess, source_id)
            gsp_group_id = inv.getLong("gsp_group_id")
            gsp_group = GspGroup.get_by_id(sess, gsp_group_id)
            mop_contract_id = inv.getLong("mop_contract_id")
            mop_contract = Contract.get_mop_by_id(sess, mop_contract_id)
            mop_account = inv.getString("mop_account")
            hhdc_contract_id = inv.getLong("hhdc_contract_id")
            hhdc_contract = Contract.get_hhdc_by_id(sess, hhdc_contract_id)
            hhdc_account = inv.getString("hhdc_account")
            msn = inv.getString("msn")
            pc_id = inv.getLong("pc_id")
            pc = Pc.get_by_id(sess, pc_id)
            mtc_code = inv.getString("mtc_code")
            cop_id = inv.getLong("cop_id")
            cop = Cop.get_by_id(sess, cop_id)
            ssc_code = inv.getString("ssc_code")
            ssc_code = ssc_code.strip()
            if len(ssc_code) > 0:
                ssc = Ssc.get_by_code(sess, ssc_code)
            else:
                ssc = None
            start_date = form_date(inv, "start")
            if inv.hasParameter('generator_type_id'):
                generator_type_id = inv.getLong("generator_type_id")
                generator_type = GeneratorType.get_by_id(sess, generator_type_id)
            else:
                generator_type = None

            if inv.hasParameter('imp_mpan_core'):
                imp_mpan_core_raw = inv.getString('imp_mpan_core')
                if len(imp_mpan_core_raw) == 0:
                    imp_mpan_core = None
                else:
                    imp_mpan_core = parse_mpan_core(imp_mpan_core_raw)
            else:
                imp_mpan_core = None

            if imp_mpan_core is None:
                imp_supplier_contract = None
                imp_supplier_account = None
                imp_sc = None
                imp_llfc_code = None
            else:
                imp_supplier_contract_id = inv.getLong("imp_supplier_contract_id")
                imp_supplier_contract = Contract.get_supplier_by_id(sess, imp_supplier_contract_id)
                imp_supplier_account = inv.getString("imp_supplier_account")
                imp_sc= inv.getInteger('imp_sc')
                imp_llfc_code = inv.getString("imp_llfc_code")

            if inv.hasParameter('exp_mpan_core'):
                exp_mpan_core_raw = inv.getString('exp_mpan_core')
                if len(exp_mpan_core_raw) == 0:
                    exp_mpan_core = None
                else:
                    exp_mpan_core = parse_mpan_core(exp_mpan_core_raw)
            else:
                exp_mpan_core = None

            if exp_mpan_core is None:
                exp_supplier_contract = None
                exp_supplier_account = None
                exp_sc = None
                exp_llfc_code = None
            else:
                exp_supplier_contract_id = inv.getLong("exp_supplier_contract_id")
                exp_supplier_contract = Contract.get_supplier_by_id(sess, exp_supplier_contract_id)
                exp_supplier_account = inv.getString("exp_supplier_account")
                exp_sc= inv.getInteger('exp_sc')
                exp_llfc_code = inv.getString("exp_llfc_code")

            supply = site.insert_supply(sess, source, generator_type, name, start_date, None, gsp_group, mop_contract, mop_account, hhdc_contract, hhdc_account, msn, pc, mtc_code, cop, ssc, imp_mpan_core, imp_llfc_code, imp_supplier_contract, imp_supplier_account, imp_sc, exp_mpan_core, exp_llfc_code, exp_supplier_contract, exp_supplier_account, exp_sc)
            sess.commit()
            inv.sendSeeOther("/reports/7/output/?supply_id=" + str(supply.id))
except UserException, e:
    sess.rollback()
    render(inv, template, make_fields(sess, site, e), 400)
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Sites &gt; {{site.code}} {{site.name}}
    </title>
    <style>
      label {
        width: 11em;
        float: left;
      }
    </style>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/3/output/">Sites</a> &gt;
      <a href="{{context_path}}/reports/5/output/?site_id={{site.id}}">{{site.code}} {{site.name}}</a> &gt;
      Edit
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{message}}</li>
        {% endfor %}
      </ul>
    {% endif %}

    {% if request.getMethod() == "GET" and request.getParameter('delete') %}
      <form method="post" action=".">
        <fieldset>
          <input type="hidden" name="site_id" value="{{site.id}}">
          <legend>
            Are you sure you want to delete this site and any associated snags?
          </legend>
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p><a href=".">Cancel</a></p>
    {% else %}
      <br>
      <form action="." method="post">
        <fieldset>
          <input type="hidden" name="site_id" value="{{site.id}}">
          <legend>Update this site</legend>
          <label>Name</label>
          {{input_text('name', site.name, 40)}}
          <br>
          <label>Code</label>
          {{input_text('code', site.code)}}
          <br>
          <input name="update" type="submit" value="Update">
        </fieldset>
      </form>
      <br>
      <form action=".">
        <fieldset>
          <input type="hidden" name="site_id" value="{{site.id}}">
          <legend>Delete this site</legend>
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <br>

      <table>
        <caption>Eras</caption>
        <thead>
          <tr>
            <th>From</th>
            <th>To</th>
            <th>Source</th>
            <th>Supply</th>
            <th>Import MPAN core</th>
            <th>Export MPAN core</th>
          </tr>
        </thead>
        <tbody>
          {% for era in eras %}
            <tr>
              <td>{{era.start_date|hh_format}}</td>
              <td>{{era.finish_date|hh_format}}</td>
              <td>{{era.supply.source.code}}</td>
              <td>{{era.supply.name}}</td>
              <td>
                {% if era.imp_mpan_core %}
                  {{era.imp_mpan_core}}
                {% endif %}
              </td>
              <td>
                {% if era.exp_mpan_core %}
                  {{era.exp_mpan_core}}
                {% endif %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
      <br>
      <form action="." method="post">
        <fieldset>
          <input type="hidden" name="site_id" value="{{site.id}}">
          <legend>Insert a supply</legend>
          <br>
          <label>Source</label>
          <select name="source_id">
            {% for source in sources %}
              {{input_option('source_id', source.id, source.code + ' ' + source.name)}}
            {% endfor %}
          </select>
          Generator Type (if source is 'gen' or 'gen-net')
          <select name="generator_type_id">
            {% for generator_type in generator_types %}
              {{input_option('generator_type_id', generator_type.id, generator_type.code + ' ' + generator_type.description)}}
            {% endfor %}
          </select>
          <br>
          <label>Name</label>
          {{input_text('name')}}
          <br>
          <br>
          <fieldset>
            <legend>Start Date</legend>
            {{input_date('start')}}
          </fieldset>
          <br>
          <label>Meter Serial Number</label>
          {{input_text('msn')}}
          <br>
          <label>GSP Group</label>
          <select name="gsp_group_id">
            {% for gsp_group in gsp_groups %}
              {{input_option('gsp_group_id', gsp_group.id, gsp_group.code + ' ' + gsp_group.description)}}
            {% endfor %}
          </select>
          <br>
          <label>MOP Contract</label>
          <select name="mop_contract_id">
            {% for contract in mop_contracts %}
              {{input_option('mop_contract_id', contract.id, contract.name)}}
            {% endfor %}
          </select>
          <br>
          <label>MOP Account</label>
          {{input_text('mop_account')}}
          <br>
          <label>HHDC Contract</label>
          <select name="hhdc_contract_id">
            {% for contract in hhdc_contracts %}
              {{input_option('hhdc_contract_id', contract.id, contract.name)}}
            {% endfor %}
          </select>
          <br>
          <label>HHDC Account</label>
          {{input_text('hhdc_account')}}
          <br>
          <label>Profile Class</label>
          <select name="pc_id">
            {% for pc in pcs %}
              {{input_option('pc_id', pc.id, pc.code + ' ' + pc.name)}}
            {% endfor %}
          </select>
          <br>
          <label>MTC Code</label>
          {{input_text('mtc_code')}}
          <br>
          <label>CoP</label>
          <select name="cop_id">
            {% for cop in cops %}
              {{input_option('cop_id', cop.id, cop.description)}}
            {% endfor %}
          </select>
          <br>
          <label>SSC</label>
          {{input_text('ssc_code')}}
          <br>
          <br>
          <fieldset>
            <legend>Import</legend>
            <label>Mpan Core</label>
            {{input_text('imp_mpan_core', '', 35)}}
            <br>
            <label>LLFC</label>
            {{input_text('imp_llfc_code')}}
            <br>
            <label>Supply Capacity</label>
            {{input_text('imp_sc')}}
            <br>
            <label>Supplier Contract</label>
            <select name="imp_supplier_contract_id">
              {% for contract in supplier_contracts %}
                {{input_option('imp_supplier_contract_id', contract.id, contract.name)}}
              {% endfor %}
            </select>
            <br>
            <label>Supplier Account</label>
            {{input_text('imp_supplier_account')}}
          </fieldset>
          <br>
          <fieldset>
            <legend>Export</legend>
            <label>Mpan Core</label>
            {{input_text('exp_mpan_core', '', 35)}}
            <br>
            <label>LLFC</label>
            {{input_text('exp_llfc_code')}}
            <br>
            <label>Supply Capacity</label>
            {{input_text('exp_sc')}}
            <br>
            <label>Supplier Contract</label>
            <select name="exp_supplier_contract_id">
              {% for contract in supplier_contracts %}
                {{input_option('exp_supplier_contract_id', contract.id, contract.name)}}
              {% endfor %}
            </select>
            <br>
            <label>Supplier Account</label>
            {{input_text('exp_supplier_account')}}
          </fieldset>
          <br>
          <input name="insert" type="submit" value="Insert">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[313]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Bill Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Batch', 'Supply', 'BillType', 'Bill', 'set_read_write'],
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH', 'parse_mpan_core', 'form_date', 'form_decimal', 'validate_hh_start'],
        'templater': ['render']})


def make_fields(sess, batch, message=None):
    bill_types = sess.query(BillType).order_by(BillType.code)
    bills = sess.query(Bill).filter(Bill.batch == batch).order_by(Bill.start_date)
    messages = [] if message is None else [str(e)]
    return {'batch': batch, 'bill_types': bill_types, 'messages': messages, 'bills': bills}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        batch_id = inv.getLong('supplier_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        render(inv, template, make_fields(sess, batch))
    else:
        set_read_write(sess)
        batch_id = inv.getLong('supplier_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        mpan_core = inv.getString("mpan_core")
        mpan_core = parse_mpan_core(mpan_core)
        account = inv.getString("account")
        reference = inv.getString("reference")
        issue_date = form_date(inv, "issue")
        start_date = form_date(inv, "start")
        validate_hh_start(start_date)
        finish_date = form_date(inv, "finish")
        validate_hh_start(finish_date)
        kwh = form_decimal(inv, "kwh")
        net = form_decimal(inv, "net")
        vat = form_decimal(inv, "vat")
        gross = form_decimal(inv, "gross")
        bill_type_id = inv.getLong("bill_type_id")
        bill_type = BillType.get_by_id(sess, bill_type_id)
        breakdown_str = inv.getString("breakdown")

        breakdown = eval(breakdown_str)
        bill_type = BillType.get_by_id(sess, bill_type_id)
        bill = batch.insert_bill(sess, account, reference, issue_date, start_date, finish_date, kwh, net, vat, gross, bill_type, breakdown, Supply.get_by_mpan_core(sess, mpan_core))
        sess.commit()
        inv.sendSeeOther("/reports/105/output/?supplier_bill_id=" + str(bill.id))

except UserException, e:
    sess.rollback()
    render(inv, template, make_fields(sess, batch, e), 400)
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>
      Chellow &gt; Supplier Contracts &gt; {{batch.contract.name}} &gt;
      Batches &gt; {{batch.reference}} &gt; Add Bill
    </title>
    <style>
      label {
        width: 6em;
        float: left;
      }
    </style>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/75/output/">Supplier Contracts</a> &gt;
      <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{batch.contract.id}}">{{batch.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/89/output/?supplier_contract_id={{batch.contract.id}}">Batches</a> &gt;
      <a href="{{context_path}}/reports/91/output/?supplier_batch_id={{batch.id}}">{{batch.reference}}</a> &gt;
      Add Bill
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <form action="." method="post">
      <fieldset>
        <input type="hidden" name="supplier_batch_id" value="{{batch.id}}">
        <legend>Add a bill</legend>
        <br>
        <label>MPAN Core</label>
        {{input_text('mpan_core')}}
        <br>
        <label>Reference</label>
        {{input_text('reference')}}
        <br>
        <br>
        <fieldset>
          <legend>Issue Date</legend>
          {{input_date('issue')}}
        </fieldset>
        <br>
        <fieldset>
          <legend>Start Date</legend>
          {{input_date('start')}}
        </fieldset>
        <br>
        <fieldset>
          <legend>Finish Date</legend>
          {{input_date('finish')}}
        </fieldset>
        <br>
        <label>kWh</label>
        {{input_text('kwh', '0')}}
        <br>
        <label>Net</label>
        {{input_text('net', '0')}}
        <br>
        <label>VAT</label>
        {{input_text('vat', '0')}}
        <br>
        <label>Gross</label>
        {{input_text('gross', '0')}}
        <br>
        <label>Account</label>
        {{input_text('account', '0')}}
        <br>
        <label>Type</label>
        <select name="bill_type_id">
          {% for bill_type in bill_types %}
            {{input_option('bill_type_id', bill_type.id, bill_type.code, bill_type.description)}}
          {% endfor %}
        </select>
        <br>
        <label>Breakdown</label>
        {{input_text('breakdown', '{}')}}
        <br>
        <br>
        <input type="submit" value="Add">
      </fieldset>
    </form>
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[315]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Contract Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Party', 'Participant', 'set_read_write', 'MarketRole'],
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH', 'form_date', 'validate_hh_start'],
        'templater': ['render']})


def make_fields(sess, message=None):
    contracts = sess.query(Contract).join(MarketRole).filter(MarketRole.code == 'X').order_by(Contract.name)
    parties = sess.query(Party).join(MarketRole, Participant).filter(MarketRole.code == 'X').order_by(Participant.code)
    messages = [] if message is None else [str(e)]
    return {'contracts': contracts, 'messages': messages, 'parties': parties}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        render(inv, template, make_fields(sess))
    else:
        set_read_write(sess)
        participant_id = inv.getLong("participant_id")
        participant = Participant.get_by_id(sess, participant_id)
        name = inv.getString("name")
        start_date = form_date(inv, "start")
        validate_hh_start(start_date)
        contract = Contract.insert_supplier(sess, name, participant, '', '{}', start_date, None, '{}')
        sess.commit()
        inv.sendSeeOther("/reports/77/output/?supplier_contract_id=" + str(contract.id))
except UserException, e:
    sess.rollback()
    render(inv, template, make_fields(sess, e), 400)
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>
      Chellow &gt; Supplier Contracts &gt; Add
    </title>
    <style>
      label {
        width: 6em;
        float: left;
      }
    </style>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/75/output/">Supplier Contracts</a> &gt;
      Add
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <form action="." method="post">
      <fieldset>
        <legend>Add a contract</legend>
        <label>Supplier</label>
        <select name="participant_id">
          {% for party in parties %}
            {{input_option('participant_id', party.participant.id, party.participant.code + ' ' + party.name)}}
          {% endfor %}
        </select>
        <br>
        <br>
        <label>Name</label>
        {{input_text('name')}}
        <br><br>
        <fieldset>
          <legend>Start Date</legend>
          {{input_date('start')}}
        </fieldset>
        <br><br>
        <input type="submit" value="Add">
      </fieldset>
    </form>
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[317]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Contract Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from java.lang import System

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'MarketRole', 'Participant', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

def make_fields(sess, contract, message=None):
    parties = sess.query(Party).join(MarketRole, Participant).filter(MarketRole.code=='X').order_by(Participant.code).all()
    messages = None if message is None else [str(message)]
    return {'contract': contract, 'messages': messages, 'parties': parties}


sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        contract_id = inv.getLong('supplier_contract_id')
        contract = Contract.get_supplier_by_id(sess, contract_id)
        render(inv, template, make_fields(sess, contract))
    else:
        set_read_write(sess)
        contract_id = inv.getLong('supplier_contract_id')
        contract = Contract.get_supplier_by_id(sess, contract_id)
        if inv.hasParameter('delete'):
            contract.delete(sess)
            sess.commit()
            inv.sendSeeOther('/reports/75/output/')
        else:
            party_id = inv.getLong('party_id')
            party = Party.get_by_id(sess, party_id)
            name = inv.getString('name')
            charge_script = inv.getString('charge_script')
            contract.update(sess, False, name, party, charge_script, '{}')
            sess.commit()
            inv.sendSeeOther('/reports/77/output/?supplier_contract_id='
                + str(contract.id))
except UserException, e:
    sess.rollback()
    if str(e).startswith("There isn't a contract"):
        inv.sendNotFound(str(e))
    render(inv, template, make_fields(sess, contract, e), 400)
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>Chellow &gt; Supplier Contracts &gt; {{contract.name}}</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/75/output/">Supplier Contracts</a>
      &gt;
      <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{contract.id}}">{{contract.name}}</a>
      &gt; Edit
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    {% if request.getMethod() == 'GET' and request.getParameter('delete') %}
      <form method="post" action=".">
        <fieldset>
          <legend>
            Are you sure you want to delete this contract?
          </legend>
          <input type="hidden" name="supplier_contract_id" value="{{contract.id}}">
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p>
        <a href="{{context_path}}/reports/317/output/?supplier_contract_id={{contract.id}}">Cancel</a>
      </p>
    {% else %}
      <form action="." method="post">
        <fieldset>
          <legend>Update Contract</legend>
          <input type="hidden" name="supplier_contract_id" value="{{contract.id}}">
          <br>
          <label>Party</label>
          <select name="party_id">
            {% for party in parties %}
              {{ input_option('party_id', party.id, party.participant.code + ' : ' + party.name, contract.party.id) }}
            {% endfor %}
          </select>
          <br>
          <label>Name</label>
          {{input_text('name', contract.name)}}
          <br>
          <br>
          Charge script
          <br>
          {{input_textarea('charge_script', contract.charge_script, 40, 80)}}
          <br>
          <br>
          Properties
          <br>
          {{input_textarea('properties', contract.properties, 20, 80)}}
          <br />
          <br />
          <input type="submit" value="Update">
        </fieldset>
      </form>
      <br />
      <form action="{{context_path}}/reports/317/output/">
        <fieldset>
          <legend>Delete this contract</legend>
          <input type="hidden" name="supplier_contract_id" value="{{contract.id}}">
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[319]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Rate Script Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException', 'NotFoundException', 'form_date'],
        'templater': ['render']})


sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        rate_script_id = inv.getLong('supplier_rate_script_id')
        rate_script = RateScript.get_supplier_by_id(sess, rate_script_id)
        render(inv, template, {'rate_script': rate_script})
    else:
        set_read_write(sess)
        rate_script_id = inv.getLong('supplier_rate_script_id')
        rate_script = RateScript.get_supplier_by_id(sess, rate_script_id)
        contract = rate_script.contract
        if inv.hasParameter('delete'):
            contract.delete_rate_script(sess, rate_script)
            sess.commit()
            inv.sendSeeOther('/reports/77/output/?supplier_contract_id='
                + str(contract.id))
        else:
            script = inv.getString('script')
            start_date = form_date(inv, 'start')
            has_finished = inv.getBoolean('has_finished')
            finish_date = form_date(inv, 'finish') if has_finished else None
            contract.update_rate_script(sess, rate_script, start_date, finish_date, script)
            sess.commit()
            inv.sendSeeOther('/reports/79/output/?supplier_rate_script_id='
                    + str(rate_script.id))
except NotFoundException, e:
    inv.sendNotFound(str(e))
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Non-core Contracts &gt;
      {{rate_script.contract.name}} &gt; Rate Scripts &gt;
      {{rate_script.start_date|hh_format}} &gt; Edit
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/75/output/">Supplier Contracts</a> &gt;
      <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{rate_script.contract.id}}">{{rate_script.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/79/output/?supplier_rate_script_id={{rate_script.id}}">Rate Script {{rate_script.start_date|hh_format}}</a> &gt; Edit
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    {% if request.getMethod() == 'GET' and
        request.getParameter('delete') %}
      <form method="post" action=".">
        <fieldset>
          <legend>
            Are you sure you want to delete this rate script?
          </legend>
          <input type="hidden" name="supplier_rate_script_id" value="{{rate_script.id}}">
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p>
        <a href=".">Cancel</a>
      </p>
    {% else %}
      <form action="." method="post">
        <fieldset>
          <legend>Update Rate Script</legend>
          <input type="hidden" name="supplier_rate_script_id"
              value="{{rate_script.id}}">
          <br>
          <fieldset>
            <legend>Start date</legend>
            {{ input_date('start', rate_script.start_date) }}
          </fieldset>
          <br />
          <fieldset>
            <legend>Finish date</legend>
            <label>
              Ended? {{ input_checkbox('has_finished', rate_script.finish_date != None) }}
            </label>
            {{ input_date('finish', rate_script.finish_date) }}
          </fieldset>
          <br>
          <br>
          Script
          <br>
          {{ input_textarea('script', rate_script.script, 40, 80) }}
          <br />
      <br />
      <input type="submit" value="Update">
          <input type="reset" value="Reset">
        </fieldset>
      </form>
      <br />
      <form action=".">
        <fieldset>
          <legend>Delete this Rate Script</legend>
          <input type="hidden" name="rate_script_id"
              value="{{ rate_script.id }}">
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[321]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Bill Imports]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import System
from java.io import InputStreamReader
import StringIO

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater', 'bill_import')


def make_fields(sess, batch, message=None):
    messages = [] if message is None else [str(message)]
    return {'messages': messages, 'importer_ids': sorted(bill_import.get_bill_importer_ids(batch.id), reverse=True), 'batch': batch}

sess = None
try:
    sess = db.session()
    if inv.getRequest().getMethod() == 'GET':
        batch_id = inv.getLong('supplier_batch_id')
        batch = db.Batch.get_by_id(sess, batch_id)
        templater.render(inv, template, make_fields(sess, batch))
    else:
        batch_id = inv.getLong('supplier_batch_id')
        batch = db.Batch.get_by_id(sess, batch_id)
        file_item = inv.getFileItem("import_file")
        stream = InputStreamReader(file_item.getInputStream(), 'utf-8')
        f = StringIO.StringIO()
        bt = stream.read()
        while bt != -1:
            f.write(unichr(bt))
            bt = stream.read()
        f.seek(0)
        id = bill_import.start_bill_importer(sess, batch.id, file_item.getName(), file_item.getSize(), f)
        inv.sendSeeOther("/reports/323/output/?importer_id=" + str(id))
except utils.UserException, e:
    templater.render(inv, template, make_fields(sess, batch, e), 400)
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>
      Chellow &gt; Supplier Contracts &gt; {{batch.contract.name}} &gt;
      Batches &gt; {{batch.reference}} &gt; Bill Imports
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/75/output/">Supplier Contracts</a> &gt;
      <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{batch.contract.id}}">{{batch.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/89/output/?supplier_contract_id={{batch.contract.id}}">Batches</a> &gt;
      <a href="{{context_path}}/reports/91/output/?supplier_batch_id={{batch.id}}">{{batch.reference}}</a> &gt; Bill Imports
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    
    <form enctype="multipart/form-data" method="post" action=".">
      <fieldset>
        <input type="hidden" name="supplier_batch_id" value="{{batch.id}}">
        <legend>Import Bill File</legend>
        <input type="file" name="import_file" size="45"
          value="{{request.getParameter('import_file')}}">
        <input type="submit" value="Import">
      </fieldset>
    </form>
    {% if importer_ids %}
      <ul>
        {% for id in importer_ids %}
          <li>
            <a href="{{context_path}}/reports/323/output/?importer_id={{id}}">{{id}}</a>
          </li>
        {% endfor %}
      </ul>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[323]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Bill Import]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import System
import tempfile

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Batch', 'set_read_write'],
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH'],
        'templater': ['render'],
        'bill_import': ['get_bill_importer']})

def make_fields(sess, importer, message=None):
    messages = None if message is None else [str(message)]
    batch = Batch.get_by_id(sess, importer.batch_id)
    fields = {'batch': batch, 'messages': messages}
    if importer is not None:
        imp_fields = importer.make_fields()
        if 'successful_bills' in imp_fields and len(imp_fields['successful_bills']) > 0:
            fields['successful_max_registers'] = max(len(bill['reads']) for bill in imp_fields['successful_bills'])
        fields.update(imp_fields)
        fields['status'] = importer.status()
    return fields

sess = None
try:
    sess = session()
    imp_id = inv.getLong('importer_id')
    importer = get_bill_importer(imp_id)
    render(inv, template, make_fields(sess, importer))
except UserException, e:
    render(inv, template, make_fields(sess, e), 400)
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Supplier Contracts &gt; {{batch.contract.name}} &gt;
      Batches &gt; {{batch.reference}} &gt; Bill Imports &gt; {{importer_id}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/75/output/">Supplier Contracts</a> &gt;
      <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{batch.contract.id}}">{{batch.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/89/output/?supplier_contract_id={{batch.contract.id}}">Batches</a> &gt;
      <a href="{{context_path}}/reports/91/output/?supplier_batch_id={{batch.id}}">{{batch.reference}}</a> &gt; <a href="{{context_path}}/reports/321/output/?supplier_batch_id={{batch.id}}">Bill Imports</a> &gt; {{importer_id}}
    </p>
    <br>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    {% if is_alive %}
      <p>Still running. Refresh the page to see latest progress.</p>
    {% endif %}

    {% if status is defined %}
      <p>{{status}}</p>
    {% endif %}

    <ul>
      {% for msg in log %}
        <li>{{msg}}</li>
      {% endfor %}
    </ul>
    
    {% if failed_bills|length > 0 %}
      <table>
        <caption>Failed Bills</caption>
        <thead>
          <tr>
            <th>Error</th>
            <th>Account</th>
            <th>Reference</th>
            <th>Bill Type Code</th>
            <th>Issue Date</th>
            <th>Start Date</th>
            <th>Finish Date</th>
            <th>kWh</th>
            <th>Net</th>
            <th>VAT</th>
            <th>Gross</th>
            <th>Breakdown</th>
            <th>Reads</th>
          </tr>
        </thead>
        <tbody>
          {% for bill in failed_bills %}
            <tr>
              <td>{{bill.error}}</td>
              <td>{{bill.account}}</td>
              <td>{{bill.reference}}</td>
              <td>{{bill.bill_type_code}}</td>
              <td>{{bill.issue_date|hh_format}}</td>
              <td>{{bill.start_date|hh_format}}</td>
              <td>{{bill.finish_date|hh_format}}</td>
              <td>{{bill.kwh}}</td>
              <td>{{bill.net}}</td>
              <td>{{bill.vat}}</td>
              <td>{{bill.gross}}</td>
              <td>{{bill.breakdown}}</td>
              <td>{{bill.reads}}</td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    {% endif %}

    {% if successful_bills|length > 0 %}
      <table>
        <caption>Successful Bills</caption>
        <thead>
          <tr>
            <th>Reference</th>
            <th>Account</th>
            <th>Bill Type</th>
            <th>MPANs</th>
            <th>Issue Date</th>
            <th>Start Date</th>
            <th>Finish Date</th>
            <th>kWh</th>
            <th>Net</th>
            <th>VAT</th>
            <th>Gross</th>
            {% for i in range(successful_max_registers) %}
              <th>R{{loop.index}} MPAN</th>
              <th>R{{loop.index}} Meter Serial Number</th>
              <th>R{{loop.index}} Coefficient</th>
              <th>R{{loop.index}} Units</th>
              <th>R{{loop.index}} TPR</th>
              <th>R{{loop.index}} Previous Read Date</th>
              <th>R{{loop.index}} Previous Read Value</th>
              <th>R{{loop.index}} Previous Read Type</th>
              <th>R{{loop.index}} Present Read Date</th>
              <th>R{{loop.index}} Present Read Value</th>
              <th>R{{loop.index}} Present Read Type</th>
            {% endfor %}
            <th>Breakdown</th>
          </tr>
        </thead>
        <tbody>
          {% for bill in successful_bills %}
            <tr>
              <td>{{bill.reference}}</td>
              <td>{{bill.account}}</td>
              <td>{{bill.bill_type_code}}</td>
              <td>{{bill.mpans}}</td>
              <td>{{bill.issue_date|hh_format}}</td>
              <td>{{bill.start_date|hh_format}}</td>
              <td>{{bill.finish_date|hh_format}}</td>
              <td>{{bill.kwh}}</td>
              <td>{{bill.net}}</td>
              <td>{{bill.vat}}</td>
              <td>{{bill.gross}}</td>
              {% for read in bill.reads %}
                <td>{{read.mpan}}</td>
                <td>{{read.msn}}</td>
                <td>{{read.coefficient}}</td>
                <td>{{read.units}}</td>
                <td>{{read.tpr_code}}</td>
                <td>{{read.prev_date|hh_format}}</td>
                <td>{{read.prev_value}}</td>
                <td>{{read.prev_type_code}}</td>
                <td>{{read.pres_date|hh_format}}</td>
                <td>{{read.pres_value}}</td>
                <td>{{read.pres_type_code}}</td>
              {% endfor %}
              <td>{{bill.breakdown}}</td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[325]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Rate Script Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})

def page_fields(contract, message=None):
    now = datetime.now(pytz.utc)
    initial_date = datetime(now.year, now.month, 1, tzinfo=pytz.utc)
    messages = None if message is None else [message]
    return {'contract': contract, 'initial_date': initial_date,
        'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        contract_id = inv.getLong('supplier_contract_id')
        contract = Contract.get_supplier_by_id(sess, contract_id)
        render(inv, template, page_fields(contract))
    else:
        set_read_write(sess)
        contract_id = inv.getLong('supplier_contract_id')
        contract = Contract.get_supplier_by_id(sess, contract_id)
        start_date = form_date(inv, 'start')
        rate_script = contract.insert_rate_script(sess, start_date, '')
        sess.commit()
        inv.sendSeeOther('/reports/79/output/?supplier_rate_script_id='
                + str(rate_script.id))
except UserException, e:
        render(inv, template, page_fields(contract, str(e)), 400)
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Supplier Contracts &gt; {{contract.name}}
      &gt; Add Rate Script
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/75/output/">Supplier Contracts</a>
      &gt;
      <a href="{{context_path}}/reports/77/output/?supplier_contract_id={{contract.id}}">{{contract.name}}</a>
      &gt; Add Rate Script
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br />
    <form action="." method="post">
      <fieldset>
        <legend>Add a rate script</legend>
        <input type="hidden" name="supplier_contract_id" value="{{contract.id}}">
        <br>
        <fieldset>
          <legend>Start Date</legend>
          {{input_date('start', initial_date)}}
        </fieldset>
        <br>
        <br>
        <input type="submit" value="Add">
      </fieldset>
    </form>
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[327]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Bill Imports]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import System
from java.io import InputStreamReader
import StringIO

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Batch', 'set_read_write'],
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH'],
        'templater': ['render'],
        'bill_import': ['start_bill_importer', 'get_bill_importer_ids', 'get_bill_importer']})


def make_fields(sess, batch, message=None):
    messages = [] if message is None else [str(message)]
    return {'messages': messages, 'importer_ids': sorted(get_bill_importer_ids(batch.id), reverse=True), 'batch': batch}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        batch_id = inv.getLong('hhdc_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        render(inv, template, make_fields(sess, batch))
    else:
        batch_id = inv.getLong('hhdc_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        file_item = inv.getFileItem("import_file")
        stream = InputStreamReader(file_item.getInputStream(), 'utf-8')
        f = StringIO.StringIO()
        bt = stream.read()
        while bt != -1:
            f.write(chr(bt))
            bt = stream.read()
        f.seek(0)
        id = start_bill_importer(sess, batch.id, file_item.getName(), file_item.getSize(), f)
        inv.sendSeeOther("/reports/329/output/?importer_id=" + str(id))
except UserException, e:
    render(inv, template, make_fields(sess, batch, e), 400)
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>
      Chellow &gt; HHDC Contracts &gt; {{batch.contract.name}} &gt;
      Batches &gt; {{batch.reference}} &gt; Bill Imports
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{context_path}}/reports/115/output/?hhdc_contract_id={{batch.contract.id}}">{{batch.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/93/output/?hhdc_contract_id={{batch.contract.id}}">Batches</a> &gt;
      <a href="{{context_path}}/reports/203/output/?hhdc_batch_id={{batch.id}}">{{batch.reference}}</a> &gt; Bill Imports
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    
    <form enctype="multipart/form-data" method="post" action=".">
      <fieldset>
        <input type="hidden" name="hhdc_batch_id" value="{{batch.id}}">
        <legend>Import Bill File</legend>
        <input type="file" name="import_file" size="45"
          value="{{request.getParameter('import_file')}}">
        <input type="submit" value="Import">
      </fieldset>
    </form>
    {% if importer_ids %}
      <ul>
        {% for id in importer_ids %}
          <li>
            <a href="{{context_path}}/reports/329/output/?importer_id={{id}}">{{id}}</a>
          </li>
        {% endfor %}
      </ul>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[329]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Bill Import]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import System
import tempfile

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Batch', 'set_read_write'],
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH'],
        'templater': ['render'],
        'bill_import': ['get_bill_importer']})

def make_fields(sess, importer, message=None):
    messages = None if message is None else [str(message)]
    batch = Batch.get_by_id(sess, importer.batch_id)
    fields = {'batch': batch, 'messages': messages}
    if importer is not None:
        imp_fields = importer.make_fields()
        if 'successful_bills' in imp_fields and len(imp_fields['successful_bills']) > 0:
            fields['successful_max_registers'] = max(len(bill['reads']) for bill in imp_fields['successful_bills'])
        fields.update(imp_fields)
        fields['status'] = importer.status()
    return fields

sess = None
try:
    sess = session()
    imp_id = inv.getLong('importer_id')
    importer = get_bill_importer(imp_id)
    render(inv, template, make_fields(sess, importer))
except UserException, e:
    render(inv, template, make_fields(sess, e), 400)
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; HHDC Contracts &gt; {{batch.contract.name}} &gt;
      Batches &gt; {{batch.reference}} &gt; Bill Imports &gt; {{importer_id}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{context_path}}/reports/115/output/?hhdc_contract_id={{batch.contract.id}}">{{batch.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/93/output/?hhdc_contract_id={{batch.contract.id}}">Batches</a> &gt;
      <a href="{{context_path}}/reports/203/output/?hhdc_batch_id={{batch.id}}">{{batch.reference}}</a> &gt;
      <a href="{{context_path}}/reports/327/output/?hhdc_batch_id={{batch.id}}">Bill Imports</a> &gt; {{importer_id}}
    </p>
    <br>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    {% if is_alive %}
      <p>Still running. Refresh the page to see latest progress.</p>
    {% endif %}

    {% if status is defined %}
      <p>{{status}}</p>
    {% endif %}

    <ul>
      {% for msg in log %}
        <li>{{msg}}</li>
      {% endfor %}
    </ul>
    
    {% if failed_bills|length > 0 %}
      <table>
        <caption>Failed Bills</caption>
        <thead>
          <tr>
            {% for k, v in failed_bills[0]|dictsort %}
              <th>{{k}}</th>
            {% endfor %}
          </tr>
        </thead>
        <tbody>
          {% for bill in failed_bills %}
            <tr>
              {% for k, v in bill|dictsort %}
                <td>{{bill[k]}}</td>
              {% endfor %}
            </tr>
          {% endfor %}
        </tbody>
      </table>
    {% endif %}

    {% if successful_bills|length > 0 %}
      <table>
        <caption>Successful Bills</caption>
        <thead>
          <tr>
            <th>Reference</th>
            <th>Account</th>
            <th>Bill Type</th>
            <th>MPANs</th>
            <th>Issue Date</th>
            <th>Start Date</th>
            <th>Finish Date</th>
            <th>kWh</th>
            <th>Net</th>
            <th>VAT</th>
            <th>Gross</th>
            {% for i in range(successful_max_registers) %}
              <th>R{{loop.index}} MPAN</th>
              <th>R{{loop.index}} Meter Serial Number</th>
              <th>R{{loop.index}} Coefficient</th>
              <th>R{{loop.index}} Units</th>
              <th>R{{loop.index}} TPR</th>
              <th>R{{loop.index}} Previous Read Date</th>
              <th>R{{loop.index}} Previous Read Value</th>
              <th>R{{loop.index}} Previous Read Type</th>
              <th>R{{loop.index}} Present Read Date</th>
              <th>R{{loop.index}} Present Read Value</th>
              <th>R{{loop.index}} Present Read Type</th>
            {% endfor %}
            <th>Breakdown</th>
          </tr>
        </thead>
        <tbody>
          {% for bill in successful_bills %}
            <tr>
              <td>{{bill.reference}}</td>
              <td>{{bill.account}}</td>
              <td>{{bill.bill_type_code}}</td>
              <td>{{bill.mpans}}</td>
              <td>{{bill.issue_date|hh_format}}</td>
              <td>{{bill.start_date|hh_format}}</td>
              <td>{{bill.finish_date|hh_format}}</td>
              <td>{{bill.kwh}}</td>
              <td>{{bill.net}}</td>
              <td>{{bill.vat}}</td>
              <td>{{bill.gross}}</td>
              {% for read in bill.reads %}
                <td>{{read.mpan}}</td>
                <td>{{read.msn}}</td>
                <td>{{read.coefficient}}</td>
                <td>{{read.units}}</td>
                <td>{{read.tpr_code}}</td>
                <td>{{read.prev_date|hh_format}}</td>
                <td>{{read.prev_value}}</td>
                <td>{{read.prev_type_code}}</td>
                <td>{{read.pres_date|hh_format}}</td>
                <td>{{read.pres_value}}</td>
                <td>{{read.pres_type_code}}</td>
              {% endfor %}
              <td>{{bill.breakdown}}</td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[331]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MOP Bill Imports]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import System
from java.io import InputStreamReader
import StringIO

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Batch', 'set_read_write'],
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH'],
        'templater': ['render'],
        'bill_import': ['start_bill_importer', 'get_bill_importer_ids', 'get_bill_importer']})


def make_fields(sess, batch, message=None):
    messages = [] if message is None else [str(message)]
    return {'messages': messages, 'importer_ids': sorted(get_bill_importer_ids(batch.id), reverse=True), 'batch': batch}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        batch_id = inv.getLong('mop_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        render(inv, template, make_fields(sess, batch))
    else:
        batch_id = inv.getLong('mop_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        file_item = inv.getFileItem("import_file")
        stream = InputStreamReader(file_item.getInputStream(), 'utf-8')
        f = StringIO.StringIO()
        bt = stream.read()
        while bt != -1:
            f.write(chr(bt))
            bt = stream.read()
        f.seek(0)
        id = start_bill_importer(sess, batch.id, file_item.getName(), file_item.getSize(), f)
        inv.sendSeeOther("/reports/333/output/?importer_id=" + str(id))
except UserException, e:
    render(inv, template, make_fields(sess, batch, e), 400)
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>
      Chellow &gt; MOP Contracts &gt; {{batch.contract.name}} &gt;
      Batches &gt; {{batch.reference}} &gt; Bill Imports
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/185/output/">MOP Contracts</a> &gt;
      <a href="{{context_path}}/reports/107/output/?mop_contract_id={{batch.contract.id}}">{{batch.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/191/output/?mop_contract_id={{batch.contract.id}}">Batches</a> &gt;
      <a href="{{context_path}}/reports/193/output/?mop_batch_id={{batch.id}}">{{batch.reference}}</a> &gt; Bill Imports
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    
    <form enctype="multipart/form-data" method="post" action=".">
      <fieldset>
        <input type="hidden" name="mop_batch_id" value="{{batch.id}}">
        <legend>Import Bill File</legend>
        <input type="file" name="import_file" size="45"
          value="{{request.getParameter('import_file')}}">
        <input type="submit" value="Import">
      </fieldset>
    </form>
    {% if importer_ids %}
      <ul>
        {% for id in importer_ids %}
          <li>
            <a href="{{context_path}}/reports/333/output/?importer_id={{id}}">{{id}}</a>
          </li>
        {% endfor %}
      </ul>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[333]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MOP Bill Import]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import System
import tempfile

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Batch', 'set_read_write'],
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH'],
        'templater': ['render'],
        'bill_import': ['get_bill_importer']})

def make_fields(sess, importer, message=None):
    messages = None if message is None else [str(message)]
    batch = Batch.get_by_id(sess, importer.batch_id)
    fields = {'batch': batch, 'messages': messages}
    if importer is not None:
        imp_fields = importer.make_fields()
        if 'successful_bills' in imp_fields and len(imp_fields['successful_bills']) > 0:
            fields['successful_max_registers'] = max(len(bill['reads']) for bill in imp_fields['successful_bills'])
        fields.update(imp_fields)
        fields['status'] = importer.status()
    return fields

sess = None
try:
    sess = session()
    imp_id = inv.getLong('importer_id')
    importer = get_bill_importer(imp_id)
    render(inv, template, make_fields(sess, importer))
except UserException, e:
    render(inv, template, make_fields(sess, importer, e), 400)
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; MOP Contracts &gt; {{batch.contract.name}} &gt;
      Batches &gt; {{batch.reference}} &gt; Bill Imports &gt; {{importer_id}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/185/output/">MOP Contracts</a> &gt;
      <a href="{{context_path}}/reports/107/output/?mop_contract_id={{batch.contract.id}}">{{batch.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/191/output/?mop_contract_id={{batch.contract.id}}">Batches</a> &gt;
      <a href="{{context_path}}/reports/193/output/?mop_batch_id={{batch.id}}">{{batch.reference}}</a> &gt;
      <a href="{{context_path}}/reports/331/output/?mop_batch_id={{batch.id}}">Bill Imports</a> &gt; {{importer_id}}
    </p>
    <br>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    {% if is_alive %}
      <p>Still running. Refresh the page to see latest progress.</p>
    {% endif %}

    {% if status is defined %}
      <p>{{status}}</p>
    {% endif %}

    <ul>
      {% for msg in log %}
        <li>{{msg}}</li>
      {% endfor %}
    </ul>
    
    {% if failed_bills|length > 0 %}
      <table>
        <caption>Failed Bills</caption>
        <thead>
          <tr>
            {% for k, v in failed_bills[0]|dictsort %}
              <th>{{k}}</th>
            {% endfor %}
          </tr>
        </thead>
        <tbody>
          {% for bill in failed_bills %}
            <tr>
              {% for k, v in bill|dictsort %}
                <td>{{bill[k]}}</td>
              {% endfor %}
            </tr>
          {% endfor %}
        </tbody>
      </table>
    {% endif %}

    {% if successful_bills|length > 0 %}
      <table>
        <caption>Successful Bills</caption>
        <thead>
          <tr>
            <th>Reference</th>
            <th>Account</th>
            <th>Bill Type</th>
            <th>MPANs</th>
            <th>Issue Date</th>
            <th>Start Date</th>
            <th>Finish Date</th>
            <th>kWh</th>
            <th>Net</th>
            <th>VAT</th>
            <th>Gross</th>
            {% for i in range(successful_max_registers) %}
              <th>R{{loop.index}} MPAN</th>
              <th>R{{loop.index}} Meter Serial Number</th>
              <th>R{{loop.index}} Coefficient</th>
              <th>R{{loop.index}} Units</th>
              <th>R{{loop.index}} TPR</th>
              <th>R{{loop.index}} Previous Read Date</th>
              <th>R{{loop.index}} Previous Read Value</th>
              <th>R{{loop.index}} Previous Read Type</th>
              <th>R{{loop.index}} Present Read Date</th>
              <th>R{{loop.index}} Present Read Value</th>
              <th>R{{loop.index}} Present Read Type</th>
            {% endfor %}
            <th>Breakdown</th>
          </tr>
        </thead>
        <tbody>
          {% for bill in successful_bills %}
            <tr>
              <td>{{bill.reference}}</td>
              <td>{{bill.account}}</td>
              <td>{{bill.bill_type_code}}</td>
              <td>{{bill.mpans}}</td>
              <td>{{bill.issue_date|hh_format}}</td>
              <td>{{bill.start_date|hh_format}}</td>
              <td>{{bill.finish_date|hh_format}}</td>
              <td>{{bill.kwh}}</td>
              <td>{{bill.net}}</td>
              <td>{{bill.vat}}</td>
              <td>{{bill.gross}}</td>
              {% for read in bill.reads %}
                <td>{{read.mpan}}</td>
                <td>{{read.msn}}</td>
                <td>{{read.coefficient}}</td>
                <td>{{read.units}}</td>
                <td>{{read.tpr_code}}</td>
                <td>{{read.prev_date|hh_format}}</td>
                <td>{{read.prev_value}}</td>
                <td>{{read.prev_type_code}}</td>
                <td>{{read.pres_date|hh_format}}</td>
                <td>{{read.pres_value}}</td>
                <td>{{read.pres_type_code}}</td>
              {% endfor %}
              <td>{{bill.breakdown}}</td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[335]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Chellow Log]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException', 'clogs'],
        'templater': ['render']})

render(inv, template, {'clogs': clogs})]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>Chellow &gt; Log</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      Log
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    
    <ul>
      {% for clog in clogs %}
        <li>{{clog}}</li>
      {% endfor %}
    </ul>
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[337]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Sources]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Source', 'MarketRole', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    sources = sess.query(Source).order_by(Source.code).all()
    render(inv, template, {'sources': sources})
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; Sources</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt; Sources
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <thead>
        <tr>
          <th>Code</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {% for source in sources %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/339/output/?source_id={{source.id}}">{{source.code}}</a>
            </td>
            <td>{{source.name}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[339]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Source]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'Source', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    source_id = inv.getLong('source_id')
    source = Source.get_by_id(sess, source_id)
    render(inv, template, {'source': source})
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; Sources &gt; {{source.code}}</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/337/output/">Sources</a> &gt;
      {{source.name}}
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tr>
        <th>Code</th>
        <td>{{source.code}}</td>
      </tr>
      <tr>
        <th>Description</th>
        <td>{{source.name}}</td>
      </tr>
    </table>
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[341]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Generator Types]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'GeneratorType', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    generator_types = sess.query(GeneratorType).order_by(GeneratorType.code)
    render(inv, template, {'generator_types': generator_types})
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; Generator Types</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      Generator Types
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <thead>
        <tr>
          <th>Code</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {% for generator_type in generator_types %}
          <tr>
            <td>
              <a href="{{context_path}}/reports/343/output/?generator_type_id={{generator_type.id}}">{{generator_type.code}}</a>
            </td>
            <td>{{generator_type.description}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[343]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Generator Type]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'GeneratorType', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    generator_type_id = inv.getLong('generator_type_id')
    generator_type = GeneratorType.get_by_id(sess, generator_type_id)
    render(inv, template, {'generator_type': generator_type})
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; Generator Types &gt; {{generator_type.code}}</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/341/output/">Generator Types</a> &gt;
      {{generator_type.code}}
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <table>
      <tr>
        <th>Code</th>
        <td>{{generator_type.code}}</td>
      </tr>
      <tr>
        <th>Description</th>
        <td>{{generator_type.description}}</td>
      </tr>
    </table>
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[345]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Bill]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import collections
from java.lang import System

Monad.getUtils()['imprt'](globals(), {
        'db': ['Bill', 'RegisterRead', 'Era', 'set_read_write', 'session'], 
        'utils': ['UserException'],
        'templater': ['render']})

sess = None
try:
    sess = session()
    bill_id = inv.getLong('hhdc_bill_id')
    bill = Bill.get_by_id(sess, bill_id)
    fields = {'bill': bill}
    try:
        breakdown_dict = eval(bill.breakdown, {})
        
        raw_lines = []
        for key in ('raw_lines', 'raw-lines'):
            try:
                raw_lines += breakdown_dict[key]
                del breakdown_dict[key]
            except KeyError:
                pass

        rows = set()
        columns = set()
        grid = collections.defaultdict(dict)

        for k, v in breakdown_dict.items():
            if k.endswith('-gbp'):
                columns.add('gbp')
                row_name = k[:-4]
                rows.add(row_name)
                grid[row_name]['gbp'] = v
                del breakdown_dict[k]

        for k, v in breakdown_dict.items():
            for row_name in sorted(list(rows), key=len, reverse=True):
                if k.startswith(row_name + '-'):
                    col_name = k[len(row_name) + 1:]
                    columns.add(col_name)
                    grid[row_name][col_name] = v
                    del breakdown_dict[k]
                    break

        for k, v in breakdown_dict.items():    
            pair = k.split('-')
            row_name = '-'.join(pair[:-1])
            column_name = pair[-1]
            rows.add(row_name)
            columns.add(column_name)
            grid[row_name][column_name] = v

        column_list = sorted(list(columns))
        for rate_name in [col for col in column_list if col.endswith('rate')]:
            column_list.remove(rate_name)
            column_list.append(rate_name)

        if 'gbp' in column_list:
            column_list.remove('gbp')
            column_list.append('gbp')

        row_list = sorted(list(rows))
        fields.update({'raw_lines': raw_lines, 'row_list': row_list, 'column_list': column_list, 'grid': grid})
    except SyntaxError, e:
        pass
    render(inv, template, fields)
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; HHDC Contracts &gt; {{bill.batch.contract.name}} &gt;
      Batches &gt; {{bill.batch.reference}} &gt; {{bill.reference}}
    </title>
    </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{context_path}}/reports/115/output/?hhdc_contract_id={{bill.batch.contract.id}}">{{bill.batch.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/93/output/?hhdc_contract_id={{bill.batch.contract.id}}">Batches</a> &gt;
      <a href="{{context_path}}/reports/203/output/?hhdc_batch_id={{bill.batch.id}}">
      {{bill.batch.reference}}</a> &gt;
      Bill {{bill.id}}
      [<a href="{{context_path}}/reports/347/output/?hhdc_bill_id={{bill.id}}">edit</a>]
    </p>
   {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br>
    <table><caption>Bill</caption>
      <thead>
        <tr>
          <th>Supply</th>
          <th>Reference</th>
          <th>Account</th>
          <th>Issue Date</th>
          <th>From</th>
          <th>To</th>
          <th>kWh</th>
          <th>Net</th>
          <th>VAT</th>
          <th>Gross</th>
          <th>Type</th>
          <th>Check</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>
            <a href="{{context_path}}/reports/7/output/?supply_id={{bill.supply.id}}">Supply</a>
          </td>
          <td>{{bill.reference}}</td>
          <td>{{bill.account}}</td>
          <td>{{bill.issue_date.strftime('%Y-%m-%d %H:%M')}}</td>
          <td>{{bill.start_date|hh_format }}</td>
          <td>{{bill.finish_date|hh_format }}</td>
          <td>{{bill.kwh}}</td>
          <td>{{bill.net}}</td>
          <td>{{bill.vat}}</td>
          <td>{{bill.gross}}</td>
          <td>
            <a href="{{context_path}}/reports/201/output/?bill_type_id={{bill.bill_type.id}}" title="{{bill.bill_type.description}}">{{bill.bill_type.code}}</a>
          </td>
          <td>
            <a href="{{context_path}}/reports/111/output/?bill_id={{bill.id}}">Check</a>
          </td>
        </tr>
      </tbody>
    </table>
    <h3>Breakdown</h3>

    <pre>
      {%- for line in raw_lines -%}
        {{line}}<br>
      {%- endfor -%}
    </pre>
    <br>

    <table>
      <thead>
        <tr>
          <th>element</th>
          {% for col in column_list %}
            <th>{{col}}</th>
          {% endfor %}
        </tr>  
      </thead>
      <tbody>
        {% for row in row_list %}
          <tr>
            <td>{{row}}</td>
            {% for col in column_list %}
              <td>{{grid[row][col]}}</td>
            {% endfor %}
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[347]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Bill Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from sqlalchemy.sql.expression import text
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Bill', 'BillType', 'Batch', 'Participant', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date', 'form_decimal'],
        'templater': ['render']})


def make_fields(sess, bill, message=None):
    bill_types = sess.query(BillType).order_by(BillType.code).all()
    messages = [] if message is None else [str(message)]
    return {'bill': bill, 'bill_types': bill_types, 'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        bill_id = inv.getLong('hhdc_bill_id')
        bill = Bill.get_by_id(sess, bill_id)
        render(inv, template, make_fields(sess, bill))
    else:
        set_read_write(sess)
        bill_id = inv.getLong('hhdc_bill_id')
        bill = Bill.get_by_id(sess, bill_id)
        if inv.hasParameter('update'):
            account = inv.getString("account")
            reference = inv.getString("reference")
            issue_date = form_date(inv, "issue")
            start_date = form_date(inv, "start")
            finish_date = form_date(inv, "finish")
            kwh = form_decimal(inv, "kwh")
            net = form_decimal(inv, "net")
            vat = form_decimal(inv, "vat")
            gross = form_decimal(inv, "gross")
            type_id = inv.getLong("bill_type_id")
            breakdown = inv.getString("breakdown")
            bill_type = BillType.get_by_id(sess, type_id)

            bill.update(account, reference, issue_date, start_date, finish_date, kwh, net, vat, gross, bill_type, breakdown)
            sess.commit()
            inv.sendSeeOther("/reports/345/output/?hhdc_bill_id=" + str(bill.id))
        elif inv.hasParameter("delete"):
            bill.delete(sess)
            sess.commit()
            inv.sendSeeOther("/reports/203/output/?hhdc_batch_id=" + str(bill.batch.id))
except UserException, e:
    render(inv, template, make_fields(sess, bill, e))
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; HHDC Contracts &gt; {{bill.batch.contract.name}} &gt;
      Batches &gt; {{bill.batch.reference}} &gt; Bills &gt; {{bill.id}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{context_path}}/reports/115/output/?hhdc_contract_id={{bill.batch.contract.id}}">{{bill.batch.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/93/output/?hhdc_contract_id={{bill.batch.contract.id}}">Batches</a> &gt;
      <a href="{{context_path}}/reports/203/output/?hhdc_batch_id={{bill.batch.id}}">{{bill.batch.reference}}</a> &gt;
      <a href="{{context_path}}/reports/345/output/?hhdc_bill_id={{bill.id}}">Bill {{bill.id}}</a> &gt;
      Edit
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br>
    {% if request.getParameter('confirm_delete') %}
      <form method="post" action=".">
        <fieldset>
          <legend>Are you sure you want to delete this bill?</legend>
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p><a href=".">Cancel</a></p>
    {% else %}
      <form action="." method="post">
        <fieldset>
          <input type="hidden" name="hhdc_bill_id" value="{{bill.id}}">
          <legend>Update This Bill</legend>
          <p>
            <a href="{{context_path}}/reports/7/output/?supply_id={{bill.supply.id}}">Supply</a>
          </p>
          <label>
            Reference {{input_text('reference', bill.reference)}}
          </label>
          <br>
          <label>
            Account {{input_text('account', bill.account)}}
          </label>
          <br><br>
          <fieldset>
            <legend>Issue Date</legend>
            {{input_date('issue', bill.issue_date)}}
          </fieldset>
          <br>
          <fieldset>
            <legend>Start Date</legend>
            {{input_date('start', bill.start_date)}}
          </fieldset>
          <br>
          <fieldset>
            <legend>Finish Date</legend>
            {{input_date('finish', bill.finish_date)}}
          </fieldset>
          <br>
          <label>
            kWh {{input_text('kwh', '' ~ bill.kwh)}}
          </label>
          <br>
          <label>
            Net {{input_text('net', '' ~ bill.net)}}
          </label>
          <br>
          <label>
            VAT {{input_text('vat', '' ~ bill.vat)}}
          </label>
          <br>
          <label>Gross {{input_text('gross', '' ~ bill.gross)}}</label>
          <br>
          <label>Type
            <select name="bill_type_id">
              {% for type in bill_types %}
                {{input_option('type_id', type.id, type.code + ' ' + type.description, initial=bill.bill_type.id)}}
              {% endfor %}
            </select>
          </label>
          <br><br>
          <label>
            Breakdown <br>
            {{input_textarea('breakdown', bill.breakdown, 10, 80)}}
          </label>
          <br>
          Example Breakdown

          <pre>
{'raw_lines': ['"net-gbp", "unrestricted-kwh", "unrestricted-rate", "unrestricted-gbp"',
 '"100", "1000", "0.1", "100"'],
 'unrestricted-kwh': 1000, 'unrestricted-rate': 0.1, 'unrestricted-gbp': 100}          </pre>
          <br>
          <input type="submit" name="update" value="Update">
        </fieldset>
      </form>
      <br>
      <form action=".">
        <fieldset>
          <legend>Delete This Bill</legend>
          <input type="hidden" name="hhdc_bill_id" value="{{bill.id}}">
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[349]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Bill Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Batch', 'Supply', 'BillType', 'Bill', 'set_read_write'],
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH', 'parse_mpan_core', 'form_date', 'form_decimal', 'validate_hh_start'],
        'templater': ['render']})


def make_fields(sess, batch, message=None):
    bill_types = sess.query(BillType).order_by(BillType.code)
    bills = sess.query(Bill).filter(Bill.batch == batch).order_by(Bill.start_date)
    messages = [] if message is None else [str(e)]
    return {'batch': batch, 'bill_types': bill_types, 'messages': messages, 'bills': bills}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        batch_id = inv.getLong('hhdc_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        render(inv, template, make_fields(sess, batch))
    else:
        set_read_write(sess)
        batch_id = inv.getLong('hhdc_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        mpan_core = inv.getString("mpan_core")
        mpan_core = parse_mpan_core(mpan_core)
        account = inv.getString("account")
        reference = inv.getString("reference")
        issue_date = form_date(inv, "issue")
        start_date = form_date(inv, "start")
        validate_hh_start(start_date)
        finish_date = form_date(inv, "finish")
        validate_hh_start(finish_date)
        kwh = form_decimal(inv, "kwh")
        net = form_decimal(inv, "net")
        vat = form_decimal(inv, "vat")
        gross = form_decimal(inv, "gross")
        bill_type_id = inv.getLong("bill_type_id")
        bill_type = BillType.get_by_id(sess, bill_type_id)
        breakdown_str = inv.getString("breakdown")

        breakdown = eval(breakdown_str)
        bill_type = BillType.get_by_id(sess, bill_type_id)
        bill = batch.insert_bill(sess, account, reference, issue_date, start_date, finish_date, kwh, net, vat, gross, bill_type, breakdown, Supply.get_by_mpan_core(sess, mpan_core))
        sess.commit()
        inv.sendSeeOther("/reports/345/output/?hhdc_bill_id=" + str(bill.id))

except UserException, e:
    sess.rollback()
    render(inv, template, make_fields(sess, batch, e), 400)
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>
      Chellow &gt; HHDC Contracts &gt; {{batch.contract.name}} &gt;
      Batches &gt; {{batch.reference}} &gt; Add Bill
    </title>
    <style>
      label {
        width: 6em;
        float: left;
      }
    </style>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{context_path}}/reports/115/output/?hhdc_contract_id={{batch.contract.id}}">{{batch.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/93/output/?hhdc_contract_id={{batch.contract.id}}">Batches</a> &gt;
      <a href="{{context_path}}/reports/203/output/?hhdc_batch_id={{batch.id}}">{{batch.reference}}</a> &gt;
      Add Bill
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <form action="." method="post">
      <fieldset>
        <input type="hidden" name="hhdc_batch_id" value="{{batch.id}}">
        <legend>Add a bill</legend>
        <br>
        <label>MPAN Core</label>
        {{input_text('mpan_core')}}
        <br>
        <label>Reference</label>
        {{input_text('reference')}}
        <br>
        <br>
        <fieldset>
          <legend>Issue Date</legend>
          {{input_date('issue')}}
        </fieldset>
        <br>
        <fieldset>
          <legend>Start Date</legend>
          {{input_date('start')}}
        </fieldset>
        <br>
        <fieldset>
          <legend>Finish Date</legend>
          {{input_date('finish')}}
        </fieldset>
        <br>
        <label>kWh</label>
        {{input_text('kwh', '0')}}
        <br>
        <label>Net</label>
        {{input_text('net', '0')}}
        <br>
        <label>VAT</label>
        {{input_text('vat', '0')}}
        <br>
        <label>Gross</label>
        {{input_text('gross', '0')}}
        <br>
        <label>Account</label>
        {{input_text('account', '0')}}
        <br>
        <label>Type</label>
        <select name="bill_type_id">
          {% for bill_type in bill_types %}
            {{input_option('bill_type_id', bill_type.id, bill_type.code, bill_type.description)}}
          {% endfor %}
        </select>
        <br>
        <label>Breakdown</label>
        {{input_text('breakdown', '{}')}}
        <br>
        <br>
        <input type="submit" value="Add">
      </fieldset>
    </form>
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[351]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MOP Rate Script Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'RateScript', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})

def page_fields(contract, message=None):
    now = datetime.now(pytz.utc)
    initial_date = datetime(now.year, now.month, 1, tzinfo=pytz.utc)
    messages = None if message is None else [message]
    return {'contract': contract, 'initial_date': initial_date,
        'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        contract_id = inv.getLong('mop_contract_id')
        contract = Contract.get_mop_by_id(sess, contract_id)
        render(inv, template, page_fields(contract))
    else:
        set_read_write(sess)
        contract_id = inv.getLong('mop_contract_id')
        contract = Contract.get_mop_by_id(sess, contract_id)
        start_date = form_date(inv, 'start')
        rate_script = contract.insert_rate_script(sess, start_date, '')
        sess.commit()
        inv.sendSeeOther('/reports/205/output/?mop_rate_script_id='
                + str(rate_script.id))
except UserException, e:
        render(inv, template, page_fields(contract, str(e)))
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; MOP Contracts &gt; {{contract.name}} &gt; Add Rate Script
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/185/output/">MOP Contracts</a> &gt;
      <a href="{{context_path}}/reports/107/output/?mop_contract_id={{contract.id}}">{{contract.name}}</a>
      &gt; Add Rate Scripts
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br />
    <form action="." method="post">
      <fieldset>
        <legend>Add a rate script</legend>
        <input type="hidden" name="mop_contract_id" value="{{contract.id}}">
        <br>
        <fieldset>
          <legend>Start Date</legend>
          {{ input_date('start', initial_date) }}
        </fieldset>
        <br>
        <br>
        <input type="submit" value="Add">
      </fieldset>
    </form>
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[353]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MOP Batch Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Batch', 'set_read_write'],
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH'],
        'templater': ['render']})


def make_fields(sess, contract, message=None):
        batches = sess.query(Batch).filter(Batch.contract == contract).order_by(Batch.reference.desc())
        messages = None if message is None else [str(e)]
        return {'contract': contract, 'batches': batches, 'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        contract_id = inv.getLong('mop_contract_id')
        contract = Contract.get_mop_by_id(sess, contract_id)
        render(inv, template, make_fields(sess, contract))
    else:
        set_read_write(sess)
        contract_id = inv.getLong('mop_contract_id')
        contract = Contract.get_mop_by_id(sess, contract_id)
        reference = inv.getString("reference")
        description = inv.getString("description")

        batch = contract.insert_batch(sess, reference, description)
        sess.commit()
        inv.sendSeeOther("/reports/193/output/?mop_batch_id=" + str(batch.id))

except UserException, e:
    render(inv, template, make_fields(sess, contract, e))
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; MOP Contracts &gt; {{contract.name}} &gt; Batches &gt; Add
    </title>
    <style>
      label {
        width: 6em;
        float: left;
      }
    </style>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/185/output/">MOP Contracts</a> &gt;
      <a href="{{ context_path }}/reports/107/output/?mop_contract_id={{contract.id}}">{{contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/191/output/?mop_contract_id={{contract.id}}">Batches</a>
      &gt; Add
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <form action="." method="post">
      <fieldset>
        <legend>Add a batch</legend>
        <input type="hidden" name="mop_contract_id" value="{{contract.id}}">
        <br>
        <label>Reference</label> {{input_text('reference', '')}}
        <br>
        <label>Description</label> {{input_text('description', '')}}
        <br>
        <br>
        <input type="submit" value="Add">
      </fieldset>
    </form>

    <table>
      <caption>Existing Batches</caption>
      <thead>
        <tr>
          <th>Reference</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {% for batch in batches %}
          <tr>
            <td>{{batch.reference}}</td>
            <td>{{batch.description}}</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[355]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MOP Batch Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from sqlalchemy.sql.expression import text
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Batch', 'Participant', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})


def make_fields(sess, batch, message=None):
    messages = [] if message is None else [str(message)]
    return {'batch': batch, 'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        batch_id = inv.getLong('mop_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        render(inv, template, make_fields(sess, batch))
    else:
        set_read_write(sess)
        batch_id = inv.getLong('mop_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        if inv.hasParameter('update'):
            reference = inv.getString('reference')
            description = inv.getString('description')
            batch.update(sess, reference, description)
            sess.commit()
            inv.sendSeeOther("/reports/193/output/?mop_batch_id=" + str(batch.id))
        elif inv.hasParameter("delete"):
            contract = batch.contract
            batch.delete(sess)
            sess.commit()
            inv.sendSeeOther("/reports/191/output/?mop_contract_id=" + str(contract.id))
except UserException, e:
    render(inv, template, make_fields(sess, batch, e))
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>
      Chellow &gt; MOP Contracts &gt; {{batch.contract.name}} &gt;
      Batches &gt; {{batch.reference}} &gt; Edit
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/185/output/">MOP Contracts</a> &gt;
      <a href="{{context_path}}/reports/107/output/?mop_contract_id={{batch.contract.id}}">{{batch.contract.name}}</a>
      &gt;
      <a href="{{context_path}}/reports/191/output/?mop_contract_id={{batch.contract.id}}">Batches</a>
      &gt;
      <a href="{{context_path}}/reports/193/output/?mop_batch_id={{batch.id}}">{{batch.reference}}</a>
      &gt; Edit
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br>
    {% if request.getMethod() == 'GET' and request.getParameter('confirm_delete') %}
      <form method="post" action=".">
        <fieldset>
          <legend>Delete</legend>
          <input type="hidden" name="mop_batch_id" value="{{batch.id}}">
          <p>Are you sure you want to delete this batch and all its bills?</p>
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p><a href=".">Cancel</a></p>
    {% else %}
      <form action="." method="post">
        <fieldset>
          <legend>Update batch</legend>
          <input type="hidden" name="mop_batch_id" value="{{batch.id}}">
          <br>
          <label>
            Reference {{input_text('reference', batch.reference)}}
          </label>
          <br>
          <label>
            Description {{input_text('description', batch.description)}}
          </label>
          <br>
          <br>
          <input type="submit" name="update" value="Update">
        </fieldset>
      </form>
      <br>
      <form action=".">
        <fieldset>
          <legend>Delete this batch</legend>
          <input type="hidden" name="mop_batch_id" value="{{batch.id}}">
   <input type="submit" name="confirm_delete" value="Delete">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[357]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MOP Bill Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'session', 'Batch', 'Supply', 'BillType', 'Bill', 'set_read_write'],
        'utils': ['UserException', 'prev_hh', 'next_hh', 'hh_after', 'hh_before', 'HH', 'parse_mpan_core', 'form_date', 'form_decimal', 'validate_hh_start'],
        'templater': ['render']})


def make_fields(sess, batch, message=None):
    bill_types = sess.query(BillType).order_by(BillType.code)
    bills = sess.query(Bill).filter(Bill.batch == batch).order_by(Bill.start_date)
    messages = [] if message is None else [str(e)]
    return {'batch': batch, 'bill_types': bill_types, 'messages': messages, 'bills': bills}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        batch_id = inv.getLong('mop_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        render(inv, template, make_fields(sess, batch))
    else:
        set_read_write(sess)
        batch_id = inv.getLong('mop_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        mpan_core = inv.getString("mpan_core")
        mpan_core = parse_mpan_core(mpan_core)
        account = inv.getString("account")
        reference = inv.getString("reference")
        issue_date = form_date(inv, "issue")
        start_date = form_date(inv, "start")
        validate_hh_start(start_date)
        finish_date = form_date(inv, "finish")
        validate_hh_start(finish_date)
        kwh = form_decimal(inv, "kwh")
        net = form_decimal(inv, "net")
        vat = form_decimal(inv, "vat")
        gross = form_decimal(inv, "gross")
        bill_type_id = inv.getLong("bill_type_id")
        bill_type = BillType.get_by_id(sess, bill_type_id)
        breakdown_str = inv.getString("breakdown")

        breakdown = eval(breakdown_str)
        bill_type = BillType.get_by_id(sess, bill_type_id)
        bill = batch.insert_bill(sess, account, reference, issue_date, start_date, finish_date, kwh, net, vat, gross, bill_type, breakdown, Supply.get_by_mpan_core(sess, mpan_core))
        sess.commit()
        inv.sendSeeOther("/reports/359/output/?mop_bill_id=" + str(bill.id))

except UserException, e:
    sess.rollback()
    render(inv, template, make_fields(sess, batch, e), 400)
finally:
    if sess is not None:
        sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; MOP Contracts &gt; {{batch.contract.name}} &gt;
      Batches &gt; {{batch.reference}} &gt; Add Bill
    </title>
    <style>
      label {
        width: 6em;
        float: left;
      }
    </style>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/185/output/">MOP Contracts</a> &gt;
      <a href="{{context_path}}/reports/107/output/?mop_contract_id={{batch.contract.id}}">{{batch.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/191/output/?mop_contract_id={{batch.contract.id}}">Batches</a> &gt;
      <a href="{{context_path}}/reports/193/output/?mop_batch_id={{batch.id}}">{{batch.reference}}</a>
      &gt; Add Bill
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <form action="." method="post">
      <fieldset>
        <input type="hidden" name="mop_batch_id" value="{{batch.id}}">
        <legend>Add a bill</legend>
        <br>
        <label>MPAN Core</label>
        {{input_text('mpan_core')}}
        <br>
        <label>Reference</label>
        {{input_text('reference')}}
        <br>
        <br>
        <fieldset>
          <legend>Issue Date</legend>
          {{input_date('issue')}}
        </fieldset>
        <br>
        <fieldset>
          <legend>Start Date</legend>
          {{input_date('start')}}
        </fieldset>
        <br>
        <fieldset>
          <legend>Finish Date</legend>
          {{input_date('finish')}}
        </fieldset>
        <br>
        <label>kWh</label>
        {{input_text('kwh', '0')}}
        <br>
        <label>Net</label>
        {{input_text('net', '0')}}
        <br>
        <label>VAT</label>
        {{input_text('vat', '0')}}
        <br>
        <label>Gross</label>
        {{input_text('gross', '0')}}
        <br>
        <label>Account</label>
        {{input_text('account', '0')}}
        <br>
        <label>Type</label>
        <select name="bill_type_id">
          {% for bill_type in bill_types %}
            {{input_option('bill_type_id', bill_type.id, bill_type.code, bill_type.description)}}
          {% endfor %}
        </select>
        <br>
        <label>Breakdown</label>
        {{input_text('breakdown', '{}')}}
        <br>
        <br>
        <input type="submit" value="Add">
      </fieldset>
    </form>
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[359]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MOP Bill]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from sqlalchemy.sql.expression import text
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Batch', 'Participant', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})


def make_fields(sess, batch, message=None):
    messages = [] if message is None else [str(message)]
    return {'batch': batch, 'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        batch_id = inv.getLong('mop_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        render(inv, template, make_fields(sess, batch))
    else:
        set_read_write(sess)
        batch_id = inv.getLong('mop_batch_id')
        batch = Batch.get_by_id(sess, batch_id)
        if inv.hasParameter('update'):
            reference = inv.getString('reference')
            description = inv.getString('description')
            batch.update(sess, reference, description)
            sess.commit()
            inv.sendSeeOther("/reports/193/output/?mop_batch_id=" + str(batch.id))
        elif inv.hasParameter("delete"):
            batch.delete(sess)
            sess.commit()
            inv.sendSeeOther("/reports/191/output/?mop_contract_id=" + str(batch.contract.id))
except UserException, e:
    render(inv, template, make_fields(sess, batch, e))
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/">
    <title>
      Chellow &gt; MOP Contracts &gt; {{batch.contract.name}} &gt;
      Batches &gt; {{batch.reference}} &gt; Edit
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/185/output/">MOP Contracts</a> &gt;
      <a href="{{context_path}}/reports/107/output/?mop_contract_id={{batch.contract.id}}">{{batch.contract.name}}</a>
      &gt;
      <a href="{{context_path}}/reports/191/output/?mop_contract_id={{batch.contract.id}}">Batches</a>
      &gt;
      <a href="{{context_path}}/reports/193/output/?mop_batch_id={{batch.id}}">{{batch.reference}}</a>
      &gt; Edit
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br>
    {% if request.getMethod() == 'GET' and request.getParameter('confirm_delete') %}
      <form method="post" action=".">
        <fieldset>
          <legend>Delete</legend>
          <input type="hidden" name="hhdc_batch_id" value="{{batch.id}}">
          <p>Are you sure you want to delete this batch and all its bills?</p>
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p><a href=".">Cancel</a></p>
    {% else %}
      <form action="." method="post">
        <fieldset>
          <legend>Update batch</legend>
          <input type="hidden" name="mop_batch_id" value="{{batch.id}}">
          <br>
          <label>
            Reference {{input_text('reference', batch.reference)}}
          </label>
          <br>
          <label>
            Description {{input_text('description', batch.description)}}
          </label>
          <br>
          <br>
          <input type="submit" name="update" value="Update">
        </fieldset>
      </form>
      <br>
      <form action=".">
        <fieldset>
          <legend>Delete this batch</legend>
          <input type="hidden" name="mop_batch_id" value="{{batch.id}}">
   <input type="submit" name="confirm_delete" value="Delete">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[361]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MOP Contract Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Contract', 'Party', 'Participant', 'set_read_write', 'session', 'MarketRole'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})

def make_fields(sess, message=None):
    initial_date = datetime.utcnow().replace(tzinfo=pytz.utc)
    initial_date = datetime(initial_date.year, initial_date.month, 1)
    parties = sess.query(Party).join(MarketRole).join(Participant).filter(MarketRole.code=='C').order_by(Participant.code).all()
    return {'initial_date': initial_date, 'parties': parties, 'messages': None if message is None else [str(message)]}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        render(inv, template, make_fields(sess))
    else:
        set_read_write(sess)
        participant_id = inv.getLong('participant_id')
        name = inv.getString('name')
        start_date = form_date(inv, 'start')
        participant = Participant.get_by_id(sess, participant_id)
        contract = Contract.insert_mop(sess, name, participant, '{}', '{}',
            start_date, None, '{}')
        sess.commit()
        inv.sendSeeOther('/reports/107/output/?mop_contract_id=' +
            str(contract.id))
except UserException, e:
    render(inv, template, make_fields(sess, e))
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{ context_path }}/reports/19/output/"
    >
    <title>Chellow &gt; HHDC Contracts &gt; Add</title>
  </head>
  <body>
    <p>
      <a href="{{ context_path }}/reports/1/output/">Chellow</a> &gt;
      <a href="{{ context_path }}/reports/185/output/">MOP Contracts</a>
      &gt; Add
    </p>
    <br />
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <form action="." method="post">
      <fieldset>
        <legend>Add a MOP contract</legend>
        <br />
        <label>
          Participant
          <select name="participant_id">
            {% for party in parties %}
              {{ input_option('participant_id', party.participant.id,
                  party.participant.code + " : " + party.name) }}
            {% endfor %}
          </select>
        </label>
        <br />
        <br />
        <label>
          Name
          <input name="name" value="
            {%- if request.getParameter('name') -%}
              {{ request.getParameter('name') }}
            {%- endif -%}
          ">
        </label>
        <br />
        <br />
        <fieldset>
          <legend>Start Date</legend>
          {{ input_date('start', initial_date) }}
        </fieldset>
        <br />
        <br />
        <input type="submit" value="Add">
        <input type="reset" value="Reset">
      </fieldset>
    </form>
  </body>
</html>]]>
		</value>
	</line>
    <line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[363]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[MOP Bill Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from sqlalchemy.sql.expression import text
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Bill', 'BillType', 'Batch', 'Participant', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date', 'form_decimal'],
        'templater': ['render']})


def make_fields(sess, bill, message=None):
    bill_types = sess.query(BillType).order_by(BillType.code).all()
    messages = [] if message is None else [str(message)]
    return {'bill': bill, 'bill_types': bill_types, 'messages': messages}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        bill_id = inv.getLong('mop_bill_id')
        bill = Bill.get_by_id(sess, bill_id)
        render(inv, template, make_fields(sess, bill))
    else:
        set_read_write(sess)
        bill_id = inv.getLong('mop_bill_id')
        bill = Bill.get_by_id(sess, bill_id)
        if inv.hasParameter('update'):
            account = inv.getString("account")
            reference = inv.getString("reference")
            issue_date = form_date(inv, "issue")
            start_date = form_date(inv, "start")
            finish_date = form_date(inv, "finish")
            kwh = form_decimal(inv, "kwh")
            net = form_decimal(inv, "net")
            vat = form_decimal(inv, "vat")
            gross = form_decimal(inv, "gross")
            type_id = inv.getLong("bill_type_id")
            breakdown = inv.getString("breakdown")
            bill_type = BillType.get_by_id(sess, type_id)

            bill.update(account, reference, issue_date, start_date, finish_date, kwh, net, vat, gross, bill_type, breakdown)
            sess.commit()
            inv.sendSeeOther("/reports/359/output/?mop_bill_id=" + str(bill.id))
        elif inv.hasParameter("delete"):
            bill.delete(sess)
            sess.commit()
            inv.sendSeeOther("/reports/193/output/?mop_batch_id=" + str(bill.batch.id))
except UserException, e:
    render(inv, template, make_fields(sess, bill, e))
finally:
    sess.close()]]>
		</value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; MOP Contracts &gt; {{bill.batch.contract.name}} &gt;
      Batches &gt; {{bill.batch.reference}} &gt; Bills &gt; {{bill.id}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/185/output/">MOP Contracts</a> &gt;
      <a href="{{context_path}}/reports/107/output/?mop_contract_id={{bill.batch.contract.id}}">{{bill.batch.contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/191/output/?mop_contract_id={{bill.batch.contract.id}}">Batches</a> &gt;
      <a href="{{context_path}}/reports/193/output/?mop_batch_id={{bill.batch.id}}">{{bill.batch.reference}}</a> &gt;
      <a href="{{context_path}}/reports/359/output/?mop_bill_id={{bill.id}}">Bill {{bill.id}}</a> &gt;
      Edit
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br>
    {% if request.getParameter('confirm_delete') %}
      <form method="post" action=".">
        <fieldset>
          <legend>Are you sure you want to delete this bill?</legend>
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
      <p><a href=".">Cancel</a></p>
    {% else %}
      <form action="." method="post">
        <fieldset>
          <input type="hidden" name="mop_bill_id" value="{{bill.id}}">
          <legend>Update This Bill</legend>
          <p>
            <a href="{{context_path}}/reports/7/output/?supply_id={{bill.supply.id}}">Supply</a>
          </p>
          <label>
            Reference {{input_text('reference', bill.reference)}}
          </label>
          <br>
          <label>
            Account {{input_text('account', bill.account)}}
          </label>
          <br><br>
          <fieldset>
            <legend>Issue Date</legend>
            {{input_date('issue', bill.issue_date)}}
          </fieldset>
          <br>
          <fieldset>
            <legend>Start Date</legend>
            {{input_date('start', bill.start_date)}}
          </fieldset>
          <br>
          <fieldset>
            <legend>Finish Date</legend>
            {{input_date('finish', bill.finish_date)}}
          </fieldset>
          <br>
          <label>
            kWh {{input_text('kwh', '' ~ bill.kwh)}}
          </label>
          <br>
          <label>
            Net {{input_text('net', '' ~ bill.net)}}
          </label>
          <br>
          <label>
            VAT {{input_text('vat', '' ~ bill.vat)}}
          </label>
          <br>
          <label>Gross {{input_text('gross', '' ~ bill.gross)}}</label>
          <br>
          <label>Type
            <select name="bill_type_id">
              {% for type in bill_types %}
                {{input_option('type_id', type.id, type.code + ' ' + type.description, initial=bill.bill_type.id)}}
              {% endfor %}
            </select>
          </label>
          <br><br>
          <label>
            Breakdown <br>
            {{input_textarea('breakdown', bill.breakdown, 10, 80)}}
          </label>
          <br>
          Example Breakdown

          <pre>
{'raw_lines': ['"net-gbp", "unrestricted-kwh", "unrestricted-rate", "unrestricted-gbp"',
 '"100", "1000", "0.1", "100"'],
 'unrestricted-kwh': 1000, 'unrestricted-rate': 0.1, 'unrestricted-gbp': 100}          </pre>
          <br>
          <input type="submit" name="update" value="Update">
        </fieldset>
      </form>
      <br>
      <form action=".">
        <fieldset>
          <legend>Delete This Bill</legend>
          <input type="hidden" name="mop_bill_id" value="{{bill.id}}">
          <input type="submit" name="delete" value="Delete">
        </fieldset>
      </form>
    {% endif %}
  </body>
</html>]]>
		</value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[365]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Channel Snag Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import datetime
import pytz
from java.lang import System

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')

def make_fields(sess, snag, message=None):
    messages = [] if message is None else [str(message)]
    return {'snag': snag, 'messages': messages}

sess = None
try:
    sess = db.session()
    if inv.getRequest().getMethod() == 'GET':
        snag_id = inv.getLong('snag_id')
        snag = db.Snag.get_by_id(sess, snag_id)
        templater.render(inv, template, make_fields(sess, snag))
    else:
        db.set_read_write(sess)
        snag_id = inv.getLong('snag_id')
        ignore = inv.getBoolean('ignore')

        snag = db.Snag.get_by_id(sess, snag_id)
        snag.is_ignored = ignore
        sess.commit()
        inv.sendSeeOther("/reports/117/output/?snag_id=" + str(snag.id))
except utils.UserException, e:
    sess.rollback()
    templater.render(inv, template, make_fields(sess, snag, e), 400)
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; HHDC Contracts &gt;
      {{snag.channel.era.hhdc_contract.name}} &gt; Channel Snags &gt;
      {{snag.id}}
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{context_path}}/reports/115/output/?hhdc_contract_id={{snag.channel.era.hhdc_contract.id}}">{{snag.channel.era.hhdc_contract.name}}</a> &gt;
      <a href="{{context_path}}/reports/37/output/?hhdc_contract_id={{snag.channel.era.hhdc_contract.id}}&amp;hidden_days=5">Channel Snags</a> &gt;
      {{snag.id}} [<a href="{{context_path}}/reports/305/output/?snag_id={{snag.id}}">edit</a>]
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{message}}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <tbody>
        <tr>
          <th>Date Created</th>
          <td>{{snag.date_created|hh_format}}</td>
        </tr>
        <tr>
          <th>Ignored?</th>
          <td>
            {% if snag.is_ignored %}
              Ignored
            {% else %}
              Not ignored
            {% endif %}
            <form action="." method="post">
              <fieldset style="border: none;">
                <input type="hidden" name="snag_id" value="{{snag.id}}">
                <input type="hidden" name="ignore" value="
                  {%- if snag.is_ignored -%}
                    false
                  {%- else -%}
                    true
                  {%- endif -%}
                ">
                <input type="submit" value="
                  {%- if snag.is_ignored -%}
                    Un-ignore
                  {%- else -%}
                    Ignore
                  {%- endif -%}
                ">
              </fieldset>
            </form>
          </td>
        </tr>
        <tr>
          <th>Description</th>
          <td>{{snag.description}}</td>
        </tr>
        <tr>
          <th>Channel</th>
          <td>
            {% if snag.channel.imp_related %}
              Import
            {% else %}
              Export
            {% endif %}
			{{snag.channel.channel_type}}
            channel of <a href="{{context_path}}/reports/7/output/?supply_id={{snag.channel.era.supply.id}}">supply {{snag.channel.era.supply.name}}</a>
          </td>
        </tr>
        <tr>
          <th>Start Date</th>
          <td>{{snag.start_date|hh_format}}</td>
        </tr>
        <tr>
          <th>Finish Date</th>
          <td>{{snag.finish_date|hh_format}}</td>
        </tr>
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[367]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supply Notes Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from sqlalchemy.sql.expression import text
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Supply', 'Batch', 'Participant', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})


def make_fields(sess, supply, index, message=None):
    messages = [] if message is None else [str(message)]
    supply_note = eval(supply.note)
    note = supply_note['notes'][index]
    note['index'] = index
    return {'supply': supply, 'messages': messages, 'note': note}

sess = None
try:
    sess = session()
    if inv.getRequest().getMethod() == 'GET':
        supply_id = inv.getLong('supply_id')
        supply = Supply.get_by_id(sess, supply_id)
        index = inv.getLong('note_index')
        render(inv, template, make_fields(sess, supply, index))
    else:
        if inv.hasParameter('update'):
            set_read_write(sess)
            supply_id = inv.getLong('supply_id')
            supply = Supply.get_by_id(sess, supply_id)
            index = inv.getLong('note_index')
            category = inv.getString('category')
            is_important = inv.getBoolean('is_important')
            body = inv.getString('body')
            supply_note = eval(supply.note)
            note = supply_note['notes'][index]
            note['category'] = category
            note['is_important'] = is_important
            note['body'] = body
            supply.note = str(supply_note)
            sess.commit()
            inv.sendSeeOther("/reports/369/output/?supply_id=" + str(supply_id))
        elif inv.hasParameter('delete'):
            set_read_write(sess)
            supply_id = inv.getLong('supply_id')
            supply = Supply.get_by_id(sess, supply_id)
            index = inv.getLong('note_index')
            supply_note = eval(supply.note)
            del supply_note['notes'][index]
            supply.note = str(supply_note)
            sess.commit()
            inv.sendSeeOther("/reports/369/output/?supply_id=" + str(supply_id))

except UserException, e:
    render(inv, template, make_fields(sess, supply, index, e))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Supplies &gt; {{supply.id}} &gt; Notes &gt; {note.index} Edit
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/99/output/">Supplies</a>  &gt;
      <a href="{{context_path}}/reports/7/output/?supply_id={{supply.id}}">{{supply.id}}</a>  &gt;
      <a href="{{context_path}}/reports/369/output/?supply_id={{supply.id}}">Notes</a>  &gt;
      {{note.index}} Edit
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <form action="." method="post">
      <fieldset>
        <legend>Edit Note</legend>
        <input type="hidden" name="supply_id" value="{{supply.id}}">
        <input type="hidden" name="note_index" value="{{note.index}}">
        Category {{input_text('category', note.category)}}
        <br>
        Important? {{input_checkbox('is_important', note.is_important)}}
        <br>
        {{input_textarea('body', note.body, 30, 80)}}
        <br>
        <input type="submit" name="update" value="Edit">
      </fieldset>
    </form>
    <br>
    <form action="." method="post">
      <fieldset>
        <legend>Delete Note</legend>
        <input type="hidden" name="supply_id" value="{{supply.id}}">
        <input type="hidden" name="note_index" value="{{note.index}}">
        <br>
        <input type="submit" name="delete" value="Delete">
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[369]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supply Notes]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from sqlalchemy.sql.expression import text
from datetime import datetime
import pytz

Monad.getUtils()['imprt'](globals(), {
        'db': ['Supply', 'Batch', 'Participant', 'set_read_write', 'session'], 
        'utils': ['UserException', 'form_date'],
        'templater': ['render']})


def make_fields(sess, supply, message=None):
    messages = [] if message is None else [str(message)]

    if len(supply.note.strip()) > 0:
        note_str = supply.note
    else:
        note_str = "{'notes': []}"
    supply_note = eval(note_str)

    return {'supply': supply, 'messages': messages, 'supply_note': supply_note}

sess = None
try:
    sess = session()
    supply_id = inv.getLong('supply_id')
    supply = Supply.get_by_id(sess, supply_id)
    render(inv, template, make_fields(sess, supply))
except UserException, e:
    render(inv, template, make_fields(sess, supply, e))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; Supplies &gt; {{supply.id}} &gt; Notes</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/99/output/">Supplies</a>  &gt;
      <a href="{{context_path}}/reports/7/output/?supply_id={{supply.id}}">{{supply.id}}</a>  &gt;
      Notes
      [<a href="{{context_path}}/reports/239/output/?supply_id={{supply.id}}">add</a>]
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <thead>
        <tr>
          <th>Edit</th>
          <th>Category</th>
          <th>Importance</th>
          <th>Body</th>
        </tr>
      </thead>
      <tbody>
        {% for note in supply_note.notes %}
          <tr>
            <td>
              [<a href="{{context_path}}/reports/367/output/?supply_id={{supply.id}}&amp;note_index={{loop.index0}}">edit</a>]
            </td>
            <td>{{note.category}}</td>
            <td>
              {% if note.is_important %}
                High
              {% else %}
                Low
              {% endif %}
            </td>
            <td><pre style=" white-space: pre-wrap;">{{note.body}}</pre></td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[371]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Site Group Snags Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import System

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')

Snag, Site = db.Snag, db.Site

sess = None

try:
    sess = db.session()
    if inv.getRequest().getMethod() == 'GET':
        templater.render(inv, template, {})
    else:
        db.set_read_write(sess)
        finish_date = utils.form_date(inv, 'ignore')
        sess.execute("update snag set is_ignored = true where snag.site_id is not null and snag.finish_date < :finish_date", {'finish_date': finish_date})
        sess.commit()
        inv.sendSeeOther('/reports/39/output/')
except utils.UserException, e:
        render(inv, template, {'messages': [str(e)]}, 400)
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>Chellow &gt; Site Snags &gt; Edit</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/39/output/">Site Snags</a> &gt; Edit
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{message}}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <br>
    <form method="post" action=".">
      <fieldset>
        <legend>Bulk ignore</legend>

        <p>
          Ignore all snags before {{input_date('ignore')}}
          <input type="submit" name="ignore" value="Ignore">
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[373]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Site Group Snag Edit]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
import datetime
import pytz
from java.lang import System

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')

def make_fields(sess, snag, message=None):
    messages = [] if message is None else [str(message)]
    return {'snag': snag, 'messages': messages}

sess = None
try:
    sess = db.session()
    if inv.getRequest().getMethod() == 'GET':
        snag_id = inv.getLong('site_snag_id')
        snag = db.Snag.get_by_id(sess, snag_id)
        templater.render(inv, template, make_fields(sess, snag))
    else:
        db.set_read_write(sess)
        snag_id = inv.getLong('site_snag_id')
        ignore = inv.getBoolean('ignore')

        snag = db.Snag.get_by_id(sess, snag_id)
        snag.is_ignored = ignore
        sess.commit()
        inv.sendSeeOther("/reports/119/output/?site_snag_id=" + str(snag.id))
except utils.UserException, e:
    sess.rollback()
    templater.render(inv, template, make_fields(sess, snag, e), 400)
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/">
    <title>
      Chellow &gt; Site Snags &gt; {{snag.id}} &gt; Edit
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/39/output/">Site Snags</a> &gt;
      <a href="{{context_path}}/reports/119/output/?site_snag_id={{snag.id}}">{{snag.id}}</a>
      &gt; Edit
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{message}}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <table>
      <tbody>
        <tr>
          <th>Date Created</th>
          <td>{{snag.date_created|hh_format}}</td>
        </tr>
        <tr>
          <th>Ignored?</th>
          <td>
            {% if snag.is_ignored %}
              Ignored
            {% else %}
              Not ignored
            {% endif %}
            <form action="." method="post">
              <fieldset style="border: none;">
                <input type="hidden" name="site_snag_id" value="{{snag.id}}">
                <input type="hidden" name="ignore" value="
                  {%- if snag.is_ignored -%}
                    false
                  {%- else -%}
                    true
                  {%- endif -%}
                ">
                <input type="submit" value="
                  {%- if snag.is_ignored -%}
                    Un-ignore
                  {%- else -%}
                    Ignore
                  {%- endif -%}
                ">
              </fieldset>
            </form>
          </td>
        </tr>
        <tr>
          <th>Description</th>
          <td>{{snag.description}}</td>
        </tr>
        <tr>
          <th>Site</th>
          <td>
            <a href="{{context_path}}/reports/5/output/?site_id={{snag.site.id}}">{{snag.site.code}}</a>
          </td>
        </tr>
        <tr>
          <th>Start Date</th>
          <td>{{snag.start_date|hh_format}}</td>
        </tr>
        <tr>
          <th>Finish Date</th>
          <td>{{snag.finish_date|hh_format}}</td>
        </tr>
      </tbody>
    </table>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[375]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Log]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')

sess = None
try:
    sess = db.session()
    utils.clog("hello")
    templater.render(inv, template, {'clogs': utils.clogs})
finally:
    if sess is not None:
        sess.close()
]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
        href="{{context_path}}/reports/19/output/" />
    <title>Chellow &gt; System &gt; Clogs</title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/171/output/">System</a> &gt;
      Clogs
    </p>

    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}

    <ul>
      {% for clog in clogs %}
        <li>{{clog}}</li>
      {% endfor %}
    </ul>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[377]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supply Notes CSV]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from datetime import datetime
from dateutil.relativedelta import relativedelta
import pytz

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')

sess = None
try:
    sess = db.session()    
    inv.getResponse().setContentType('text/csv')
    inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="notes.csv"')
    pw = inv.getResponse().getWriter()
    pw.println("Supply Id, Note Index, Category, Is Important?, Body")
    pw.flush()

    for supply in sess.query(db.Supply).order_by(db.Supply.id):
        try:
            supply_note = eval(supply.note)
        except SyntaxError:
            continue
        for i, note in enumerate(supply_note['notes']):
            vals = [supply.id, i, note['category'], note['is_important'], note['body']]
            vals = map(unicode, vals)
            for i, val in enumerate(vals):
                vals[i] = val.replace('"', '""')
            pw.println(','.join('"' + v + '"' for v in vals))
            pw.flush()
    pw.close()
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[379]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Upgrade 2014-05-06 I]]></value>
		<value><![CDATA[from java.text import DecimalFormat
from java.lang import Runtime, System, Thread
from java.io import StringWriter, InputStreamReader
from net.sf.chellow.monad import Hiber, Monad, MonadMessage
from java.lang.management import OperatingSystemMXBean, ManagementFactory
from com.jezhumble.javasysmon import JavaSysMon
from net.sf.chellow.ui import ContextListener
from net.sf.chellow.billing import Contract


con = Hiber.session().connection()
stmt = con.createStatement()

con.setAutoCommit(False)

stmt.executeUpdate("begin isolation level serializable read write")
stmt.executeUpdate("create type channel_type as enum ('ACTIVE', 'REACTIVE_IMP', 'REACTIVE_EXP')")
stmt.executeUpdate("alter table channel add column channel_type channel_type")
stmt.executeUpdate("ALTER TABLE channel ADD COLUMN imp_related boolean")
stmt.executeUpdate("alter table channel add constraint channel_era_id_imp_related_channel_type_key unique (era_id, imp_related, channel_type)")

con.commit()

stmt.executeUpdate("begin isolation level serializable read write")
pstmt = con.prepareStatement("select * from channel")
rs = pstmt.executeQuery()
while rs.next():
    channel_id = rs.getLong('id')
    is_import = rs.getBoolean('is_import')
    is_kwh = rs.getBoolean('is_kwh')
    if is_kwh:
        channel_type = 'ACTIVE'
        imp_related = is_import
    else:
        imp_related = True
        channel_type = 'REACTIVE_IMP' if is_import else 'REACTIVE_EXP'    

    pstmt = con.prepareStatement("update channel set imp_related = ?, channel_type = cast(? as channel_type) where id = ?")
    pstmt.setBoolean(1, imp_related)
    pstmt.setString(2, channel_type)
    pstmt.setLong(3, channel_id)
    pstmt.execute()
rs.close()
con.commit()

stmt.executeUpdate("begin isolation level serializable read write")
stmt.executeUpdate("alter table channel alter column imp_related set not null")
stmt.executeUpdate("alter table channel alter column channel_type set not null")

con.commit()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[381]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Upgrade 2014-05-06 II]]></value>
		<value><![CDATA[from java.text import DecimalFormat
from java.lang import Runtime, System, Thread
from java.io import StringWriter, InputStreamReader
from net.sf.chellow.monad import Hiber, Monad, MonadMessage
from java.lang.management import OperatingSystemMXBean, ManagementFactory
from com.jezhumble.javasysmon import JavaSysMon
from net.sf.chellow.ui import ContextListener
from net.sf.chellow.billing import Contract


con = Hiber.session().connection()
stmt = con.createStatement()

con.setAutoCommit(False)

stmt.executeUpdate("begin isolation level serializable read write")
stmt.executeUpdate("alter table channel drop constraint channel_era_id_is_import_is_kwh_key")
stmt.executeUpdate("alter table channel drop column is_kwh")
stmt.executeUpdate("alter table channel drop column is_import")

con.commit()]]></value>
		<value><![CDATA[]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[383]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[HHDC Rate Script Add]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from sqlalchemy.orm import joinedload_all
from datetime import datetime
import pytz

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater')
Contract = db.Contract
render = templater.render
UserException, form_date = utils.UserException, utils.form_date

def page_fields(contract, message=None):
    now = datetime.now(pytz.utc)
    initial_date = datetime(now.year, now.month, 1, tzinfo=pytz.utc)
    messages = None if message is None else [message]
    return {'contract': contract, 'initial_date': initial_date,
        'messages': messages}

sess = None
contract = None
try:
    sess = db.session()
    if inv.getRequest().getMethod() == 'GET':
        contract_id = inv.getLong('hhdc_contract_id')
        contract = Contract.get_hhdc_by_id(sess, contract_id)
        render(inv, template, page_fields(contract))
    else:
        db.set_read_write(sess)
        contract_id = inv.getLong('hhdc_contract_id')
        contract = Contract.get_hhdc_by_id(sess, contract_id)
        start_date = form_date(inv, 'start')
        rate_script = contract.insert_rate_script(sess, start_date, '')
        sess.commit()
        inv.sendSeeOther('/reports/173/output/?hhdc_rate_script_id='
                + str(rate_script.id))
except UserException, e:
        render(inv, template, page_fields(contract, str(e)))
finally:
    sess.close()]]></value>
		<value><![CDATA[<!doctype html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path}}/reports/19/output/"
    >
    <title>
      Chellow &gt; HHDC Contracts &gt; {{contract.name}}
      &gt; Add Rate Script
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/113/output/">HHDC Contracts</a> &gt;
      <a href="{{context_path}}/reports/115/output/?hhdc_contract_id={{contract.id}}">{{contract.name}}</a>
      &gt; Add Rate Script
    </p>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <br />
    <form action="." method="post">
      <fieldset>
        <legend>Add a rate script</legend>
        <input type="hidden" name="hhdc_contract_id"
            value="{{contract.id}}"
        >
        <br>
        <fieldset>
          <legend>Start Date</legend>
          {{ input_date('start', initial_date) }}
        </fieldset>
        <br>
        <input type="submit" value="Add" />
      </fieldset>
    </form>
  </body>
</html>]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[385]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[System Price Elexon Importer]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
from java.lang import Thread
from sqlalchemy.orm import joinedload_all
import sys

Monad.getUtils()['impt'](globals(), 'utils', 'templater', 'db', 'system_price_elexon')

Contract = db.Contract
render = templater.render

sess = None
importer = None
try:
    sess = db.session()
    if inv.getRequest().getMethod() == "GET":
        importer = system_price_elexon.get_importer()
        contract = Contract.get_non_core_by_name(sess, 'system_price_elexon')
        render(inv, template, {'importer': importer, 'contract': contract})
    else:
        importer = system_price_elexon.get_importer()
        contract = Contract.get_non_core_by_name(sess, 'system_price_elexon')
        importer.go()
        inv.sendSeeOther("/reports/385/output/")
except utils.UserException, e:
    sess.rollback()
    render(inv, template, {'messages': [str(e)], 'importer': importer,
        'contract': contract})
finally:
    if sess is not None:
        sess.close()]]></value>
		<value><![CDATA[<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" type="text/css"
      href="{{context_path }}/reports/19/output/">
    <title>
      Chellow &gt; Non-core Contracts &gt; System Price Elexon &gt;
      Automatic Importer
    </title>
  </head>
  <body>
    <p>
      <a href="{{context_path}}/reports/1/output/">Chellow</a> &gt;
      <a href="{{context_path}}/reports/259/output/">Non-Core Contracts</a> &gt;
      <a href="{{context_path}}/reports/267/output/?non_core_contract_id={{contract.id}}">{{contract.name }}</a>
      &gt; Automatic Importer
    </p>
    <br>
    {% if messages %}
      <ul>
        {% for message in messages %}
          <li>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    <p>
      <a href=".">Refresh page</a>{{ debug }}
    </p>
    {% if importer %}
      <table>
        <tr>
          <th>Is Locked?</th>
          <td>{{ importer.is_locked() }}</td>
        </tr>
      </table>
      <br/>
      {% if not importer.is_locked() %}
        <form action="." method="post">
          <fieldset>
            <legend>Import Now</legend>
            <input type="submit" value="Import">
          </fieldset>
        </form>
      {% endif %}

      <h3>Log</h3>
        
      <ul>
        {% for message in importer.messages %}
          <li>{{message}}</li>
        {% endfor %}
      </ul>
    {% else %}
      <p>Importer not present.</p>
    {% endif %}
  </body>
</html>]]></value>
  </line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[report]]></value>
		<value><![CDATA[387]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[Supplier Virtual Bill CSV Half-hourly]]></value>
		<value><![CDATA[from net.sf.chellow.monad import Monad
import datetime
import pytz
from dateutil.relativedelta import relativedelta
from sqlalchemy import or_
from java.lang import System

Monad.getUtils()['impt'](globals(), 'db', 'utils', 'templater', 'computer')

Supply, Era, Site, SiteEra = db.Supply, db.Era, db.Site, db.SiteEra
HH, hh_format = utils.HH, utils.hh_format

caches = {}

supply_id = inv.getLong('supply_id')

sess = None
try:
    sess = db.session()
    supply = Supply.get_by_id(sess, supply_id)

    start_date = utils.form_date(inv, 'start')
    finish_date = utils.form_date(inv, 'finish')

    file_name = 'supply_virtual_bills_hh_' + str(supply.id)

    inv.getResponse().setContentType("text/csv")
    inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="' + file_name + '.csv"')
    pw = inv.getResponse().getWriter()

    forecast_date = computer.forecast_date()

    prev_titles = None

    hh_start = start_date

    output = {}
    while not hh_start > finish_date:
        era = sess.query(Era).filter(Era.supply_id==supply.id, Era.start_date <= hh_start, or_(Era.finish_date == None, Era.finish_date >= hh_start)).one()

        site = sess.query(Site).join(SiteEra).filter(SiteEra.era_id == era.id, SiteEra.is_physical == True).one()

        ds = computer.SupplySource(sess, hh_start, hh_start, forecast_date, era, True, pw, caches)

        titles = ['MPAN Core', 'Site Code', 'Site Name', 'Account', 'HH Start', '']

        output_line = [ds.mpan_core, site.code , site.name, ds.supplier_account, hh_format(ds.start_date), '']
            
        mop_titles = ds.contract_func(era.mop_contract, 'virtual_bill_titles')()
        titles.extend(['mop-' + t for t in mop_titles])

        ds.contract_func(era.mop_contract, 'virtual_bill')(ds)
        bill = ds.mop_bill
        for title in mop_titles:
            output_line.append(bill.get(title, ''))
            if title in bill:
                del bill[title]
        for k in sorted(bill.keys()):
            output_line.extend([k, bill[k]]) 

        output_line.append('')
        dc_titles = ds.contract_func(era.hhdc_contract, 'virtual_bill_titles')()
        titles.append('')
        titles.extend(['dc-' + t for t in dc_titles])

        ds.contract_func(era.hhdc_contract, 'virtual_bill')(ds)
        bill = ds.dc_bill
        for title in dc_titles:
            output_line.append(bill.get(title, ''))
            if title in bill:
                del bill[title]
        for k in sorted(bill.keys()):
            output_line.extend([k, bill[k]])

        if era.imp_supplier_contract != None:
            contract = era.imp_supplier_contract
            output_line.append('')
            supplier_titles = ds.contract_func(contract, 'virtual_bill_titles')()
            titles.append('')
            titles.extend(['imp-supplier-' + t for t in supplier_titles])

            ds.contract_func(contract, 'virtual_bill')(ds)
            bill = ds.supplier_bill
            for title in supplier_titles:
                output_line.append(bill.get(title, ''))
                if title in bill:
                    del bill[title]

            for k in sorted(bill.keys()):
                output_line.extend([k, bill[k]]) 


        if era.exp_supplier_contract != None:
            contract = era.exp_supplier_contract
            ds = computer.SupplySource(sess, hh_start, hh_start, forecast_date, era, False, pw, caches)
            output_line.append('')
            supplier_titles = ds.contract_func(contract, 'virtual_bill_titles')()
            titles.append('')
            titles.extend(['exp-supplier-' + t for t in supplier_titles])

            ds.contract_func(contract, 'virtual_bill')(ds)
            bill = ds.supplier_bill
            for title in supplier_titles:
                output_line.append(bill.get(title, ''))
                if title in bill:
                    del bill[title]

            for k in sorted(bill.keys()):
                output_line.extend([k, bill[k]]) 

        if titles != prev_titles:
            prev_titles = titles
            pw.println(','.join('"' + str(v) + '"' for v in titles)) 
        pw.println(','.join('"' + str(v) + '"' for v in output_line))
        pw.flush()

        hh_start += HH
finally:
    if sess is not None:
        sess.close()

pw.close()]]></value>
		<value><![CDATA[]]></value>
  </line>
</csv>
