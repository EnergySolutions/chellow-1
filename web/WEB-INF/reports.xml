<?xml version="1.0"?>
<csv>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[1]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Home]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="html" encoding="US-ASCII"
      doctype-public="-//W3C//DTD HTML 4.01//EN"
      doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
  <xsl:template match="/">
    <html>
      <head>
        <link rel="stylesheet" type="text/css"
      href="{/source/request/@context-path}/reports/19/output/" />
    <title>
      Home
    </title>
      </head>
      <body>
        <p>
          <xsl:value-of select="'Home ['" />
      <a href="{/source/request/@context-path}/">
      <xsl:value-of select="'edit'" />
      </a>
      <xsl:value-of select="']'" />
    </p>
        <xsl:if test="//message">
          <ul>
            <xsl:for-each select="//message">
              <li>
                <xsl:value-of select="@description" />
              </li>
        </xsl:for-each>
          </ul>
        </xsl:if>
        <ul>
          <li>
            <a href="{/source/request/@context-path}/reports/3/output/">Sites</a>
          </li>
          <li>
            <a href="{/source/request/@context-path}/reports/99/output/">
              Supplies
            </a>
          </li>
          <li>Contracts
            <ul>
              <li><a href="{/source/request/@context-path}/reports/113/output/">HHDC
            </a>
              </li>
              <li><a href="{/source/request/@context-path}/reports/75/output/">Supplier
                  </a>
              </li>
            </ul>
          </li>
          <li><a href="{/source/request/@context-path}/reports/39/output/">
              Site Snags</a></li>
        </ul>
        <h3>CSV Downloads</h3>
        <table>
          <tr><th></th><th>Supplies</th><th>Sites</th></tr>
          <tr><th>Snapshot</th><td><a href="{/source/request/@context-path}/reports/157/output/">Download</a></td><td></td></tr>
          <tr>
            <th>Duration</th>
            <td><a href="{/source/request/@context-path}/reports/147/output/">Download</a></td>
            <td><a href="{/source/request/@context-path}/reports/57/output/">Download</a></td>
          </tr>
          <tr>
            <th>Monthly Duration</th>
            <td><a href="{/source/request/@context-path}/reports/155/output/">Download</a></td>
            <td><a href="{/source/request/@context-path}/reports/159/output/">Download</a></td>
          </tr>
          <tr><th>HH Data</th><td><a href="{/source/request/@context-path}/reports/167/output/">Download</a></td><td><a href="{/source/request/@context-path}/reports/145/output/">Download
            </a></td>
          </tr>
          <tr><th>Patched HH Data</th><td><a href="{/source/request/@context-path}/reports/189/output/">Download</a></td><td></td>
          </tr>
          <tr><th>TRIAD</th><td><a href="{/source/request/@context-path}/reports/175/output/">Download</a></td><td><a href="{/source/request/@context-path}/reports/179/output/">Download</a></td>
          </tr>
        </table>

        <h3>Industry Info</h3>
        <ul>
          <li>
            <a href="{/source/request/@context-path}/reports/71/output/">
            Market Participants
            </a>
          </li>
          <li>
            <a href="{/source/request/@context-path}/reports/121/output/">
              Market Roles
            </a>
          </li>
          <li>
            <a href="{/source/request/@context-path}/reports/137/output/">DSOs
            </a>
          </li>
          <li><a href="{/source/request/@context-path}/reports/45/output/">
            Providers
            </a>
          </li>
          <li><a href="{/source/request/@context-path}/reports/53/output/">
            Profile Classes
            </a>
          </li>
          <li>
          <a
             href="{/source/request/@context-path}/reports/61/output/">
    Meter Timeswitch Classes
            </a>
                    </li>
                    <li>
                        <a
    href="{/source/request/@context-path}/reports/129/output/">
                            Meter Types
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/133/output/">
                            <xsl:value-of select="'Meter Payment Types'"/>
                        </a>
                    </li>
                    <li>
                        <a
    href="{/source/request/@context-path}/reports/95/output/">
                            TPRs
                        </a>
                    </li>
                    <li>
<a href="{/source/request/@context-path}/reports/125/output/">
                            SSCs
                        </a>
                    </li>
                    <li>
                        <a
    href="{/source/request/@context-path}/reports/141/output/">
    Read Types
                        </a>
                    </li>
                    <li>
                        <a
    href="{/source/request/@context-path}/reports/43/output/">
    GSP Groups
                        </a>
                    </li>
                    <li>
                        <a
    href="{/source/request/@context-path}/reports/85/output/">
    CoPs
                        </a>
                    </li>
                    <li>
                        <a
    href="{/source/request/@context-path}/reports/199/output/">
    Bill Types
                        </a>
                    </li>
                </ul>
      </body>
    </html>
  </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[3]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Sites]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber

if inv.hasParameter('search-pattern'):
    search_pattern = inv.getString('search-pattern')
    for site in Hiber.session().createQuery("from Site site where lower(site.code || ' ' || site.name) like '%' || lower(:searchPattern) || '%' order by site.code").setString("searchPattern", search_pattern).setMaxResults(50).list():
        source.appendChild(site.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Sites
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Sites ['" />
                    <a
                        href="{/source/request/@context-path}/sites/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form name="siteselection" action=".">
                    <fieldset>
                        <input name="search-pattern"
                            value="{/source/request/parameter[@name='search-pattern']/value}" 
tabindex="1" />
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Search" />
                    </fieldset>
                </form>
                <xsl:choose>
                    <xsl:when test="/source/site">
                        <p>
                            Only the first 50 sites of the search
                            results are shown.
                        </p>
                        <ul>
                            <xsl:for-each select="/source/site">
                                <li>
                                    <a
                                        href="{/source/request/@context-path}/reports/5/output/?site-id={@id}">
                                        <xsl:value-of
                                            select="concat(@code, ' ', @name)" />
                                    </a>
                                </li>
                            </xsl:for-each>
                        </ul>
                    </xsl:when>
                    <xsl:when
                        test="/source/request/parameter[@name='search-pattern']">
                        <p>No sites matched your search</p>
                    </xsl:when>
                </xsl:choose>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[5]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.monad.types import MonadDate
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import Site, HhStartDate, Supply
from java.lang import Long

site_id = inv.getLong("site-id")
if not inv.isValid():
    raise UserException()
site = Site.getSite(site_id)
site_element = site.toXml(doc)
source.appendChild(site_element)

prev_supply_id = None
prev_start_date = None
generation_group = None
generation_groups_time = {}

debug_str = ''

for generation in Hiber.session().createQuery("select siteSupplyGeneration.supplyGeneration from SiteSupplyGeneration siteSupplyGeneration where siteSupplyGeneration.site = :site order by siteSupplyGeneration.supplyGeneration.supply.id, siteSupplyGeneration.supplyGeneration.startDate.date desc").setEntity('site', site).list():
    supply = generation.getSupply()
    generation_finish_date = generation.getFinishDate()
    if prev_supply_id is None or prev_supply_id != supply.getId() or generation_finish_date is None or not generation_finish_date.getNext().equals(prev_start_date):
        if generation_finish_date is None:
            key = Long.MAX_VALUE
        else:
            key = generation_finish_date.getDate().getTime()
        generation_group = []
        generation_groups_id = generation_groups_time.setdefault(key, {})
        generation_group = generation_groups_id.setdefault(supply.getId(), [])
    prev_supply_id = supply.getId()
    prev_start_date = generation.getStartDate()
    generation_group.append(generation)


time_keys = generation_groups_time.keys()
time_keys.sort(None, None, True)
for time_key in time_keys:
    generation_groups_id = generation_groups_time[time_key]
    id_keys = generation_groups_id.keys()
    id_keys.sort()
    for id_key in id_keys:
        generation_group = generation_groups_id[id_key]
        first_generation = generation_group[0]
        generation_group_element = first_generation.getSupply().toXml(doc, XmlTree('source').put('generatorType'))
        site_element.appendChild(generation_group_element)
        for generation in generation_group:
            generation_group_element.appendChild(generation.toXml(doc, XmlTree("mpans", XmlTree("core", XmlTree('dso')).put('llfc'))))


now = HhStartDate.roundDown(Date())

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.setTime(now.getDate())
cal.add(Calendar.MONTH, -1)
last_month = MonadDate(cal.getTime())
last_month.setLabel('last-month')
source.appendChild(last_month.toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))

cal.setTime(now.getDate())
cal.add(Calendar.DAY_OF_MONTH, -1)
yesterday = MonadDate(cal.getTime())
yesterday.setLabel('yesterday')
source.appendChild(yesterday.toXml(doc))

group_element = doc.createElement('group')
source.appendChild(group_element)
for group_site in site.groups(now, now, False)[0].getSites():
    if group_site.getId() != site.getId():
        group_element.appendChild(group_site.toXml(doc))
source.setAttribute('debug', debug_str)]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
  <xsl:template match="/">
    <html>
      <head>
        <link rel="stylesheet" type="text/css" href="{/source/request/@context-path}/reports/19/output/" />
          <title>
            Home &gt; Sites &gt;
              <xsl:value-of select="/source/site/@name" />
          </title>
      </head>
      <body>
        <p>
          <a href="{/source/request/@context-path}/reports/1/output/"><xsl:value-of select="'Home'" /></a> &gt;
          <a href="{/source/request/@context-path}/reports/3/output/"><xsl:value-of select="'Sites'" /></a>
          &gt; <xsl:value-of select="concat(/source/site/@name, ' [')" />
          <a href="{/source/request/@context-path}/sites/{/source/site/@id}/">
          <xsl:value-of select="'edit'" /></a>
          <xsl:value-of select="']'" />
        </p>
<xsl:value-of select="/source/@debug"/>
    <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/site/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Name</th>
                        <td>
                            <xsl:value-of select="/source/site/@name" />
                        </td>
                    </tr>
                </table>
                <br/>
                <xsl:if test="/source/group/site">
                <table><caption>Other sites in this group</caption>
                <tr><th>Chellow Id</th><th>Code</th><th>Name</th></tr>
                <xsl:for-each select="/source/group/site">
                  <tr><td><a href="{/source/request/@context-path}/reports/5/output/?site-id={@id}"><xsl:value-of select="@id" /></a></td><td><xsl:value-of select="@code" /></td><td><xsl:value-of select="@name" /></td></tr>
                </xsl:for-each>
                </table>
                </xsl:if>
                <br/>
                <table>
                    <caption>Supplies that power this site</caption>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Source</th>
                            <th>Generator Type</th>
                            <th>Import MPAN core</th>
                            <th>Export MPAN core</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/site/supply">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/7/output/?supply-id={@id}">
                                        <xsl:value-of select="@name" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(supply-generation[last()]/hh-start-date[@label='start']/@year, '-', supply-generation[last()]/hh-start-date[@label='start']/@month, '-', supply-generation[last()]/hh-start-date[@label='start']/@day)" />
                                </td>
                                <td>
<xsl:choose>
<xsl:when test="supply-generation[1]/hh-start-date[@label='finish']">
                                    <xsl:value-of
                                        select="concat(supply-generation/hh-start-date[@label='finish']/@year, '-', supply-generation/hh-start-date[@label='finish']/@month, '-', supply-generation/hh-start-date[@label='finish']/@day)" />
</xsl:when>
<xsl:otherwise>
Ongoing
</xsl:otherwise>
</xsl:choose>
</td>
                                <td>
                                    <xsl:value-of select="source/@code" />
                                </td>
                                <td>
                                    <xsl:value-of select="generator-type/@code" />
                                </td>
                                <td>
                                    <xsl:if
                                        test="supply-generation/mpan[llfc/@is-import='true']"><xsl:value-of
 select="supply-generation/mpan[llfc/@is-import='true']/mpan-core/@core" />
                                     </xsl:if>
                                </td>
                                <td>
                                    <xsl:if
                                        test="supply-generation/mpan[llfc/@is-import='false']">
                                        <xsl:value-of
                                            select="supply-generation/mpan[llfc/@is-import='false']/mpan-core/@core" />
                                    </xsl:if>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
      <ul>
        <li><a href="{/source/request/@context-path}/reports/9/output/?site-id={/source/site/@id}"><xsl:value-of select="'Graph of site usage'" /></a>
         </li>
         <li><a href="{/source/request/@context-path}/reports/11/output/?site-id={/source/site/@id}">
         <xsl:value-of select="'Generation Graphs'" />
                        </a>
          </li>
          <li><a href="{/source/request/@context-path}/reports/13/output/?site-id={/source/site/@id}">
<xsl:value-of select="'Table of site level monthly kWh, MD kWh etc.'" /></a>
          </li>
          <li>
        <a href="{/source/request/@context-path}/reports/25/output/?site-code={/source/site/@code}&amp;year={/source/date[@label = 'yesterday']/@year}&amp;month={/source/date[@label = 'yesterday']/@month}&amp;day={/source/date[@label='yesterday']/@day}">
                            <xsl:value-of select="'Table of hh data'" />
                        </a>
          </li>
          <li><a href="{/source/request/@context-path}/reports/27/output/?site-id={/source/site/@id}"><xsl:value-of select="'Bulk hh data download'" /></a>
          </li>
        </ul>

        <h3>CSV Downloads</h3>
<form action="{/source/request/@context-path}/reports/109/output/">
                    <fieldset>
                        <input type="hidden" name="site-id" value="{/source/site/@id}"/>
                        <legend>Displaced Virtual Bills</legend>
<br/>
<xsl:value-of select="'For '"/>
<input name="months" value="1" maxlength="2" size="2" />
<xsl:value-of select="' month(s) until the end of '"/>
                        <input name="end-year" value="{/source/date[@label='last-month']/@year}" maxlength="4" size="4" /><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date[@label='last-month']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
<br/>
<form action="{/source/request/@context-path}/reports/161/output/">
                    <fieldset>
<input type="hidden" name="site-code" value="{/source/site/@code}" />
                        <legend>Monthly Duration</legend>
<br/>
<xsl:value-of select="'For '"/>
<input name="months" value="1" maxlength="2" size="2" />
<xsl:value-of select="' month(s) until the end of '"/>
                        <input name="end-year" value="{/source/date[@label='last-month']/@year}" maxlength="4" size="4" /><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date[@label='last-month']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
                <br/>
<form action="{/source/request/@context-path}/reports/181/output/">
                    <fieldset>
                    <input type="hidden" name="site-id" value="{/source/site/@id}" />
                    
                        <legend>Download TRIAD CSV</legend>
                        <br/>
                        <xsl:value-of select="'For financial year ending March '"/>
                        <input name="year" value="{/source/date/@year}" size="4" maxlength="4"/>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                        <input type="reset" value="Reset"/>
                    </fieldset>
                </form>
      </body>
    </html>
  </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[7]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supply]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException, XmlTree
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import Supply, HhStartDate
from net.sf.chellow.billing import Bill
from java.lang import Class, Long
from java.math import BigInteger
from org.hibernate.criterion import Restrictions, Order
from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date

debug = ''

def bills_list(parent_element, element_name, contract, generation, mpan=None):
    global debug
    bills_element = doc.createElement(element_name)
    parent_element.appendChild(bills_element)

    if mpan is not None and pc_code != '00':
        tpr_codes = []
        for tpr in Hiber.session().createQuery("select mr.tpr from MeasurementRequirement mr where mr.ssc = :ssc order by mr.tpr.code").setEntity('ssc', generation.getSsc()).list():
            tpr_codes.append(tpr.getCode())
            bills_element.appendChild(tpr.toXml(doc))
        if pc_code in ['05', '06', '07', '08']:
            bills_element.appendChild(doc.createElement('tpr'))
            tpr_codes.append('md')
        tpr_codes.sort()        

    bills_crit = Hiber.session().createCriteria(Class.forName('net.sf.chellow.billing.Bill')).createAlias('batch', 'bt').add(Restrictions.eq('bt.contract.id', Long(contract.getId()))).add(Restrictions.eq('supply', generation.getSupply())).add(Restrictions.ge('startDate.date', generation.getStartDate().getDate())).addOrder(Order.asc('startDate.date'))

    finish_date = generation.getFinishDate()
    if finish_date is not None:
        bills_crit.add(Restrictions.le('startDate.date', generation.getFinishDate().getDate()))
    bill_dict = {}
    num_outer_read_cols = 0
    for bill in bills_crit.list():
        bill_element = bill.toXml(doc, XmlTree('batch', XmlTree('contract')).put('type'))

        if mpan is not None and pc_code != '00':
            tpr_map = dict(zip(tpr_codes, ([] for code in tpr_codes)))
            outside_tprs = []
            for read in Hiber.session().createQuery("from RegisterRead read where read.bill = :bill order by bill.startDate.date").setEntity('bill', bill).list():
                tpr = read.getTpr()
                if tpr is None:
                    tpr_code = 'md'
                else:
                    tpr_code = tpr.getCode()
                read_element = read.toXml(doc, XmlTree('tpr'))
                if tpr_code in tpr_map:
                    tpr_map[tpr_code].append(read_element)
                else:
                    outside_tprs.append(read_element)
            rows_high = max([len(val) for val in tpr_map.values()] + [1])
            bill_element.setAttribute('rows-high', str(rows_high))
        
            for j in range(rows_high):
                inner_reads_element = doc.createElement('inner-reads')
                bill_element.appendChild(inner_reads_element)
                for code in tpr_codes:
                    elements = tpr_map[code]
                    if j < len(elements):
                        inner_reads_element.appendChild(elements[j])
                    else:
                        inner_reads_element.appendChild(doc.createElement('register-read'))
            outer_reads_element = doc.createElement('outer-reads')
            bill_element.appendChild(outer_reads_element)
            for element in outside_tprs:
                element.setAttribute('rows-high', str(rows_high))
                outer_reads_element.appendChild(element)
            num_outer_read_cols = max(num_outer_read_cols, len(outside_tprs))

        key = bill.getStartDate().getDate().getTime()
        if not bill_dict.has_key(key):
            bill_dict[key] = []
        bill_dict[key].append(bill_element)

    bill_keys = bill_dict.keys()
    bill_keys.sort()
    for key in bill_keys:
        for elem in bill_dict[key]:
            bills_element.appendChild(elem)
    for i in range(num_outer_read_cols):
        outer_read_element = doc.createElement('outer-read')
        outer_read_element.setAttribute('index', str(i + 1))
        bills_element.appendChild(outer_read_element)
    return bills_element

supply_id = inv.getLong("supply-id")
if not inv.isValid():
    raise UserException()
supply = Supply.getSupply(supply_id)
supply_element = supply.toXml(doc, XmlTree("source").put("mpanCores").put("gspGroup").put("generatorType"))
source.appendChild(supply_element)
for generation in supply.getGenerations():
    generation_element = generation.toXml(doc, XmlTree("siteSupplyGenerations", XmlTree('site')).put('pc').put("mtc").put('ssc').put('cop').put("hhdcContract", XmlTree("party")))
    supply_element.appendChild(generation_element)
    for channel in generation.getChannels():
        channel_element = channel.toXml(doc)
        generation_element.appendChild(channel_element)
        for snag in Hiber.session().createQuery("from ChannelSnag snag where snag.channel = :channel and snag.isIgnored is false order by snag.startDate.date").setEntity('channel', channel).list():
            channel_element.appendChild(snag.toXml(doc))

    for mpan in generation.getMpans():
        mpan_element = mpan.toXml(doc, XmlTree("core").put("llfc", XmlTree("voltageLevel")).put('supplierContract'))
        generation_element.appendChild(mpan_element)
        for sup in Hiber.session().createQuery("select distinct mpan.supplyGeneration.supply from Mpan mpan where mpan.supplierAccount = :supplierAccount and mpan.supplyGeneration.supply <> :supply").setString('supplierAccount', mpan.getSupplierAccount()).setEntity('supply', supply).list():
            mpan_element.appendChild(sup.toXml(doc))
    pc_code = str(generation.getPc())
    for mpan in generation.getMpans():
        if mpan.getLlfc().getIsImport():
            name = 'import-bills'
        else:
            name = 'export-bills'
        bills_list(generation_element, name, mpan.getSupplierContract(), generation, mpan)

    hhdc_contract = generation.getHhdcContract()
    if hhdc_contract is not None:
        bills_list(generation_element, 'hhdc-bills', hhdc_contract, generation)
source.appendChild(MonadDate().toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
if cal.get(Calendar.MONTH) < Calendar.MARCH:
    cal.add(Calendar.YEAR, -1)
source.setAttribute('triad-year', str(cal.get(Calendar.YEAR)))

cal.setTime(Date())
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())
finish_date.setLabel('finish')
source.appendChild(finish_date.toXml(doc))

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1)
start_date = HhStartDate(cal.getTime())
start_date.setLabel('start')
source.appendChild(start_date.toXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))
source.appendChild(MonadDate.getHoursXml(doc))
source.setAttribute('debug', debug)]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN" doctype-system="http://www.w3.org/TR/html4/strict.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Supplies &gt;
                    <xsl:value-of select="/source/supply/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a href="{/source/request/@context-path}/reports/99/output/">
                        <xsl:value-of select="'Supplies'" />
                    </a>
                    &gt;
                    <xsl:value-of select="concat(/source/supply/@id, ' [')" />
                    <a href="{/source/request/@context-path}/supplies/{/source/supply/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                    <xsl:value-of select="/source/@debug" />
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Name</th>
                        <td>
                            <xsl:value-of select="/source/supply/@name" />
                        </td>
                    </tr>
                    <tr>
                        <th>Source</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/supply/source/@code, ' - ', /source/supply/source/@name)" />
                            <xsl:if test="/source/supply/source/@code='gen'">
                                <xsl:value-of
                                    select="concat(' (', /source/supply/generator-type/@code, ' ', /source/supply/generator-type/@name, ')')" />
                            </xsl:if>
                        </td>
                    </tr>
                    <tr>
                        <th>GSP Group</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/supply/gsp-group/@code, ' ', /source/supply/gsp-group/@description)" />
                        </td>
                    </tr>
                </table>
                <br />
                <xsl:for-each select="/source/supply/supply-generation">
                    <table>
                        <caption>Generation</caption>
                        <thead>
                            <tr>
                                <th colspan="12"></th>
                                <th colspan="5">Import</th>
                                <th colspan="5">Export</th>

                            </tr>
                            <tr>
                                <th rowspan="2">Edit</th>
                                <th rowspan="2">From</th>
                                <th rowspan="2">To</th>
                                <th rowspan="2">Sites</th>
                                <th rowspan="2">PC</th>
                                <th rowspan="2">MSID</th>
                                <th rowspan="2">MTC</th>
                                <th rowspan="2">CoP</th>
                                <th rowspan="2">SSC</th>
                                <th rowspan="1" colspan="2">HHDC</th>
                                <th rowspan="2">Channels</th>
                                <th rowspan="2">LLFC</th>
                                <th rowspan="2">MPAN Core</th>
                                <th rowspan="2">kVA</th>
                                <th colspan="2">Supplier</th>
                                <th rowspan="2">LLFC</th>
                                <th rowspan="2">MPAN Core</th>
                                <th rowspan="2">kVA</th>
                                <th colspan="2">Supplier</th>
                            </tr>
                            <th>Contract</th>
                            <th>Account</th>
                            <th>Contract</th>
                            <th>Account</th>
                            <th>Contract</th>
                            <th>Account</th>
                            <tr>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <xsl:value-of select="'['" />
                                    <a
                                        href="{/source/request/@context-path}/supplies/{/source/supply/@id}/generations/{@id}/">
                                        <xsl:value-of select="'edit'" />
                                    </a>
                                    <xsl:value-of select="']'" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="hh-start-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:for-each select="site-supply-generation/site">
                                        <a
                                            href="{/source/request/@context-path}/reports/5/output/?site-id={@id}"
                                            title="{@name}">
                                            <xsl:value-of select="concat(@code, ' ')" />
                                        </a>
                                    </xsl:for-each>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/55/output/?pc-id={pc/@id}"
                                        title="{pc/@description}">
                                        <xsl:value-of select="pc/@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@meter-serial-number" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/63/output/?mtc-id={mtc/@id}"
                                        title="{mtc/@description}">
                                        <xsl:value-of select="mtc/@code" />
                                    </a>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/197/output/?cop-id={cop/@id}"
                                        title="{cop/@description}">
                                        <xsl:value-of select="cop/@code" />
                                    </a>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/127/output/?ssc-id={ssc/@id}"
                                        title="{ssc/@description}">
                                        <xsl:value-of select="ssc/@code" />
                                    </a>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={hhdc-contract/@id}">
                                        <xsl:value-of select="hhdc-contract/@name" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@hhdc-account" />
                                </td>
                                <td>
                                    <xsl:if test="channel">
                                        <ul>
                                            <xsl:for-each select="channel">
                                                <li>
                                                    <xsl:choose>
                                                        <xsl:when test="channel-snag">
                                                            <xsl:attribute name="title">
<xsl:for-each select="channel-snag">
<xsl:value-of
                                                                select="concat(@description, ' ', hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-',  hh-start-date[@label='start']/@day, ' ', hh-start-date[@label='start']/@hour, ':', hh-start-date[@label='start']/@minute, ' to ')" />
<xsl:choose>
<xsl:when test="hh-start-date[@label='finish']">
<xsl:value-of
                                                                select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-',  hh-start-date[@label='finish']/@day, ' ', hh-start-date[@label='finish']/@hour, ':', hh-start-date[@label='finish']/@minute, ', ')" />
</xsl:when>
<xsl:otherwise>
<xsl:value-of select="'ongoing'" />
</xsl:otherwise>
</xsl:choose>
</xsl:for-each>
</xsl:attribute>
                                                            <strong>
                                                                <xsl:call-template name="channel" />
                                                            </strong>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:call-template name="channel" />
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </li>
                                            </xsl:for-each>
                                        </ul>
                                    </xsl:if>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/51/output/?llfc-id={mpan/llfc[@is-import='true']/@id}"
                                        title="{mpan/llfc[@is-import='true']/@description}">
                                        <xsl:value-of select="mpan/llfc[@is-import='true']/@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="mpan[llfc/@is-import='true']/mpan-core/@core" />
                                </td>

                                <td>
                                    <xsl:value-of
                                        select="mpan[llfc/@is-import='true']/@agreed-supply-capacity" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={mpan[llfc/@is-import='true']/supplier-contract/@id}">
                                        <xsl:value-of
                                            select="mpan[llfc/@is-import='true']/supplier-contract/@name" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="mpan[llfc/@is-import='true']/@supplier-account" />
                                    <xsl:if test="mpan/supply">
                                        <xsl:value-of select="'('" />
                                        <xsl:for-each select="mpan/supply">
                                            <xsl:value-of select="concat(@id, ' ')" />
                                        </xsl:for-each>
                                        <xsl:value-of select="')'" />
                                    </xsl:if>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/51/output/?llfc-id={mpan/llfc[@is-import='false']/@id}"
                                        title="{mpan/llfc[@is-import='false']/@description}">
                                        <xsl:value-of select="mpan/llfc[@is-import='false']/@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="mpan[llfc/@is-import='false']/mpan-core/@core" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="mpan[llfc/@is-import='false']/@agreed-supply-capacity" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={mpan[llfc/@is-import='false']/supplier-contract/@id}">
                                        <xsl:value-of
                                            select="mpan[llfc/@is-import='false']/supplier-contract/@name" />
                                    </a>
                                </td>

                                <td>
                                    <xsl:value-of select="mpan[llfc/@is-import='false']/@supplier-account" />
                                    <xsl:if test="mpan/supply">
                                        <xsl:value-of select="'('" />
                                        <xsl:for-each select="mpan/supply">
                                            <xsl:value-of select="concat(@id, ' ')" />
                                        </xsl:for-each>
                                        <xsl:value-of select="')'" />
                                    </xsl:if>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <br />
                    <table>
                        <caption>Import Bills</caption>
                        <thead>
                            <tr>
                                <th rowspan="2">Edit</th>
                                <th rowspan="2">Check</th>
                                <th rowspan="2">From</th>
                                <th rowspan="2">To</th>
                                <th rowspan="2">Batch</th>
                                <th rowspan="2">Reference</th>
                                <th rowspan="2">kWh</th>
                                <th rowspan="2">Net</th>
                                <th rowspan="2">VAT</th>
                                <th rowspan="2">Type</th>
                                <th rowspan="2">Status</th>
                                <xsl:for-each select="import-bills/tpr">
                                    <th colspan="4">
                                        <xsl:choose>
                                            <xsl:when test="@code">
                                                <a
                                                    href="{/source/request/@context-path}/reports/97/output/?tpr-id={@id}">
                                                    <xsl:value-of select="@code" />
                                                </a>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                MD
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </th>
                                </xsl:for-each>
                                <xsl:for-each select="import-bills/outer-read">
                                    <th colspan="3">
                                        <xsl:value-of select="@index" />
                                    </th>
                                </xsl:for-each>
                            </tr>

                            <tr>
                                <xsl:for-each select="import-bills/tpr">
                                    <th colspan="2">Previous</th>
                                    <th colspan="2">Present</th>
                                </xsl:for-each>
                                <xsl:for-each select="import-bills/outer-read">
                                    <th>TPR</th>
                                    <th>Previous</th>
                                    <th>Present</th>
                                </xsl:for-each>
                            </tr>
                        </thead>
                        <tbody>
                            <xsl:for-each select="import-bills/bill">
                                <xsl:choose>
                                    <xsl:when test="inner-reads | outer-reads">
                                        <xsl:for-each select="inner-reads">
                                            <tr>
                                                <xsl:if test="position()=1">
                                                    <td rowspan="{../@rows-high}">
                                                        <xsl:value-of select="'['" />
                                                        <a
                                                            href="{/source/request/@context-path}/supplier-contracts/{../batch/supplier-contract/@id}/batches/{../batch/@id}/bills/{../@id}/">
                                                            <xsl:value-of select="'edit'" />
                                                        </a>
                                                        <xsl:value-of select="']'" />
                                                    </td>

                                                    <td rowspan="{../@rows-high}">
                                                        <form
                                                            action="{/source/request/@context-path}/reports/111/output/">
                                                            <input type="hidden" name="bill-id" value="{../@id}" />
                                                            <input type="submit" name="check" value="Check" />
                                                        </form>
                                                    </td>
                                                    <td rowspan="{../@rows-high}">
                                                        <a
                                                            title="{concat(../hh-start-date[@label='start']/@year, '-', ../hh-start-date[@label='start']/@month, '-', ../hh-start-date[@label='start']/@day, ' ', ../hh-start-date[@label='start']/@hour, ':', ../hh-start-date[@label='start']/@minute)}">
                                                            <xsl:value-of
                                                                select="concat(../hh-start-date[@label='start']/@year, '-', ../hh-start-date[@label='start']/@month, '-', ../hh-start-date[@label='start']/@day)" />
                                                        </a>
                                                    </td>
                                                    <td rowspan="{../@rows-high}">
                                                        <a
                                                            title="{concat(../hh-start-date[@label='finish']/@year, '-', ../hh-start-date[@label='finish']/@month, '-', ../hh-start-date[@label='finish']/@day, ' ', ../hh-start-date[@label='finish']/@hour, ':', ../hh-start-date[@label='finish']/@minute)}">
                                                            <xsl:value-of
                                                                select="concat(../hh-start-date[@label='finish']/@year, '-', ../hh-start-date[@label='finish']/@month, '-', ../hh-start-date[@label='finish']/@day)" />
                                                        </a>
                                                    </td>
                                                    <td rowspan="{../@rows-high}">
                                                        <a
                                                            href="{/source/request/@context-path}/reports/91/output/?batch-id={../batch/@id}">
                                                            <xsl:value-of select="../batch/@reference" />
                                                        </a>
                                                    </td>
                                                    <td rowspan="{../@rows-high}">
                                                        <xsl:value-of select="../@reference" />
                                                    </td>
                                                    <td rowspan="{../@rows-high}">
                                                        <xsl:value-of select="../@kwh" />
                                                    </td>
                                                    <td rowspan="{../@rows-high}">
                                                        <xsl:value-of select="../@net" />
                                                    </td>
                                                    <td rowspan="{../@rows-high}">
                                                        <xsl:value-of select="../@vat" />
                                                    </td>
                                                    <td rowspan="{../@rows-high}">
 <a
                                            href="{/source/request/@context-path}/reports/201/output/?bill-type-id={../bill-type/@id}"
                                            title="{../bill-type/@description}">
                                                        <xsl:value-of select="../bill-type/@code" /></a>
                                                    </td>
                                                    <td rowspan="{../@rows-high}">
                                                        <xsl:choose>
                                                            <xsl:when test="not(../@is-paid)">
                                                                Pending
                                                            </xsl:when>
                                                            <xsl:when test="../@is-paid='true'">
                                                                Paid
                                                            </xsl:when>
                                                            <xsl:when test="../@is-paid='false'">
                                                                Rejected
                                                            </xsl:when>
                                                        </xsl:choose>
                                                    </td>
                                                </xsl:if>

                                                <xsl:for-each select="register-read">
                                                    <td style="border-right: none;">
                                                        <xsl:value-of select="@previous-value" />
                                                    </td>
                                                    <td style="border-left: none;">
                                                        <xsl:value-of select="read-type[@label='previous']/@code" />
                                                    </td>

                                                    <td style="border-right: none;">
                                                        <xsl:value-of select="@present-value" />
                                                    </td>
                                                    <td style="border-left: none;">
                                                        <xsl:value-of select="read-type[@label='present']/@code" />
                                                    </td>
                                                </xsl:for-each>
                                                <xsl:if test="position()=1">
                                                    <xsl:for-each select="../outer-reads/register-read">
                                                        <td>
                                                            <a
                                                                href="{/source/request/@context-path}/reports/97/output/?tpr-id={tpr/@id}">
                                                                <xsl:value-of select="tpr/@code" />
                                                            </a>
                                                        </td>
                                                        <td>
                                                            <xsl:value-of
                                                                select="concat(@previous-value, ' ', read-type[@label='previous']/@code)" />
                                                        </td>
                                                        <td>
                                                            <xsl:value-of
                                                                select="concat(@present-value, ' ', read-type[@label='present']/@code)" />
                                                        </td>
                                                    </xsl:for-each>
                                                </xsl:if>

                                            </tr>
                                        </xsl:for-each>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <tr>
                                            <td>
                                                <xsl:value-of select="'['" />
                                                <a
                                                    href="{/source/request/@context-path}/supplier-contracts/{batch/supplier-contract/@id}/batches/{batch/@id}/bills/{@id}/">
                                                    <xsl:value-of select="'edit'" />
                                                </a>
                                                <xsl:value-of select="']'" />
                                            </td>

                                            <td>
                                                <form action="{/source/request/@context-path}/reports/111/output/">
                                                    <input type="hidden" name="bill-id" value="{@id}" />
                                                    <input type="submit" name="check" value="Check" />
                                                </form>
                                            </td>
                                            <td>
                                                <a
                                                    title="{concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day, ' ', hh-start-date[@label='start']/@hour, ':', hh-start-date[@label='start']/@minute)}">
                                                    <xsl:value-of
                                                        select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day)" />
                                                </a>
                                            </td>
                                            <td>
                                                <a
                                                    title="{concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day, ' ', hh-start-date[@label='finish']/@hour, ':', hh-start-date[@label='finish']/@minute)}">
                                                    <xsl:value-of
                                                        select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day)" />
                                                </a>
                                            </td>
                                            <td>
                                                <a
                                                    href="{/source/request/@context-path}/reports/91/output/?batch-id={batch/@id}">
                                                    <xsl:value-of select="batch/@reference" />
                                                </a>
                                            </td>
                                            <td>
                                                <xsl:value-of select="@reference" />
                                            </td>
                                            <td>
                                                <xsl:value-of select="@kwh" />
                                            </td>
                                            <td>
                                                <xsl:value-of select="@net" />
                                            </td>
                                            <td>
                                                <xsl:value-of select="@vat" />
                                            </td>
                                            <td>
 <a
                                            href="{/source/request/@context-path}/reports/201/output/?bill-type-id={bill-type/@id}"
                                            title="{bill-type/@description}">
                                                <xsl:value-of select="bill-type/@code" /></a>
                                            </td>
                                            <td>
                                                <xsl:choose>
                                                    <xsl:when test="not(@is-paid)">
                                                        Pending
                                                    </xsl:when>
                                                    <xsl:when test="@is-paid='true'">
                                                        Paid
                                                    </xsl:when>
                                                    <xsl:when test="@is-paid='false'">
                                                        Rejected
                                                    </xsl:when>
                                                </xsl:choose>
                                            </td>
                                        </tr>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:for-each>
                        </tbody>
                    </table>
                    <br />
                </xsl:for-each>
                <ul>
                    <li>
                        kWh, kVA, MD etc. by month:
                        <a
                            href="{/source/request/@context-path}/reports/15/output/?supply-id={/source/supply/@id}&amp;is-import=true">
                            <xsl:value-of select="'Import'" />
                        </a>
                        <xsl:value-of select="' '" />
                        <a
                            href="{/source/request/@context-path}/reports/15/output/?supply-id={/source/supply/@id}&amp;is-import=false">
                            <xsl:value-of select="'Export'" />
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/17/output/?supply-id={/source/supply/@id}&amp;months=1&amp;finish-year={/source/date/@year}&amp;finish-month={/source/date/@month}">
                            Raw HH data
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/101/output/?supply-id={/source/supply/@id}">
                            Virtual Bill
                        </a>
                    </li>
                </ul>

                <h3>CSV Downloads</h3>

                <form action="{/source/request/@context-path}/reports/87/output/">
                    <fieldset>
                        <input type="hidden" name="contract-id" value="{/source/supplier-contract/@id}" />
                        <legend>Virtual Bills</legend>
                        <br />
                        <xsl:value-of select="'For '" />
                        <select name="supply-polarity">
                            <option value="import">
                                Import
                                </option>
                            <option value="export">
                                Export
                                </option>
                        </select>
                        <xsl:value-of select="' and '" />
                        <select name="source-code">
                            <option value="net">
                                Network
                                </option>
                            <option value="3rd-party">
                                Third Party     
                                </option>
                        </select>
                        <xsl:value-of select="' for '" />
                        <input name="months" value="1" maxlength="2" size="2" />
                        <xsl:value-of select="' month(s) until the end of '" />
                        <input name="end-year" value="{/source/date/@year}"
                            maxlength="4" size="4" />
                        <xsl:value-of select="' - '" />
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Download" />
                    </fieldset>
                </form>
                <br />
                <form action="{/source/request/@context-path}/reports/169/output/">
                    <fieldset>
                        <legend>HH Data</legend>
                        <input type="hidden" name="supply-id" value="{/source/supply/@id}" />
                        <br />
                        <xsl:value-of select="' '" />
                        <select name="is-import">
                            <option value="true">
                                Import
                        </option>
                            <option value="false">
                                Export
                        </option>
                        </select>
                        <xsl:value-of select="' '" />
                        <select name="is-kwh">
                            <option value="true">
                                kWh
                        </option>
                            <option value="false">
                                kVArh
                        </option>
                        </select>
                        <xsl:value-of select="' for '" />
                        <input name="months" maxlength="2" size="2">
                            <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when
                                test="/source/request/parameter[@name='months']">
                                <xsl:value-of
                                select="/source/request/parameter[@name='months']/value" />
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'" />
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
                        <xsl:value-of select="' month(s) finishing at the end of '" />
                        <input name="end-year" value="{/source/date/@year}"
                            maxlength="4" size="4" />
                        <xsl:value-of select="'-'" />
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Download" />
                    </fieldset>
                </form>
                <br />
                <form action="{/source/request/@context-path}/reports/41/output/">
                    <fieldset>
                        <legend>TRIAD</legend>
                        <input type="hidden" name="supply-id" value="{/source/supply/@id}" />
                        <br />
                        <xsl:value-of select="'For financial year ending March '" />
                        <input name="year" value="{/source/@triad-year}" size="4"
                            maxlength="4" />
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Download" />
                        <input type="reset" value="Reset" />
                    </fieldset>
                </form>
                <br />
                <form action="{/source/request/@context-path}/reports/149/output/">
                    <fieldset>
                        <input type="hidden" name="supply-id" value="{/source/supply/@id}" />
                        <legend>Duration</legend>
                        <p>
                            <xsl:value-of select="'From '" />
                            <input name="start-year" value="{/source/hh-start-date[@label='start']/@year}"
                                maxlength="4" size="4" />
                            <xsl:value-of select="'-'" />
                            <select name="start-month">
                                <xsl:for-each select="/source/months/month">
                                    <option value="{@number}">
                                        <xsl:if test="@number=/source/hh-start-date[@label='start']/@month">
                                            <xsl:attribute name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                            <xsl:value-of select="'-'" />
                            <select name="start-day">
                                <xsl:for-each select="/source/days/day">
                                    <option value="{@number}">
                                        <xsl:if test="@number=/source/hh-start-date[@label='start']/@day">
                                            <xsl:attribute name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                            <xsl:value-of select="' '" />
                            <select name="start-hour">
                                <xsl:for-each select="/source/hours/hour">
                                    <option value="{@number}">
                                        <xsl:if test="@number=/source/hh-start-date[@label='start']/@hour">
                                            <xsl:attribute name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                            <xsl:value-of select="':00 to '" />
                            <input name="finish-year"
                                value="{/source/hh-start-date[@label='finish']/@year}"
                                maxlength="4" size="4" />
                            <xsl:value-of select="'-'" />
                            <select name="finish-month">
                                <xsl:for-each select="/source/months/month">
                                    <option value="{@number}">
                                        <xsl:if
                                            test="@number=/source/hh-start-date[@label='finish']/@month">
                                            <xsl:attribute name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                            <xsl:value-of select="'-'" />
                            <select name="finish-day">
                                <xsl:for-each select="/source/days/day">
                                    <option value="{@number}">
                                        <xsl:if test="@number=/source/hh-start-date[@label='finish']/@day">
                                            <xsl:attribute name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                            <xsl:value-of select="' '" />
                            <select name="finish-hour">
                                <xsl:for-each select="/source/hours/hour">
                                    <option value="{@number}">
                                        <xsl:if test="@number=/source/hh-start-date[@label='finish']/@hour">
                                            <xsl:attribute name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                            <xsl:value-of select="':30 '" />
                            <input type="submit" value="Download" />
                        </p>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
    <xsl:template name="channel">
        <xsl:choose>
            <xsl:when test="@is-import='true'">
                Import
            </xsl:when>
            <xsl:otherwise>
                Export
            </xsl:otherwise>
        </xsl:choose>
        <xsl:value-of select="' '" />
        <xsl:choose>
            <xsl:when test="@is-kwh='true'">
                kWh
            </xsl:when>
            <xsl:otherwise>
                kVArh
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[9]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site hh graph container]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import Site
from java.util import Calendar

site_id = inv.getLong("site-id")
site = Site.getSite(site_id)
source.appendChild(site.toXml(doc))
cal = MonadDate.getCalendar()

if inv.hasParameter("finish-year") and inv.hasParameter("finish-month"):
    year = inv.getInteger("finish-year")
    month = inv.getInteger("finish-month")
else:
    year = cal.get(Calendar.YEAR)
    month = cal.get(Calendar.MONTH) + 1
if inv.hasParameter("months"):
    months = inv.getInteger("months")
else:
    months = 1
for i in range(12):
    monthElement = doc.createElement("month")
    source.appendChild(monthElement)
    monthElement.setAttribute("value", str(i + 1))
source.setAttribute("finish-year", str(year))
source.setAttribute("finish-month", str(month))
source.setAttribute("months", str(months))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output" />
                <title>
                    Home &gt; Sites &gt;
                    <xsl:value-of select="/source/site/@name" />
                    HH graph of site use
                </title>
            </head>
            <body>
                <p>
                    <a href="{/source/request/@context-path}/reports/1/output/">Home</a> &gt;
                    <a href="{/source/request/@context-path}/reports/3/output/">
                        <xsl:value-of select="'Sites'" />
                    </a>
                    &gt; <a
                        href="{/source/request/@context-path}/reports/5/output/?site-id={/source/site/@id}">
                        <xsl:value-of select="/source/site/@name" />
                    </a>
                    &gt; HH graph of site use
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <p>
                    <img
                        src="{/source/request/@context-path}/reports/21/output/?site-id={/source/site/@id}&amp;finish-year={/source/@finish-year}&amp;finish-month={/source/@finish-month}&amp;months={/source/@months}" />
                </p>
                <form action=".">
                    <fieldset>
                        <legend>Show graph</legend>
                        <input type="hidden" name="site-id"
                            value="{/source/request/parameter[@name='site-id']/value}" />
                        <xsl:value-of select="'For '" />
                        <select name="months">
                            <xsl:for-each select="/source/month">
                                <option>
                                    <xsl:if
                                        test="/source/@months = @value">
                                        <xsl:attribute
   name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@value" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' months finishing in '" />
                        <input size="4" length="4"
                            name="finish-year" value="{/source/@finish-year}" />
                        <xsl:value-of select="' - '" />
                        <select name="finish-month">
                            <xsl:for-each select="/source/month">
                                <option>
                                    <xsl:if
                                        test="number(/source/@finish-month) = number(@value)">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@value" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Show" />
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[11]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site Generation Graph Container]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import Site
from java.util import Calendar

site_id = inv.getLong("site-id")
site = Site.getSite(site_id)
source.appendChild(site.toXml(doc))
cal = MonadDate.getCalendar()
if inv.hasParameter("finish-year"):
    year = inv.getInteger("finish-year")
else:
    year = cal.get(Calendar.YEAR)
source.setAttribute("finish-year", str(year))
if inv.hasParameter("finish-month"):
    month = inv.getInteger("finish-month")
else:
    month = cal.get(Calendar.MONTH) + 1
if inv.hasParameter("months"):
    months = inv.getInteger("months")
else:
    months = 1
for i in range(12):
    monthElement = doc.createElement("month")
    source.appendChild(monthElement)
    monthElement.setAttribute("value", str(i + 1))
source.setAttribute("finish-year", str(year))
source.setAttribute("finish-month", str(month))
source.setAttribute("months", str(months))
source.appendChild(inv.requestXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml" encoding="US-ASCII"
    doctype-public="-//W3C//DTD XHTML 1.1//EN"
    doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
    indent="yes" />
  <xsl:template match="/">
    <html>
      <head>
        <link rel="stylesheet" type="text/css"
            href="{/source/request/@context-path}/reports/19/output/" />
        <title>Home &gt; Sites &gt;
            <xsl:value-of select="/source/site/@name" />
        </title>
      </head>
      <body>
        <p>
          <a href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
          &gt;
          <a href="{/source/request/@context-path}/reports/3/output/">
            <xsl:value-of select="'Sites'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/5/output/?site-id={/source/site/@id}">
                        <xsl:value-of select="/source/site/@name" />
                    </a>
                    &gt; HH graph of generation
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>

                <p>
                    <img
                        src="{/source/request/@context-path}/reports/23/output/?site-id={/source/site/@id}&amp;finish-year={/source/@finish-year}&amp;finish-month={/source/@finish-month}&amp;months={/source/@months}" />
                </p>
                <form action=".">
                    <fieldset>
                        <legend>Show graph</legend>
                        <input type="hidden" name="site-id"
                            value="{/source/request/parameter[@name='site-id']/value}" />
                        <xsl:value-of select="'For '" />
                        <select name="months">
                            <xsl:for-each select="/source/month">
                                <option>
                                    <xsl:if
                                        test="/source/@months = @value">
                                        <xsl:attribute
                                            name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@value" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' months finishing at the end of '" />
                        <input size="4" length="4"
                            name="finish-year" value="{/source/@finish-year}" />
                        <xsl:value-of select="' - '" />
                        <select name="finish-month">
                            <xsl:for-each select="/source/month">
                                <option>
                                    <xsl:if
                                        test="number(/source/@finish-month) = number(@value)">
                                        <xsl:attribute
                                            name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@value" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Show" />
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[13]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site Monthly figures]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException, XmlTree
from java.lang import System
from net.sf.chellow.monad.types import MonadDate
import math
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate
from net.sf.chellow.physical import Site

site_id = inv.getLong("site-id")
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
if inv.hasParameter("finish-year"):
    year = inv.getInteger("finish-year")
    cal.set(Calendar.YEAR, year)
if inv.hasParameter("finish-month"):
    month = inv.getInteger("finish-month")
    cal.set(Calendar.MONTH, month - 1)
for i in range(12):
    month_element = doc.createElement("month-in-year")
    source.appendChild(month_element)
    month_element.setAttribute('value', '%02d' % (i + 1))
#source.appendChild(inv.requestXml(doc))
if not inv.isValid():
    raise UserException()

cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())

source.setAttribute("finish-year", str(cal.get(Calendar.YEAR)))
source.setAttribute("finish-month", str(cal.get(Calendar.MONTH) + 1))
cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -12)
start_date = HhStartDate(cal.getTime())

site = Site.getSite(site_id)
source.appendChild(site.toXml(doc))
supplies = Hiber.session().createQuery("select distinct supply from Supply supply join supply.generations supplyGeneration join supplyGeneration.siteSupplyGenerations siteSupplyGeneration where siteSupplyGeneration.site = :site and supply.source.code != 'sub'").setEntity('site', site).list()
con = Hiber.session().connection()
if len(supplies) == 0:
    stmt = con.prepareStatement("select * from hh_datum where hh_datum.value = 0 and hh_datum.value = 1")
else:
    supplies_sql = ','.join(str(supply.getId()) for supply in supplies)

    stmt = con.prepareStatement("select hh_datum.value, hh_datum.start_date, hh_datum.status, channel.is_import, supply.name, source.code from hh_datum, channel, supply, supply_generation, source where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = supply.id and supply.source_id = source.id and channel.is_kwh is true and hh_datum.start_date >= ? and hh_datum.start_date <= ? and supply.id in (" + supplies_sql + ") order by hh_datum.start_date desc", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
    stmt.setTimestamp(1, Timestamp(start_date.getDate().getTime()))
    stmt.setTimestamp(2, Timestamp(finish_date.getDate().getTime()))
    stmt.setFetchSize(100)

rs = stmt.executeQuery()
hhDate = finish_date.getDate().getTime()
maxExportedKw = 0
maxExportedKwDate = None
maxExportedKwYear = 0
maxExportedKwYearDate = None
exportedKwhMonth = 0
exportedKwhYear = 0
exportedKwh = 0
maxImportedKw = 0
maxImportedKwDate = None
maxImportedKwYear = 0
maxImportedKwYearDate = None
importedKwhMonth = 0
importedKwhYear = 0
importedKwh = 0
maxGeneratedKw = 0
maxGeneratedKwDate = None
maxGeneratedKwYear = 0
maxGeneratedKwYearDate = None
generatedKwhMonth = 0
generatedKwhYear = 0
generatedKwh = 0
maxParasiticKw = 0
maxParasiticKwDate = None
maxParasiticKwYear = 0
maxParasiticKwYearDate = None
parasiticKwhMonth = 0
parasiticKwhYear = 0
parasiticKwh = 0
maxDisplacedKw = 0
maxDisplacedKwDate = None
maxDisplacedKwYear = 0
maxDisplacedKwYearDate = None
displacedKwhMonth = 0
displacedKwhYear = 0
displacedKwh = 0
maxUsedKw = 0
maxUsedKwDate = None
maxUsedKwYear = 0
maxUsedKwYearDate = None
usedKwhMonth = 0
usedKwhYear = 0
usedKwh = 0

siteSnagQuery = Hiber.session().createQuery("select count(*) from SiteSnag snag where snag.site = :site and snag.startDate.date <= :finishDate and snag.finishDate.date >= :startDate)").setEntity("site", site)

if rs.next():
    hhChannelKw = rs.getFloat("value") * 2
    hhChannelStartDate = rs.getTimestamp("start_date")
    isImport = rs.getBoolean("is_import")
    status = rs.getString("status")
    sourceCode = rs.getString("code")
    supplyName = rs.getString("name")
    finishDateMillis = finish_date.getDate().getTime()
    startDateMillis = start_date.getDate().getTime()
    cal.clear()
    cal.setTime(hhChannelStartDate)
    previousMonth = cal.get(Calendar.MONTH)
    while hhDate >= startDateMillis:
        exportedKw = 0
        importedKw = 0
        parasiticKw = 0
        generatedKw = 0
        while hhChannelStartDate != None and hhChannelStartDate.getTime() == hhDate:
            if not isImport and sourceCode in ('net', 'gen-net'):
                exportedKw = exportedKw + hhChannelKw
            if isImport and sourceCode in ('net', 'gen-net'):
                importedKw = importedKw + hhChannelKw
            if (isImport and sourceCode == 'gen') or (not isImport and sourceCode == 'gen-net'):
                generatedKw = generatedKw + hhChannelKw
            if (not isImport and sourceCode == 'gen') or (isImport and sourceCode == 'gen-net'):
                parasiticKw = parasiticKw + hhChannelKw
            if rs.next():
                sourceCode = rs.getString("code")
                supplyName = rs.getString("name")
                hhChannelKw = rs.getFloat("value") * 2
                hhChannelStartDate = rs.getTimestamp("start_date")
                isImport = rs.getBoolean("is_import")
                status = rs.getString("status")
                cal.clear()
                cal.setTime(hhChannelStartDate)
                month = cal.get(Calendar.MONTH)
            else:
                hhChannelStartDate = None
        if exportedKw > maxExportedKw:
            maxExportedKw = exportedKw
            maxExportedKwDate = hhDate
        if importedKw > maxImportedKw:
            maxImportedKw = importedKw
            maxImportedKwDate = hhDate
        if generatedKw > maxGeneratedKw:
            maxGeneratedKw = generatedKw
            maxGeneratedKwDate = hhDate
        if parasiticKw > maxParasiticKw:
            maxParasiticKw = parasiticKw
            maxParasiticKwDate = hhDate
        displacedKw = generatedKw - parasiticKw - exportedKw
        if displacedKw > maxDisplacedKw:
            maxDisplacedKw = displacedKw
            maxDisplacedKwDate = hhDate
        usedKw = importedKw + displacedKw
        if usedKw > maxUsedKw:
            maxUsedKw = usedKw
            maxUsedKwDate = hhDate
        exportedKwhMonth = exportedKwhMonth + exportedKw / 2
        importedKwhMonth = importedKwhMonth + importedKw / 2
        generatedKwhMonth = generatedKwhMonth + generatedKw / 2
        parasiticKwhMonth = parasiticKwhMonth + parasiticKw / 2
        displacedKwhMonth = displacedKwhMonth + displacedKw / 2
        usedKwhMonth = usedKwhMonth + usedKw / 2
        cal.clear()
        cal.setTimeInMillis(hhDate)
        if cal.get(Calendar.DAY_OF_MONTH) == 1 and cal.get(Calendar.HOUR_OF_DAY) == 0 and cal.get(Calendar.MINUTE) == 0:
            monthElement = doc.createElement("month")
            source.appendChild(monthElement)
            cal.add(Calendar.MINUTE, 30)
            monthStartDate = cal.getTime()
            cal.add(Calendar.MONTH, 1)
            cal.add(Calendar.MINUTE, -30)
            monthFinishDate = cal.getTime()
            if siteSnagQuery.setTimestamp("startDate", monthStartDate).setTimestamp("finishDate", monthFinishDate).uniqueResult() > 0:
                monthElement.setAttribute("has-site-snags", "true")
            monthStartMonadDate = HhStartDate(monthStartDate)
            monthStartMonadDate.setLabel("start")
            monthElement.appendChild(monthStartMonadDate.toXml(doc))
            monthFinishMonadDate = HhStartDate(monthFinishDate)
            monthFinishMonadDate.setLabel("finish")
            monthElement.appendChild(monthFinishMonadDate.toXml(doc))
            monthElement.setAttribute("max-exported-kw", str(int(round(maxExportedKw))))
            if maxExportedKwDate != None:
                monthElement.setAttribute("max-exported-kw-date", MonadDate(Date(maxExportedKwDate)).toString())
            monthElement.setAttribute("exported-kwh", str(int(round(exportedKwhMonth))))
            monthElement.setAttribute("max-imported-kw", str(int(round(maxImportedKw))))
            if maxImportedKwDate != None:
                monthElement.setAttribute("max-imported-kw-date", MonadDate(Date(maxImportedKwDate)).toString())
            monthElement.setAttribute("imported-kwh", str(int(round(importedKwhMonth))))
            monthElement.setAttribute("max-generated-kw", str(int(round(maxGeneratedKw))))
            if maxGeneratedKwDate != None:
                monthElement.setAttribute("max-generated-kw-date", MonadDate(Date(maxGeneratedKwDate)).toString())
            monthElement.setAttribute("generated-kwh", str(int(round(generatedKwhMonth))))
            monthElement.setAttribute("max-parasitic-kw", str(int(round(maxParasiticKw))))
            if maxParasiticKwDate != None:
                monthElement.setAttribute("max-parasitic-kw-date", MonadDate(Date(maxParasiticKwDate)).toString())
            monthElement.setAttribute("parasitic-kwh", str(int(round(parasiticKwhMonth))))
            monthElement.setAttribute("max-displaced-kw", str(int(round(maxDisplacedKw))))
            if maxDisplacedKwDate != None:
                monthElement.setAttribute("max-displaced-kw-date", MonadDate(Date(maxDisplacedKwDate)).toString())
            monthElement.setAttribute("displaced-kwh", str(int(round(displacedKwhMonth))))
            monthElement.setAttribute("max-used-kw", str(int(round(maxUsedKw))))
            if maxUsedKwDate != None:
                monthElement.setAttribute("max-used-kw-date", MonadDate(Date(maxUsedKwDate)).toString())
            monthElement.setAttribute("used-kwh", str(int(round(usedKwhMonth))))
            if maxExportedKw > maxExportedKwYear:
                maxExportedKwYear = maxExportedKw
                maxExportedKwYearDate = maxExportedKwDate
            maxExportedKw = 0
            maxExportedKwDate = None
            exportedKwhYear = exportedKwhYear + exportedKwhMonth
            exportedKwhMonth = 0
            if maxImportedKw > maxImportedKwYear:
                maxImportedKwYear = maxImportedKw
                maxImportedKwYearDate = maxImportedKwDate
            maxImportedKw = 0
            maxImportedKwDate = None
            importedKwhYear = importedKwhYear + importedKwhMonth
            importedKwhMonth = 0
            if maxGeneratedKw > maxGeneratedKwYear:
                maxGeneratedKwYear = maxGeneratedKw
                maxGeneratedKwYearDate = maxGeneratedKwDate
            maxGeneratedKw = 0
            maxGeneratedKwDate = None
            generatedKwhYear = generatedKwhYear + generatedKwhMonth
            generatedKwhMonth = 0
            if maxParasiticKw > maxParasiticKwYear:
                maxParasiticKwYear = maxParasiticKw
                maxParasiticKwYearDate = maxParasiticKwDate
            maxParasiticKw = 0
            maxParasiticKwDate = None
            parasiticKwhYear = parasiticKwhYear + parasiticKwhMonth
            parasiticKwhMonth = 0
            if maxDisplacedKw > maxDisplacedKwYear:
                maxDisplacedKwYear = maxDisplacedKw
                maxDisplacedKwYearDate = maxDisplacedKwDate
            maxDisplacedKw = 0
            maxDisplacedKwDate = None
            displacedKwhYear = displacedKwhYear + displacedKwhMonth
            displacedKwhMonth = 0
            if maxUsedKw > maxUsedKwYear:
                maxUsedKwYear = maxUsedKw
                maxUsedKwYearDate = maxUsedKwDate
            maxUsedKw = 0
            maxUsedKwDate = None
            usedKwhYear = usedKwhYear + usedKwhMonth
            usedKwhMonth = 0
        hhDate = HhStartDate.getPrevious(cal, hhDate)
    source.setAttribute("max-exported-kw", str(int(round(maxExportedKwYear))))
    if maxExportedKwYearDate != None:
        source.setAttribute("max-exported-kw-date", MonadDate(Date(maxExportedKwYearDate)).toString())
    source.setAttribute("exported-kwh", str(int(round(exportedKwhYear))))
    source.setAttribute("max-imported-kw", str(int(round(maxImportedKwYear))))
    if maxImportedKwYearDate != None:
        source.setAttribute("max-imported-kw-date", MonadDate(Date(maxImportedKwYearDate)).toString())
    source.setAttribute("imported-kwh", str(int(round(importedKwhYear))))
    source.setAttribute("max-generated-kw", str(int(round(maxGeneratedKwYear))))
    if maxGeneratedKwYearDate != None:
        source.setAttribute("max-generated-kw-date", MonadDate(Date(maxGeneratedKwYearDate)).toString())
    source.setAttribute("generated-kwh", str(int(round(generatedKwhYear))))
    source.setAttribute("max-parasitic-kw", str(int(round(maxParasiticKwYear))))
    if maxParasiticKwYearDate != None:
        source.setAttribute("max-parasitic-kw-date", MonadDate(Date(maxParasiticKwYearDate)).toString())
    source.setAttribute("parasitic-kwh", str(int(round(parasiticKwhYear))))
    source.setAttribute("max-displaced-kw", str(int(round(maxDisplacedKwYear))))
    if maxDisplacedKwYearDate != None:
        source.setAttribute("max-displaced-kw-date", MonadDate(Date(maxDisplacedKwYearDate)).toString())
    source.setAttribute("displaced-kwh", str(int(round(displacedKwhYear))))
    source.setAttribute("max-used-kw", str(int(round(maxUsedKwYear))))
    if maxUsedKwYearDate != None:
        source.setAttribute("max-used-kw-date", MonadDate(Date(maxUsedKwYearDate)).toString())
    source.setAttribute("used-kwh", str(int(round(usedKwhYear))))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
  <xsl:template match="/">
    <html>
      <head>
        <link rel="stylesheet" type="text/css"
            href="{/source/request/@context-path}/reports/10/output/" />
        <title>Home &gt; Sites &gt; <xsl:value-of
                        select="concat(/source/site/@code, ' ', /source/site/@name)" />
                    &gt; Monthly figures
        </title>
                <style>
                    &lt;![CDATA[
                colgroup.gray {
                    background: silver;
                }

                tr.error {
                    color: red;
                }
                ]]&gt;
                </style>
      </head>
      <body>
        <p><a href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/3/output/">
                        <xsl:value-of select="'Sites'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/5/output/?site-id={/source/site/@id}">
                        <xsl:value-of
                            select="concat(/source/site/@code, ' ', /source/site/@name)" />
                    </a>
                    &gt; Monthly figures
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action=".">
                    <fieldset>
                        <legend>Show table</legend>
                        <input type="hidden" name="site-id"
                            value="{/source/request/parameter[@name='site-id']/value}" />
                        <xsl:value-of
                            select="'For 12 months finishing at the end of '" />
                        <input size="4" length="4"
                            name="finish-year" value="{/source/@finish-year}" />
                        <xsl:value-of select="' - '" />
                        <select name="finish-month">
                            <xsl:for-each
                                select="/source/month-in-year">
                                <option>
                                    <xsl:if
                                        test="number(/source/@finish-month) = number(@value)">
                                        <xsl:attribute
                                            name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@value" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Show" />
                    </fieldset>
                </form>

                <table>
                    <caption>Months</caption>
                    <colgroup />
                    <colgroup class="gray" span="3" />
                    <colgroup span="3" />
                    <colgroup class="gray" span="3" />
                    <colgroup span="3" />
                    <colgroup class="gray" span="3" />
                    <colgroup span="3" />
                    <tfoot>
                        <tr>
                            <th>For all months</th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-imported-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-imported-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-imported-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@imported-kwh" />
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-used-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-used-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-used-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@used-kwh" />
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-displaced-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-displaced-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-displaced-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@displaced-kwh" />
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-generated-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-generated-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-generated-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@generated-kwh" />
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-exported-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-exported-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-exported-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@exported-kwh" />
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-parasitic-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-parasitic-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-parasitic-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@parasitic-kwh" />
                            </th>
                        </tr>
                    </tfoot>
                    <thead>
                        <tr>
                            <th rowspan="2">Month</th>
                            <th colspan="3">Imported</th>
                            <th colspan="3">Used</th>
                            <th colspan="3">Displaced</th>
                            <th colspan="3">Generated</th>
                            <th colspan="3">Exported</th>
                            <th colspan="3">Parasitic</th>
                        </tr>
                        <tr>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>Data quality</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/month">
                            <tr>
                                <xsl:if test="@has-site-snags">
                                    <xsl:attribute name="class">
                                        <xsl:value-of select="'error'" />
                                    </xsl:attribute>
                                </xsl:if>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@max-imported-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-imported-kw-date">
                                            <xsl:value-of
                                                select="@max-imported-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@imported-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of select="@max-used-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-used-kw-date">
                                            <xsl:value-of
                                                select="@max-used-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of select="@used-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@max-displaced-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-displaced-kw-date">
                                            <xsl:value-of
                                                select="@max-displaced-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@displaced-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@max-generated-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-generated-kw-date">
                                            <xsl:value-of
                                                select="@max-generated-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@generated-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@max-exported-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-exported-kw-date">
                                            <xsl:value-of
                                                select="@max-exported-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@exported-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@max-parasitic-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-parasitic-kw-date">
                                            <xsl:value-of
                                                select="@max-parasitic-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@parasitic-kwh" />
                                </td>
                                <td>
                                    <xsl:if
                                        test="@has-site-snags = 'true'">
                                        See
                                        <a
                                            href="{/source/request/@context-path}/reports/11/output/?site-id={/source/site/@id}&amp;months=1&amp;finish-year={hh-start-date[@label='start']/@year}&amp;finish-month={hh-start-date[@label='start']/@month}">
                                            generation graph
                                        </a>
                                        for errors.
                                    </xsl:if>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[15]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supply MPAN months]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.monad.types import MonadDate
from java.util import Calendar, Locale, TimeZone, GregorianCalendar
from net.sf.chellow.physical import HhStartDate, Supply

supply_id = inv.getLong("supply-id")
supply = Supply.getSupply(supply_id)
source.appendChild(supply.toXml(doc))
is_import = inv.getBoolean("is-import");
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
source.appendChild(MonadDate().toXml(doc))
if inv.hasParameter('year'):
    year = inv.getInteger('year')
    years = inv.getInteger('years')
else:
    year = cal.get(Calendar.YEAR)
    years = 1

source.appendChild(MonadDate.getMonthsXml(doc))

cal.set(Calendar.YEAR, year - years + 1)
cal.set(Calendar.MONTH, Calendar.JANUARY)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
month_start = HhStartDate(cal.getTime())

kwh_at_md_query = Hiber.session().createQuery("from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isKwh = true and datum.channel.isImport = :isImport and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate order by datum.value desc, datum.startDate.date").setEntity("supply", supply).setBoolean('isImport', is_import)

kvarh_at_md_query = Hiber.session().createQuery("from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isKwh = false and datum.channel.isImport = :isImport and datum.startDate.date = :mdDate").setEntity("supply", supply).setBoolean('isImport', is_import)

total_kwh_query = Hiber.session().createQuery("select sum(datum.value) from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isKwh = true and datum.channel.isImport = :isImport and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate").setEntity("supply", supply).setBoolean('isImport', is_import)

for i in range(12 * years):
    cal.add(Calendar.MONTH, 1)
    next_month_start = HhStartDate(cal.getTime())
    month_finish = next_month_start.getPrevious()
    
    month_element = doc.createElement("month")
    source.appendChild(month_element)
    generation = supply.getGeneration(month_finish)
    if generation != None:
        mpan = generation.getMpan(is_import)
        if mpan != None:
            month_element.setAttribute("mpan-core", mpan.getCore().toString())
            month_element.setAttribute("agreed-supply-capacity", str(mpan.getAgreedSupplyCapacity()))
    kwh_at_md_datum = kwh_at_md_query.setTimestamp("startDate", month_start.getDate()).setTimestamp("finishDate", month_finish.getDate()).setMaxResults(1).uniqueResult()
    if kwh_at_md_datum is not None:
        kwh_at_md = kwh_at_md_datum.getValue().doubleValue()
        month_element.setAttribute("md-kw", str(round(kwh_at_md * 2)))
        md_date = kwh_at_md_datum.getStartDate()
        md_date.setLabel('md')
        month_element.appendChild(md_date.toXml(doc))
        kvarh_at_md_datum = kvarh_at_md_query.setTimestamp("mdDate", kwh_at_md_datum.getStartDate().getDate()).uniqueResult()
        if kvarh_at_md_datum != None:
            kvarh_at_md = kvarh_at_md_datum.getValue().doubleValue()
            kvah_at_md = (kwh_at_md ** 2 + kvarh_at_md ** 2) ** 0.5
            if kvah_at_md > 0:
                pf = kwh_at_md / kvah_at_md
                month_element.setAttribute("pf", str(round(pf, 4)))
            month_element.setAttribute("kva-at-md", str(round(kvah_at_md * 2)))
    total_kwh = total_kwh_query.setTimestamp("startDate", month_start.getDate()).setTimestamp("finishDate", month_finish.getDate()).uniqueResult()
    if total_kwh != None:
        month_element.setAttribute("total-kwh", str(round(total_kwh.doubleValue())))
    month_start.setLabel('month-start')
    month_element.appendChild(month_start.toXml(doc))
    month_start = next_month_start]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Supplies &gt;
                    <xsl:value-of select="/source/supply/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/99/output/">
                        <xsl:value-of select="'Supplies'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/7/output/?supply-id={/source/supply/@id}">
                        <xsl:value-of select="/source/supply/@id" />
                    </a>
                    &gt;
                    <xsl:choose>
                        <xsl:when
                            test="/source/request/parameter[@name='is-import']/value = 'true'">
                            Import
                        </xsl:when>
                        <xsl:otherwise>Export</xsl:otherwise>
                    </xsl:choose>
                    data by month
                </p>

                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action=".">
                    <fieldset>
                        <input type="hidden" name="is-import" value="{/source/request/parameter[@name='is-import']/value}"/>
                        <input type="hidden" name="supply-id" value="{/source/supply/@id}"/>
                        <legend>View Supply Months</legend>
<br/>

                        <xsl:value-of select="'For '"/>
                        <input name="years" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='years']">
                                <xsl:value-of select="/source/request/parameter[@name='years']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input><xsl:value-of select="' years, ending 31st December '"/>
<input name="year" maxlength="4" size="4">
<xsl:attribute name="value">
    <xsl:choose>
        <xsl:when test="/source/request/parameter[@name='year']">
            <xsl:value-of select="/source/request/parameter[@name='year']"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="/source/date/@year"/>
        </xsl:otherwise>
    </xsl:choose>
</xsl:attribute>
</input><xsl:value-of select="' '"/>
                       <input type="submit" value="View"/><br/><br/>
                    </fieldset>
                </form>
                <table>
                    <caption>Months</caption>
                    <thead>
                        <tr>
                            <th rowspan="2">Month Starting (UTC)</th>
                            <th rowspan="2">MPAN Core</th>
                            <th colspan="4">At MD kW</th>
                            <th rowspan="2">Agreed Supply Capacity (kVA)</th>
                            <th rowspan="2">kWh</th>
                        </tr>
                        <tr>
                            <th>Date (UTC)</th>
                            <th>kW</th>
                            <th>Power Factor</th>
                            <th>kVA</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/month">
                            <tr>
                                <td>
                                    <xsl:value-of select="concat(hh-start-date[@label='month-start']/@year, '-', hh-start-date[@label='month-start']/@month, '-', hh-start-date[@label='month-start']/@day, ' ', hh-start-date[@label='month-start']/@hour, ':', hh-start-date[@label='month-start']/@minute)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@mpan-core">
                                            <xsl:value-of
                                                select="@mpan-core" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="hh-start-date[@label='md']">
                                            <xsl:value-of
                                                select="concat(hh-start-date[@label='md']/@year, '-', hh-start-date[@label='md']/@month, '-', hh-start-date[@label='md']/@day, ' ', hh-start-date[@label='md']/@hour, ':', hh-start-date[@label='md']/@minute)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@md-kw">
                                            <xsl:value-of
                                                select="round(@md-kw)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@pf">
                                            <xsl:value-of select="@pf" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@kva-at-md">
                                            <xsl:value-of
                                                select="round(@kva-at-md)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@agreed-supply-capacity">
                                            <xsl:value-of
                                                select="@agreed-supply-capacity" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@total-kwh">
                                            <xsl:value-of
                                                select="round(@total-kwh)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[17]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supply Raw HH Data]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException, XmlTree
from java.util import Calendar, GregorianCalendar, TimeZone, Locale, Date
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.text import SimpleDateFormat
from net.sf.chellow.physical import HhStartDate, HhDatum, Supply

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
supply_id = inv.getLong("supply-id")
months = inv.getInteger('months')
finish_year = inv.getInteger("finish-year")
finish_month = inv.getInteger("finish-month")
if not inv.isValid():
    raise UserException()

cal.clear()
cal.set(Calendar.YEAR, finish_year)
cal.set(Calendar.MONTH, finish_month - 1)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = cal.getTime()
cal.add(Calendar.MINUTE, 30)

cal.add(Calendar.MONTH, months * -1)
start_date = cal.getTime()
dateFormat = SimpleDateFormat("yyyy-MM-dd' 'HH:mm'Z'")
dateFormat.setCalendar(cal)
supply = Supply.getSupply(supply_id)
supplyElement = supply.toXml(doc, XmlTree("generationLast", XmlTree("mpans", XmlTree("core").put('llfc'))).put("source"))
source.appendChild(supplyElement)
source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))
con = Hiber.session().connection()
stmt = con.prepareStatement("select hh_datum.value, hh_datum.start_date, hh_datum.status, channel.is_import, channel.is_kwh from hh_datum, channel, supply_generation where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = ? and hh_datum.start_date >= ? and hh_datum.start_date <= ? order by hh_datum.start_date", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
stmt.setInt(1, supply.getId())
stmt.setTimestamp(2, Timestamp(start_date.getTime()))
stmt.setTimestamp(3, Timestamp(finish_date.getTime()))
stmt.setFetchSize(100)
rs = stmt.executeQuery()
hhDate = start_date.getTime()
actualStatus = HhDatum.ACTUAL
if rs.next():
    value_str = rs.getBigDecimal("value").toString()
    hhChannelStartDate = rs.getTimestamp("start_date")
    isImport = rs.getBoolean("is_import")
    isKwh = rs.getBoolean("is_kwh")
    status = rs.getString("status")
    finishDateMillis = finish_date.getTime()
    cal = MonadDate.getCalendar()
    while hhDate <= finishDateMillis:
        datumElement = doc.createElement("datum")
        supplyElement.appendChild(datumElement)
        datumElement.setAttribute("timestamp", dateFormat.format(Date(hhDate)))
        while hhChannelStartDate != None and hhChannelStartDate.getTime() == hhDate:
            if isImport:
                if isKwh:
                    datumElement.setAttribute("import-kwh-value", value_str)
                    datumElement.setAttribute("import-kwh-status", status)
                else:
                    datumElement.setAttribute("import-kvarh-value", value_str)
                    datumElement.setAttribute("import-kvarh-status", status)
            else:
                if isKwh:
                    datumElement.setAttribute("export-kwh-value", value_str)
                    datumElement.setAttribute("export-kwh-status", status)
                else:
                    datumElement.setAttribute("export-kvarh-value", value_str)
                    datumElement.setAttribute("export-kvarh-status", status)
            if rs.next():
                value_str = rs.getBigDecimal("value").toString()
                hhChannelStartDate = rs.getTimestamp("start_date")
                isImport = rs.getBoolean("is_import")
                isKwh = rs.getBoolean("is_kwh")
                status = rs.getString("status")
            else:
                hhChannelStartDate = None
        hhDate = HhStartDate.getNext(cal, hhDate)
rs.close()]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />

    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Home &gt; Supplies &gt;
                    <xsl:value-of select="/source/supply/@name" />
                    &gt; Hh data
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/99/output/">
                        <xsl:value-of select="'Supplies'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/7/output/?supply-id={/source/supply/@id}">
                        <xsl:value-of select="/source/supply/@name" />
                    </a>
                    &gt; HH Data
                </p>

                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>

                <table><caption>Supply</caption>
                    <tr>
                        <th>Name</th>
                        <td><xsl:value-of select="/source/supply/@name" /></td>
                    </tr>
                    <tr>
                        <th>Import MPAN core</th>
                        <td><xsl:value-of
                            select="/source/supply/supply-generation/mpan[llfc/@is-import='true']/mpan-core/@core" /></td>
                    </tr>
                    <tr>
                        <th>Export MPAN core</th>
                        <td><xsl:value-of
                            select="/source/supply/supply-generation/mpan[llfc/@is-import='false']/mpan-core/@core" /></td>
                    </tr>
                    <tr>
                        <th>Source Code</th>
                        <td><xsl:value-of
                            select="/source/supply/source/@code" /></td>
                    </tr>
                </table>
                <br/>
                <form action=".">
                    <fieldset>
                        <legend>Show HH Data</legend>
                        <input type="hidden" name="supply-id"
                            value="{/source/supply/@id}" />
<br/>
                        <xsl:value-of select="'For '"/>
                        <input name="months" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='months']">
                                <xsl:value-of select="/source/request/parameter[@name='months']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
<xsl:value-of select="' month(s) finishing at the end of '"/>
                        <input name="finish-year" value="{/source/request/parameter[@name='finish-year']/value}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="finish-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/request/parameter[@name='finish-month']/value">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Show"/>
                    </fieldset>
                </form>
                <table>
                    <caption>Hh Data</caption>
                    <thead>
                        <tr>
                            <th rowspan="3">HH Starting</th>
                            <th colspan="4">Import</th>
                            <th colspan="4">Export</th>
                        </tr>
                        <tr>
                            <th colspan="2">kWh</th>
                            <th colspan="2">kVArh</th>
                            <th colspan="2">kWh</th>
                            <th colspan="2">kVArh</th>
                        </tr>
                        <tr>
                            <th>Value</th>
                            <th>Status</th>
                            <th>Value</th>
                            <th>Status</th>
                            <th>Value</th>
                            <th>Status</th>
                            <th>Value</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/supply/datum">
                            <tr>
                                <td>
                                    <xsl:value-of select="@timestamp" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@import-kwh-value" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@import-kwh-status" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@import-kvarh-value" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@import-kvarh-status" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@export-kwh-value" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@export-kwh-status" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@export-kvarh-value" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@export-kvarh-status" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[19]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Style Sheet]]></value>
        <value><![CDATA[inv.getResponse().setContentType("text/css")
pw = inv.getResponse().getWriter()
pw.println("table {                         ")
pw.println("    border: thin solid gray;    ")
pw.println("    border-collapse: collapse;  ")
pw.println("}                               ")
pw.println("td {                            ")
pw.println("    border: thin solid gray;    ")
pw.println("}                               ")
pw.println("th {                            ")
pw.println("    border: thin solid gray;    ")
pw.println("}                               ")
pw.println("#title {                        ")
pw.println("    font-size: xx-large         ")
pw.println("}                               ")
pw.println(".logo {                         ")
pw.println("    color: green;               ")
pw.println("}                               ")
pw.println("                                ")
pw.println("                                ")
pw.println("                                ")
pw.println("                                ")
pw.println("                                ")
pw.println("                                ")
pw.println("                                ")
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[21]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site HH Graph]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.lang import System
from net.sf.chellow.monad.types import MonadDate 
from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date
from java.awt.image import BufferedImage
from javax.imageio import ImageIO
from java.awt import Font, Color
import math
from java.sql import ResultSet, Timestamp
from java.text import SimpleDateFormat
from net.sf.chellow.physical import HhStartDate, HhDatum, Site

start = System.currentTimeMillis()
inv.getResponse().setContentType("image/png")
site_id = inv.getLong("site-id")
finishDateYear = inv.getInteger("finish-year")
finishDateMonth = inv.getInteger("finish-month")
months = inv.getInteger("months")
if not inv.isValid():
    raise UserException()
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.clear()
cal.set(Calendar.YEAR, finishDateYear)
cal.set(Calendar.MONTH, finishDateMonth)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finishDate = cal.getTime()
cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
startDate = cal.getTime()

cal.setTime(finishDate)
cal.add(Calendar.DAY_OF_MONTH, -1)

site = Site.getSite(site_id)
supplies = Hiber.session().createQuery("select distinct supply from Supply supply join supply.generations supplyGeneration join supplyGeneration.siteSupplyGenerations siteSupplyGeneration where siteSupplyGeneration.site = :site and supply.source.code not in ('sub', 'gen-net')").setEntity('site', site).list()
suppliesSQL = ''
for supply in supplies:
    suppliesSQL = suppliesSQL + str(supply.getId()) + ','
con = Hiber.session().connection()
stmt = con.prepareStatement("select hh_datum.value, hh_datum.start_date, hh_datum.status, channel.is_import, source.code from hh_datum, channel, supply_generation, supply, source where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = supply.id and supply.source_id = source.id and channel.is_kwh is true and hh_datum.start_date >= ? and hh_datum.start_date <= ? and supply.id in (" + suppliesSQL[:-1] + ") order by hh_datum.start_date", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
stmt.setTimestamp(1, Timestamp(startDate.getTime()))
stmt.setTimestamp(2, Timestamp(finishDate.getTime()))
stmt.setFetchSize(100)
rs = stmt.executeQuery()
hhDate = HhStartDate(startDate).getDate().getTime()
maxScale = 0
minScale = 0
resultData = []
actualStatus = HhDatum.ACTUAL
if rs.next():
    hhChannelValue = rs.getFloat("value")
    hhChannelStartDate = rs.getTimestamp("start_date")
    isImport = rs.getBoolean("is_import")
    status = rs.getString("status")
    source_code = rs.getString('code')
    finishDateMillis = finishDate.getTime()
    cal = MonadDate.getCalendar()
    while hhDate <= finishDateMillis:
        complete = "blank"
        hhValue = 0
        while hhChannelStartDate != None and hhChannelStartDate.getTime() == hhDate:
            if (isImport and source_code != '3rd-party-reverse') or (not isImport and source_code == '3rd-party-reverse'):
                hhValue = hhValue + hhChannelValue
            else:
                hhValue = hhValue - hhChannelValue
            if status == actualStatus:
                if complete == "blank":
                    complete = "actual"
            else:
                complete = "not-actual"
            if rs.next():
                hhChannelValue = rs.getFloat("value")
                hhChannelStartDate = rs.getTimestamp("start_date")
                isImport = rs.getBoolean("is_import")
                status = rs.getString("status")
            else:
                hhChannelStartDate = None
        hhDate = HhStartDate.getNext(cal, hhDate)
        resultData.append([hhValue, hhDate, complete == "actual"])
        maxScale = max(maxScale, hhValue)
        minScale = min(minScale, hhValue)
    #System.err.println('ooostep is max scale' + str(maxScale) + ' min scale ' + str(minScale))
    if maxScale > 0 and maxScale < 10:
        maxScale = 10
    if minScale < 0 and minScale > -10:
        minScale = -10
    if minScale == 0 and maxScale == 0:
        minScale = 0
        maxScale = 10
    #raise Exception('pppstep is max scale' + str(maxScale) + ' min scale ' + str(minScale))
    step = 10**int(math.floor(math.log10(maxScale - minScale)))
    #System.err.println('kkstep is ' + str(step) + ' max scale' + str(maxScale) + ' min scale ' + str(minScale))
    if step > (maxScale - minScale) / 2:
        step = int(float(step) / 4)
if len(resultData) > 0:
    graphLeft = 100
    image = BufferedImage(graphLeft + len(resultData) + 100, 400, BufferedImage.TYPE_4BYTE_ABGR)
    graphics = image.createGraphics()
    defaultFont = graphics.getFont()
    smallFont = Font(defaultFont.getName(), defaultFont.getStyle(), 10)
    maxHeight = 300
    scaleFactor = float(maxHeight) / (maxScale - minScale)
    graphTop = 50
    xAxis = int(graphTop + maxScale * scaleFactor)
    monthDateFormat = SimpleDateFormat("MMMMMM")
    monthDateFormat.setCalendar(cal)
    yearDateFormat = SimpleDateFormat("yyyy")
    yearDateFormat.setCalendar(cal)
    monthPoints = []
    for i in range(len(resultData)):
        dataHh = resultData[i]
        value = dataHh[0]
        date = dataHh[1]
        cal.setTimeInMillis(date)
        hour = cal.get(Calendar.HOUR_OF_DAY)
        minute = cal.get(Calendar.MINUTE)
        height = int(value * scaleFactor)
        if dataHh[2]:
            graphics.setColor(Color.BLUE)
        else:
            graphics.setColor(Color.GRAY)
            graphics.fillRect(graphLeft + i, graphTop, 1, maxHeight)
            graphics.setColor(Color.BLACK)
        if height > 0:
            graphics.fillRect(graphLeft + i, xAxis - height, 1, height)
        else:
            graphics.fillRect(graphLeft + i, xAxis, 1, abs(height))
        if hour == 0 and minute == 0:
            day = cal.get(Calendar.DAY_OF_MONTH)
            dayOfWeek = cal.get(Calendar.DAY_OF_WEEK)
            if dayOfWeek == 7 or dayOfWeek == 1:
                graphics.setColor(Color.RED)
            else:
                graphics.setColor(Color.BLACK)
            graphics.drawString(str(day), graphLeft + i + 16, graphTop + maxHeight + 20)
            graphics.setColor(Color.BLACK)
            graphics.fillRect(graphLeft + i, graphTop + maxHeight, 1, 5)
            if day == 15:
                graphics.drawString(monthDateFormat.format(cal.getTime()), graphLeft + i + 16, graphTop + maxHeight + 45)
                monthPoints.append(i)
    graphics.setColor(Color.BLACK)
    graphics.fillRect(graphLeft, graphTop, 1, maxHeight)
    scalePoints = []
    #System.err.println('step is ' + str(step) + ' max scale' + str(maxScale) + ' min scale ' + str(maxScale))
    for i in range(0, int(maxScale), step):
        scalePoints.append(i)
    for i in range(0, int(minScale), step * -1):
        scalePoints.append(i)
    graphics.setColor(Color.BLACK)
    for point in scalePoints:
        graphics.fillRect(graphLeft - 5, int(xAxis - point * scaleFactor), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxis - point * scaleFactor + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxis - point * scaleFactor - 2))
    graphics.drawString("kW", graphLeft - 90, 100)
    title = "Electricity use at site " + site.getCode() + " " + site.getName() + " for " + str(months) + " month"
    if months > 1:
        title = title + "s"
    title = title + " ending " + monthDateFormat.format(Date(finishDate.getTime() - 1)) + " " + yearDateFormat.format(Date(finishDate.getTime() - 1))
    graphics.drawString(title, 30, 30)
    graphics.setFont(smallFont)
    graphics.drawString("Poor data is denoted by a grey background and black foreground.", 30, 395)
else:
    image = BufferedImage(400, 400, BufferedImage.TYPE_4BYTE_ABGR)
    graphics = image.createGraphics()
    graphics.setColor(Color.BLACK)
    graphics.drawString("No data available for this period.", 30, 10)

os = inv.getResponse().getOutputStream()
graphics.setColor(Color.BLACK)
#graphics.drawString("report took..." + str(java.lang.System.currentTimeMillis() - start) + "ms", 10, 390)
ImageIO.write(image, "png", os)
os.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[23]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Generation Graph]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.physical import HhStartDate, HhDatum, Site
from net.sf.chellow.monad.types import MonadDate
from java.awt.image import BufferedImage
from javax.imageio import ImageIO
from java.awt import Color, Font
import math
from java.sql import Timestamp, ResultSet
from java.text import SimpleDateFormat
from java.lang import System
from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date

colour_list = [Color.BLUE, Color.GREEN, Color.RED, Color.YELLOW, Color.MAGENTA, Color.CYAN, Color.PINK, Color.ORANGE]

def set_colour(graphics, supplies, id):
    graphics.setColor(supplies[id][0])

def add_colour(supplies, id, name, source_code):
    if not id in supplies:
        supplies[id] = [len(supplies), name, source_code]

def sort_colour(supplies):
    keys = supplies.keys()
    keys.sort()
    for i in range(len(keys)):
        supplies[keys[i]][0] = colour_list[i]

def paint_legend(supplies, graph_top):
    i = 0
    keys = supplies.keys()
    keys.sort()
    for key in keys:
        supply = supplies[key]
        graphics.setColor(supply[0])
        graphics.fillRect(12, int(graph_top + 15 + (10 * i)), 8, 8)
        graphics.setColor(Color.BLACK)
        graphics.drawString(supply[2] + ' ' + supply[1], 25, int(graph_top + 22 + (10 * i)))
        i = i + 1        

def minimum_scale(min_scale, max_scale):
    if min_scale == 0 and max_scale == 0:
        min_scale = 0
        max_scale = 10
    if min_scale < 0 and min_scale > -10:
        min_scale = -10
    if max_scale > 0 and max_scale < 10:
        max_scale = 10
    return min_scale, max_scale

start = System.currentTimeMillis()
inv.getResponse().setContentType("image/png")
site_id = inv.getLong("site-id")
finishDateYear = inv.getInteger("finish-year")
finishDateMonth = inv.getInteger("finish-month")
months = inv.getInteger("months")
if not inv.isValid():
    raise UserException()
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.set(Calendar.YEAR, finishDateYear)
cal.set(Calendar.MONTH, finishDateMonth - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finishDate = cal.getTime()

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
startDate = cal.getTime()

#cal.setTime(finishDate)
#cal.add(Calendar.DAY_OF_MONTH, -1)

generated_supplies = {}
imported_supplies = {}
exported_supplies = {}
maxHeight = 80
pxStep = 10
maxOverallScale = 0
minOverallScale = 0
maxExportedScale = 0
minExportedScale = 0
maxImportedScale = 0
minImportedScale = 0
maxGeneratedScale = 0
maxParasiticScale = 0
maxDisplacedScale = 0
minDisplacedScale = 0
maxUsedScale = 0
minUsedScale = 0
resultData = []
actualStatus = HhDatum.ACTUAL

site = Site.getSite(site_id)
con = Hiber.session().connection()
hhDate = HhStartDate(startDate).getDate().getTime()
groups = site.groups(HhStartDate(startDate), HhStartDate(finishDate), True)
for i in range(groups.size()):
    group = groups.get(i)
    suppliesSQL = ''
    for supply in group.getSupplies():
        suppliesSQL = suppliesSQL + str(supply.getId()) + ','
    stmt = con.prepareStatement("select hh_datum.value, hh_datum.start_date, hh_datum.status, channel.is_import, supply.name, source.code, supply.id from hh_datum, channel, supply_generation, supply, source where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = supply.id and supply.source_id = source.id and channel.is_kwh is true and hh_datum.start_date >= ? and hh_datum.start_date <= ? and supply.id in (" + suppliesSQL[:-1] + ") order by hh_datum.start_date, supply.id", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
    stmt.setTimestamp(1, Timestamp(group.getFrom().getDate().getTime()))
    stmt.setTimestamp(2, Timestamp(group.getTo().getDate().getTime()))
    stmt.setFetchSize(100)
    rs = stmt.executeQuery()
    if rs.next():
        hhChannelValue = rs.getFloat("value")
        hhChannelStartDate = rs.getTimestamp("start_date")
        isImport = rs.getBoolean("is_import")
        status = rs.getString("status")
        source_code = rs.getString("code")
        supply_name = rs.getString("name")
        supply_id = rs.getLong('id')
        finishDateMillis = finishDate.getTime()
        cal = MonadDate.getCalendar()
        while hhDate <= finishDateMillis:
            complete = "blank"
            exportedValue = 0
            importedValue = 0
            parasiticValue = 0
            generatedValue = 0
            third_party_import = 0
            third_party_export = 0
            supplyList = []
            while hhChannelStartDate != None and hhChannelStartDate.getTime() == hhDate:
                if not isImport and source_code in ('net', 'gen-net'):
                    exportedValue = exportedValue + hhChannelValue
                    add_colour(exported_supplies, supply_id, supply_name, source_code)
                if isImport and source_code in ('net', 'gen-net'):
                    importedValue = importedValue + hhChannelValue
                    add_colour(imported_supplies, supply_id, supply_name, source_code)
                if (isImport and source_code == 'gen') or (not isImport and source_code == 'gen-net'):
                    generatedValue = generatedValue + hhChannelValue
                    add_colour(generated_supplies, supply_id, supply_name, source_code)
                if (not isImport and source_code == 'gen') or (isImport and source_code == 'gen-net'):
                    parasiticValue = parasiticValue + hhChannelValue
                    add_colour(generated_supplies, supply_id, supply_name, source_code)
                supplyList.append([supply_name, source_code, isImport, hhChannelValue, supply_id])
                if (isImport and source_code == '3rd-party') or (not isImport and source_code == '3rd-party-reverse'):
                    third_party_import = third_party_import + hhChannelValue
                if (not isImport and source_code == '3rd-party') or (isImport and source_code == '3rd-party-reverse'):
                    third_party_export = third_party_export + hhChannelValue
                if rs.next():
                    source_code = rs.getString("code")
                    supply_name = rs.getString("name")
                    hhChannelValue = rs.getFloat("value")
                    hhChannelStartDate = rs.getTimestamp("start_date")
                    isImport = rs.getBoolean("is_import")
                    status = rs.getString("status")
                    supply_id = rs.getLong('id')
                else:
                    hhChannelStartDate = None
            maxExportedScale = max(maxExportedScale, exportedValue)
            minExportedScale = min(minExportedScale, exportedValue)
            maxImportedScale = max(maxImportedScale, importedValue)
            minImportedScale = min(minImportedScale, importedValue)
            maxGeneratedScale = max(maxGeneratedScale, generatedValue)
            maxParasiticScale = max(maxParasiticScale, parasiticValue)
            displacedValue = generatedValue - parasiticValue - exportedValue
            maxDisplacedScale = max(maxDisplacedScale, displacedValue)
            minDisplacedScale = min(minDisplacedScale, displacedValue)
            usedValue = importedValue + displacedValue + third_party_import - third_party_export
            maxUsedScale = max(maxUsedScale, usedValue)
            minUsedScale = min(minUsedScale, usedValue)
            resultData.append([hhDate, supplyList, usedValue, displacedValue])
            hhDate = HhStartDate.getNext(cal, hhDate)
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter("ResultData: " + str(resultData)) 
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter("Overall: " + str(maxOverallScale) + " " + str(minOverallScale) + " Exported: " + str(maxExportedScale) + " " + str(minExportedScale) + " Imported: " + str(maxImportedScale) + " " + str(minImportedScale) + " Generated: " + str(maxGeneratedScale) + " Parasitic: " + str(maxParasiticScale) + " Displaced: " + str(maxDisplacedScale) + " " + str(minDisplacedScale) + " Used: " + str(maxUsedScale) + " " + str(minUsedScale))
    sort_colour(generated_supplies)
    sort_colour(imported_supplies)
    sort_colour(exported_supplies)
    minimized_scale = minimum_scale(minExportedScale, maxExportedScale)
    minExportedScale = minimized_scale[0]
    maxExportedScale = minimized_scale[1]
    minimized_scale = minimum_scale(minImportedScale, maxImportedScale)
    minImportedScale = minimized_scale[0]
    maxImportedScale = minimized_scale[1]
    if maxGeneratedScale == 0 and maxParasiticScale == 0:
        maxGeneratedScale = 10
        maxParasiticScale = 10
    minimized_scale = minimum_scale(minUsedScale, maxUsedScale)
    minUsedScale = minimized_scale[0]
    maxUsedScale = minimized_scale[1]
    minimized_scale = minimum_scale(minDisplacedScale, maxDisplacedScale)
    minDisplacedScale = minimized_scale[0]
    maxDisplacedScale = minimized_scale[1]
    maxOverallScale = max(maxExportedScale, maxImportedScale, maxGeneratedScale, maxDisplacedScale, maxUsedScale)
    minOverallScale = min(minExportedScale, minImportedScale, minDisplacedScale, minUsedScale)
    rawStepOverall = (maxOverallScale * 2) / (maxHeight / pxStep)
    factorOverall = 10**int(math.floor(math.log10(rawStepOverall)))
    endOverall = rawStepOverall / factorOverall
    newEndOverall = 1
    if endOverall >= 2:
        newEndOverall = 2
    if endOverall >= 5:
        newEndOverall = 5
    stepOverall = newEndOverall * factorOverall
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter("Overall Step: " + str(stepOverall))
if len(resultData) > 0:
    graphLeft = 180
    scaleFactorOverall = float(maxHeight) / maxOverallScale
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter(str(scaleFactorExported) + " " + str(scaleFactorUsed) + " " + str(scaleFactorDisplaced) + " " + str(scaleFactorImported) + " " + str(scaleFactorGenerated))
    graphOrderExported = 5
    graphOrderImported = 4
    graphOrderGenerated = 3
    graphOrderUsed = 1
    graphOrderDisplaced = 2
    minUsed = 0
    minDisplaced = 0
    minParasitic = 0
    for i in range(0, int(minUsedScale), stepOverall * -1):
        minUsed = min(minUsed, i)
    for i in range(0, int(minDisplacedScale), stepOverall * -1):
        minDisplaced = min(minDisplaced, i)
    for i in range(0, int(maxParasiticScale), stepOverall):
        minParasitic = max(minParasitic, i)
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter(str(int((abs(minParasitic)) * scaleFactorOverall)))
    minUsed = int(abs(minUsed) * scaleFactorOverall)
    minDisplaced = int(abs(minDisplaced) * scaleFactorOverall)
    minParasitic = int(abs(minParasitic) * scaleFactorOverall)
    graphTopExported = ((graphOrderExported - 1) * (maxHeight + 22)) + 30 + minUsed + minDisplaced + minParasitic
    graphTopImported = ((graphOrderImported - 1) * (maxHeight + 22)) + 30 + minUsed + minDisplaced + minParasitic
    graphTopGenerated = ((graphOrderGenerated - 1) * (maxHeight + 22)) + 30 + minUsed + minDisplaced
    graphTopUsed = ((graphOrderUsed - 1) * (maxHeight + 22)) + 30
    graphTopDisplaced = ((graphOrderDisplaced - 1) * (maxHeight + 22)) + 30 + minUsed
    image = BufferedImage(graphLeft + len(resultData) + 100, ((maxHeight + 22) * 5) + 60 + minUsed + minDisplaced + minParasitic, BufferedImage.TYPE_4BYTE_ABGR)
    graphics = image.createGraphics()
    defaultFont = graphics.getFont()
    smallFont = Font(defaultFont.getName(), defaultFont.getStyle(), 10)
    keyFont = Font(defaultFont.getName(), defaultFont.getStyle(), 9)
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter(str(graphTopExported) + " " + str(graphTopImported) + " " + str(graphTopUsed) + " " + str(graphTopDisplaced))
    xAxisExported = int(graphTopExported + maxOverallScale * scaleFactorOverall)
    xAxisImported = int(graphTopImported + maxOverallScale * scaleFactorOverall)
    xAxisGenerated = int(graphTopGenerated + maxOverallScale * scaleFactorOverall)
    xAxisUsed = int(graphTopUsed + maxOverallScale * scaleFactorOverall)
    xAxisDisplaced = int(graphTopDisplaced + maxOverallScale * scaleFactorOverall)
    month_format = SimpleDateFormat("MMMMMM")
    month_format.setCalendar(cal)
    year_format = SimpleDateFormat("yyyy")
    year_format.setCalendar(cal)
    monthPoints = []
    for i in range(len(resultData)):
        dataHh = resultData[i]
        date = dataHh[0]
        usedValue = dataHh[2]
        displacedValue = dataHh[3]
        dataHhSupplyList = dataHh[1]
        cal.setTimeInMillis(date)
        hour = cal.get(Calendar.HOUR_OF_DAY)
        minute = cal.get(Calendar.MINUTE)
        graphics.setColor(Color.BLUE)
        usedHeight = int(round(usedValue * scaleFactorOverall))
        if usedHeight < 0:
            graphics.fillRect(graphLeft + i, xAxisUsed, 1, abs(usedHeight))
        else:
            graphics.fillRect(graphLeft + i, xAxisUsed - usedHeight, 1, usedHeight)
        displacedHeight = int(round(displacedValue * scaleFactorOverall))
        if displacedHeight < 0:
            graphics.fillRect(graphLeft + i, xAxisDisplaced, 1, abs(displacedHeight))
        else:
            graphics.fillRect(graphLeft + i, xAxisDisplaced - displacedHeight, 1, displacedHeight)
        generatedTotal = 0
        parasiticTotal = 0
        importedTotal = 0
        exportedTotal = 0
        for j in dataHhSupplyList:
            name = j[0]
            source = j[1]
            isImport = j[2]
            value = j[3]
            id = j[4]
            height = int(round(value * scaleFactorOverall))
            if source in ('net', 'gen-net') and not isImport:
                set_colour(graphics, exported_supplies, id)
                exportedTotal = exportedTotal + height
                graphics.fillRect(graphLeft + i, xAxisExported - exportedTotal, 1, height)
            if source in ('net', 'gen-net') and isImport:
                set_colour(graphics, imported_supplies, id)
                importedTotal = importedTotal + height
                graphics.fillRect(graphLeft + i, xAxisImported - importedTotal, 1, height)
            if (isImport and source == 'gen') or (not isImport and source == 'gen-net'):
                set_colour(graphics, generated_supplies, id)
                generatedTotal = generatedTotal + height
                graphics.fillRect(graphLeft + i, xAxisGenerated - generatedTotal, 1, height)
            if (not isImport and source == 'gen') or (isImport and source == 'gen-net'):
                set_colour(graphics, generated_supplies, id)
                parasiticTotal = parasiticTotal + height
                graphics.fillRect(graphLeft + i, xAxisGenerated, 1, height)
        if hour == 0 and minute == 0:
            day = cal.get(Calendar.DAY_OF_MONTH)
            dayOfWeek = cal.get(Calendar.DAY_OF_WEEK)
            if dayOfWeek == 7 or dayOfWeek == 1:
                graphics.setColor(Color.RED)
            else:
                graphics.setColor(Color.BLACK)
            graphics.drawString(str(day), graphLeft + i + 16, ((maxHeight + 22) * 5) + 30 + minUsed + minDisplaced + minParasitic)
            graphics.setColor(Color.BLACK)
            graphics.fillRect(graphLeft + i, graphTopExported + maxHeight, 1, 5)
            graphics.fillRect(graphLeft + i, graphTopImported + maxHeight, 1, 5)
            graphics.fillRect(graphLeft + i, graphTopGenerated + maxHeight, 1, 5)
            graphics.fillRect(graphLeft + i, graphTopUsed + maxHeight, 1, 5)
            graphics.fillRect(graphLeft + i, graphTopDisplaced + maxHeight, 1, 5)
            if day == 15:
                graphics.drawString(month_format.format(cal.getTime()), graphLeft + i + 16, ((maxHeight + 22) * 5) + 50 + minUsed + minDisplaced + minParasitic)
                monthPoints.append(i)
    graphics.setColor(Color.BLACK)
    graphics.fillRect(graphLeft, graphTopExported, 1, maxHeight)
    graphics.fillRect(graphLeft, graphTopImported, 1, maxHeight)
    graphics.fillRect(graphLeft, graphTopGenerated, 1, maxHeight + minParasitic)
    graphics.fillRect(graphLeft, graphTopUsed, 1, maxHeight + minUsed)
    graphics.fillRect(graphLeft, graphTopDisplaced, 1, maxHeight + minDisplaced)
    scalePointsExported = []
    for i in range(0, int(maxOverallScale), stepOverall):
        scalePointsExported.append(i)
    #for i in range(0, int(minExportedScale), stepOverall * -1):
        #scalePointsExported.append(i)
    graphics.setColor(Color.BLACK)
    for point in scalePointsExported:
        graphics.fillRect(graphLeft - 5, int(xAxisExported - point * scaleFactorOverall), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisExported - point * scaleFactorOverall + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisExported - point * scaleFactorOverall - 2))
    scalePointsImported = []
    for i in range(0, int(maxOverallScale), stepOverall):
        scalePointsImported.append(i)
    #for i in range(0, int(minOverallScale), stepOverall * -1):
        #scalePointsImported.append(i)
    graphics.setColor(Color.BLACK)
    for point in scalePointsImported:
        graphics.fillRect(graphLeft - 5, int(xAxisImported - point * scaleFactorOverall), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisImported - point * scaleFactorOverall + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisImported - point * scaleFactorOverall - 2))
    scalePointsGenerated = []
    for i in range(0, int(maxOverallScale), stepOverall):
        scalePointsGenerated.append(i)
    for i in range(0, int(maxParasiticScale), stepOverall):
        scalePointsGenerated.append(i * -1)
    graphics.setColor(Color.BLACK)
    for point in scalePointsGenerated:
        graphics.fillRect(graphLeft - 5, int(xAxisGenerated - point * scaleFactorOverall), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisGenerated - point * scaleFactorOverall + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisGenerated - point * scaleFactorOverall - 2))
    scalePointsUsed = []
    for i in range(0, int(maxOverallScale), stepOverall):
        scalePointsUsed.append(i)
    for i in range(0, int(minUsedScale), stepOverall * -1):
        scalePointsUsed.append(i)
    for point in scalePointsUsed:
        graphics.fillRect(graphLeft - 5, int(xAxisUsed - point * scaleFactorOverall), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisUsed - point * scaleFactorOverall + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisUsed - point * scaleFactorOverall - 2))
    scalePointsDisplaced = []
    for i in range(0, int(maxOverallScale), stepOverall):
        scalePointsDisplaced.append(i)
    for i in range(0, int(minDisplacedScale), stepOverall * -1):
        scalePointsDisplaced.append(i)
    for point in scalePointsDisplaced:
        graphics.fillRect(graphLeft - 5, int(xAxisDisplaced - point * scaleFactorOverall), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisDisplaced - point * scaleFactorOverall + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisDisplaced - point * scaleFactorOverall - 2))
    graphics.drawString("kW", graphLeft - 90, graphTopExported + 10)
    graphics.drawString("kW", graphLeft - 90, graphTopImported + 10)
    graphics.drawString("kW", graphLeft - 90, graphTopGenerated + 10)
    graphics.drawString("kW", graphLeft - 90, graphTopUsed + 10)
    graphics.drawString("kW", graphLeft - 90, graphTopDisplaced + 10)
    title = "Electricity generation at site " + site.getCode() + " " + site.getName() + " for " + str(months) + " month"
    if months > 1:
        title = title + "s"
    title = title + " up to and including " + month_format.format(Date(finishDate.getTime() - 1)) + " " + year_format.format(Date(finishDate.getTime() - 1))
    graphics.drawString(title, 30, 20)
    graphics.drawString("Imported", 10, graphTopImported + 10)
    graphics.drawString("Exported", 10, graphTopExported + 10)
    graphics.drawString("Generated", 10, graphTopGenerated + 10)
    graphics.drawString("Used", 10, graphTopUsed + 10)
    graphics.drawString("Displaced", 10, graphTopDisplaced + 10)
    graphics.setFont(smallFont)
    graphics.drawString("Poor data is denoted by a grey background and black foreground.", 30, ((maxHeight + 22) * 5) + 50 + minUsed + minDisplaced + minParasitic)
    graphics.setFont(keyFont)
    paint_legend(exported_supplies, graphTopExported)
    paint_legend(imported_supplies, graphTopImported)
    paint_legend(generated_supplies, graphTopGenerated)
else:
    image = BufferedImage(400, 400, BufferedImage.TYPE_4BYTE_ABGR)
    graphics = image.createGraphics()
    graphics.setColor(Color.BLACK)
    graphics.drawString("No data available for this period.", 30, 10)

os = inv.getResponse().getOutputStream()
graphics.setColor(Color.BLACK)
#graphics.drawString("report took..." + str(java.lang.System.currentTimeMillis() - start) + "ms", 10, 390)
ImageIO.write(image, "png", os)
os.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[25]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site HH figures]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException, XmlTree
from java.lang import System
from net.sf.chellow.monad.types import MonadDate
import math
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate, Site

debug_str = ''

start = System.currentTimeMillis()
siteCode = inv.getString("site-code")
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
year = inv.getInteger("year")
month = inv.getInteger("month")
day = inv.getInteger("day")
if not inv.isValid():
  raise UserException()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.set(Calendar.DAY_OF_MONTH, day)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MINUTE, 0)
start_date = HhStartDate(cal.getTime())
source.appendChild(start_date.toXml(doc))
cal.add(Calendar.DAY_OF_MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())
site = Site.getSite(siteCode)
source.appendChild(site.toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))


for group in Site.getSite(site.getId()).groups(start_date, finish_date, True):
    group_element = doc.createElement('group')
    source.appendChild(group_element)

    sup_ids = []
    for supply in group.getSupplies():
        sup_ids.append(supply.getId())
        group_element.appendChild(supply.toXml(doc, XmlTree('source').put('generatorType')))
    sup_ids.sort()

    data = Hiber.session().createQuery("select datum.value, datum.startDate, datum.status, datum.channel.supplyGeneration.supply.source.code, datum.channel.isImport, datum.channel.supplyGeneration.supply.id from HhDatum datum where datum.channel.isKwh is true and datum.channel.supplyGeneration.supply.id in (" + ','.join(str(id) for id in sup_ids) + ") and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate order by datum.startDate.date, datum.channel.supplyGeneration.supply.id").setTimestamp('startDate', group.getFrom().getDate()).setTimestamp('finishDate', group.getTo().getDate()).scroll()
    hh_value = None
    if data.next():
        hh_value = data.get(0)
        hh_double_value = hh_value.doubleValue()
        hh_start_date = data.get(1)
        hh_status = data.get(2)
        source_code = data.get(3)
        is_import = data.get(4)
        supply_id = data.get(5)

    cal = MonadDate.getCalendar()
    hh_date = group.getFrom()
    while not hh_date.after(group.getTo()):
        export_kwh = 0
        import_kwh = 0
        parasitic_kwh = 0
        generated_kwh = 0
        third_party_import_kwh = 0
        third_party_export_kwh = 0

        hh_element = doc.createElement("hh")
        group_element.appendChild(hh_element)
        hh_element.appendChild(hh_date.toXml(doc))
        for sup_id in sup_ids:
            datum = doc.createElement("datum")
            hh_element.appendChild(datum)
            #debug_str += 'hh value ' + str(hh_value) + ' hh start date ' + str(hh_start_date) + ' hh_date ' + str(hh_date) + ' sup_id ' + str(sup_id) + ' supply_id ' + str(supply_id)
            while hh_value is not None and hh_start_date.getDate().getTime() == hh_date.getDate().getTime() and sup_id == supply_id:
                if is_import:
                    prefix = 'import'
                else:
                    prefix = 'export'
                datum.setAttribute(prefix + '-kwh', str(hh_value))
                datum.setAttribute(prefix + '-status', hh_status)

                if not is_import and source_code in ('net', 'gen-net'):
                    export_kwh += hh_double_value
                if is_import and source_code in ('net', 'gen-net'):
                    import_kwh += hh_double_value
                if (is_import and source_code == 'gen') or (not is_import and source_code == 'gen-net'):
                    generated_kwh += hh_double_value
                if (not is_import and source_code == 'gen') or (is_import and source_code == 'gen-net'):
                    parasitic_kwh += hh_double_value
                if (is_import and source_code == '3rd-party') or (not is_import and source_code == '3rd-party-reverse'):
                    third_party_import += hh_double_value
                if (not is_import and source_code == '3rd-party') or (is_import and source_code == '3rd-party-reverse'):
                    third_party_export += hh_double_value
                if data.next():
                    hh_value = data.get(0)
                    hh_double_value = hh_value.doubleValue()
                    hh_start_date = data.get(1)
                    hh_status = data.get(2)
                    source_code = data.get(3)
                    is_import = data.get(4)
                    supply_id = data.get(5)
                else:
                    hh_value = None

        displaced_kwh = generated_kwh - export_kwh - parasitic_kwh
        used_kwh = import_kwh + displaced_kwh
        hh_element.setAttribute("exported-kwh", str(export_kwh))
        hh_element.setAttribute("imported-kwh", str(import_kwh))
        hh_element.setAttribute("generated-kwh", str(generated_kwh))
        hh_element.setAttribute("parasitic-kwh", str(parasitic_kwh))
        hh_element.setAttribute("displaced-kwh", str(displaced_kwh))
        hh_element.setAttribute("used-kwh", str(used_kwh))
        hh_date = hh_date.getNext()
source.setAttribute('debug', debug_str)]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Sites &gt;
                    <xsl:value-of
                        select="concat(/source/site/@code, ' ', /source/site/@name)" />
                    &gt; HH data
                </title>
                <style>
                    &lt;![CDATA[
                colgroup.gray {
                    background: silver;
                }

                tr.error {
                    color: red;
                }
                ]]&gt;
                </style>
            </head>

            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/3/output/">
                        <xsl:value-of select="'Sites'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/5/output/?site-id={/source/site/@id}">
                        <xsl:value-of
                            select="concat(/source/site/@code, ' ', /source/site/@name)" />
                    </a>
                    &gt; HH data
                </p>

                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <xsl:value-of select="/source/@debug"/>
                <form action=".">
                    <fieldset>
                        <legend>Show data</legend>
                        <br />
                        <label>
                            <xsl:value-of select="'Site Code '" />
                            <input name="site-code"
                                value="{/source/request/parameter[@name='site-code']/value}" />
                        </label>
                        <br />
                        <br />
                        <fieldset>
                            <legend>Date</legend>
                            <br />
                            <input size="4" length="4" name="year"
                                value="{/source/hh-start-date/@year}" />
                            <xsl:value-of select="' - '" />
                            <select name="month">
                                <xsl:for-each
                                    select="/source/months/month">
                                    <option>
                                        <xsl:if
                                            test="number(/source/hh-start-date/@month) = number(@number)">
                                            <xsl:attribute
                                                name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                            <xsl:value-of select="' - '" />
                            <select name="day">
                                <xsl:for-each
                                    select="/source/days/day">
                                    <option>
                                        <xsl:if
                                            test="number(/source/hh-start-date/@day) = number(@number)">
                                            <xsl:attribute
                                                name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                        </fieldset>
                        <br />
                        <input type="submit" value="Show" />
                    </fieldset>
                </form>
            <xsl:for-each select="/source/group">
                <table>
                    <caption>HH Data</caption>
                    <colgroup />
                    <colgroup class="gray" />
                    <colgroup />
                    <colgroup class="gray" />
                    <colgroup />
                    <colgroup class="gray" />
                    <thead>
                        <tr>
                            <th rowspan="3">HH Starting</th>
                            <th rowspan="3">Imported</th>
                            <th rowspan="3">Used</th>
                            <th rowspan="3">Displaced</th>
                            <th rowspan="3">Generated</th>
                            <th rowspan="3">Exported</th>
                            <th rowspan="3">Parasitic</th>
                            <xsl:for-each select="supply">
                            <th colspan="4"><xsl:value-of select="concat(@name, ' ', source/@code, ' ', generator-type/@code)"/></th>
                            </xsl:for-each>
                        </tr>
<tr>
<xsl:for-each select="supply">
                            <th colspan="2">Import</th>
                            <th colspan="2">Export</th>
                            </xsl:for-each>
                        </tr>
                        <tr>
<xsl:for-each select="supply">
                            <th>kWh</th>
                            <th>Status</th>
                            <th>kWh</th>
                            <th>Status</th>
                            </xsl:for-each>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="hh">
                            <tr>
                                <xsl:if test="@has-site-snags">
                                    <xsl:attribute name="class">
                                        <xsl:value-of select="'error'" />
                                    </xsl:attribute>
                                </xsl:if>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date/@year, '-', hh-start-date/@month, '-', hh-start-date/@day, ' ', hh-start-date/@hour, ':', hh-start-date/@minute, 'Z')" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@imported-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of select="@used-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@displaced-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@generated-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@exported-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@parasitic-kwh" />
                                </td>
                                <!--
                                    <td>
                                    <xsl:if
                                    test="@has-site-snags = 'true'">
                                    See
                                    <a
                                    href="{/source/request/@context-path}/orgs/1/reports/5/screen/output/?site-id={/source/site/@id}&amp;months=1&amp;finish-year={hh-start-date[@label='start']/@year}&amp;finish-month={hh-start-date[@label='start']/@month}">
                                    generation graph
                                    </a>
                                    for errors.
                                    </xsl:if>
                                    </td>
                                -->
                            <xsl:for-each select="datum">
                            <td>
                              <xsl:choose>
                              <xsl:when test="@import-kwh">
                              <xsl:value-of select="@import-kwh"/>
                              </xsl:when>
                              <xsl:otherwise>
                              Missing
                              </xsl:otherwise>
                              </xsl:choose>
                            </td>
                            <td><xsl:value-of select="@import-status"/>
                            </td>
                            <td>
                              <xsl:choose>
                              <xsl:when test="@export-kwh">
                              <xsl:value-of select="@export-kwh"/>
                              </xsl:when>
                              <xsl:otherwise>
                              Missing
                              </xsl:otherwise>
                              </xsl:choose>
                            </td>
                            <td><xsl:value-of select="@export-status"/>
                            </td>
                            </xsl:for-each>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </xsl:for-each>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[27]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site HH bulk figures selector]]></value>
        <value><![CDATA[from net.sf.chellow.monad import UserException, XmlTree
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import Site

site_id = inv.getLong("site-id")
if not inv.isValid():
  raise UserException()
site = Site.getSite(site_id)
source.appendChild(site.toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))
source.appendChild(MonadDate().toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Sites &gt;
                    <xsl:value-of
                        select="concat(/source/site/@code, ' ', /source/site/@name)" />
                    &gt; HH data selector
                </title>
                <style>
                    &lt;![CDATA[
                colgroup.gray {
                    background: silver;
                }

                tr.error {
                    color: red;
                }
                ]]&gt;
                </style>
            </head>

            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/3/output/">
                        <xsl:value-of select="'Sites'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/5/output/?site-id={/source/site/@id}">
                        <xsl:value-of
                            select="concat(/source/site/@code, ' ', /source/site/@name)" />
                    </a>
                    &gt; HH data selector
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form
                    action="{/source/request/@context-path}/reports/29/output/">
                    <fieldset>
                        <legend>Download HH data (kWh)</legend>
                        <input type="hidden" name="site-id"
                            value="{/source/site/@id}" />
                            <select name="type">
                                <option value="used">Used</option>
                                <option value="imported">
                                    Imported
                                </option>
                                <option value="exported">
                                    Exported
                                </option>
                                <option value="generated">
                                    Generated
                                </option>
                                <option value="displaced">
                                    Displaced
                                </option>
                                <option value="parasitic">
                                    Parasitic
                                </option>
                            </select>
                        <xsl:value-of select="' for '" /><input size="2" length="2" name="months" value="1" /><xsl:value-of select="' month(s) finishing at the end of '" /><input size="4" length="4" name="year" value="{/source/date/@year}" /><xsl:value-of select="' - '" />
                                               <select name="month">
                            <xsl:for-each
                                select="/source/months/month">
                                <option>
                                    <xsl:if
                                        test="/source/date/@month = @number">
                                        <xsl:attribute
                                    name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Download" />
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[29]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site HH bulk figures]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date
from net.sf.chellow.monad import Hiber, UserException
from org.hibernate import CacheMode, ScrollMode
from java.text import DateFormat
from net.sf.chellow.physical import HhStartDate, Site
from java.sql import ResultSet, Timestamp

TYPES = ['used', 'generated', 'exported', 'displaced', 'parasitic', 'imported']
site_id = inv.getLong("site-id")
year = inv.getInteger("year")
month = inv.getInteger("month")
months = inv.getInteger("months")
type = inv.getString("type")
if not inv.isValid():
    raise UserException()
if not type in TYPES:
    raise UserException('The type must be one of ' + str(TYPES))
site = Site.getSite(site_id)
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.set(Calendar.MILLISECOND, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.MONTH, month - 1)
cal.set(Calendar.YEAR, year)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finishDate = cal.getTime()

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
startDate = cal.getTime()
inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()
pw.print("Site Code,Type,Date,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48")
dateFormat = DateFormat.getDateInstance(DateFormat.LONG, Locale.UK)
dateFormat.applyLocalizedPattern("yyyy-MM-dd")

con = Hiber.session().connection()
supplies = Hiber.session().createQuery("select distinct supply from Supply supply join supply.generations supplyGeneration join supplyGeneration.siteSupplyGenerations siteSupplyGeneration where siteSupplyGeneration.site = :site and supply.source.code != 'sub'").setEntity('site', site).list()
suppliesSQL = ''
for supply in supplies:
    suppliesSQL = suppliesSQL + str(supply.getId()) + ','
stmt = con.prepareStatement("select hh_datum.value, hh_datum.start_date, hh_datum.status, channel.is_import, supply.name, source.code from hh_datum, channel, supply_generation, supply, source where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = supply.id and supply.source_id = source.id and channel.is_kwh is true and hh_datum.start_date >= ? and hh_datum.start_date <= ? and supply.id in (" + suppliesSQL[:-1] + ") order by hh_datum.start_date", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
stmt.setTimestamp(1, Timestamp(startDate.getTime()))
stmt.setTimestamp(2, Timestamp(finishDate.getTime()))
stmt.setFetchSize(100)
rs = stmt.executeQuery()
hhDate = startDate.getTime()
siteSnagQuery = Hiber.session().createQuery("select count(*) from SiteSnag snag where snag.site = :site and snag.startDate.date <= :finishDate and snag.finishDate.date >= :startDate and snag.isIgnored is true").setEntity("site", site)
if rs.next():
    hhChannelKwh = rs.getFloat("value")
    hhChannelStartDate = rs.getTimestamp("start_date")
    isImport = rs.getBoolean("is_import")
    status = rs.getString("status")
    sourceCode = rs.getString("code")
    supplyName = rs.getString("name")
    finishDateMillis = finishDate.getTime()
    startDateMillis = startDate.getTime()
    while hhDate <= finishDateMillis:
        exportedKwh = 0
        importedKwh = 0
        parasiticKwh = 0
        generatedKwh = 0
        displacedKwh = 0
        while hhChannelStartDate != None and hhChannelStartDate.getTime() == hhDate:
            if not isImport and sourceCode in ('net', 'gen-net'):
                exportedKwh = exportedKwh + hhChannelKwh
            if isImport and sourceCode in ('net', 'gen-net'):
                importedKwh = importedKwh + hhChannelKwh
            if (isImport and sourceCode == 'gen') or (not isImport and sourceCode == 'gen-net'):
                generatedKwh = generatedKwh + hhChannelKwh
            if (not isImport and sourceCode == 'gen') or (isImport and sourceCode == 'gen-net'):
                parasiticKwh = parasiticKwh + hhChannelKwh
            if rs.next():
                sourceCode = rs.getString("code")
                supplyName = rs.getString("name")
                hhChannelKwh = rs.getFloat("value")
                hhChannelStartDate = rs.getTimestamp("start_date")
                isImport = rs.getBoolean("is_import")
                status = rs.getString("status")
            else:
                hhChannelStartDate = None
        displacedKwh = generatedKwh - exportedKwh - parasiticKwh
        usedKwh = importedKwh + displacedKwh
        '''
        if siteSnagQuery.setTimestamp("startDate", startDate).setTimestamp("finishDate", monthFinishDate).uniqueResult() > 0:
            monthElement.setAttribute("has-site-snags", "true")
        '''
        cal.clear()
        cal.setTimeInMillis(hhDate)
        if cal.get(Calendar.HOUR_OF_DAY) == 0 and cal.get(Calendar.MINUTE) == 0:
            pw.print('\r\n' + site.getCode() + ',' + type + ',' + dateFormat.format(Date(hhDate)))
            pw.flush()
        pw.print(",")
        if type == 'used':
            hh_value = usedKwh
        elif type == 'imported':
            hh_value = importedKwh
        elif type == 'exported':
            hh_value = exportedKwh
        elif type == 'parasitic':
            hh_value = parasiticKwh
        elif type == 'displaced':
            hh_value = displacedKwh
        elif type == 'generated':
            hh_value = generatedKwh
        pw.print(str(round(hh_value, 1)))
        hhDate = HhStartDate.getNext(cal, hhDate)
        Hiber.session().clear()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[31]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Admin: CSV Export]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException, MonadUtils
from net.sf.chellow.monad.types import UriPathElement, MonadDate
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.physical import HhStartDate, Configuration
from java.text import DateFormat
from java.util.zip import ZipOutputStream, ZipEntry
from java.io import OutputStreamWriter, PrintWriter
from java.security import MessageDigest
from com.Ostermiller.util import Base64
from java.lang import String, System, Boolean

def mpan_fields(mpan):
    if mpan == None:
        return ['', '', '', '', '']
    else:
        pcnum = mpan.getSupplyGeneration().getPc().getCode()
        mpan_str = mpan.toString()
        ssc = mpan.getSsc()

        if pcnum == 0 and ssc is not None:
            raise Exception('error type 1 ' + mpan_str)
        if pcnum > 0 and ssc is None:
            raise Exception('error type 2 ' + mpan_str)

        if ssc is None:
            ssc_code = ''
        else:
            ssc_code = ssc.getCode()
        supply_capacity = str(mpan.getAgreedSupplyCapacity())
        supplier_contract = mpan.getSupplierContract()
        supplier_contract_name = supplier_contract.getName()
        supplier_account = mpan.getSupplierAccount()
    return [mpan_str, ssc_code, supply_capacity, supplier_contract_name, supplier_account]


def print_batches(contract, role_name):
    reads_query = Hiber.session().createQuery("select read.meterSerialNumber, read.mpanStr, read.coefficient, read.units, read.tpr.code, read.previousDate, read.previousValue, read.previousType.code, read.presentDate, read.presentValue, read.presentType.code from RegisterRead read where read.bill = :bill order by read.id")

    range_11 = range(11)

    bills_query = Hiber.session().createQuery("select bill from Bill bill where bill.batch = :batch order by bill.id")

    batches = Hiber.session().createQuery("from Batch batch where batch.contract.id = :contractId order by batch.id").setLong('contractId', contract.getId()).scroll()
    while batches.next():
        batch = batches.get(0)
        print_line(['insert', 'batch', role_name, contract.getName(), batch.getReference()])
        bills = bills_query.setEntity('batch', batch).scroll()
        while bills.next():
            bill = bills.get(0)
            values = ['insert', 'bill', role_name, contract.getName(), batch.getReference(), bill.getSupply().getMpanCores().iterator().next(), MonadDate(bill.getIssueDate()), bill.getStartDate(), bill.getFinishDate(), bill.getNet(), bill.getVat(), bill.getAccount(), bill.getReference(), bill.getType(), bill.getBreakdown(), bill.getKwh()]
            reads = reads_query.setEntity('bill', bill).scroll()
            while reads.next():
                values += [reads.get(i) for i in range_11]
            reads.close()
            print_line(values)
            Hiber.session().clear()
        bills.close()
        Hiber.session().clear()
    batches.close()


#inv.getResponse().setContentType('application/zip')
#inv.getResponse().setHeader('Content-Disposition', 'filename=output.zip;')
#sout = inv.getResponse().getOutputStream()
#zout = ZipOutputStream(sout)
#pw = PrintWriter(OutputStreamWriter(zout, 'UTF-8'))
#zout.putNextEntry(ZipEntry('out.xml'))

inv.getResponse().setContentType('text/xml')
inv.getResponse().setHeader('Content-Disposition', 'attachment; filename=output.xml;')
pw = inv.getResponse().getWriter()

def print_line(values):
    pw.println('    <line>')
    for value in values:
        if value is None:
            value = ''
        else:
            value = str(value)
        pw.println('        <value><' + '![CDATA[' + value + ']]' + '></value>')
    pw.println('    </line>')
    pw.flush()

if inv.hasParameter('is-core'):
    is_core = inv.getBoolean('is-core')
    has_dso_contracts = inv.getBoolean('has-dso-contracts')    
    has_non_core_contracts = inv.getBoolean('has-non-core-contracts')
    has_reports = inv.getBoolean('has-reports')
    has_supplier_contracts = inv.getBoolean('has-supplier-contracts')
    has_hhdc_contracts = inv.getBoolean('has-hhdc-contracts')
    has_mop_contracts = inv.getBoolean('has-mop-contracts')
    has_sites = inv.getBoolean('has-sites')    
    has_supplies = inv.getBoolean('has-supplies')
    has_hh_data = inv.getBoolean('has-hh-data')
    has_users = inv.getBoolean('has-users')
    has_configuration = inv.getBoolean('has-configuration')
    has_channel_snag_ignores = inv.getBoolean('has-channel-snag-ignores')
    has_site_snag_ignores = inv.getBoolean('has-site-snag-ignores')

    if not inv.isValid():
        raise UserException()
else:
    is_core = False
    has_dso_contracts = has_non_core_contracts = has_reports = has_supplier_contracts = has_hhdc_contracts = has_mop_contracts = has_sites = has_supplies = has_hh_data = has_users = has_configuration = has_channel_snag_ignores = has_site_snag_ignores = True

if has_supplies:
    mpan_core_str = inv.getString('mpan-core')

pw.println('<' + '?xml version="1.0"?>')
pw.flush()
pw.println('<csv>')

if has_reports:
    query = Hiber.session().createQuery("from Report report where mod(report.id, 2) = :remainder order by report.id")
    if is_core:
        query.setInteger('remainder', 1)
        is_core_str = 'true'
    else:
        query.setInteger('remainder', 0)
        is_core_str = 'false'
    reports = query.scroll()
    while reports.next():
        report = reports.get(0)
        template = report.getTemplate()
        if template is not None:
            template = template.replace("<!" + "[CDATA[", "&" + "lt;![CDATA[").replace("]]" + ">", "]]" + "&" + "gt;")
        print_line(['insert', 'report', str(report.getId()), is_core_str, report.getName(), report.getScript().replace("<!" + "[CDATA[", "&" + "lt;![CDATA[").replace("]]" + ">", "]]" + "&" + "gt;"), template])
    reports.close()

if has_dso_contracts and is_core:
    contracts = Hiber.session().createQuery("from DsoContract contract order by contract.party.code, contract.name").scroll()
    while contracts.next():
        contract = contracts.get(0)
        contract_name = contract.getName()
        rate_scripts = Hiber.session().createQuery("from RateScript script where script.contract.id = :contractId order by script.startDate.date").setLong('contractId', contract.getId()).list()
        start_rate_script = rate_scripts[0]
        print_line(['insert', 'dso-contract', contract.getParty().getCode(), contract.getId(), contract_name, start_rate_script.getStartDate(), rate_scripts[len(rate_scripts) - 1].getFinishDate(), contract.getChargeScript(), start_rate_script.getId(), start_rate_script.getScript()])
        for i in range(1, len(rate_scripts)):
            rate_script = rate_scripts[i]
            print_line(['insert', 'dso-contract-rate-script', contract.getParty().getCode(), contract.getName(), rate_script.getId(), rate_script.getStartDate(), rate_script.getScript()])
    Hiber.session().clear()
    contracts.close()


if has_non_core_contracts:
    query = Hiber.session().createQuery("from NonCoreContract contract where mod(contract.id, 2) = :remainder order by contract.name")
    if is_core:
        query.setInteger('remainder', 1)
    else:
        query.setInteger('remainder', 0)

    contracts = query.scroll()
    while contracts.next():
        contract = contracts.get(0)
        contract_name = contract.getName()
        rate_scripts = Hiber.session().createQuery("from RateScript script where script.contract = :contract order by script.startDate.date").setEntity('contract', contract).list()
        start_rate_script = rate_scripts[0]
        print_line(['insert', 'non-core-contract', contract.getId(), None, contract.getParty().getParticipant().getCode(), contract_name, start_rate_script.getId(), start_rate_script.getStartDate(), rate_scripts[len(rate_scripts) - 1].getFinishDate(), contract.getChargeScript(), start_rate_script.getId(), start_rate_script.getScript()])
        for i in range(1, len(rate_scripts)):
            rate_script = rate_scripts[i]
            print_line(['insert', 'non-core-contract-rate-script', contract_name, rate_script.getId(), rate_script.getStartDate(), rate_script.getScript()])
    Hiber.session().clear()
    contracts.close()


if has_users:
    users = Hiber.session().createQuery("from User user order by user.id").scroll()
    while users.next():
        user = users.get(0)
        print_line(['insert', 'user', user.getEmailAddress(), '', user.getPasswordDigest(), user.getRole().getCode(), '', ''])
    users.close()


if has_configuration:
    print_line(['update', 'configuration', Configuration.getConfiguration().getProperties()])


if has_sites and not is_core:
    sites = Hiber.session().createQuery("from Site site order by site.id").scroll()
    while sites.next():
        site = sites.get(0)
        print_line(['insert', 'site', site.getCode(), site.getName()])
    sites.close()


if has_hhdc_contracts and not is_core:
    contracts = Hiber.session().createQuery("from HhdcContract contract order by contract.id").scroll()
    while contracts.next():
        contract = contracts.get(0)
        rate_scripts = Hiber.session().createQuery("from RateScript script where script.contract.id = :contractId order by script.startDate.date").setLong('contractId', contract.getId()).list()
        start_rate_script = contract.getStartRateScript()
        finish_rate_script = contract.getFinishRateScript()
        print_line(['insert', 'hhdc-contract', contract.getId(), contract.getParty().getParticipant().getCode(), contract.getName(), start_rate_script.getId(), start_rate_script.getStartDate(), finish_rate_script.getFinishDate(), contract.getChargeScript(), contract.getProperties(), contract.getState(), start_rate_script.getId(), start_rate_script.getScript()])
        if len(rate_scripts) > 1:
            for rate_script in rate_scripts[1:]:
                print_line(['insert', 'hhdc-contract-rate-script', contract.getName(), rate_script.getId(), rate_script.getStartDate(), rate_script.getScript()])
        Hiber.session().clear()
    contracts.close()


if has_mop_contracts and not is_core:
    contracts = Hiber.session().createQuery("from MopContract contract order by contract.id").scroll()
    while contracts.next():
        contract = contracts.get(0)
        rate_scripts = Hiber.session().createQuery("from RateScript script where script.contract.id = :contractId order by script.startDate.date").setLong('contractId', contract.getId()).list()
        start_rate_script = rate_scripts[0]
        print_line(['insert', 'mop-contract', contract.getId(), contract.getParty().getParticipant().getCode(), contract.getName(), start_rate_script.getStartDate(), contract.getChargeScript(), contract.getProperties(), contract.getState(), start_rate_script.getId(), start_rate_script.getScript()])
        if len(rate_scripts) > 1:
            for rate_script in rate_scripts[1:]:
                print_line(['insert', 'mop-contract-rate-script', contract.getName(), rate_script.getId(), rate_script.getStartDate(), rate_script.getScript()])
        Hiber.session().clear()
    contracts.close()


if has_supplier_contracts and not is_core:
    contracts = Hiber.session().createQuery("from SupplierContract contract order by contract.id").scroll()
    while contracts.next():
        contract = contracts.get(0)
        contract_name = contract.getName()
        rate_scripts = Hiber.session().createQuery("from RateScript script where script.contract.id = :contractId order by script.startDate.date").setLong('contractId', contract.getId()).list()
        start_rate_script = rate_scripts[0]
        finish_rate_script = rate_scripts[len(rate_scripts) - 1]
        print_line(['insert', 'supplier-contract', contract.getId(), contract.getParty().getParticipant().getCode(), contract_name, start_rate_script.getStartDate(), finish_rate_script.getFinishDate(), contract.getChargeScript(), start_rate_script.getId(), start_rate_script.getScript()])
        if len(rate_scripts) > 1:
            for i in range(1, len(rate_scripts)):
                rate_script = rate_scripts[i]
                print_line(['insert', 'supplier-contract-rate-script', contract.getName(), rate_script.getId(), rate_script.getStartDate(), rate_script.getScript()])
        Hiber.session().clear()
    contracts.close()


if has_supplies and not is_core:
    if len(mpan_core_str) == 0:
        supplies = Hiber.session().createQuery("from Supply supply order by supply.id").scroll()
    else:
        supplies = Hiber.session().createQuery("from Supply supply where supply = :supply").setEntity('supply', MpanCore.getMpanCore(mpan_core_str)
.getSupply()).scroll()
    while supplies.next():
        supply = supplies.get(0) 
        supplyGenerations = Hiber.session().createQuery('from SupplyGeneration generation where generation.supply = :supply order by generation.startDate.date').setEntity('supply', supply).list()
        first_generation = supplyGenerations[0]
        last_generation = supplyGenerations[len(supplyGenerations) - 1]
        physical_site = Hiber.session().createQuery("select siteSupplyGeneration.site from SiteSupplyGeneration siteSupplyGeneration where siteSupplyGeneration.supplyGeneration = :supplyGeneration and siteSupplyGeneration.isPhysical is true").setEntity('supplyGeneration', last_generation).uniqueResult()
        site_code = physical_site.getCode()
        supply_name = supply.getName()
        start_date = first_generation.getStartDate().toString()
        finish_date = last_generation.getFinishDate()
        if finish_date is None:
            finish_date = ''
        else:
            finish_date = finish_date.toString()
        source = supply.getSource().getCode()
        generator_type = supply.getGeneratorType()
        if generator_type is None:
            generator_type = ''
        else:
            generator_type = generator_type.getCode()

        mop_contract = first_generation.getMopContract()
        if mop_contract is None:
            mop_contract_name = ''
            mop_account = ''
        else:
            mop_contract_name = mop_contract.getName()
            mop_account = first_generation.getMopAccount()

        hhdc_contract = first_generation.getHhdcContract()
        if hhdc_contract is None:
            hhdc_contract_name = ''
            hhdc_account = ''
        else:
            hhdc_contract_name = hhdc_contract.getName()
            hhdc_account = first_generation.getHhdcAccount()
        values = ['insert', 'supply', site_code, source, generator_type, supply_name, supply.getGspGroup().getCode(), start_date, finish_date, mop_contract_name, mop_account, hhdc_contract_name, hhdc_account]
        for is_import in [True, False]:
            for is_kwh in [True, False]:
                values.append(Boolean(first_generation.getChannel(is_import, is_kwh) != None))
        values.append(first_generation.getMeterSerialNumber())
        values = values + mpan_fields(first_generation.getImportMpan())
        values = values + mpan_fields(first_generation.getExportMpan())
        print_line(values)
        generations = Hiber.session().createQuery("from SupplyGeneration generation where generation.supply = :supply order by generation.startDate.date").setEntity('supply', supply).scroll()
        generations.next()
        while generations.next():
            generation = generations.get(0)
            physical_site = Hiber.session().createQuery("select siteSupplyGeneration.site from SiteSupplyGeneration siteSupplyGeneration where siteSupplyGeneration.supplyGeneration = :supplyGeneration and siteSupplyGeneration.isPhysical is true").setEntity('supplyGeneration', last_generation).uniqueResult()
            site_code = physical_site.getCode()
            start_date = generation.getStartDate()

            mop_contract = generation.getMopContract()
            if mop_contract is None:
                mop_contract_name = ''
                mop_account = ''
            else:
                mop_contract_name = mop_contract.getName()
                mop_account = generation.getMopAccount()

            hhdc_contract = generation.getHhdcContract()
            if hhdc_contract is None:
                hhdc_contract_name = ''
                hhdc_account = ''
            else:
                hhdc_contract_name = hhdc_contract.getName()
                hhdc_account = generation.getHhdcAccount()
            values = ['insert', 'supply-generation', generation.getMpans().iterator().next().getCore(), start_date, site_code, mop_contract_name, mop_account, hhdc_contract_name, hhdc_account]
            for is_import in [True, False]:
                for is_kwh in [True, False]:
                    values.append(Boolean(generation.getChannel(is_import, is_kwh) != None))
            values.append(generation.getMeterSerialNumber())
            values = values + mpan_fields(generation.getImportMpan())
            values = values + mpan_fields(generation.getExportMpan())
            print_line(values)
        generations.beforeFirst()
        while generations.next():
            generation = generations.get(0)
            start_date = generation.getStartDate()
            finish_date = generation.getFinishDate()
            site_supply_generations = Hiber.session().createQuery("from SiteSupplyGeneration siteSupplyGeneration where siteSupplyGeneration.supplyGeneration = :supplyGeneration and siteSupplyGeneration.isPhysical is false").setEntity('supplyGeneration', generation).scroll()
            while site_supply_generations.next():
                site_supply_generation = site_supply_generations.get(0)
                print_line(['insert', 'site-supply-generation', site_supply_generation.getSite().getCode(), first_generation.getMpans().iterator().next().getCore(), start_date, 'false'])
            site_supply_generations.close()
            query = "select datum.startDate, datum.value, datum.status from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isImport = :isImport and datum.channel.isKwh = :isKwh and datum.startDate.date >= :startDate"
            if finish_date is None:
                hh_data_q = Hiber.session().createQuery(query + " order by datum.startDate.date").setTimestamp('startDate', start_date.getDate())
            else:
                hh_data_q = Hiber.session().createQuery(query + " and datum.startDate.date <= :finishDate  order by datum.startDate.date").setTimestamp('finishDate', finish_date.getDate())
            hh_data_q.setTimestamp('startDate', start_date.getDate()).setEntity('supply', supply)
            mpan_core_str = generation.getMpans().iterator().next().getCore().toString()
            channels = Hiber.session().createQuery("from Channel channel where channel.supplyGeneration = :supplyGeneration").setEntity('supplyGeneration', generation).scroll()
            while channels.next():
                channel = channels.get(0)
                if channel.getIsImport():
                    is_import = 'true'
                else:
                    is_import = 'false'
                if channel.getIsKwh():
                    is_kwh = 'true'
                else:
                    is_kwh = 'false'
                if has_hh_data:
                    hh_data_q.setBoolean('isImport', channel.getIsImport()).setBoolean('isKwh', channel.getIsKwh()),
                    hh_data = hh_data_q.scroll()
                    hh_str = ''
                    prev_end_date = None
                    count = 0
                    while hh_data.next():
                        end_date = hh_data.get(0)
                        if prev_end_date is None or not prev_end_date.getNext().getDate().equals(end_date.getDate()) or count > 1000:
                            if prev_end_date is not None:
                                pw.println('</value>')
                                pw.println('    </line>')
                            pw.println('    <line>')
                            for value in ['insert', 'hh-datum', mpan_core_str, str(end_date), is_import, is_kwh]:
                                pw.println('        <value>' + value + '</value>')
                            pw.print('        <value>')
                            count = 0
                        else:
                            pw.print(',')
                        status = hh_data.get(2)
                        if status is None:
                            status = ''
                        pw.print(str(hh_data.get(1)) + ',' + status)
                        prev_end_date = end_date
                        count = count + 1
                    if prev_end_date is not None:
                        pw.println('</value>')
                        pw.println('    </line>')
                    hh_data.close()
            channels.close()
        generations.close()
        Hiber.session().clear()
    supplies.close()


if has_channel_snag_ignores and not is_core:
    timing = System.currentTimeMillis()
    #pw.println('about to start ' + str(System.currentTimeMillis() - timing))
    snags = Hiber.session().createQuery("from ChannelSnag snag where snag.isIgnored is true").scroll()
    #pw.println('finished ' + str(System.currentTimeMillis() - timing))
    while snags.next():
        snag = snags.get(0)
        channel = snag.getChannel()
        print_line(['insert', 'channel-snag-ignore', channel.getSupplyGeneration().getMpans().iterator().next().getCore().toString(), Boolean(channel.getIsImport()), Boolean(channel.getIsKwh()), snag.getDescription(), snag.getStartDate(), snag.getFinishDate()])
        Hiber.session().clear()
    snags.close()


if has_site_snag_ignores and not is_core:
    snags = Hiber.session().createQuery("from SiteSnag snag where snag.isIgnored is true").scroll()
    while snags.next():
        snag = snags.get(0)
        print_line(['insert', 'site-snag-ignore', snag.getSite().getCode(), snag.getDescription(), snag.getStartDate(), snag.getFinishDate()])
        Hiber.session().clear()
    snags.close()

if has_hhdc_contracts and not is_core:
    contracts = Hiber.session().createQuery("from HhdcContract contract order by contract.id").scroll()
    while contracts.next():
        print_batches(contracts.get(0), 'hhdc')
        Hiber.session().clear()
    contracts.close()


if has_mop_contracts and not is_core:
    contracts = Hiber.session().createQuery("from MopContract contract order by contract.id").scroll()
    while contracts.next():
        print_batches(contracts.get(0), 'mop')
        Hiber.session().clear()
    contracts.close()


if has_supplier_contracts and not is_core:
    contracts = Hiber.session().createQuery("from SupplierContract contract order by contract.id").scroll()
    while contracts.next():
        print_batches(contracts.get(0), 'supplier')
        Hiber.session().clear()
    contracts.close()


pw.println('</csv>')
pw.flush()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[33]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies Snapshot]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import ReadType, HhStartDate
from java.util import Calendar

def mpan_fields(mpan, date, is_import, mand_query, metering_type):
    avg_months = ''
    if mpan is None:
        mpan_core_str = ''
        agreed_sc_str = ''
        llfc_code_str = ''
        llfc_description = ''
        last_read_date_str = ''
        mandatory_hh = ''
        supplier_account = ''
        supplier_contract_name = ''
    else:
        mpan_core_str = mpan.getCore().toString()
        agreed_sc_str = str(mpan.getAgreedSupplyCapacity())
        llfc = mpan.getLlfc()
        llfc_code_str = str(llfc)
        llfc_description = llfc.getDescription()

        '''
        NON_ESTIMATE_READ_TYPES = [ReadType.TYPE_CHANGE_OF_SUPPLIER, ReadType.TYPE_CUSTOMER, ReadType.TYPE_FINAL, ReadType.TYPE_INITIAL, ReadType.TYPE_DC_MANUAL, ReadType.TYPE_ROUTINE, ReadType.TYPE_SPECIAL, ReadType.TYPE_CHANGE_OF_TENANCY]
        i = 0
        found = False
        reads = Hiber.session().createQuery("from RegisterRead read where read.supply = :supply order by read.presentDate.date").setEntity('supply', mpan).list()
        while found is not True and i < len(reads):
            read = reads[i]
            associated_reads = Hiber.session().createQuery("from RegisterRead read where read.invoice = :invoice and read.presentDate.date = :presentDate").setEntity('invoice', read.getInvoice()).setTimestamp('presentDate', read.getPresentDate().getDate()).list()
            found = True
            for associated_read in associated_reads:
                if read.presentType not in NON_ESTIMATE_READ_TYPES:
                    found = False
                    break
            i = i + 1
        last_read_date_str = 'None'
        if found:
            last_read_date_str = read.getPresentDate().toString()
        '''
        cal = MonadDate.getCalendar()
        cal.setTime(date)
        mandatory_hh = False
        if metering_type != 'nhh':
            month_mds = []
            mand_query.setBoolean('isImport', is_import)
            for i in range(12):
                mand_query.setTimestamp('finishDate', cal.getTime())
                cal.add(Calendar.MONTH, -1)
                cal.add(Calendar.MINUTE, 30)
                month_md = mand_query.setTimestamp('startDate', cal.getTime()).uniqueResult()
                cal.add(Calendar.MINUTE, -30)
                if month_md is not None:
                    month_mds.append(month_md.doubleValue() * 2)
            month_mds.sort()
            num_months = min(len(month_mds), 3)
            avg_months = 0
            for month_md in month_mds[-1 * num_months:]:
                avg_months += month_md
            if num_months > 0:
                avg_months = avg_months / num_months
            if avg_months > 100:
                mandatory_hh = True
        supplier_contract = mpan.getSupplierContract()
        if supplier_contract is not None:
            supplier_account = mpan.getSupplierAccount()
            supplier_contract_name = supplier_contract.getName()
    return [mpan_core_str, agreed_sc_str, llfc_code_str, llfc_description, supplier_contract_name, supplier_account, avg_months, mandatory_hh]

year = inv.getInteger('year')
month = inv.getInteger('month')
if not inv.isValid():
    raise UserException()
cal = MonadDate.getCalendar()
cal.clear()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.add(Calendar.MONTH, 1)
date = HhStartDate(cal.getTime()).getPrevious().getDate()
inv.getResponse().setContentType('text/csv')
inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="report.csv"')
pw = inv.getResponse().getWriter()

pw.println("Date,Physical Site Id, Physical Site Name, Other Site Ids, Other Site Names, Supply Id, Source, Generator Type, DNO Name, Voltage Level, Metering Type, Mandatory HH, PC, MTC, CoP, SSC, HHDC Contract, HHDC Account, Meter Serial Number, Has Import kWh?, Has Import kVArh?, Has Export kWh?, Has Export kVArh?, Import MPAN core, Import Agreed Supply Capacity (kVA), Import LLFC Code, Import LLFC Description, Import Supplier Contract, Import Supplier Account, Import Mandatory kWh, Export MPAN core, Export Agreed Supply Capacity (kVA), Export LLFC Code, Export LLFC Description, Export Supplier Contract, Export Supplier Account, Export Mandatory kWh")
pw.flush()
mand_query = Hiber.session().createQuery("select max(datum.value) from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isKwh is true and datum.channel.isImport = :isImport and datum.startDate.date >= :startDate and datum.startDate <= :finishDate")
supply_generations = Hiber.session().createQuery("from SupplyGeneration generation where generation.startDate.date <= :date and (generation.finishDate.date is null or generation.finishDate.date >= :date) order by generation.supply.id").setTimestamp('date', date).scroll()
while supply_generations.next():
    supply_generation = supply_generations.get(0)
    site_codes = ''
    site_names = ''
    for site_supply_generation in supply_generation.getSiteSupplyGenerations():
        if site_supply_generation.getIsPhysical():
            physical_site = site_supply_generation.getSite()
        else:
            site = site_supply_generation.getSite();
            site_codes = site_codes + site.getCode() + ', '
            site_names = site_names + site.getName() + ', '
    site_codes = site_codes[:-2]
    site_names = site_names[:-2]
    supply = supply_generation.getSupply()
    mpan = supply_generation.getMpans().iterator().next()
    generator_type = supply.getGeneratorType()
    if generator_type is None:
        generator_type = ''
    else:
        generator_type = generator_type.getCode()
    if supply_generation.getPc().getCode() == 0:
        metering_type = 'hh'
    elif supply_generation.getChannels().size() > 0:
        metering_type = 'amr'
    else:
        metering_type = 'nhh'
    mand_query.setEntity('supply', supply)
    hhdc_contract = supply_generation.getHhdcContract()
    if hhdc_contract is None:
        hhdc_contract_name = ''
        hhdc_account = ''
    else:
        hhdc_contract_name = hhdc_contract.getName()
        hhdc_account = supply_generation.getHhdcAccount()
    meter_serial_number = supply_generation.getMeterSerialNumber()
    import_values = mpan_fields(supply_generation.getImportMpan(), date, True, mand_query, metering_type)
    export_values = mpan_fields(supply_generation.getExportMpan(), date, False, mand_query, metering_type)
    channel_values = []
    for is_import in [True, False]:
        for is_kwh in [True, False]:
            if supply_generation.getChannel(is_import, is_kwh) is None:
                channel_values.append('false')
            else:
                channel_values.append('true')
    if import_values[-1] or export_values[-1]:
        mandatory_hh = 'yes'
    else:
        mandatory_hh = 'no'
    values = []
    for value in [HhStartDate(date), physical_site.getCode(), physical_site.getName(), site_codes, site_names, supply.getId(), supply.getSource().getCode(), generator_type, mpan.getCore().getDso().getName(), mpan.getLlfc().getVoltageLevel().getCode(), metering_type, mandatory_hh, supply_generation.getPc(), supply_generation.getMtc(), supply_generation.getCop(), supply_generation.getSsc(), hhdc_contract_name, hhdc_account, meter_serial_number] + channel_values + import_values[:-1] + export_values[:-1]:
        if value is None:
           values.append('')
        else:
           values.append(value)

    pw.println(','.join(('"' + str(value) + '"') for value in values))
    Hiber.session().clear()
    pw.flush()
supply_generations.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[35]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[GSP Group]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import GspGroup

group_id = inv.getLong('gsp-group-id')
group = GspGroup.getGspGroup(group_id)
source.appendChild(group.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; GSP Groups &gt;
                    <xsl:value-of
                        select="/source/gsp-group/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/43/output/">
                        <xsl:value-of select="'GSP Groups'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/gsp-group/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/gsp-group/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/gsp-group/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[37]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Channel Snags]]></value>
        <value><![CDATA[from net.sf.chellow.monad import XmlTree, Hiber, UserException
from java.util import Date
from java.lang import System
from net.sf.chellow.billing import HhdcContract
from net.sf.chellow.physical import HhStartDate

contract_id = inv.getLong('hhdc-contract-id')
if not inv.isValid():
    raise UserException()
contract = HhdcContract.getHhdcContract(contract_id)
source.appendChild(contract.toXml(doc, XmlTree('party'))) 

snag_count = Hiber.session().createQuery("select count(distinct snag) from ChannelSnag snag join snag.channel.supplyGeneration.siteSupplyGenerations siteSupplyGeneration where snag.isIgnored is false and snag.channel.supplyGeneration.hhdcContract = :contract and snag.startDate.date < :activeDate").setEntity('contract', contract).setTimestamp("activeDate",Date(System.currentTimeMillis()-(5*24*60*60*1000))).uniqueResult()

snags = Hiber.session().createQuery("select distinct snag, siteSupplyGeneration.site.code, snag.startDate.date, snag.channel.id from ChannelSnag snag join snag.channel.supplyGeneration.siteSupplyGenerations siteSupplyGeneration where snag.isIgnored is false and snag.channel.supplyGeneration.hhdcContract = :contract and snag.startDate.date < :activeDate order by siteSupplyGeneration.site.code, snag.startDate.date, snag.channel.id").setEntity('contract', contract).setTimestamp("activeDate",Date(System.currentTimeMillis()-(5*24*60*60*1000))).scroll()

i = 0
prev_snag = None
while snags.next() and i < 200:
    snag = snags.get(0)
    if prev_snag is None or not snag.getChannel().getSupplyGeneration().equals(prev_snag.getChannel().getSupplyGeneration()) or not snag.getStartDate().equals(prev_snag.getStartDate()) or not HhStartDate.isEqual(snag.getFinishDate(), prev_snag.getFinishDate()) or snag.getDescription() != prev_snag.getDescription():
        snag_group_element = doc.createElement('snag-group')
        source.appendChild(snag_group_element)
    snag_group_element.appendChild(snag.toXml(doc, XmlTree('channel', XmlTree('supplyGeneration', XmlTree('supply').put('siteSupplyGenerations', XmlTree('site')).put("mpans", XmlTree("core", XmlTree("dso")))))))
    prev_snag = snag
    i = i + 1
snags.close()

activeSites = Hiber.session().createQuery("select count(distinct siteSupplyGeneration.site) from ChannelSnag snag join snag.channel.supplyGeneration.siteSupplyGenerations siteSupplyGeneration where snag.isIgnored is false and snag.channel.supplyGeneration.hhdcContract = :contract and snag.startDate.date < :activeDate").setEntity('contract', contract).setTimestamp("activeDate",Date(System.currentTimeMillis()-(5*24*60*60*1000))).uniqueResult()

totalSites = Hiber.session().createQuery("select count(distinct siteSupplyGeneration.site) from ChannelSnag snag join snag.channel.supplyGeneration.siteSupplyGenerations siteSupplyGeneration where snag.isIgnored is false and snag.channel.supplyGeneration.hhdcContract = :contract").setEntity('contract', contract).uniqueResult()

source.setAttribute("snag-count", str(snag_count))
source.setAttribute("site-count", str(activeSites))
source.setAttribute("pending-site-count", str(totalSites - activeSites))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/hhdc-contract/@name" />
                    &gt; Channel Snags
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/113/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/hhdc-contract/@name" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Channel Snags ['" />
                    <a
                        href="{/source/request/@context-path}/hhdc-contracts/{/source/hhdc-contract/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>

                <p>
                    <xsl:value-of
                        select="source/@snag-count" />
                    Snag(s) (older then 5 days) Total over
                    <xsl:value-of
                        select="source/@site-count" />
                    Site(s)
                </p>
                <p>
                    A further
                    <xsl:value-of
                        select="source/@pending-site-count" />
                    site(s) have snags not yet older then 5 days
                </p>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>MPAN</th>
                            <th>Sites</th>
                            <th>Snag Description</th>
                            <th>Supply</th>
                            <th>Units</th>
                            <th>Duration</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/snag-group">
                            <tr>
                                <td>
                                    <ul>
                                      <xsl:for-each select="channel-snag">
                                      <li>
                                      <a
                                        href="{/source/request/@context-path}/reports/117/output/?snag-id={@id}">
                                        <xsl:value-of select="@id" />
                                      </a>
                                      <xsl:value-of select="' ['" />
                                      <a
                                        href="{/source/request/@context-path}/supplies/{channel/supply-generation/supply/@id}/generations/{channel/supply-generation/@id}/channels/{channel/@id}/snags/{@id}/">
                                          <xsl:value-of select="'edit'" />
                                      </a>
                                      <xsl:value-of select="']'" />
                                      </li>
                                      </xsl:for-each>
                                    </ul>
                                </td>
                                <td>
                                  <xsl:value-of select="concat(channel-snag/channel/supply-generation/mpan/mpan-core/dso/@code, channel-snag/channel/supply-generation/mpan/mpan-core/@uniquePart, channel-snag/channel/supply-generation/mpan/mpan-core/@checkDigit)" />
                                </td>
                                <td>
                                    <ul>
                                        <xsl:for-each
                                            select="channel-snag[position() = 1]/channel/supply-generation/site-supply-generation">
                                            <li>
                                                <xsl:value-of
                                                    select="concat(site/@code, ' ', site/@name)" />
                                            </li>
                                        </xsl:for-each>
                                    </ul>
                                </td>
                                <td>
                                    <xsl:value-of select="channel-snag/@description" />
                                </td>
                                <td>
                                    <ul>
                                      <xsl:for-each select="channel-snag">
                                        <li>
                                          <xsl:choose>
                                            <xsl:when
                                                test="channel/@is-import='true'">
                                                Import
                                            </xsl:when>
                                            <xsl:otherwise>
                                                Export
                                            </xsl:otherwise>
                                          </xsl:choose>
                                        </li>
                                      </xsl:for-each>
                                    </ul>
                                </td>
                                <td>
                                    <ul>
                                      <xsl:for-each select="channel-snag">
                                        <li>

                                    <xsl:choose>
                                        <xsl:when
                                            test="channel/@is-kwh='true'">
                                            kWh
                                        </xsl:when>
                                        <xsl:otherwise>
                                            kVArh
                                        </xsl:otherwise>
                                    </xsl:choose>
                                        </li>
                                      </xsl:for-each>
                                    </ul>
                                </td>
                                <td>
                                    Start
                                    <xsl:apply-templates
                                        select="channel-snag[position() = 1]/hh-start-date[@label='start']" />
                                    <br />
                                    Finish
                                    <xsl:choose>
                                    <xsl:when test="channel-snag[position() = 1]/hh-start-date[@label='finish']">
                                    <xsl:apply-templates
                                        select="channel-snag[position() = 1]/hh-start-date[@label='finish']" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                         Ongoing
                                    </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
    <xsl:template match="hh-start-date">
        <xsl:value-of select="concat(@year,'-',@month,'-',@day,' ',@hour,':',@minute,' Z')" />
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[39]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site Group Snags]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import HhdcContract

snags = Hiber.session().createQuery("select snag, snag.site from SiteSnag snag where snag.isIgnored = false order by snag.site.code, snag.startDate.date").list()
snags_element = doc.createElement('site-snags')
source.appendChild(snags_element)
for snag_row in snags:
    snag_element = snag_row[0].toXml(doc)
    snags_element.appendChild(snag_element)
    site_element = snag_row[1].toXml(doc)
    snag_element.appendChild(site_element)
sites = Hiber.session().createQuery("select count(distinct snag.site) from SiteSnag snag where snag.isIgnored = false").uniqueResult()
snags_element.setAttribute("snag-count", str(len(snags)))
snags_element.setAttribute("site-count", str(sites))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />

    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Site Snags
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Site Snags ['" />
                    <a
                        href="{/source/request/@context-path}/site-snags/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <p>
                    <xsl:value-of
                        select="source/site-snags/@snag-count" />
                    Snag(s) (older then 5 days) Total over
                    <xsl:value-of
                        select="source/site-snags/@site-count" />
                    Site(s)
                    <br />
                </p>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Site ID</th>
                            <th>Site Name</th>
                            <th>Snag Description</th>
                            <th>Duration</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/site-snags/site-snag">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/119/output/?snag-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                    <xsl:value-of select="' ['" />
                                    <a
                                        href="{/source/request/@context-path}/site-snags/{@id}/">
                                        <xsl:value-of select="'edit'" />
                                    </a>
                                    <xsl:value-of select="']'" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/5/output/?site-id={site/@id}">
                                        <xsl:value-of
                                            select="site/@code" />
                                    </a>
                                </td>

                                <td>
                                    <xsl:value-of select="site/@name" />
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>

                                <td>
                                    Start
                                    <xsl:apply-templates
                                        select="hh-start-date[@label='start']" />
                                    <br />
                                    Finish
                                    <xsl:apply-templates
                                        select="hh-start-date[@label='finish']" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
    <xsl:template match="hh-start-date">
        <xsl:value-of select="concat(@year, '-', @month, '-', @day, ' ', @hour, ':',@minute, ' Z')" />
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[41]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies TRIAD]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import HhStartDate, SupplyGeneration, Supply
from java.util import Calendar
from net.sf.chellow.billing import NonCoreContract, Dso

computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
year = inv.getInteger('year')
if not inv.isValid():
    raise UserException()

pw = inv.getResponse().getWriter()

cal = MonadDate.getCalendar()
cal.clear()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, Calendar.APRIL)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MINUTE, -30)
year_finish = HhStartDate(cal.getTime())

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.YEAR, -1)
year_start = HhStartDate(cal.getTime())
cal.add(Calendar.MONTH, 11)
march_start = HhStartDate(cal.getTime())

triad_contract = NonCoreContract.getNonCoreContract('TRIAD')

def triad_csv(supply_source):
    if supply_source is None or supply_source.id.startswith('99'):
        return ['' for item in range(19)]

    dso_contract = comterp.get('get_dso_contract')(supply_source.dso_code, year_finish, pw)
    bill = {}
    supply_source.contract_function(triad_contract, 'triad')(bill, dso_contract, march_start, year_finish, supply_source)
    values = [supply_source.id]
    for i in range(3):
        triad_prefix = 'triad-actual-' + str(i)
        for suffix in ['-date', '-msp-kw', '-status', '-laf', '-gsp-kw']:
            values.append(bill[triad_prefix + suffix])

    values += [bill['triad-actual-' + suf] for suf in ['gsp-kw', 'rate', 'gbp']]
    return values


pw.println("Site Code, Site Name, Supply Name, Source, Generator Type, Import MPAN Core, Import T1 Date, Import T1 MSP kW, Import T1 Status, Import T1 LAF, Import T1 GSP kW, Import T2 Date, Import T2 MSP kW, Import T2 Status, Import T2 LAF, Import T2 GSP kW, Import T3 Date, Import T3 MSP kW, Import T3 Status, Import T3 LAF, Import T3 GSP kW, Import GSP kW, Import Rate GBP / kW, Import GBP, Export MPAN Core, Export T1 Date, Export T1 MSP kW, Export T1 Status, Export T1 LAF, Export T1 GSP kW, Export T2 Date, Export T2 MSP kW, Export T2 Status, Export T2 LAF, Export T2 GSP kW, Export T3 Date, Export T3 MSP kW, Export T3 Status, Export T3 LAF, Export T3 GSP kW, Export GSP kW, Export Rate GBP / kW, Export GBP")
pw.flush()

forecast_date = comterp.get('forecast_date')()

if inv.hasParameter('supply-id'):
    supply_id = inv.getLong('supply-id')
    generations = Hiber.session().createQuery("from SupplyGeneration generation where generation.startDate.date <= :yearFinish and (generation.finishDate.date is null or generation.finishDate.date >= :yearFinish) and generation.supply.source.code in ('net', 'gen-net') and generation.supply = :supply and generation.pc.code = 0").setEntity('supply', Supply.getSupply(supply_id)).setTimestamp('yearFinish', year_finish.getDate()).scroll()
else:
    generations = Hiber.session().createQuery("from SupplyGeneration generation where generation.startDate.date <= :yearFinish and (generation.finishDate.date is null or generation.finishDate.date >= :yearFinish) and generation.supply.source.code in ('net', 'gen-net') and generation.pc.code = 0 order by generation.supply.id").setTimestamp('yearFinish', year_finish.getDate()).scroll()

while generations.next():
    generation = generations.get(0)
    site = Hiber.session().createQuery("select siteSupGen.site from SiteSupplyGeneration siteSupGen where siteSupGen.supplyGeneration = :generation and siteSupGen.isPhysical is true").setEntity('generation', generation).uniqueResult()
    supply = generation.getSupply()
    pw.print(site.getCode() + ',"' + site.getName() + '","' + supply.getName() + '",' + supply.getSource().getCode())
    pw.flush()

    import_mpan = generation.getImportMpan()
    if import_mpan is None:
        import_supply_source = None
    else:
        import_supply_source = comterp.get('supply_source')(forecast_date, comterp, pw)
        import_supply_source.init_from_mpan(year_finish, year_finish, import_mpan)
    export_mpan = generation.getExportMpan()
    if export_mpan is None:
        export_supply_source = None
    else:
        export_supply_source = comterp.get('supply_source')(forecast_date, comterp, pw)
        export_supply_source.init_from_mpan(year_finish, year_finish, export_mpan)

    gen_type = supply.getGeneratorType()
    if gen_type is None:
        gen_type = ''
    else:
        gen_type = gen_type.getCode()

    for value in [gen_type] + triad_csv(import_supply_source) + triad_csv(export_supply_source):
        pw.print("," + str(value))
    pw.println('')
    pw.flush()
    Hiber().session().clear()
generations.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[43]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[GSP Groups]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

groups_element = doc.createElement('gsp-groups')
source.appendChild(groups_element)
for group in Hiber.session().createQuery("from GspGroup group order by group.code").list():
    groups_element.appendChild(group.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    <xsl:value-of select="'Home'" />
                    &gt; GSP Groups
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'GSP Groups'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/gsp-groups/gsp-group">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/35/output/?gsp-group-id={@id}">
                                       <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[45]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Providers]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

for provider in Hiber.session().createQuery("from Provider provider order by provider.participant.code, provider.role.code").list():
    source.appendChild(provider.toXml(doc, XmlTree('participant').put('role')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>Chellow &gt; Providers</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt; Providers
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <th>Name</th>
                        <th>Participant</th>
                        <th>Market Role</th>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/provider">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/47/output/?provider-id={@id}">
                                       <xsl:value-of select="@name" />
                                    </a>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/73/output/?participant-id={participant/@id}">
                                        <xsl:value-of
                                            select="participant/@name" />
                                    </a>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/121/output/?role-id={market-role/@id}">
                                        <xsl:value-of
                                            select="market-role/@description" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[47]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Provider]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import Provider
from net.sf.chellow.physical import MarketRole

provider_id = inv.getLong('provider-id')
provider = Provider.getProvider(provider_id)
provider_element = provider.toXml(doc, XmlTree('participant').put('role'))
source.appendChild(provider_element)
provider_role_code = provider.getRole().getCode()
query = None
if provider_role_code == MarketRole.HHDC:
    query = Hiber.session().createQuery("from HhdcContract contract where contract.party = :party order by contract.party.name").setEntity('party', provider)
elif provider_role_code == MarketRole.SUPPLIER:
    query = Hiber.session().createQuery("from SupplierContract contract where contract.party = :party order by contract.party.name").setEntity('party', provider)
elif provider_role_code == MarketRole.NON_CORE_ROLE:
    query = Hiber.session().createQuery("from NonCoreContract contract where contract.party = :party order by contract.party.name").setEntity('party', provider)
elif provider_role_code == MarketRole.MOP:
    query = Hiber.session().createQuery("from MopContract contract where contract.party = :party order by contract.party.name").setEntity('party', provider)

if query != None:
    for contract in query.list():
        contract_element = contract.toXml(doc, XmlTree('rateScripts'))
        start_rate_script = contract.getStartRateScript()
        start_rate_script.setLabel('start')
        contract_element.appendChild(start_rate_script.toXml(doc))
        finish_rate_script = contract.getFinishRateScript()
        finish_rate_script.setLabel('finish')
        contract_element.appendChild(finish_rate_script.toXml(doc))
        provider_element.appendChild(contract_element)]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Providers &gt;
                    <xsl:value-of select="/source/provider/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/45/output/">
                        <xsl:value-of select="'Providers'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/provider/@name" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Name</th>
                        <td>
                            <xsl:value-of
                                select="/source/provider/@name" />
                        </td>
                    </tr>

                    <tr>
                        <th>Participant</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/73/output/?participant-id={/source/provider/participant/@id}">
                                <xsl:value-of
                                    select="/source/provider/participant/@name" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>Role</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/121/output/?role-id={/source/provider/market-role/@id}">
                                <xsl:value-of
                                    select="/source/provider/market-role/@description" />
                            </a>
                        </td>
                    </tr>
                    <xsl:if
                        test="/source/provider/market-role/@code='R'">
                        <tr>
                            <th>DSO Code</th>
                            <td>
                                <xsl:value-of
                                    select="/source/provider/@dso-code" />
                            </td>
                        </tr>
                    </xsl:if>
                </table>
                <br />
                <table>
                    <caption>
                        <xsl:choose>
                            <xsl:when
                                test="/source/provider/market-role/@code = 'R'">
                                Services
                            </xsl:when>
                            <xsl:otherwise>Contracts</xsl:otherwise>
                        </xsl:choose>
                    </caption>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Start Date</th>
                            <th>Finish Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/provider/hhdc-contract | /source/provider/supplier-contract | /source/provider/mop-contract">
                            <tr>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="/source/provider/market-role/@code = 'C'">
                                            <a
                                                href="{/source/request/@context-path}/reports/113/output/?contract-id={@id}">
                                               <xsl:value-of select="@name" />
                                            </a>
                                        </xsl:when>
                                        <xsl:when
                                            test="/source/provider/market-role/@code = 'R'">
                                            <a
                                                href="{/source/request/@context-path}/reports/113/output/?contract-id={@id}">
                                               <xsl:value-of select="@name" />
                                            </a>
                                        </xsl:when>
                                        <xsl:when
                                            test="/source/provider/market-role/@code = 'X'">
                                            <a
                                                href="{/source/request/@context-path}/reports/75/output/?contract-id={@id}">
                                                <xsl:value-of select="@name" />
                                            </a>
                                        </xsl:when>
                                        <xsl:when
                                            test="/source/provider/market-role/@code = 'M'">
                                            <a
                                                href="{/source/request/@context-path}/reports/107/output/?mop-contract-id={@id}">
                                                <xsl:value-of select="@name" />
                                            </a>
                                        </xsl:when>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(rate-script[@label='start']/hh-start-date[@label='start']/@year, '-', rate-script[@label='start']/hh-start-date[@label='start']/@month, '-', rate-script[@label='start']/hh-start-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="rate-script[@label='finish']/hh-start-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(rate-script[@label='finish']/hh-start-date[@label='finish']/@year, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@month, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
          </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[49]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[DSO LLFCs]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import Dso

dso_id = inv.getLong('dso-id')
dso = Dso.getDso(dso_id)
llfcs_element = doc.createElement('llfcs')
source.appendChild(llfcs_element)
for llfc in Hiber.session().createQuery("from Llfc llfc where llfc.dso = :dso order by llfc.code").setEntity("dso", dso).list():
    llfcs_element.appendChild(llfc.toXml(doc, XmlTree("voltageLevel")))
llfcs_element.appendChild(dso.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; DSOs &gt;
                    <xsl:value-of
                        select="/source/llfcs/dso/@code" />
                    &gt; LLFCs
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/137/output/">
                        <xsl:value-of select="'DSOs'"/>
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/139/output/?dso-id={/source/llfcs/dso/@id}">
                        <xsl:value-of
                            select="/source/llfcs/dso/@code" />
                    </a>
                    &gt; LLFCs
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                            <th>Voltage Level</th>
                            <th>Is Substation?</th>
                            <th>Is Import?</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/llfcs/llfc">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/51/output/?llfc-id={@id}">
                                    <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(voltage-level/@code, ' - ', voltage-level/@name)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@is-substation='true'">
                                            Has Substation
                                        </xsl:when>
                                        <xsl:otherwise>
                                            No Substation
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@is-import='true'">
                                            Import
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Export
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[51]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[DSO LLFC]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Llfc

llfc_id = inv.getLong('llfc-id')
llfc = Llfc.getLlfc(llfc_id)
source.appendChild(llfc.toXml(doc, XmlTree('dso').put('voltageLevel')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; DSOs &gt;
                    <xsl:value-of
                        select="/source/llfc/dso/@code" />
                    &gt; LLFCs &gt;
                    <xsl:value-of select="/source/llfc/@code" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/137/output/">
                        <xsl:value-of select="'DSOs'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/139/output/?dso-id={/source/llfc/dso/@id}">
                        <xsl:value-of
                            select="/source/llfc/dso/@code" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/49/output/?dso-id={/source/llfc/dso/@id}">
                        <xsl:value-of select="'LLFCs'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/llfc/@code" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/llfc/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/llfc/@description" />
                        </td>

                    </tr>
                    <tr>
                        <th>Voltage Level</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/llfc/voltage-level/@code, ' - ', /source/llfc/voltage-level/@name)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Is Substation?</th>
                        <td>
                            <xsl:value-of
                                select="/source/llfc/@is-substation" />
                        </td>
                    </tr>
                    <tr>
                        <th>Is Import?</th>
                        <td>
                            <xsl:value-of
                                select="/source/llfc/@is-import" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[53]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Profile Classes]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

pcs_element = doc.createElement('pcs')
source.appendChild(pcs_element)
for pc in Hiber.session().createQuery("from Pc pc order by pc.code").list():
    pcs_element.appendChild(pc.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>Home &gt; Profile Classes</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt; Profile Classes
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/pcs/pc">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/55/output/?pc-id={@id}">
                                        <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[55]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Profile Class]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Pc

pc_id = inv.getLong('pc-id')
pc = Pc.getPc(pc_id)
source.appendChild(pc.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Home &gt; Profile Classes &gt;
                    <xsl:value-of select="/source/pc/@code" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/53/output/">
                        <xsl:value-of select="'Profile Classes'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/pc/@code" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/pc/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/pc/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[57]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Sites Duration Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/style/" />

                <title>Chellow &gt; CSV Sites Duration</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Sites Duration'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/59/output/">
                    <fieldset>
                        <legend>Download</legend>
<br/>
                        <xsl:value-of select="'For '"/>
                        <input name="months" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='months']">
                                <xsl:value-of select="/source/request/parameter[@name='months']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
<xsl:value-of select="' month(s) finishing at the end of '"/>
                        <input name="year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[59]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Sites Duration]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.lang import System
from net.sf.chellow.monad.types import MonadDate
import math
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate

year = inv.getInteger("year")
month = inv.getInteger("month")
months = inv.getInteger("months")

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.clear()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.add(Calendar.MONTH, 1)
finish_date = HhStartDate(cal.getTime())
cal.add(Calendar.MONTH, -1 * months)
cal.add(Calendar.MINUTE, 30)
start_date = HhStartDate(cal.getTime())

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()
pw.println("Site Id, Site Name, Associated Site Ids, Sources, Generator Types, From, To, Imported kWh, Displaced kWh, Exported kWh, Used kWh, Parasitic kWh, Generated kWh,Meter Type")
pw.flush()
sites = Hiber.session().createQuery("from Site site order by site.code").scroll()
while sites.next():
    query = Hiber.session().createQuery("select sum(datum.value) from HhDatum datum where datum.channel.supplyGeneration = :supplyGeneration and datum.channel.isImport is :isImport and datum.channel.isKwh is true and datum.channel.supplyGeneration.supply.source.code in (:sources) and datum.startDate.date >= :startDate and datum.startDate <= :finishDate")
    site = sites.get(0)
    site_code = site.getCode()
    associates = []
    sources = []
    generator_types = []
    has_physical = False
    site_supply_generations = Hiber.session().createQuery("from SiteSupplyGeneration siteSupplyGeneration where siteSupplyGeneration.site = :site and siteSupplyGeneration.isPhysical is true and siteSupplyGeneration.supplyGeneration.supply.source.code != 'sub' and siteSupplyGeneration.supplyGeneration.startDate.date <= :finishDate and (siteSupplyGeneration.supplyGeneration.finishDate is null or siteSupplyGeneration.supplyGeneration.finishDate.date >= :startDate)").setEntity('site', site).setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate()).scroll()
    import_from_net = 0
    export_to_net = 0
    import_from_gen = 0
    export_to_gen = 0
    metering_type = 'nhh'
    while site_supply_generations.next():
        has_physical = True
        site_supply_generation = site_supply_generations.get(0)
        supply_generation = site_supply_generation.getSupplyGeneration()
        if metering_type == 'nhh' and supply_generation.getChannels().size() > 0:
            metering_type = 'amr'
        if supply_generation.getPc().getCode() == 0:
            metering_type = 'hh'
        for ss_gen in supply_generation.getSiteSupplyGenerations():
            ss_gen_site_code = ss_gen.getSite().getCode()
            if ss_gen.getId() != site_supply_generation.getId() and ss_gen_site_code != site_code and ss_gen_site_code not in associates:
                associates.append(ss_gen_site_code)
            sup = ss_gen.getSupplyGeneration().getSupply()
            ss_gen_source = sup.getSource().getCode()
            if ss_gen_source not in sources:
                sources.append(ss_gen_source)
            if sup.getGeneratorType() is not None:
                ss_gen_gtype = sup.getGeneratorType().getCode()
                if sup.getGeneratorType() not in generator_types:
                    generator_types.append(ss_gen_gtype)
        result = query.setEntity('supplyGeneration', supply_generation).setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate()).setBoolean('isImport', True).setParameterList('sources', ['net', 'gen-net']).uniqueResult()
        if result is not None:
            import_from_net = import_from_net + result.doubleValue()
        result = query.setBoolean('isImport', False).uniqueResult()
        if result is not None:
            export_to_net = export_to_net + result.doubleValue()
        result = query.setParameterList('sources', ['gen']).uniqueResult()
        if result is not None:
            export_to_gen = export_to_gen + result.doubleValue()
        result = query.setParameterList('sources', ['gen-net']).uniqueResult()
        if result is not None:
            import_from_gen = import_from_gen + result.doubleValue()
        result = query.setBoolean('isImport', True).uniqueResult()
        if result is not None:
            export_to_gen = export_to_gen + result.doubleValue()
        result = query.setParameterList('sources', ['gen']).uniqueResult()
        if result is not None:
            import_from_gen = import_from_gen + result.doubleValue()
    if has_physical:
        associate_str = ''
        for associate in associates:
            associate_str = associate_str + associate + ', '
        sources.sort()
        sources_str = ''
        for source in sources:
            sources_str = sources_str + source + ', '
        generator_types.sort()
        generator_types_str = ''
        for generator_type in generator_types:
            generator_types_str = generator_types_str + generator_type + ', '
        displaced = import_from_gen - export_to_net - export_to_gen
        used = displaced + import_from_net
        pw.print('"' + site_code + '","')
        pw.print(site.getName() + '","')     
        pw.print(associate_str[:-2] + '","')
        pw.print(sources_str[:-2] + '","')
        pw.print(generator_types_str[:-2] + '",')
        pw.print(start_date.toString() + ',')
        pw.print(finish_date.toString() + ',')
        pw.print(str(round(import_from_net)))
        pw.print(',' + str(round(displaced)) + ',')
        pw.print(str(round(export_to_net)) + ',')
        pw.print(str(round(used)) + ',')
        pw.print(str(round(export_to_gen)) + ',')
        pw.print(str(round(import_from_gen)) + ',' + metering_type + '\n')
    pw.flush()
    Hiber.session().clear()
sites.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[61]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MTCs]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

mtcs_element = doc.createElement('mtcs')
source.appendChild(mtcs_element)
for mt in Hiber.session().createQuery("select mtc from Mtc mtc left outer join mtc.dso dso order by mtc.code, dso.code").list():
    mtcs_element.appendChild(mt.toXml(doc, XmlTree('dso').put('meterType')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>Home &gt; MTCs</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'"/>
                    </a>
                    &gt; MTCs
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Dso</th>
                            <th>Description</th>
                            <th>Meter Type</th>
                            <th>TPR count</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/mtcs/mtc">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/63/output/?mtc-id={@id}">
                                        <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="dso">
                                            <a
                                                href="{/source/request/@context-path}/reports/139/output/?dso-id={dso/@id}">
                                                <xsl:value-of
                                                    select="dso/@code" />
                                            </a>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            All
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                                <td>
                                    <a href="{/source/request/@context-path}/reports/131/output/?type-id={meter-type/@id}">
                                                <xsl:value-of
                                                    select="meter-type/@code" />
                                            </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@tpr-count" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[63]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MTC]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Mtc

mtc_id = inv.getLong('mtc-id')
mtc = Mtc.getMtc(mtc_id)
source.appendChild(mtc.toXml(doc, XmlTree('meterType').put('paymentType').put('dso')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; MTCs &gt;
                    <xsl:value-of select="/source/mtc/@code" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/61/output/">
                        <xsl:value-of select="'MTCs'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/mtc/@code" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/mtc/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Dso</th>
                        <td>
                            <xsl:choose>
                                <xsl:when test="/source/mtc/dso">
                                    <a
                                        href="{/source/request/@context-path}/reports/139/output/?dso-id={/source/mtc/dso/@id}">
                                        <xsl:value-of
                                            select="/source/mtc/dso/@code" />
                                    </a>
                                </xsl:when>
                                <xsl:otherwise>All</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/mtc/@description" />
                        </td>
                    </tr>
                    <tr>
                        <th>Has Related Metering?</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/mtc/@has-related-metering = 'true'">
                                    Yes
                                </xsl:when>
                                <xsl:otherwise>No</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Has Comms?</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/mtc/@has-comms">
                                    <xsl:choose>
                                        <xsl:when
                                            test="/source/mtc/@has-comms='true'">
                                            Yes
                                        </xsl:when>
                                        <xsl:otherwise>
                                            No
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:when>
                                <xsl:otherwise>Unknown</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Measurement Class</th>
                        <td>
                            <xsl:choose>
                                <xsl:when test="/source/mtc/@is-hh">
                                    <xsl:choose>
                                        <xsl:when
                                            test="/source/mtc/@is-hh='true'">
                                            HH
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NHH
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:when>
                                <xsl:otherwise>Unknown</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Meter Type</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/131/output/?type-id={/source/mtc/meter-type/@id}">
                                <xsl:value-of
                                    select="/source/mtc/meter-type/@description" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>Payment Type</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/135/output/?type-id={/source/mtc/meter-payment-type/@id}">
                                <xsl:value-of
                                    select="/source/mtc/meter-payment-type/@description" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>TPR Count</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/mtc/@tpr-count">
                                    <xsl:value-of
                                        select="/source/mtc/@tpr-count" />
                                </xsl:when>
                                <xsl:otherwise>N/A</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Valid From</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/mtc/date[@label='from']/@year, '-', /source/mtc/date[@label='from']/@month, '-', /source/mtc/date[@label='from']/@day, ' ', /source/mtc/date[@label='from']/@hour, ':', /source/mtc/date[@label='from']/@minute, ' Z')" />
                        </td>
                    </tr>
                    <tr>
                        <th>Valid To</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/mtc/date[@label='to']">
                                    <xsl:value-of
                                        select="concat(/source/mtc/date[@label='to']/@year, '-', /source/mtc/date[@label='to']/@month, '-', /source/mtc/date[@label='to']/@day, ' ', /source/mtc/date[@label='to']/@hour, ':', /source/mtc/date[@label='to']/@minute, ' Z')" />
                                </xsl:when>
                                <xsl:otherwise>Ongoing</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[65]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[DSO Contracts]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import Dso

dso_id = inv.getLong('dso-id')
dso = Dso.getDso(dso_id)
contracts_element = doc.createElement('dso-contracts')
source.appendChild(contracts_element)
for contract in Hiber.session().createQuery("from DsoContract contract where contract.party = :dso order by contract.startRateScript.startDate.date").setEntity("dso", dso).list():
    contract_element = contract.toXml(doc)
    contracts_element.appendChild(contract_element)
    start_rate_script = contract.getStartRateScript()
    start_rate_script.setLabel('start')
    contract_element.appendChild(start_rate_script.toXml(doc))
    finish_rate_script = contract.getFinishRateScript()
    finish_rate_script.setLabel('finish')
    contract_element.appendChild(finish_rate_script.toXml(doc))
contracts_element.appendChild(dso.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; DSOs &gt;
                    <xsl:value-of select="/source/dso-contract/dso/@code" />
                    &gt; Contracts
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/137/output/">
                        <xsl:value-of select="'DSOs'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/139/output/?dso-id={/source/dso-contracts/dso/@id}">
                        <xsl:value-of
                            select="/source/dso-contracts/dso/@code" />
                    </a>
                    &gt; DSO Contracts
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Name</th>
                            <th>Start Date</th>
                            <th>Finish Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/dso-contracts/dso-contract">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/67/output/?dso-contract-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@name" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(rate-script[@label='start']/hh-start-date[@label='start']/@year, '-', rate-script[@label='start']/hh-start-date[@label='start']/@month, '-', rate-script[@label='start']/hh-start-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="rate-script[@label='finish']/hh-start-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(rate-script[@label='finish']/hh-start-date[@label='finish']/@year, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@month, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[67]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[DSO Contract]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import DsoContract

contract_id = inv.getLong('dso-contract-id')
contract = DsoContract.getDsoContract(contract_id)
contract_element = contract.toXml(doc, XmlTree('party'))
source.appendChild(contract_element)
for rate_script in contract.getRateScripts():
    contract_element.appendChild(rate_script.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; DSOs &gt;
                    <xsl:value-of
                        select="/source/dso-contract/dso/@code" />
                    &gt; Contracts &gt;
                    <xsl:value-of select="/source/dso-contract/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/137/output/">
                        <xsl:value-of select="'DSOs'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/139/output/?dso-id={/source/dso-contract/dso/@id}">
                        <xsl:value-of
                            select="/source/dso-contract/dso/@code" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/65/output/?dso-id={/source/dso-contract/dso/@id}">
                        <xsl:value-of select="'Contracts'" />
                    </a>
                    &gt;
                    <xsl:value-of select="concat(/source/dso-contract/@name, ' [')" />
                    <a
                        href="{/source/request/@context-path}/dsos/{/source/dso-contract/dso/@id}/contracts/{/source/dso-contract/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>Properties</caption>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Id</td>
                            <td>
                                <xsl:value-of
                                    select="/source/dso-contract/@id" />
                            </td>
                        </tr>
                        <tr>
                            <td>Name</td>
                            <td>
                                <xsl:value-of
                                    select="/source/dso-contract/@name" />
                            </td>
                        </tr>
                        <tr>
                            <td>Start Date</td>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/dso-contract/rate-script[position()=1]/hh-start-date[@label='start']/@year, '-', /source/dso-contract/rate-script[position()=1]/hh-start-date[@label='start']/@month, '-', /source/dso-contract/rate-script[position()=1]/hh-start-date[@label='start']/@day)" />
                            </td>
                        </tr>
                        <tr>
                            <td>Finish Date</td>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/dso-contract/rate-script[position()=last()]/hh-start-date[@label='finish']">
                                        <xsl:value-of
                                            select="concat(/source/dso-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@year, '-', /source/dso-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@month, '-', /source/dso-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@day)" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Ongoing
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <h2>Script</h2>
                <pre>
                    <xsl:value-of
                        select="/source/dso-contract/@charge-script" />
                </pre>

                <h2>Rate Scripts</h2>

                <table>
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>From</th>
                            <th>To</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/dso-contract/rate-script">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/69/output/?dso-rate-script-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="hh-start-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[69]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[DSO Contract Rate Script]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import RateScript

script_id = inv.getLong('dso-rate-script-id')
script = RateScript.getRateScript(script_id)
source.appendChild(script.toXml(doc, XmlTree('contract', XmlTree('party'))))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; DSOs &gt;
                    <xsl:value-of
                        select="/source/rate-script/dso-contract/dso/@code" />
                    &gt; Contracts &gt;
                    <xsl:value-of
                        select="/source/rate-script/dso-contract/@name" />
                    &gt; Rate Script
                    <xsl:value-of select="/source/rate-script/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/137/output/">
                        <xsl:value-of select="'DSOs'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/139/output/?dso-id={/source/rate-script/dso-contract/dso/@id}">
                        <xsl:value-of
                            select="/source/rate-script/dso-contract/dso/@code" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/65/output/?dso-id={/source/rate-script/dso-contract/dso/@id}">
                        <xsl:value-of select="'Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/67/output/?dso-contract-id={/source/rate-script/dso-contract/@id}">
                        <xsl:value-of
                            select="/source/rate-script/dso-contract/@name" />
                    </a>
                    &gt; Rate Script
                    <xsl:value-of select="concat(/source/rate-script/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/dsos/{/source/rate-script/dso-contract/dso/@id}/contracts/{/source/rate-script/dso-contract/@id}/rate-scripts/{/source/rate-script/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>Properties</caption>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Id</td>
                            <td>
                                <xsl:value-of
                                    select="/source/rate-script/@id" />
                            </td>
                        </tr>
                        <tr>
                            <td>Start Date</td>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/rate-script/hh-start-date[@label='start']/@year, '-', /source/rate-script/hh-start-date[@label='start']/@month, '-', /source/rate-script/hh-start-date[@label='start']/@day)" />
                            </td>
                        </tr>
                        <tr>
                            <td>Finish Date</td>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/rate-script/hh-start-date[@label='finish']">
                                        <xsl:value-of
                                            select="concat(/source/rate-script/hh-start-date[@label='finish']/@year, '-', /source/rate-script/hh-start-date[@label='finish']/@month, '-', /source/rate-script/hh-start-date[@label='finish']/@day)" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Ongoing
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <h2>Script</h2>

                <pre>
                    <xsl:value-of select="/source/rate-script/@script" />
                </pre>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[71]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Participants]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber

for participant in Hiber.session().createQuery('from Participant participant order by participant.code').list():
    source.appendChild(participant.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Participants
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Participants'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/participant">
                            <tr>
                                <td>
<a
                                        href="{/source/request/@context-path}/reports/73/output/?participant-id={@id}">
                                    <xsl:value-of select="@code" /></a>
                                </td>
                                <td>
                                    <xsl:value-of select="@name" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[73]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Participant]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Participant

participant_id = inv.getLong('participant-id')
participant = Participant.getParticipant(participant_id)
participant_element = participant.toXml(doc)
source.appendChild(participant_element);
for party in Hiber.session().createQuery("from Party party where party.participant = :participant order by party.role.code").setEntity('participant', participant).list():
    participant_element.appendChild(party.toXml(doc, XmlTree('role')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Market Participants &gt;
                    <xsl:value-of select="/source/participant/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/71/output/">
                        <xsl:value-of select="'Market Participants'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/participant/@name" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                        <tr>
                            <th>Code</th>
                            <td>
                                <xsl:value-of
                                    select="/source/participant/@code" />
                            </td>
                        </tr>
                        <tr>
                            <th>Name</th>
                            <td>
                                <xsl:value-of
                                    select="/source/participant/@name" />
                            </td>
                        </tr>
                    </tbody>
                </table>
<br/>
                <table>
                    <caption>Parties</caption>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Market Role</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/participant[provider or dso]/*">
                            <tr>
                                <td>
                                  <xsl:choose>
                                    <xsl:when test="../provider">
                                      <a
                                          href="{/source/request/@context-path}/reports/47/output/?provider-id={@id}">
                                          <xsl:value-of select="@name" />
                                      </a>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <a
                                          href="{/source/request/@context-path}/reports/139/output/?dso-id={@id}">
                                          <xsl:value-of select="@name" />
                                      </a>
                                    </xsl:otherwise>
                                   </xsl:choose>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/123/output/?role-id={market-role/@id}">
                                        <xsl:value-of
                                            select="market-role/@description" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[75]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contracts]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

contracts_element = doc.createElement('contracts')
source.appendChild(contracts_element)
for contract in Hiber.session().createQuery("from SupplierContract contract order by contract.startRateScript.startDate.date").list():
    contract_element = contract.toXml(doc, XmlTree('party'))
    contracts_element.appendChild(contract_element)
    start_rate_script = contract.getStartRateScript()
    start_rate_script.setLabel('start')
    contract_element.appendChild(start_rate_script.toXml(doc))
    finish_rate_script = contract.getFinishRateScript()
    finish_rate_script.setLabel('finish')
    contract_element.appendChild(finish_rate_script.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Supplier Contracts
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Supplier Contracts ['" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Start Date</th>
                            <th>Finish Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/contracts/supplier-contract">
                            <tr>
                                <td>
<a href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={@id}">
                                    <xsl:value-of select="@name" />
</a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(rate-script[@label='start']/hh-start-date[@label='start']/@year, '-', rate-script[@label='start']/hh-start-date[@label='start']/@month, '-', rate-script[@label='start']/hh-start-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="rate-script[@label='finish']/hh-start-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(rate-script[@label='finish']/hh-start-date[@label='finish']/@year, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@month, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/47/output/?provider-id={provider/@id}">
                                        <xsl:value-of
                                            select="provider/@name" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[77]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contract]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import SupplierContract
from net.sf.chellow.monad.types import MonadDate
from java.util import Calendar

contract_id = inv.getLong('supplier-contract-id')
contract = SupplierContract.getSupplierContract(contract_id)
contract_element = contract.toXml(doc, XmlTree('party'))
source.appendChild(contract_element)
for rate_script in contract.getRateScripts():
    contract_element.appendChild(rate_script.toXml(doc))
for account in Hiber.session().createQuery("from Batch batch where batch.contract = :contract order by batch.reference").setEntity('contract', contract).list():
    contract_element.appendChild(account.toXml(doc))

cal = MonadDate.getCalendar()
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/supplier-contract/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/75/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/supplier-contract/@name, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/supplier-contract/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                        <tr>
                            <th>Name</th>
                            <td>
                                <xsl:value-of
                                    select="/source/supplier-contract/@name" />
                            </td>
                        </tr>
                        <tr>
                            <th>Supplier</th>
                            <td>
                                <a
                                    href="{/source/request/@context-path}/reports/47/output/?provider-id={/source/supplier-contract/provider/@id}">
                                    <xsl:value-of
                                        select="/source/supplier-contract/provider/@name" />
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <th>Start Date</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/supplier-contract/rate-script[position()=1]/hh-start-date[@label='start']/@year, '-', /source/supplier-contract/rate-script[position()=1]/hh-start-date[@label='start']/@month, '-', /source/supplier-contract/rate-script[position()=1]/hh-start-date[@label='start']/@day)" />
                            </td>
                        </tr>
                        <tr>
                            <th>Finish Date</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/supplier-contract/rate-script[position()=last()]/hh-start-date[@label='finish']">
                                        <xsl:value-of
                                            select="concat(/source/supplier-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@year, '-', /source/supplier-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@month, '-', /source/supplier-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@day)" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Ongoing
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <br />
                <table>
                    <caption>Rate Scripts</caption>
                    <thead>
                        <tr>
                            <th></th>
                            <th>From</th>
                            <th>To</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/supplier-contract/rate-script">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/79/output/?rate-script-id={@id}">
                                        <xsl:value-of select="'view'" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="hh-start-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>

                <ul>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/89/output/?supplier-contract-id={/source/supplier-contract/@id}">
                            Batches
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/105/output/?supplier-contract-id={/source/supplier-contract/@id}">
                            Snags
                        </a>
                    </li>
                </ul>

<h3>CSV Downloads</h3>

                <form action="{/source/request/@context-path}/reports/87/output/">
                    <fieldset>
                        <input type="hidden" name="contract-id" value="{/source/supplier-contract/@id}"/>
                        <legend>Download Supply Level Virtual Bills</legend>
<br/>
<xsl:value-of select="'For MPAN core '"/>
<input name="mpan-core" value="" maxlength="30" size="30" />
<xsl:value-of select="' for '"/>
<select name="supply-polarity">
                                <option value="import">
                                    Import
                                </option>
                                <option value="export">
                                    Export
                                </option>
                        </select>
<xsl:value-of select="' and '"/>
<select name="source-code">
 <option value="net">
                                    Network
                                </option>                                <option value="3rd-party">
                  Third Party     
                                </option>
                        </select>
<xsl:value-of select="' for '"/>
<input name="months" value="1" maxlength="2" size="2" />
<xsl:value-of select="' month(s) until the end of '"/>
                        <input name="end-year" value="{/source/date/@year}" maxlength="4" size="4" /><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
                <br/>
                <form action="{/source/request/@context-path}/reports/109/output/">
                    <fieldset>
                        <input type="hidden" name="contract-id" value="{/source/supplier-contract/@id}"/>
                        <legend>Download Displaced Virtual Bills</legend>
<br/>
<xsl:value-of select="'For '"/>
<input name="months" value="1" maxlength="2" size="2" />
<xsl:value-of select="' month(s) until the end of '"/>
                        <input name="end-year" value="{/source/date/@year}" maxlength="4" size="4" /><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
                <br/>
                <form action="{/source/request/@context-path}/reports/103/output/">
                    <fieldset>
                        <input type="hidden" name="contract-id" value="{/source/supplier-contract/@id}"/>
                        <legend>Download Third Party Virtual Bills</legend>
<br/>
<xsl:value-of select="'For site code '"/>
<input name="site-code" value="" maxlength="30" size="30" />
<xsl:value-of select="' for '"/>
<input name="months" value="1" maxlength="2" size="2" />
<xsl:value-of select="' month(s) until the end of '"/>
                        <input name="end-year" value="{/source/date/@year}" maxlength="4" size="4" /><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>

                <h3>Script</h3>
                <pre>
                    <xsl:value-of
                        select="/source/supplier-contract/@charge-script" />
                </pre>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[79]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contract Rate Script]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import RateScript

script_id = inv.getLong('rate-script-id')
script = RateScript.getRateScript(script_id)
source.appendChild(script.toXml(doc, XmlTree('contract', XmlTree('party'))))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/rate-script/supplier-contract/@name" />
                    &gt; Rate Script
                    <xsl:value-of select="/source/rate-script/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/75/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={/source/rate-script/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/rate-script/supplier-contract/@name" />
                    </a>
                    &gt; Rate Script
                    <xsl:value-of
                        select="concat(/source/rate-script/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/rate-script/supplier-contract/@id}/rate-scripts/{/source/rate-script/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of
                                select="/source/rate-script/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Start Date</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/rate-script/hh-start-date[@label='start']/@year, '-', /source/rate-script/hh-start-date[@label='start']/@month, '-', /source/rate-script/hh-start-date[@label='start']/@day)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Finish Date</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/rate-script/hh-start-date[@label='finish']">
                                    <xsl:value-of
                                        select="concat(/source/rate-script/hh-start-date[@label='finish']/@year, '-', /source/rate-script/hh-start-date[@label='finish']/@month, '-', /source/rate-script/hh-start-date[@label='finish']/@day)" />
                                </xsl:when>
                                <xsl:otherwise>Ongoing</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                </table>

                <h2>Script</h2>

                <pre>
                    <xsl:value-of select="/source/rate-script/@script" />
                </pre>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[81]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Contract Virtual Bills]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.physical import HhStartDate, Supply
from java.sql import Timestamp, ResultSet
from net.sf.chellow.billing import HhdcContract, NonCoreContract
    
inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()
end_year = inv.getInteger("end-year")
end_month = inv.getInteger("end-month")
months = inv.getInteger("months")
contract_id = inv.getLong('contract-id')
if not inv.isValid():
    raise UserException()

contract = HhdcContract.getHhdcContract(contract_id)

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.set(Calendar.YEAR, end_year)
cal.set(Calendar.MONTH, end_month - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, months * -1)
start_date = HhStartDate(cal.getTime())

computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])

forecast_date = comterp.get('forecast_date')()

pw.print('Import MPAN Core, Export MPAN Core, Start Date, Finish Date')
bill_titles = comterp.get('contract_function')(contract, 'virtual_bill_titles')()
for title in bill_titles:
    pw.print(',' + title)
pw.println('')
pw.flush()

generations = Hiber.session().createQuery("select distinct generation from SupplyGeneration generation where (generation.finishDate.date is null or generation.finishDate.date >= :startDate) and generation.startDate.date <= :finishDate and generation.hhdcContract = :contract order by generation.supply.id").setEntity('contract', contract).setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate()).scroll()
while generations.next():
    generation = generations.get(0)
    import_mpan = generation.getImportMpan()
    if import_mpan is None:
        import_mpan_core_str = ''
    else:
        mpan = import_mpan
        import_mpan_core_str = import_mpan.getCore().toString()

    export_mpan = generation.getExportMpan()
    if export_mpan is None:
        export_mpan_core_str = ''
    else:
        mpan = export_mpan
        export_mpan_core_str = export_mpan.getCore().toString()

    pw.print(import_mpan_core_str + ',' + export_mpan_core_str + ',' + str(start_date) + ',' + str(finish_date) + ',')
    supply_source = comterp.get('supply_source')(forecast_date, comterp, pw)
    supply_source.init_from_mpan(start_date, finish_date, mpan)
    bill = supply_source.contract_function(contract, 'virtual_bill')(supply_source)
    for title in bill_titles:
        pw.print('"' + str(bill.get(title, '')) + '",')
        if title in bill:
            del bill[title]
    keys = bill.keys()
    keys.sort()
    for k in keys:
        pw.print(',"' + k + '","' + str(bill[k]) + '"')
    pw.println('')
    pw.flush()
    Hiber.session().clear()
generations.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[83]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Contract Virtual Bill Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.monad import Hiber
from net.sf.chellow.billing import HhdcContract

contract_id = inv.getLong('hhdc-contract-id')
if not inv.isValid():
    raise UserException()

contract = HhdcContract.getHhdcContract(contract_id)

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(contract.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
<head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Home &gt; HHDC Contracts &gt;
                    <xsl:value-of select="/source/hhdc-contract/@name" /> &gt; Virtual Bills
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/113/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                    <xsl:value-of
                        select="/source/hhdc-contract/@name" />
                    </a>
                    &gt;
                    Virtual Bills
                </p>

                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/81/output/">
                    <fieldset>
                        <legend>Download Virtual Bills</legend>
                        <input type="hidden" name="contract-id" value="{/source/hhdc-contract/@id}"/>
<br/>
<xsl:value-of select="'For '"/>
<input name="months" value="1" maxlength="2" size="2" />
<xsl:value-of select="' month(s) until the end of '"/>
                        <input name="end-year" value="{/source/date/@year}" maxlength="4" size="4" /><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[85]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CoPs]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

cops_element = doc.createElement('cops')
source.appendChild(cops_element)
for cop in Hiber.session().createQuery("from Cop cop order by cop.code").list():
    cops_element.appendChild(cop.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; CoPs
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CoPs'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/cops/cop">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/197/output/?cop-id={@id}">
                                        <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[87]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contract Import Virtual Bills]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber
from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date
from net.sf.chellow.physical import MpanCore, HhStartDate, Supply
from net.sf.chellow.billing import SupplierContract, NonCoreContract, Dso
from java.text import DecimalFormat
from java.lang import System

inv.getResponse().setContentType("text/csv")
inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="output.csv"')
pw = inv.getResponse().getWriter()

end_year = inv.getInteger('end-year')
end_month = inv.getInteger('end-month')
months = inv.getInteger('months')

if not inv.isValid():
    raise UserException()

if inv.hasParameter('contract-id'):
    contract_id = inv.getLong('contract-id')
    contract = SupplierContract.getSupplierContract(contract_id)
    supply = None
elif inv.hasParameter('supply-id'):
    supply_id = inv.getLong('supply-id')
    supply = Supply.getSupply(supply_id)
    contract = None
else:
    raise UserException("There must be either a contract-id or supply-id parameter.")

computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])

if supply is None:
    pw.print('MPAN Core,Account,From,To')
    pw.flush()
    bill_titles = comterp.get('contract_function')(contract, 'import_virtual_bill_titles')()
    for title in bill_titles:
        pw.print(',' + title)
    pw.println('')
    pw.flush()

ct_cal = GregorianCalendar(TimeZone.getTimeZone("Europe/London"), Locale.UK)

utc_cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
utc_cal.clear()
utc_cal.set(Calendar.YEAR, end_year)
utc_cal.set(Calendar.MONTH, end_month - 1)
utc_cal.add(Calendar.MONTH, 1)
finish_date = HhStartDate(utc_cal.getTime()).getPrevious()
utc_cal.add(Calendar.MONTH, -1 * months)
start_date = utc_cal.getTime()

kwh_formatter = DecimalFormat("#,###")
gbp_formatter = DecimalFormat("#,##0.00")

def kwh_format(kwh):
    return '"' + kwh_formatter.format(kwh) + '"'

def gbp_format(gbp):
    return '"' + gbp_formatter.format(gbp) + '"'

forecast_date = comterp.get('forecast_date')()
timing = System.currentTimeMillis()

for i in range(months):
    utc_cal.setTime(start_date)
    utc_cal.add(Calendar.MONTH, i)
    month_start = HhStartDate(utc_cal.getTime())
    utc_cal.add(Calendar.MONTH, 1)
    utc_cal.add(Calendar.MINUTE, -30)
    month_finish = HhStartDate(utc_cal.getTime())

    for data_source in comterp.get('import_data_sources')(contract, supply, month_start, month_finish, forecast_date, comterp, pw):

        if contract is None:
            sup_con = supply.getGenerations(data_source.start_date, data_source.finish_date)[0].getImportMpan().getSupplierContract()
            bill_titles = comterp.get('contract_function')(sup_con, 'import_virtual_bill_titles')()
            pw.print('MPAN Core,Account,From,To,' + ','.join(bill_titles))
            pw.println('')
            pw.flush()
        else:
            sup_con = contract

        pw.print(','.join('"' + str(value) + '"' for value in [data_source.id, data_source.supplier_account, data_source.start_date, data_source.finish_date]))
        pw.flush()


        bill = comterp.get('contract_function')(sup_con, 'import_virtual_bill')(data_source)
        for title in bill_titles:
            pw.print(',"' + str(bill.get(title, '')) + '"')
            if title in bill:
                del bill[title]
        keys = bill.keys()
        keys.sort()
        for k in keys:
            pw.print(',"' + k + '","' + str(bill[k]) + '"')
        pw.println('')
        pw.flush()
        Hiber.session().clear()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[89]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contract Batches]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import SupplierContract

contract_id = inv.getLong('supplier-contract-id')
contract = SupplierContract.getSupplierContract(contract_id)
batches_element = doc.createElement('batches')
source.appendChild(batches_element)
batches_element.appendChild(contract.toXml(doc, XmlTree('party')))
source.appendChild(batches_element)
for batch in Hiber.session().createQuery("from Batch batch where batch.contract = :contract order by batch.reference").setEntity("contract", contract).list():
    batches_element.appendChild(batch.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/batches/supplier-contract/@name" />
                    &gt; Batches
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/75/output/?supplier-id={/source/batches/supplier-contract/@id}">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={/source/batches/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/batches/supplier-contract/@name" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Batches ['" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/batches/supplier-contract/@id}/batches/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>Batches</caption>
                    <thead>
                        <tr>
                            <th>Reference</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/batches/batch">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/91/output/?batch-id={@id}">
                                        <xsl:value-of select="@reference" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[91]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contract Batch]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import Batch

batch_id = inv.getLong('batch-id')
batch = Batch.getBatch(batch_id)
batch_element = batch.toXml(doc, XmlTree('contract', XmlTree('party')))
source.appendChild(batch_element)
for bill in Hiber.session().createQuery("from Bill bill where bill.batch = :batch order by bill.reference").setEntity("batch", batch).list():
    batch_element.appendChild(bill.toXml(doc, XmlTree("supply")))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/batch/supplier-contract/@name" />
                    &gt; Batches &gt;
                    <xsl:value-of select="/source/batch/@reference" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/75/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={/source/batch/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/batch/supplier-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/89/output/?supplier-contract-id={/source/batch/supplier-contract/@id}">
                        <xsl:value-of select="'Batches'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/batch/@reference, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/batch/supplier-contract/@id}/batches/{/source/batch/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                  <tr>
                    <th>Reference</th>
                    <td><xsl:value-of select="/source/batch/@reference"/></td>
                  </tr>
                </table>
                <br/>
                <form action="{/source/request/@context-path}/reports/111/output/"><fieldset><legend>Check Bills</legend>
                  <input type="hidden" name="batch-id" value="{/source/batch/@id}"/><xsl:value-of select="' '"/>
                  <input type="submit" name="check" value="Check"/>
                  </fieldset>
                </form>
                <br/>
                <table>
                    <caption>Bills</caption>
                    <thead>
                        <tr>
                            <th>Reference</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Net</th>
                            <th>VAT</th>
                            <th>Type</th>
                            <th>Is Cancelled Out?</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/batch/bill">
                            <tr>
                                <td>
<a
                                        href="{/source/request/@context-path}/reports/7/output/?supply-id={supply/@id}">
                                    <xsl:value-of select="@reference" />
 </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day, ' ', hh-start-date[@label='start']/@hour, ':', hh-start-date[@label='start']/@minute)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day, ' ', hh-start-date[@label='finish']/@hour, ':', hh-start-date[@label='finish']/@minute)" />
                                </td>
                                <td>
                                    <xsl:value-of select="@net" />
                                </td>
                                <td>
                                    <xsl:value-of select="@vat" />
                                </td>
                                <td>
                                  <xsl:value-of select="@type" />
                                </td>
                                <td>
                                  <xsl:if test="@is-cancelled-out='true'">
                                    Cancelled Out
                                  </xsl:if>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@is-paid='true'">
                                            Paid
                                        </xsl:when>
                                        <xsl:when test="@is-paid='false'">
                                            Rejected
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Pending
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[93]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contract Bill Invoice]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import Invoice

invoice_id = inv.getLong('invoice-id')
invoice = Invoice.getInvoice(invoice_id)
invoice_element = invoice.toXml(doc, XmlTree('batch', XmlTree('contract', XmlTree('party'))).put('bill', XmlTree('account')))
source.appendChild(invoice_element)
for register_read in Hiber.session().createQuery("from RegisterRead read where read.invoice = :invoice order by read.units.int, read.tpr.code").setEntity('invoice', invoice).list():
    invoice_element.appendChild(register_read.toXml(doc, XmlTree('mpan', XmlTree('supplyGeneration').put('core')).put('tpr')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/invoice/batch/supplier-contract/@name" />
                    &gt; Batches &gt;
                    <xsl:value-of
                        select="/source/invoice/batch/@reference" />
                    &gt; Invoice:
                    <xsl:value-of select="/source/invoice/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/38/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={/source/invoice/batch/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/invoice/batch/supplier-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/45/output/?supplier-contract-id={/source/invoice/batch/supplier-contract/@id}">
                        <xsl:value-of select="'Batches'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/46/output/?batch-id={/source/invoice/batch/@id}">
                        <xsl:value-of
                            select="/source/invoice/batch/@reference" />
                    </a>
                    &gt; Invoice:
                    <xsl:value-of
                        select="concat(/source/invoice/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/invoice/batch/supplier-contract/@id}/batches/{/source/invoice/batch/@id}/invoices/{/source/invoice/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of select="/source/invoice/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Reference</th>
                        <td>
                            <xsl:value-of
                                select="/source/invoice/@reference" />
                        </td>
                    </tr>
                    <tr>
                        <th>Bill</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/44/output/?bill-id={/source/invoice/bill/@id}">
                                <xsl:value-of select="/source/invoice/bill/@id" />
                            </a>
                            <xsl:value-of select="' &lt; '" />
                            <a
                                href="{/source/request/@context-path}/reports/43/output/?account-id={/source/invoice/bill/account/@id}">
                                <xsl:value-of select="'Bills'" />
                            </a>
                            &lt;
                            <a
                                href="{/source/request/@context-path}/reports/42/output/?account-id={/source/invoice/bill/account/@id}">
                                <xsl:value-of select="/source/invoice/bill/account/@reference" />
                            </a>
                            &lt;
                            <a
                                href="{/source/request/@context-path}/reports/41/output/?supplier-contract-id={/source/invoice/batch/supplier-contract/@id}">
                                <xsl:value-of select="'Accounts'" />
                            </a>
                            &lt;
                            <a
                                href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={/source/invoice/batch/supplier-contract/@id}">
                                <xsl:value-of
                                    select="/source/invoice/batch/supplier-contract/@name" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>Issue Date</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/invoice/day-start-date[@label='issue']/@year, '-', /source/invoice/day-start-date[@label='issue']/@month, '-', /source/invoice/day-start-date[@label='issue']/@day)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Start Date</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/invoice/day-start-date/@year, '-', /source/invoice/day-start-date/@month, '-', /source/invoice/day-start-date/@day)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Finish Date</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/invoice/day-finish-date/@year, '-', /source/invoice/day-finish-date/@month, '-', /source/invoice/day-finish-date/@day)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Net</th>
                        <td>
                            <xsl:value-of select="/source/invoice/@net" />
                        </td>
                    </tr>
                    <tr>
                        <th>VAT</th>
                        <td>
                            <xsl:value-of select="/source/invoice/@vat" />
                        </td>
                    </tr>
                    <tr>
                        <th>Status</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/invoice/@status = 0">
                                    <xsl:value-of select="'Pending'" />
                                </xsl:when>
                                <xsl:when
                                    test="/source/invoice/@status = 1">
                                    <xsl:value-of select="'Paid'" />
                                </xsl:when>
                                <xsl:when
                                    test="/source/invoice/@status = 2">
                                    <xsl:value-of select="'Rejected'" />
                                </xsl:when>
                            </xsl:choose>
                        </td>
                    </tr>
                </table>
                <br />
                <table>
                    <caption>Register Reads</caption>
                    <thead>
                        <tr>
                            <th>MPAN</th>
                            <th>Coefficient</th>
                            <th>Units</th>
                            <th>TPR</th>
                            <th>Previous Date</th>
                            <th>Previous Value</th>
                            <th>Previous Type</th>
                            <th>Present Date</th>
                            <th>Present Value</th>
                            <th>Present Type</th>
                        </tr>
                    </thead>
                    <xsl:for-each
                        select="/source/invoice/register-read">
                        <tr>
                            <td>
                                <a
                                    href="{/source/request/@context-path}/reports/16/output/?supply-generation-id={mpan/supply-generation/@id}">
                                    <xsl:value-of
                                        select="mpan/mpan-core/@core" />
                                </a>
                            </td>
                            <td>
                                <xsl:value-of select="@coefficient" />
                            </td>
                            <td>
                                <xsl:value-of select="@units" />
                            </td>
                            <td>
                                <a
                                    href="{/source/request/@context-path}/reports/49/output/?tpr-id={tpr/@id}">
                                    <xsl:value-of select="tpr/@code" />
                                </a>
                            </td>
                            <td>
                                <xsl:value-of
                                    select="concat(day-finish-date[@label='previous']/@year, '-', day-finish-date[@label='previous']/@month, '-', day-finish-date[@label='previous']/@day)" />
                            </td>
                            <td>
                                <xsl:value-of select="@previous-value" />
                            </td>
                            <td>
                                <xsl:value-of
                                    select="read-type[@label='previous']/@code" />
                            </td>
                            <td>
                                <xsl:value-of
                                    select="concat(day-finish-date[@label='present']/@year, '-', day-finish-date[@label='present']/@month, '-', day-finish-date[@label='present']/@day)" />
                            </td>
                            <td>
                                <xsl:value-of select="@present-value" />
                            </td>
                            <td>
                                <xsl:value-of
                                    select="read-type[@label='present']/@code" />
                            </td>
                        </tr>
                    </xsl:for-each>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[95]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[TPRs]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

tprs_element = doc.createElement('tprs')
source.appendChild(tprs_element)
for tpr in Hiber.session().createQuery("from Tpr tpr order by tpr.code").list():
    tprs_element.appendChild(tpr.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>Chellow &gt; TPRs</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt; TPRs
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <ul>
                    <xsl:for-each select="/source/tprs/tpr">
                        <li>
                            <a
                                href="{/source/request/@context-path}/reports/97/output/?tpr-id={@id}">
                                <xsl:value-of select="@code" />
                            </a>
                        </li>
                    </xsl:for-each>
                </ul>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[97]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[TPR]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Tpr

tpr_id = inv.getLong('tpr-id')
tpr = Tpr.getTpr(tpr_id)
source.appendChild(tpr.toXml(doc, XmlTree("measurementRequirements", XmlTree("ssc")).put("clockIntervals")))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; TPRs &gt;
                    <xsl:value-of select="/source/tpr/@code" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/95/output/">
                        <xsl:value-of select="'TPRs'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/tpr/@code" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/tpr/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Teleswitch or Clock</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/tpr/@is-teleswitch='true'">
                                    Teleswitch
                                </xsl:when>
                                <xsl:otherwise>Clock</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>GMT or Clock Time</th>
                        <td>
                            <xsl:choose>
                                <xsl:when test="@is-gmt='true'">
                                    GMT
                                </xsl:when>
                                <xsl:otherwise>
                                    Clock Time
                                </xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                </table>
                <br />
                <table>
                    <caption>Clock Intervals</caption>
                    <thead>
                        <th>Day Of Week</th>
                        <th>Start Day</th>
                        <th>Start Month</th>
                        <th>End Day</th>
                        <th>End Month</th>
                        <th>Start Hour</th>
                        <th>Start Minute</th>
                        <th>End Hour</th>
                        <th>End Minute</th>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/tpr/clock-interval">
                            <tr>
                                <td>
                                    <xsl:value-of select="@day-of-week" />
                                </td>
                                <td>
                                    <xsl:value-of select="@start-day" />
                                </td>
                                <td>
                                    <xsl:value-of select="@start-month" />
                                </td>
                                <td>
                                    <xsl:value-of select="@end-day" />
                                </td>
                                <td>
                                    <xsl:value-of select="@end-month" />
                                </td>
                                <td>
                                    <xsl:value-of select="@start-hour" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@start-minute" />
                                </td>
                                <td>
                                    <xsl:value-of select="@end-hour" />
                                </td>
                                <td>
                                    <xsl:value-of select="@end-minute" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>

                <h3>SSCs</h3>

                <ul>
                    <xsl:for-each
                        select="/source/tpr/measurement-requirement/ssc">
                        <li>
                            <a
                                href="{/source/request/@context-path}/reports/127/output/?ssc-id={@id}">
                                <xsl:value-of select="@code"></xsl:value-of>
                            </a>
                        </li>
                    </xsl:for-each>
                </ul>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[99]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplies]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

if inv.hasParameter("search-pattern"):
    pattern = inv.getString("search-pattern")
    pattern = pattern.strip().replace(" ", "")
    last_supply = None
    for supply_generation in Hiber.session().createQuery("select distinct mpan.supplyGeneration from Mpan mpan where (lower(mpan.core.dso.code || mpan.core.uniquePart || mpan.core.checkDigit || mpan.supplierAccount) like lower(:term)) or (mpan.supplyGeneration.hhdcAccount is not null and lower(mpan.supplyGeneration.hhdcAccount) like lower(:term)) order by mpan.supplyGeneration.supply.id, mpan.supplyGeneration.startDate desc").setString("term", "%" + pattern + "%").setMaxResults(50).list():
        supply_id = supply_generation.getSupply().getId()
        if supply_id == last_supply:
            continue
        last_supply = supply_id
        source.appendChild(supply_generation.toXml(doc, XmlTree("supply").put('hhdcContract').put('pc').put('mtc').put('mpans', XmlTree('llfc').put('core').put('supplierContract'))))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Home &gt; Supplies
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Supplies ['" />
                    <a
                        href="{/source/request/@context-path}/supplies/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>


                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action=".">
                    <fieldset><legend>Search for supply generations by MPAN core, account number or meter serial number</legend>
                        <input name="search-pattern"
                            value="{/source/request/parameter[@name='search-pattern']/value}" />
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Search" />
                    </fieldset>
                </form>
                <xsl:choose>
                    <xsl:when test="/source/supply-generation">
                        <p>
                            Only the first 50 supply generations of the search
                            results are shown.
                        </p>
                        <table>
                            <caption>
                                Supplies
                            </caption>
                            <tr>
                                <th rowspan="3">Supply</th>
                                <th rowspan="3">Meter Serial Number</th>
                                <th colspan="2">HHDC</th>
                                <th colspan="3">Import</th>
                                <th colspan="3">Export</th>
                            </tr>
                            <tr>
                                <th rowspan="2">Contract</th>
                                <th rowspan="2">Account</th>
                                <th rowspan="2">Mpan</th>
                                <th colspan="2">Supplier</th>
                                <th rowspan="2">Mpan</th>
                                <th colspan="2">Supplier</th>
                            </tr>
                            <tr>
                                <th>Contract</th>
                                <th>Account</th> 
                                <th>Contract</th>
                                <th>Account</th> 
                           </tr>
                            <xsl:for-each
                                select="/source/supply-generation">
                                <tr>
                                    <td>
                                        <a
                                            href="{/source/request/@context-path}/reports/7/output/?supply-id={supply/@id}">
                                            <xsl:value-of
                                                select="'supply'" />
                                        </a>
                                    </td>
                                    <td>
                                        <xsl:value-of
                                            select="meter/@serial" />
                                    </td>
                                    <td>
                                        <a
                                            href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={hhdc-contract/@id}">
                                        <xsl:value-of
                                            select="hhdc-contract/@name" />
                                        </a>
                                    </td>
                                    <td>
                                        <xsl:value-of
                                            select="@hhdc-account" />
                                    </td>
                                    <td>
                                      <xsl:if test="mpan/llfc/@is-import='true'">
                                        <xsl:value-of
                                            select="concat(pc/@code, ' ', mpan[llfc/@is-import='true']/mtc/@code, ' ', mpan/llfc[@is-import='true']/@code, ' ', mpan[llfc/@is-import='true']/mpan-core/@core)" />
                                      </xsl:if>
                                    </td>
                                    <td>
                                      <xsl:if test="mpan/llfc/@is-import='true'">
                                         <a href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={mpan[llfc/@is-import='true']/supplier-contract/@id}">
                                        <xsl:value-of
                                            select="mpan[llfc/@is-import='true']/supplier-contract/@name" />
                                         </a>
                                      </xsl:if>
                                    </td>
                                    <td>
                                      <xsl:if test="mpan/llfc/@is-import='true'">
                                        <xsl:value-of
                                            select="mpan[llfc/@is-import='true']/@supplier-account" />
                                      </xsl:if>
                                    </td>
                                    <td>
                                      <xsl:if test="mpan/llfc/@is-import='false'">
                                        <xsl:value-of
                                            select="concat(pc/@code, ' ', mpan[llfc/@is-import='false']/mtc/@code, ' ', mpan/llfc[@is-import='false']/@code, ' ', mpan[llfc/@is-import='false']/mpan-core/@core)" />
                                      </xsl:if>
                                    </td>
                                    <td>
                                      <xsl:if test="mpan/llfc/@is-import='false'">
                                         <a href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={mpan[llfc/@is-import='false']/supplier-contract/@id}">
                                        <xsl:value-of
                                            select="mpan[llfc/@is-import='false']/supplier-contract/@name" />
                                         </a>
                                      </xsl:if>
                                    </td>
<td>
                                      <xsl:if test="mpan/llfc/@is-import='false'">
                                        <xsl:value-of
                                            select="mpan[llfc/@is-import='false']/@supplier-account" />
                                      </xsl:if>
                                    </td>
                                </tr>
                            </xsl:for-each>
                        </table>
                    </xsl:when>
                    <xsl:when
                        test="/source/request/parameter[@name='search-pattern']">
                        <p>No supplies matched your search</p>
                    </xsl:when>
                </xsl:choose>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[101]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supply Virtual Bill]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.monad.types import MonadDate
from java.util import Calendar, Locale, TimeZone, GregorianCalendar
from net.sf.chellow.physical import HhStartDate, Supply
from net.sf.chellow.billing import NonCoreContract
from java.io import StringWriter

supply_id = inv.getLong("supply-id")
supply = Supply.getSupply(supply_id)
source.appendChild(supply.toXml(doc))

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
if inv.hasParameter('start-year'):
    start_year = inv.getInteger('start-year')
    start_month = inv.getInteger('start-month') - 1
    start_day = inv.getInteger('start-day')
   
    finish_year = inv.getInteger('finish-year')
    finish_month = inv.getInteger('finish-month') - 1
    finish_day = inv.getInteger('finish-day')
else:
    cal.add(Calendar.MONTH, -1)
    start_year = finish_year = cal.get(Calendar.YEAR)
    start_month = finish_month = cal.get(Calendar.MONTH)
    start_day = 1
    cal.set(Calendar.DAY_OF_MONTH, 1)
    cal.set(Calendar.HOUR_OF_DAY, 0)
    cal.set(Calendar.MINUTE, 0)
    cal.set(Calendar.SECOND, 0)
    cal.set(Calendar.MILLISECOND, 0)
    cal.add(Calendar.MONTH, 1)
    cal.add(Calendar.MINUTE, -30)
    finish_day = cal.get(Calendar.DAY_OF_MONTH)

cal.set(Calendar.YEAR, start_year)
cal.set(Calendar.MONTH, start_month)
cal.set(Calendar.DAY_OF_MONTH, start_day)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.MILLISECOND, 0)
start_date = HhStartDate(cal.getTime())

cal.set(Calendar.YEAR, finish_year)
cal.set(Calendar.MONTH, finish_month)
cal.set(Calendar.DAY_OF_MONTH, finish_day)
cal.set(Calendar.HOUR_OF_DAY, 23)
cal.set(Calendar.MINUTE, 30)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
finish_date = HhStartDate(cal.getTime())

source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))
start_date.setLabel('start')
source.appendChild(start_date.toXml(doc))
finish_date.setLabel('finish')
source.appendChild(finish_date.toXml(doc))

pw = StringWriter()
computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])
forecast_date = comterp.get('forecast_date')()

# Do months
mb_cal = MonadDate.getCalendar()
mb_cal.setTime(start_date.getDate())
mb_cal.set(Calendar.DAY_OF_MONTH, 1)
mb_cal.set(Calendar.HOUR_OF_DAY, 0)
mb_cal.set(Calendar.MINUTE, 0)

me_cal = MonadDate.getCalendar()
me_cal.setTime(start_date.getDate())
me_cal.set(Calendar.DAY_OF_MONTH, 1)
me_cal.set(Calendar.HOUR_OF_DAY, 0)
me_cal.set(Calendar.MINUTE, 0)
me_cal.add(Calendar.MONTH, 1)
me_cal.add(Calendar.MINUTE, -30)

net_gbp = 0

while not mb_cal.getTime().after(finish_date.getDate()):
    month_begin = HhStartDate(mb_cal.getTime())
    month_end = HhStartDate(me_cal.getTime())
    if start_date.after(month_begin):
        chunk_start = start_date
    else:
        chunk_start = month_begin
    if finish_date.before(month_end):
        chunk_finish = finish_date
    else:
        chunk_finish = month_end
    generations_element = doc.createElement('generations')
    source.appendChild(generations_element)
    generations = Hiber.session().createQuery("select distinct generation from SupplyGeneration generation where generation.supply = :supply and generation.importMpan is not null and generation.startDate.date <= :finishDate and (generation.finishDate is null or generation.finishDate.date >= :startDate)").setEntity('supply', supply).setTimestamp('startDate', chunk_start.getDate()).setTimestamp('finishDate', chunk_finish.getDate()).scroll()
    while generations.next():
        generation_element = doc.createElement('generation')
        generations_element.appendChild(generation_element)
        generation = generations.get(0)
        mpan = generation.getImportMpan()
        contract = mpan.getSupplierContract()
        mpan_core = mpan.getCore()
        mpan_core_str = str(mpan_core)
        data_source = comterp.get('supply_source')(forecast_date, comterp, pw)
        data_source.init_from_mpan(chunk_start, chunk_finish, mpan)
        for name, value in [('id', data_source.id), ('supplier contract', contract.getName()), ('account', data_source.supplier_account), ('start date', data_source.start_date), ('finish date', data_source.finish_date)]:
            field_element = doc.createElement('field')
            generation_element.appendChild(field_element)
            field_element.setAttribute('name', name)
            field_element.setAttribute('value', str(value))
        bill = comterp.get('contract_function')(contract, 'import_virtual_bill')(data_source)
        net_gbp += bill['net-gbp']
        #raise UserException('start date ' + str(data_source.start_date) + ' finish date ' + str(data_source.finish_date) + ' ' + str(bill))
        for title in comterp.get('contract_function')(contract, 'import_virtual_bill_titles')():
            field_element = doc.createElement('field')
            generation_element.appendChild(field_element)
            field_element.setAttribute('name', title)
            field_element.setAttribute('value', str(bill.get(title, '')))
            if title in bill:
                del bill[title]
        keys = bill.keys()
        keys.sort()
        for k in keys:
            field_element = doc.createElement('field')
            generation_element.appendChild(field_element)
            field_element.setAttribute('name', k)
            field_element.setAttribute('value', str(bill[k]))
    mb_cal.add(Calendar.MONTH, 1)
    me_cal.add(Calendar.MINUTE, 30)
    me_cal.add(Calendar.MONTH, 1)
    me_cal.add(Calendar.MINUTE, -30)
generations.close()
source.setAttribute('start-date', str(start_date))
source.setAttribute('finish-date', str(finish_date))
source.setAttribute('net-gbp', str(net_gbp))
source.setAttribute('debug', pw.toString())]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Supplies &gt;
                    <xsl:value-of select="/source/supply/@name" /> &gt; Virtual Bill
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/99/output/">
                        <xsl:value-of select="'Supplies'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/7/output/?supply-id={/source/supply/@id}">
                        <xsl:value-of select="/source/supply/@id" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Virtual Bill'" />
                </p>

                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action=".">
                    <fieldset>
                        <input type="hidden" name="supply-id" value="{/source/supply/@id}"/>
                        <legend>Show Virtual Bills</legend>
<br/>
<xsl:value-of select="'From '"/>
                        <input name="start-year" value="{/source/hh-start-date[@label='start']/@year}" maxlength="4" size="4" /><xsl:value-of select="' - '"/>
                        <select name="start-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='start']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
<xsl:value-of select="' '"/>
                        <select name="start-day">
                            <xsl:for-each select="/source/days/day">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='start']/@day">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
<xsl:value-of select="' to '"/>
                        <input name="finish-year" value="{/source/hh-start-date[@label='finish']/@year}" maxlength="4" size="4" /><xsl:value-of select="' - '"/>
                        <select name="finish-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
<xsl:value-of select="' '"/>
                        <select name="finish-day">
                            <xsl:for-each select="/source/days/day">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@day">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Show"/>
                    </fieldset>
                </form>
<xsl:value-of select="/source/@debug"/>
<table><caption>Summary</caption>
    <tr>
        <th>From</th>
        <td><xsl:value-of select="/source/@start-date"/></td>
    </tr>
    <tr>
        <th>To</th>
        <td><xsl:value-of select="/source/@finish-date"/></td>
    </tr>
    <tr>
        <th>Net GBP</th>
        <td><xsl:value-of select="/source/@net-gbp"/></td>
    </tr>
</table>
<table><caption>Import Supplier Virtual Bill</caption>
<xsl:for-each select="/source/generations/generation">
    <thead>
        <tr>
            <xsl:for-each select="field">
                <th><xsl:value-of select="@name"/></th>
            </xsl:for-each>
        </tr>
    </thead>
    <tbody>
        <tr>
            <xsl:for-each select="field">
                <td><xsl:value-of select="@value"/></td>
            </xsl:for-each>
        </tr>
    </tbody>
</xsl:for-each>
</table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[103]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contract 3rd Party Virtual Bills]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.physical import MpanCore, HhStartDate, Supply
from net.sf.chellow.billing import SupplierContract, NonCoreContract
from java.text import DecimalFormat

end_year = inv.getInteger('end-year')
end_month = inv.getInteger('end-month')
months = inv.getInteger('months')
contract_id = inv.getLong('contract-id')
site_code = inv.getString('site-code')
if not inv.isValid():
    raise UserException()
site_code = site_code.strip()

inv.getResponse().setContentType("text/csv")
inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="output.csv"')
pw = inv.getResponse().getWriter()

contract = SupplierContract.getSupplierContract(contract_id)
computer = NonCoreContract.getNonCoreContract('computer')

comterp = computer.callFunction('create_comterp', [])

calCt = GregorianCalendar(TimeZone.getTimeZone("Europe/London"), Locale.UK)

calUtc = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
calUtc.clear()
calUtc.set(Calendar.YEAR, end_year)
calUtc.set(Calendar.MONTH, end_month - 1)
calUtc.add(Calendar.MONTH, 1)
calUtc.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(calUtc.getTime())
calUtc.add(Calendar.MINUTE, 30)
calUtc.add(Calendar.MONTH, -1 * months)
start_date = HhStartDate(calUtc.getTime())

kwh_format = DecimalFormat("#,###")
gbp_format = DecimalFormat("#,##0.00")

pw.print('Site Id,From,To')
pw.flush()
bill_titles = contract.callFunction('third_party_virtual_bill_titles', [])
for title in bill_titles:
    pw.print(',' + title)
pw.println('')
pw.flush()

if len(site_code) == 0:
    site_query = Hiber.session().createQuery("select distinct site from Site site join site.siteSupplyGenerations ssGen where ssGen.supplyGeneration.supply.source.code in ('3rd-party', '3rd-party-reverse') order by site.code")
else:
    site_query = Hiber.session().createQuery("from Site site where site.code = :siteCode order by site.code").setString('siteCode', site_code)
sites = site_query.scroll()
while sites.next():
    site = sites.get(0)
    forecast_date = computer.callFunction('forecast_date', [])
    data_source = computer.callFunction('site_source', [site, start_date, finish_date, forecast_date, comterp, pw])
    bill = contract.callFunction('third_party_bill', [data_source])

    for value in [data_source.id, data_source.start_date, data_source.finish_date]:
        pw.print('"' + str(value) + '",')
    for title in bill_titles:
        pw.print('"' + str(bill.get(title, '')) + '",')
        if title in bill:
            del bill[title]
    keys = bill.keys()
    keys.sort()
    for k in keys:
        pw.print(',"' + k + '","' + str(bill[k]) + '"')
    pw.println('')
    pw.flush()
    Hiber.session().clear()
sites.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[105]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contract Bill Snags]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import SupplierContract

contract_id = inv.getLong('supplier-contract-id')
contract = SupplierContract.getSupplierContract(contract_id)
bill_snags_element = doc.createElement('bill-snags')
source.appendChild(bill_snags_element)
bill_snags_element.appendChild(contract.toXml(doc, XmlTree('party')))
source.appendChild(bill_snags_element)
for bill_snag in Hiber.session().createQuery("from BillSnag snag where snag.isIgnored is false and snag.bill.batch.contract = :contract order by snag.bill.id, snag.description").setEntity('contract', contract).list():
    bill_snags_element.appendChild(bill_snag.toXml(doc, XmlTree('bill', XmlTree('supply'))))

missing_bill_snags_element = doc.createElement('missing-bill-snags')
source.appendChild(missing_bill_snags_element)
for snag in Hiber.session().createQuery("from SupplySnag snag where snag.contract = :contract order by snag.supply.id").setEntity('contract', contract).list():
    missing_bill_snags_element.appendChild(snag.toXml(doc, XmlTree('supply')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/bill-snags/supplier-contract/@name" />
                    &gt; Bill Snags
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/75/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={/source/bill-snags/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/bill-snags/supplier-contract/@name" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Snags ['" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/bill-snags/supplier-contract/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table><caption>Bill Snags</caption>
                    <thead>
                        <tr>
                            <th>Bill</th>
                            <th>Date Created</th>
                            <th>Is Ignored?</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/bill-snags/bill-snag">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/7/output/?supply-id={bill/supply/@id}">
                                        <xsl:value-of select="bill/@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(date[@label='created']/@year, '-', date[@label='created']/@month, '-', date[@label='created']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@is-ignored = 'true'">
                                            Yes
                                        </xsl:when>
                                        <xsl:otherwise>
                                            No
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
<br/>
                <table><caption>Missing-Bill Snags</caption>
                    <thead>
                        <tr>
                            <th>Supply</th>
                            <th>Date Created</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Is Ignored?</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/missing-bill-snags/supply-snag">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/7/output/?supply-id={supply/@id}">
                                        <xsl:value-of select="supply/@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(date[@label='created']/@year, '-', date[@label='created']/@month, '-', date[@label='created']/@day)" />
                                </td>
                                <td>
                                    <xsl:value-of select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day, ' ', hh-start-date[@label='start']/@hour, ':', hh-start-date[@label='start']/@minute)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                    <xsl:when test="hh-start-date[@label='finish']">
                                    <xsl:value-of select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day, ' ', hh-start-date[@label='finish']/@hour, ':', hh-start-date[@label='finish']/@minute)" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Ongoing
                                    </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@is-ignored = 'true'">
                                            Yes
                                        </xsl:when>
                                        <xsl:otherwise>
                                            No
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[107]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MOP Contract]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import MopContract

contract_id = inv.getLong('mop-contract-id')
contract = MopContract.getMopContract(contract_id)
source.appendChild(contract.toXml(doc, XmlTree('party', XmlTree('participant')).put('rateScripts')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Home &gt; MOP Contracts &gt;
                    <xsl:value-of select="/source/mop-contract/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/185/output/">
                        <xsl:value-of select="'MOP Contracts'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/mop-contract/@name, ' [')" />
                    <a
                        href="{/source/request/@context-path}/mop-contracts/{/source/mop-contract/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                            <tr>
                                <th>Provider</th>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/47/output/?provider-id={/source/mop-contract/provider/@id}">
                                        <xsl:value-of
                                            select="/source/mop-contract/provider/@name" />
                                    </a>
                                </td>
                            </tr>
                        <tr>
                            <th>Name</th>
                            <td>
                                <xsl:value-of
                                    select="/source/mop-contract/@name" />
                            </td>
                        </tr>
                        <tr>
                            <th>Start Date</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/mop-contract/rate-script[position()=1]/hh-start-date[@label='start']/@year, '-', /source/mop-contract/rate-script[position()=1]/hh-start-date[@label='start']/@month, '-', /source/mop-contract/rate-script[position()=1]/hh-start-date[@label='start']/@day)" />
                            </td>
                        </tr>
                        <tr>
                            <th>Finish Date</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/mop-contract/rate-script[position()=last()]/hh-start-date[@label='finish']">
                                        <xsl:value-of
                                            select="concat(/source/mop-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@year, '-', /source/mop-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@month, '-', /source/mop-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@day)" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Ongoing
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <br />
                    <table>
                    <caption>Rate Scripts</caption>
                    <thead>
                    <tr>
                    <th></th>
                    <th>From</th>
                    <th>To</th>
                    </tr>
                    </thead>
                    <tbody>
                    <xsl:for-each
                    select="/source/mop-contract/rate-script">
                    <tr>
                    <td>
                    <a
                    href="{/source/request/@context-path}/reports/173/output/?rate-script-id={@id}">
                    <xsl:value-of select="'view'" />
                    </a>
                    </td>
                    <td>
                    <xsl:value-of
                    select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day)" />
                    </td>
                    <td>
                    <xsl:choose>
                    <xsl:when
                    test="hh-start-date[@label='finish']">
                    <xsl:value-of
                    select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day)" />
                    </xsl:when>
                    <xsl:otherwise>
                    Ongoing
                    </xsl:otherwise>
                    </xsl:choose>
                    </td>
                    </tr>
                    </xsl:for-each>
                    </tbody>
                    </table>
                <ul>
                    <!--
                        <li>
                        <a
                        href="{/source/request/@context-path}/orgs/{/source/org/@id}/reports/87/screen/output/?mop-contract-id={/source/mop-contract/@id}">
                        Batches
                        </a>
                        </li>
                        <li>
                        <a
                        href="{/source/request/@context-path}/orgs/{/source/org/@id}/reports/99/screen/output/?mop-contract-id={/source/mop-contract/@id}">
                        Supply Snags
                        </a>
                        </li>
                        <li>
                        <a
                        href="{/source/request/@context-path}/orgs/{/source/org/@id}/reports/103/screen/output/?service-id={/source/mop-contract/@id}">
                        Bill Snags
                        </a>
                        </li>
                    -->
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/37/output/?mop-contract-id={/source/mop-contract/@id}">
                            Channel Snags
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/83/output/?mop-contract-id={/source/mop-contract/@id}">
                            Virtual Bills
                        </a>
                    </li>
                </ul>
                    <h2>Script</h2>
                    <pre>
                    <xsl:value-of
                    select="/source/mop-contract/@charge-script" />
                    </pre>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[109]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contract Displaced Virtual Bills]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.physical import MpanCore, HhStartDate, Supply, Site
from net.sf.chellow.billing import SupplierContract, NonCoreContract
from java.text import DecimalFormat
from java.sql import Timestamp, ResultSet

end_year = inv.getInteger('end-year')
end_month = inv.getInteger('end-month')
months = inv.getInteger('months')

if not inv.isValid():
    raise UserException()

inv.getResponse().setContentType("text/csv")
inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="output.csv"')
pw = inv.getResponse().getWriter()

computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])

pw.print('Site Code,Site Name,Associated Site Ids,From,To,CHP kWh,LM kWh, Turbine kWh')

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.set(Calendar.YEAR, end_year)
cal.set(Calendar.MONTH, end_month - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
start_date = HhStartDate(cal.getTime())

kwh_format = DecimalFormat("#,###")
gbp_format = DecimalFormat("#,##0.00")

forecast_date = comterp.get('forecast_date')()

if inv.hasParameter('site-id'):
    site_id = inv.getLong('site-id')
    site_query = Hiber.session().createQuery("from Site site where site = :site").setEntity('site', Site.getSite(site_id))
    contract = None
    bill_titles = ['net-gbp']
elif inv.hasParameter('contract-id'):
    contract_id = inv.getLong('contract-id')
    site_query = Hiber.session().createQuery("from Site site order by site.code")
    contract = SupplierContract.getSupplierContract(contract_id)
    bill_titles = comterp.get('contract_function')(contract, 'displaced_virtual_bill_titles')()
else:
    raise UserException("Need a site-id or supplier-id.")

for title in bill_titles:
    pw.print(',' + title)
pw.println('')
pw.flush()

sites = site_query.scroll()
while sites.next():
    site = sites.get(0)
    for site_group in site.groups(start_date, finish_date, True):
        if site_group.getFrom().after(start_date):
            chunk_start = site_group.getStartDate()
        else:
            chunk_start = start_date
        if site_group.getTo().after(finish_date):
            chunk_finish = finish_date
        else:
            chunk_finish = site_group.getTo()

        displaced_mpan = comterp.get('displaced_mpan')(site_group, chunk_start, chunk_finish)
        if displaced_mpan is None:
            continue
        supplier_contract = displaced_mpan.getSupplierContract()
        if contract is not None and not contract.equals(supplier_contract):
            continue

        pw.print('"' + site.getCode() + '","' + site.getName() + '","' + ','.join(str(a_site.getId()) for a_site in site_group.getSites() if not a_site.equals(site)) + '",' + str(chunk_start) + ',' + str(chunk_finish))





        total_gen_breakdown = {}
        con = Hiber.session().connection()
        supplies_sql = ','.join(str(supply.getId()) for supply in site_group.getSupplies())
        stmt = con.prepareStatement("select hh_datum.value, hh_datum.start_date, channel.is_import, source.code, generator_type.code as gen_type_code from hh_datum, channel, supply_generation, supply, source, generator_type where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = supply.id and supply.source_id = source.id and supply.generator_type_id = generator_type.id and channel.is_kwh is true and hh_datum.start_date >= ? and hh_datum.start_date <= ? and supply.id in (" + supplies_sql + ") order by hh_datum.start_date, supply.id", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
        stmt.setTimestamp(1, Timestamp(chunk_start.getDate().getTime()))
        stmt.setTimestamp(2, Timestamp(chunk_finish.getDate().getTime()))
        stmt.setFetchSize(100)
        rs = stmt.executeQuery()
        if rs.next():
            hh_data = []
            hhChannelValue = rs.getFloat("value")
            hhChannelStartDate = rs.getTimestamp("start_date")
            isImport = rs.getBoolean("is_import")
            source_code = rs.getString("code")
            gen_type = rs.getString("gen_type_code")
            finishDateMillis = finishDate.getTime()
            cal = MonadDate.getCalendar()
            while hhDate <= finishDateMillis:
                gen_breakdown = {}
                exported = parasitic = generated = 0
                while hhChannelStartDate != None and hhChannelStartDate.getTime() == hhDate:
                    if not isImport and source_code in ('net', 'gen-net'):
                        exported += hhChannelValue
                    if isImport and source_code in ('net', 'gen-net'):
                        imported += hhChannelValue
                    if (isImport and source_code == 'gen') or (not isImport and source_code == 'gen-net'):
                        generated += hhChannelValue
                        gen_breakdown[gen_type] = gen_breakdown.setdefault(gen_type, 0) + hhChannelValue

                    if (not isImport and source_code == 'gen') or (isImport and source_code == 'gen-net'):
                        datum['parasitic'] += hhChannelValue
                        gen_breakdown[gen_type] = gen_breakdown.setdefault(gen_type, 0) - hhChannelValue

                    if rs.next():
                        source_code = rs.getString("code")
                        supply_name = rs.getString("name")
                        hhChannelValue = rs.getFloat("value")
                        hhChannelStartDate = rs.getTimestamp("start_date")
                        isImport = rs.getBoolean("is_import")
                        status = rs.getString("status")
                        supply_id = rs.getLong('id')
                    else:
                        hhChannelStartDate = None

                displaced = generated - parasitic - exported
                added_so_far = 0
                for key in sorted(gen_breakdown.iterkeys()):
                    kwh = gen_breakdown[key]
                    if kwh + added_so_far > displaced:
                        total_gen_breakdown[key] = total_gen_breakdown.setdefault(key, 0) + displaced - added_so_far
                        break
                    else:
                        total_gen_breakdown[key] = total_gen_breakdown.setdefault(key, 0) + kwh
                        added_so_far += kwh
                    
                hhDate = HhStartDate.getNext(cal, hhDate)
        for title in ['chp', 'lm', 'turb']:
            pw.print(',' + str(total_gen_breakdown.get(title, '')))


        site_ds = comterp.get('site_source')(site, chunk_start, chunk_finish, forecast_date, comterp, pw)
        site_ds.init_from_mpan(displaced_mpan)
        cont_func = comterp.get('contract_function')
        disp_func = cont_func(supplier_contract, 'displaced_virtual_bill')
        bill = disp_func(site_ds)
        for title in bill_titles:
            pw.print(',"' + str(bill.get(title, '')) + '"')
            if title in bill:
                del bill[title]
        keys = bill.keys()
        keys.sort()
        for k in keys:
            pw.print(',"' + k + '","' + str(bill[k]) + '"')
        pw.println('')
        pw.flush()
        Hiber.session().clear()
sites.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[111]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Bill Checker]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.lang import System
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate
from net.sf.chellow.billing import Batch, NonCoreContract, Bill
from org.python.util import PythonInterpreter


inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()
pw.println("Batch,Reference, Type, Breakdown, kWh, Net GBP, VAT GBP, Start Date, Finish Date, MPAN Core, Covered From, Covered To, Covered Bills, Covered kWh, Covered Net, Covered VAT, Virtual kWh, Virtual Net, Error GBP, Virtual Reconciliation GBP, Virtual Net - Reconciliation GBP, Error + Reconciliation GBP, Problem")
pw.flush()

computer = NonCoreContract.getNonCoreContract('computer')
comterp = PythonInterpreter()
comterp.exec(computer.getChargeScript())
forecast_date = comterp.get('forecast_date')()

if inv.hasParameter('batch-id'):
    batch_id = inv.getLong("batch-id")
    if not inv.isValid():
        raise UserException()
    batch = Batch.getBatch(batch_id)
    bills = Hiber.session().createQuery("from Bill bill where bill.batch = :batch order by bill.reference").setEntity('batch', batch).scroll()
elif inv.hasParameter('bill-id'):
    bill_id = inv.getLong("bill-id")
    if not inv.isValid():
        raise UserException()
    bill = Bill.getBill(bill_id)
    bills = Hiber.session().createQuery("from Bill bill where bill = :bill").setEntity('bill', bill).scroll()
    batch = bill.getBatch()

while bills.next():
    problem = ''
    #pw.println('starting bill ' + str(System.currentTimeMillis()))
    bill = bills.get(0)
    bill_start = bill.getStartDate()
    bill_finish = bill.getFinishDate()

    supply = bill.getSupply()
    generation = supply.getGeneration(bill.getFinishDate())
    if generation is None:
        pw.println(",,,,,,,,,,Extraordinary! There isn't a generation for this bill!")
        continue
    mpan = generation.getMpans().iterator().next()

    covered_start = bill_start
    covered_finish = bill_finish
    covered_bill_ids = []
    covered_net = 0
    covered_vat = 0
    covered_primary_bill = None
    enlarged = True
    covered_query = Hiber.session().createQuery("from Bill bill where bill.supply = :supply and bill.startDate.date <= :finishDate and bill.finishDate >= :startDate order by bill.issueDate desc, bill.startDate.date").setEntity('supply', supply)
    while enlarged:
        enlarged = False
        for covered_bill in covered_query.setTimestamp('finishDate', covered_finish.getDate()).setTimestamp('startDate', covered_start.getDate()).list():
            if covered_primary_bill is None and covered_bill.getReads() is not None and len(covered_bill.getReads()) > 0:
                covered_primary_bill = covered_bill
            if covered_bill.getStartDate().before(covered_start):
                covered_start = covered_bill.getStartDate()
                enlarged = True
                break
            if covered_bill.getFinishDate().after(covered_finish):
                covered_finish = covered_bill.getFinishDate()
                enlarged = True
                break
    top_bills = []
    for covered_bill in covered_query.setTimestamp('finishDate', covered_finish.getDate()).setTimestamp('startDate', covered_start.getDate()).list():
        covered_bill_ids.append(covered_bill.getId())
        covered_net += covered_bill.getNet().doubleValue()
        covered_vat += covered_bill.getVat().doubleValue()
        can_insert = True
        for top_bill in top_bills:
            if not covered_bill.getStartDate().after(top_bill.getFinishDate()) and not covered_bill.getFinishDate().before(top_bill.getStartDate()):
                can_insert = False
                break
        if can_insert:
            top_bills.append(covered_bill)
    covered_kwh = sum(bl.getKwh().doubleValue() for bl in top_bills)


    mb_cal = MonadDate.getCalendar()
    mb_cal.setTime(covered_start.getDate())
    mb_cal.set(Calendar.DAY_OF_MONTH, 1)
    mb_cal.set(Calendar.HOUR_OF_DAY, 0)
    mb_cal.set(Calendar.MINUTE, 0)

    me_cal = MonadDate.getCalendar()
    me_cal.setTime(mb_cal.getTime())
    me_cal.add(Calendar.MONTH, 1)
    me_cal.add(Calendar.MINUTE, -30)

    virtual_kwh = 0
    net_gbp = 0
    reconciliation_gbp = 0

    while not mb_cal.getTime().after(covered_finish.getDate()):
        month_begin = HhStartDate(mb_cal.getTime())
        month_end = HhStartDate(me_cal.getTime())
        if covered_start.after(month_begin):
            chunk_start = covered_start
        else:
            chunk_start = month_begin
        if covered_finish.before(month_end):
            chunk_finish = covered_finish
        else:
            chunk_finish = month_end

        generations = Hiber.session().createQuery("select distinct generation from SupplyGeneration generation where generation.supply = :supply and generation.importMpan is not null and generation.startDate.date <= :finishDate and (generation.finishDate is null or generation.finishDate.date >= :startDate)").setEntity('supply', supply).setTimestamp('startDate', chunk_start.getDate()).setTimestamp('finishDate', chunk_finish.getDate()).scroll()
        while generations.next():
            #pw.println('starting vbill ' + str(System.currentTimeMillis()))
            
            generation = generations.get(0)
            mpan = generation.getImportMpan()
            contract = mpan.getSupplierContract()
            mpan_core = mpan.getCore()
            mpan_core_str = str(mpan_core)
            data_source = comterp.get('supply_source')(forecast_date, comterp, pw, covered_primary_bill)
            data_source.init_from_mpan(chunk_start, chunk_finish, mpan)

            vbf = comterp.get('contract_function')(contract, 'import_virtual_bill')
            if vbf is None:
                raise UserException('The contract ' + contract.getName() + " doesn't have a function import_virtual_bill.")
            v_bill = vbf(data_source)
            net_gbp += v_bill['net-gbp']
            virtual_kwh += v_bill['sum-msp-kwh']
            problem += v_bill['problem']
            reconciliation_gbp += v_bill.get('reconciliation-gbp', 0)
            for title in data_source.contract_function(contract, 'import_virtual_bill_titles')():
                pw.print(title + ',')
                if title in v_bill:
                    pw.print('"' + str(v_bill[title]) + '"')
                    del v_bill[title]
                pw.print(',')
            for k, v in v_bill.iteritems():
                pw.print('"' + k + '","' + str(v) + '",')
            pw.println('')
            #raise UserException('start date ' + str(data_source.start_date) + ' finish date ' + str(data_source.finish_date) + ' ' + str(bill))
        mb_cal.add(Calendar.MONTH, 1)
        me_cal.add(Calendar.MINUTE, 30)
        me_cal.add(Calendar.MONTH, 1)
        me_cal.add(Calendar.MINUTE, -30)
        generations.close()
    
    pw.println(','.join('"' + str(value) + '"' for value in [batch.getReference(), bill.getReference(), bill.getType(), bill.getBreakdown(), bill.getKwh(), bill.getNet(), bill.getVat(), bill_start, bill_finish, mpan.getCore(), covered_start, covered_finish, ';'.join(str(id).replace(',', '') for id in covered_bill_ids), covered_kwh, covered_net, covered_vat, virtual_kwh, net_gbp, covered_net - net_gbp, reconciliation_gbp, net_gbp - reconciliation_gbp, covered_net - (net_gbp - reconciliation_gbp), problem]))
    pw.flush()
    Hiber.session().clear()
bills.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[113]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Contracts]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

contracts_element = doc.createElement('contracts')
source.appendChild(contracts_element)
for contract in Hiber.session().createQuery("from HhdcContract contract order by contract.startRateScript.startDate.date").list():
    contract_element = contract.toXml(doc, XmlTree('party'))
    contracts_element.appendChild(contract_element)
    start_rate_script = contract.getStartRateScript()
    start_rate_script.setLabel('start')
    contract_element.appendChild(start_rate_script.toXml(doc))
    finish_rate_script = contract.getFinishRateScript()
    finish_rate_script.setLabel('finish')
    contract_element.appendChild(finish_rate_script.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; HHDC Contracts
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'HHDC Contracts ['" />
                    <a
                        href="{/source/request/@context-path}/hhdc-contracts/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Name</th>
                            <th>Start Date</th>
                            <th>Finish Date</th>
                            <th>HHDC</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/contracts/hhdc-contract">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@name" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(rate-script[@label='start']/hh-start-date[@label='start']/@year, '-', rate-script[@label='start']/hh-start-date[@label='start']/@month, '-', rate-script[@label='start']/hh-start-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="rate-script[@label='finish']/hh-start-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(rate-script[@label='finish']/hh-start-date[@label='finish']/@year, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@month, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/47/output/?provider-id={provider/@id}">
                                        <xsl:value-of
                                            select="provider/@name" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[115]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Contract]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import HhdcContract

contract_id = inv.getLong('hhdc-contract-id')
contract = HhdcContract.getHhdcContract(contract_id)
source.appendChild(contract.toXml(doc, XmlTree('party', XmlTree('participant')).put('rateScripts')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Home &gt; HHDC Contracts &gt;
                    <xsl:value-of select="/source/hhdc-contract/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/113/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/hhdc-contract/@name, ' [')" />
                    <a
                        href="{/source/request/@context-path}/hhdc-contracts/{/source/hhdc-contract/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                            <tr>
                                <th>Provider</th>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/47/output/?provider-id={/source/hhdc-contract/provider/@id}">
                                        <xsl:value-of
                                            select="/source/hhdc-contract/provider/@name" />
                                    </a>
                                </td>
                            </tr>
                        <tr>
                            <th>Name</th>
                            <td>
                                <xsl:value-of
                                    select="/source/hhdc-contract/@name" />
                            </td>
                        </tr>
                        <tr>
                            <th>Start Date</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/hhdc-contract/rate-script[position()=1]/hh-start-date[@label='start']/@year, '-', /source/hhdc-contract/rate-script[position()=1]/hh-start-date[@label='start']/@month, '-', /source/hhdc-contract/rate-script[position()=1]/hh-start-date[@label='start']/@day)" />
                            </td>
                        </tr>
                        <tr>
                            <th>Finish Date</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/hhdc-contract/rate-script[position()=last()]/hh-start-date[@label='finish']">
                                        <xsl:value-of
                                            select="concat(/source/hhdc-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@year, '-', /source/hhdc-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@month, '-', /source/hhdc-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@day)" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Ongoing
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <br />
                    <table>
                    <caption>Rate Scripts</caption>
                    <thead>
                    <tr>
                    <th></th>
                    <th>From</th>
                    <th>To</th>
                    </tr>
                    </thead>
                    <tbody>
                    <xsl:for-each
                    select="/source/hhdc-contract/rate-script">
                    <tr>
                    <td>
                    <a
                    href="{/source/request/@context-path}/reports/173/output/?rate-script-id={@id}">
                    <xsl:value-of select="'view'" />
                    </a>
                    </td>
                    <td>
                    <xsl:value-of
                    select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day)" />
                    </td>
                    <td>
                    <xsl:choose>
                    <xsl:when
                    test="hh-start-date[@label='finish']">
                    <xsl:value-of
                    select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day)" />
                    </xsl:when>
                    <xsl:otherwise>
                    Ongoing
                    </xsl:otherwise>
                    </xsl:choose>
                    </td>
                    </tr>
                    </xsl:for-each>
                    </tbody>
                    </table>
                <ul>
                    <!--
                        <li>
                        <a
                        href="{/source/request/@context-path}/orgs/{/source/org/@id}/reports/87/screen/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                        Batches
                        </a>
                        </li>
                        <li>
                        <a
                        href="{/source/request/@context-path}/orgs/{/source/org/@id}/reports/99/screen/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                        Supply Snags
                        </a>
                        </li>
                        <li>
                        <a
                        href="{/source/request/@context-path}/orgs/{/source/org/@id}/reports/103/screen/output/?service-id={/source/hhdc-contract/@id}">
                        Bill Snags
                        </a>
                        </li>
                    -->
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/37/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                            Channel Snags
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/83/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                            Virtual Bills
                        </a>
                    </li>
                </ul>
                    <h2>Script</h2>
                    <pre>
                    <xsl:value-of
                    select="/source/hhdc-contract/@charge-script" />
                    </pre>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[117]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Channel Snag]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.physical import ChannelSnag

snag_id = inv.getLong('snag-id')
snag = ChannelSnag.getChannelSnag(snag_id)
source.appendChild(snag.toXml(doc, XmlTree("channel", XmlTree("supplyGeneration", XmlTree('supply')))))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/channel-snag/channel/supply-generation/account/hhdc-contract/@name" />
                    &gt; Channel Snags &gt;
                    <xsl:value-of select="/source/channel-snag/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/113/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={/source/channel-snag/channel/supply-generation/account/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/channel-snag/channel/supply-generation/account/hhdc-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/37/output/?hhdc-contract-id={/source/channel-snag/channel/supply-generation/account/hhdc-contract/@id}">
                        <xsl:value-of select="'Channel Snags'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/channel-snag/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplies/{/source/channel-snag/channel/supply-generation/supply/@id}/generations/{/source/channel-snag/channel/supply-generation/@id}/channels/{/source/channel-snag/channel/@id}/snags/{/source/channel-snag/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />

                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                        <tr>
                            <th>Chellow Id</th>
                            <td>
                                <xsl:value-of
                                    select="/source/channel-snag/@id" />
                            </td>
                        </tr>
                        <tr>
                            <th>Date Created</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/channel-snag/date[@label='created']/@year, '-', /source/channel-snag/date[@label='created']/@month, '-', /source/channel-snag/date[@label='created']/@day, 'T', /source/channel-snag/date[@label='created']/@hour, ':', /source/channel-snag/date[@label='created']/@minute, 'Z')" />
                            </td>
                        </tr>
                        <tr>
                            <th>Ignored?</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/channel-snag/@is-ignored='true'">
                                        Ignored
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Not ignored
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                        <tr>
                            <th>Description</th>
                            <td>
                                <xsl:value-of
                                    select="/source/channel-snag/@description" />
                            </td>
                        </tr>
                        <tr>
                            <th>Channel</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when test="/source/channel-snag/channel/@is-import = 'true'">
                                        Import
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Export
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="/source/channel-snag/channel/@is-kwh = 'true'">
                                        kWh
                                    </xsl:when>
                                    <xsl:otherwise>
                                        kVArh
                                    </xsl:otherwise>
                                </xsl:choose>
                                channel of <a
                                    href="{/source/request/@context-path}/reports/31/output/?supply-generation-id={/source/channel-snag/channel/supply-generation/@id}">
                                    <xsl:value-of
                                        select="concat('generation', /source/channel-snag/channel/supply-generation/@id)" />
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <th>Start Date</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/channel-snag/hh-start-date[@label='start']/@year, '-', /source/channel-snag/hh-start-date[@label='start']/@month, '-', /source/channel-snag/hh-start-date[@label='start']/@day, 'T', /source/channel-snag/hh-start-date[@label='start']/@hour, ':', /source/channel-snag/hh-start-date[@label='start']/@minute, 'Z')" />
                            </td>
                        </tr>
                        <tr>
                            <th>Finish Date:</th>
                            <td>
                                <xsl:choose>
                                <xsl:when test="/source/channel-snag/hh-start-date[@label='finish']">
                                <xsl:value-of
                                    select="concat(/source/channel-snag/hh-start-date[@label='finish']/@year, '-', /source/channel-snag/hh-start-date[@label='finish']/@month, '-', /source/channel-snag/hh-start-date[@label='finish']/@day, 'T', /source/channel-snag/hh-start-date[@label='finish']/@hour, ':', /source/channel-snag/hh-start-date[@label='finish']/@minute, 'Z')" />
                                 </xsl:when>
                                 <xsl:otherwise>
                                     Ongoing
                                 </xsl:otherwise>
                                 </xsl:choose>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[119]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site Group Snag]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.physical import SiteSnag

snag_id = inv.getLong('snag-id')
snag = SiteSnag.getSiteSnag(snag_id)
source.appendChild(snag.toXml(doc, XmlTree("site")))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Site Snags &gt;
                    <xsl:value-of select="/source/site-snag/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/20/output/">
                        <xsl:value-of select="'Site Snags'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/site-snag/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/site-snags/{/source/site-snag/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                        <tr>
                            <th>Chellow Id</th>
                            <td>
                                <xsl:value-of
                                    select="/source/site-snag/@id" />
                            </td>
                        </tr>
                        <tr>
                            <th>Date Created</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/site-snag/date[@label='created']/@year, '-', /source/site-snag/date[@label='created']/@month, '-', /source/site-snag/date[@label='created']/@day, 'T', /source/site-snag/date[@label='created']/@hour, ':', /source/site-snag/date[@label='created']/@minute, 'Z')" />
                            </td>
                        </tr>
                        <tr>
                            <th>Ignored?</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/site-snag/@is-ignored='true'">
                                        Ignored
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Not ignored
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                        <tr>
                            <th>Description</th>
                            <td>
                                <xsl:value-of
                                    select="/source/site-snag/@description" />
                            </td>
                        </tr>
                        <tr>
                            <th>Progress</th>
                            <td>
                                <xsl:value-of
                                    select="/source/site-snag/@progress" />
                            </td>
                        </tr>
                        <tr>
                            <th>Site</th>
                            <td>
                                <a
                                    href="{/source/request/@context-path}/reports/3/output/?site-id={/source/site-snag/site/@id}">
                                    <xsl:value-of
                                        select="/source/site-snag/site/@id" />
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <th>Start Date</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/site-snag/hh-start-date[@label='start']/@year, '-', /source/site-snag/hh-start-date[@label='start']/@month, '-', /source/site-snag/hh-start-date[@label='start']/@day, 'T', /source/site-snag/hh-start-date[@label='start']/@hour, ':', /source/site-snag/hh-start-date[@label='start']/@minute, 'Z')" />
                            </td>
                        </tr>
                        <tr>
                            <th>Finish Date:</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/site-snag/hh-start-date[@label='finish']/@year, '-', /source/site-snag/hh-start-date[@label='finish']/@month, '-', /source/site-snag/hh-start-date[@label='finish']/@day, 'T', /source/site-snag/hh-start-date[@label='finish']/@hour, ':', /source/site-snag/hh-start-date[@label='finish']/@minute, 'Z')" />
                            </td>
                        </tr>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[121]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Market Roles]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

roles_element = doc.createElement('roles')
source.appendChild(roles_element)
for role in Hiber.session().createQuery("from MarketRole role order by role.code").list():
    roles_element.appendChild(role.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Market Roles
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Market Roles'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/roles/market-role">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/123/output/?role-id={@id}">
                                       <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[123]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Market Role]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import MarketRole

role_id = inv.getLong('role-id')
role = MarketRole.getMarketRole(role_id)
role_element = role.toXml(doc)
source.appendChild(role_element)
for party in Hiber.session().createQuery("from Party party where party.role = :role order by party.participant.code").setEntity("role", role).list():
    role_element.appendChild(party.toXml(doc, XmlTree('participant')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Market Roles &gt;
                    <xsl:value-of
                        select="/source/market-role/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/121/output/">
                        <xsl:value-of select="'Market Roles'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/market-role/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/market-role/@code" />
                        </td>
                    </tr>
                    <tr>

                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/market-role/@description" />
                        </td>
                    </tr>
                </table>
                <br />
                <xsl:choose>
                    <xsl:when test="/source/market-role/@code='R'">
                        <table>
                            <caption>DSOs</caption>
                            <thead>
                                <tr>
                                    <th>Code</th>
                                    <th>Name</th>
                                </tr>
                            </thead>
                            <tbody>
                                <xsl:for-each
                                    select="/source/market-role/dso">
                                    <tr>
                                        <td>
                                            <a
                                                href="{/source/request/@context-path}/reports/139/output/?dso-id={@id}">
                                                <xsl:value-of
                                                select="@code" />
                                            </a>
                                        </td>
                                        <td>
                                            <xsl:value-of
                                                select="@name" />
                                        </td>
                                    </tr>
                                </xsl:for-each>
                            </tbody>
                        </table>
                    </xsl:when>
                    <xsl:otherwise>
                        <table>
                            <caption>Providers</caption>
                            <thead>
                                <tr>
                                    <th>Name</th>
                                </tr>
                            </thead>
                            <tbody>
                                <xsl:for-each
                                    select="/source/market-role/provider">
                                    <tr>
                                        <td>
                                            <a
                                                href="{/source/request/@context-path}/reports/47/output/?provider-id={@id}">
                                                <xsl:value-of
                                                select="@name" />
                                            </a>
                                        </td>
                                    </tr>
                                </xsl:for-each>
                            </tbody>
                        </table>

                    </xsl:otherwise>
                </xsl:choose>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[125]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[SSCs]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

sscs_element = doc.createElement('sscs')
source.appendChild(sscs_element)
for ssc in Hiber.session().createQuery("from Ssc ssc order by ssc.code").list():
    sscs_element.appendChild(ssc.toXml(doc, XmlTree("measurementRequirements", XmlTree("tpr"))))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    <xsl:value-of select="'Home'" />
                    &gt; SSCs
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'SSCs'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                            <th>Imp/Exp</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Tprs</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/sscs/ssc">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/127/output/?ssc-id={@id}">
                                        <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@is-import='true'">
                                            Import
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Export
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(date[@label='from']/@year, '-', date[@label='from']/@month, '-', date[@label='from']/@day, ' ', date[@label='from']/@hour, ':', date[@label='from']/@minute)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="date[@label='to']">
                                            <xsl:value-of
                                                select="concat(date[@label='to']/@year, '-', date[@label='to']/@month, '-', date[@label='to']/@day, ' ', date[@label='to']/@hour, ':', date[@label='to']/@minute)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:for-each
                                        select="measurement-requirement">
                                        <a
                                            href="{/source/request/@context-path}/reports/97/output/?tpr-id={tpr/@id}">
                                            <xsl:value-of
                                                select="tpr/@code" />
                                        </a>
                                        <xsl:if
                                            test="position() != last()">
                                            <xsl:value-of select="', '" />
                                        </xsl:if>
                                    </xsl:for-each>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[127]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[SSC]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Ssc

ssc_id = inv.getLong('ssc-id')
ssc = Ssc.getSsc(ssc_id)
source.appendChild(ssc.toXml(doc, XmlTree("measurementRequirements", XmlTree("tpr"))))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; SSCs &gt;
                    <xsl:value-of select="/source/ssc/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/125/output/">
                        <xsl:value-of select="'SSCs'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/ssc/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/ssc/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/ssc/@description" />
                        </td>
                    </tr>
                    <tr>
                        <th>Is Import?</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/ssc/@is-import='true'">
                                    Import
                                </xsl:when>
                                <xsl:otherwise>Export</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>From</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/ssc/date[@label='from']/@year, '-', /source/ssc/date[@label='from']/@month, '-', /source/ssc/date[@label='from']/@day, ' ', /source/ssc/date[@label='from']/@hour, ':', /source/ssc/date[@label='from']/@minute)" />
                        </td>
                    </tr>
                    <tr>
                        <th>To</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/ssc/date[@label='to']">
                                    <xsl:value-of
                                        select="concat(/source/ssc/date[@label='to']/@year, '-', /source/ssc/date[@label='to']/@month, '-', /source/ssc/date[@label='to']/@day, ' ', /source/ssc/date[@label='to']/@hour, ':', /source/ssc/date[@label='to']/@minute)" />
                                </xsl:when>
                                <xsl:otherwise>Ongoing</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                </table>

                <h4>TPRs</h4>

                <ul>
                    <xsl:for-each
                        select="/source/ssc/measurement-requirement/tpr">
                        <li>
                            <a
                                href="{/source/request/@context-path}/reports/97/output/?tpr-id={@id}">
                                <xsl:value-of select="@code" />
                            </a>
                            <!-- 
                            <xsl:if test="position() != last()">
                                <xsl:value-of select="', '" />
                            </xsl:if>
                            -->
                        </li>
                    </xsl:for-each>
                </ul>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[129]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Meter Types]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

types_element = doc.createElement('meter-types')
source.appendChild(types_element)
for type in Hiber.session().createQuery("from MeterType type order by type.code").list():
    types_element.appendChild(type.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    <xsl:value-of select="'Home'" />
                    &gt; Meter Types
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Meter Types'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/meter-types/meter-type">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/131/output/?type-id={@id}">
                                         <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[131]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Meter Type]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import MeterType

type_id = inv.getLong('type-id')
type = MeterType.getMeterType(type_id)
source.appendChild(type.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Meter Types &gt;
                    <xsl:value-of
                        select="/source/meter-type/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/129/output/">
                        <xsl:value-of select="'Meter Types'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/meter-type/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/meter-type/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/meter-type/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[133]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MTC Payment Types]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

types_element = doc.createElement('meter-payment-types')
source.appendChild(types_element)
for type in Hiber.session().createQuery("from MeterPaymentType type order by type.code").list():
    types_element.appendChild(type.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Meter Payment Types
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Meter Payment Types'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/meter-payment-types/meter-payment-type">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/135/output/?type-id={@id}">
                                        <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[135]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MTC Payment Type]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import MeterPaymentType

type_id = inv.getLong('type-id')
type = MeterPaymentType.getMeterPaymentType(type_id)
source.appendChild(type.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Meter Payment Types &gt;
                    <xsl:value-of
                        select="/source/meter-payment-type/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/133/output/">
                        <xsl:value-of select="'Meter Payment Types'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/meter-payment-type/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/meter-payment-type/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/meter-payment-type/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[137]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[DSOs]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

for dso in Hiber.session().createQuery(
                'from Dso dso order by dso.code').list():
    source.appendChild(dso.toXml(doc, XmlTree('participant').put('role')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>Home &gt; DSOs</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt; DSOs
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <p>
                    This is a list of parties that have the
                    <a
                        href="{/source/request/@context-path}/reports/123/output/?role-id=22">
                        <xsl:value-of select="'distributor'" />
                    </a>
                    role.
                </p>
                <table>
                    <thead>
                        <th>Code</th>
                        <th>Name</th>
                        <th>Participant</th>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/dso">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/139/output/?dso-id={@id}">
                                       <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@name" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/73/output/?participant-id={participant/@id}">
                                        <xsl:value-of
                                            select="participant/@name" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[139]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[DSO]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import Dso

dso_id = inv.getLong('dso-id')
dso = Dso.getDso(dso_id)
dso_element = dso.toXml(doc, XmlTree('participant').put('role'))
source.appendChild(dso_element)
for contract in Hiber.session().createQuery("from DsoContract contract where contract.party = :dso order by contract.name").setEntity('dso', dso).list():
    dso_element.appendChild(contract.toXml(doc, XmlTree('rateScripts')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; DSOs &gt;
                    <xsl:value-of select="/source/dso/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/137/output/">
                        <xsl:value-of select="'DSOs'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/dso/@code" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Name</th>
                        <td>
                            <xsl:value-of select="/source/dso/@name" />
                        </td>
                    </tr>

                    <tr>
                        <th>Participant</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/73/output/?participant-id={/source/dso/participant/@id}">
                                <xsl:value-of
                                    select="/source/dso/participant/@name" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>Role</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/123/output/?role-id={/source/dso/market-role/@id}">
                                <xsl:value-of
                                    select="/source/dso/market-role/@description" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/dso/@code" />
                        </td>
                    </tr>
                </table>
                <br />
                <ul>
                                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/65/output/?dso-id={/source/dso/@id}">
                            Contracts
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/49/output/?dso-id={/source/dso/@id}">
                            Line Loss Factors
                        </a>
                    </li>
                </ul>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[141]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Read Types]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

types_element = doc.createElement('read-types')
source.appendChild(types_element)
for type in Hiber.session().createQuery("from ReadType type order by type.code").list():
    types_element.appendChild(type.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Read Types
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Read Types'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/read-types/read-type">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/143/output/?type-id={@id}">
                                        <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[143]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Read Type]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import ReadType

type_id = inv.getLong('type-id')
type = ReadType.getReadType(type_id)
source.appendChild(type.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Read Types &gt;
                    <xsl:value-of
                        select="/source/read-type/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/141/output/">
                        <xsl:value-of select="'Read Types'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/read-type/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/read-type/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/read-type/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[145]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Sites HH Data Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/style/" />

                <title>Chellow &gt; CSV Sites HH Data</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Sites HH Data'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/183/output/">
                    <fieldset>
                        <legend>Download</legend>
<br/>
                        <xsl:value-of select="'For '"/>
                        <input name="months" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='months']">
                                <xsl:value-of select="/source/request/parameter[@name='months']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
<xsl:value-of select="' month(s) finishing at the end of '"/>
                        <input name="year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[147]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies Duration Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import HhStartDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())
finish_date.setLabel('finish')
source.appendChild(finish_date.toXml(doc))

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1)
start_date = HhStartDate(cal.getTime())
start_date.setLabel('start')
source.appendChild(start_date.toXml(doc))

source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))
source.appendChild(MonadDate.getHoursXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; CSV Supplies Duration</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Supplies Duration'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/149/output/">
                    <fieldset>
                        <legend>Download</legend>
<br/>
<p><xsl:value-of select="'From '"/>
<input name="start-year" value="{/source/hh-start-date[@label='start']/@year}" maxlength="4" size="4"/><xsl:value-of select="'-'"/>
                        <select name="start-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='start']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="'-'"/>
                        <select name="start-day">
                            <xsl:for-each select="/source/days/day">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='start']/@day">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="' '"/>
                        <select name="start-hour">
                            <xsl:for-each select="/source/hours/hour">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='start']/@hour">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="':00 to '"/>
<input name="finish-year" value="{/source/hh-start-date[@label='finish']/@year}" maxlength="4" size="4"/><xsl:value-of select="'-'"/>
                        <select name="finish-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="'-'"/>
                        <select name="finish-day">
                            <xsl:for-each select="/source/days/day">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@day">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="' '"/>
                        <select name="finish-hour">
                            <xsl:for-each select="/source/hours/hour">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@hour">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="':30 '"/>
                    <input type="submit" value="Download"/>
</p>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[149]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies Duration]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date
from net.sf.chellow.physical import HhStartDate, Supply
from java.sql import Timestamp, ResultSet
from org.python.util import PythonInterpreter
from net.sf.chellow.billing import NonCoreContract
from java.lang import Long
from net.sf.chellow.monad.types import MonadDate


computer = NonCoreContract.getNonCoreContract('computer')
comterp = PythonInterpreter()
comterp.exec(computer.getChargeScript())
forecast_date = HhStartDate.roundDown(Date(Long.MAX_VALUE))

def mpan_bit(query, kvarh_at_md_query, is_import, hh_count_query, num_hh, generation, comterp, forecast_date, start_date, finish_date):
    mpan = generation.getMpan(is_import)
    mpan_core_str = ''
    llfc_str = ''
    sc_str = ''
    supplier_contract_name = ''
    gsp_kwh = ''
    if mpan is not None:
        supplier_contract_name = mpan.getSupplierContract().getName()
        llfc = mpan.getLlfc()
        llfc_str = str(llfc)
        mpan_core_str = mpan.getCore().toString()
        sc_str = str(mpan.getAgreedSupplyCapacity())
        if llfc.getIsImport() and generation.getPc().getCode() == 0:
            gsp_kwh = 0
            # Do months
            mb_cal = MonadDate.getCalendar()
            mb_cal.setTime(start_date.getDate())
            mb_cal.set(Calendar.HOUR_OF_DAY, 0)
            mb_cal.set(Calendar.MINUTE, 0)

            me_cal = MonadDate.getCalendar()
            me_cal.setTime(start_date.getDate())
            me_cal.set(Calendar.HOUR_OF_DAY, 0)
            me_cal.set(Calendar.MINUTE, 0)
            me_cal.add(Calendar.MONTH, 1)
            me_cal.add(Calendar.MINUTE, -30)

            while not mb_cal.getTime().after(finish_date.getDate()):
                month_begin = HhStartDate(mb_cal.getTime())
                month_end = HhStartDate(me_cal.getTime())
                mb_cal.add(Calendar.MONTH, 1)
                me_cal.add(Calendar.MINUTE, 30)
                me_cal.add(Calendar.MONTH, 1)
                me_cal.add(Calendar.MINUTE, -30)
                supply_source = comterp.get('supply_source')(forecast_date, comterp, pw)
                if start_date.after(month_begin):
                    chunk_start = start_date
                else:
                    chunk_start = month_begin
                if finish_date.before(month_end):
                    chunk_finish = finish_date
                else:
                    chunk_finish = month_end
                supply_source.init_from_mpan(chunk_start, chunk_finish, mpan)
                gsp_kwh += supply_source.summary['sum-gsp-kwh']
            gsp_kwh = str(round(gsp_kwh))
    md = 0
    sum = 0
    non_actual = 0
    date_at_md = None
    kvarh_at_md = None
    num_na = 0
    hh_data = query.setBoolean('isImport', is_import).scroll()
    kva_at_md_query.setBoolean('isImport', is_import)
    while hh_data.next():
        hh_value = hh_data.get(0).doubleValue()
        hh_status = hh_data.get(1)
        if hh_value > md:
            md = hh_value
            date_at_md = hh_data.get(2)
            kvarh_at_md = kvarh_at_md_query.setTimestamp('mdDate', date_at_md.getDate()).uniqueResult()
        sum = sum + hh_value
        if hh_status != 'A':
            non_actual = non_actual + hh_value
            num_na = num_na + 1
    hh_data.close()
    kw_at_md = md * 2
    if kvarh_at_md is None:
        kva_at_md = 'None'
    else:
        kva_at_md = str(round(((kvarh_at_md.doubleValue() * 2)**2 + kw_at_md**2)**0.5))
    num_bad = str(num_hh - hh_count_query.setBoolean('isImport', is_import).uniqueResult() + num_na)
        
    return llfc_str + ',' + mpan_core_str + ',' + sc_str + ',' + supplier_contract_name + ',' + str(round(sum)) + ',' + str(round(non_actual)) + ',' + gsp_kwh + ',' + str(round(kw_at_md)) + ',' + str(date_at_md) + ',' + str(kva_at_md) + ',' + str(num_bad)
    
inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()

start_year = inv.getInteger("start-year")
start_month = inv.getInteger("start-month")
start_day = inv.getInteger("start-day")
start_hour = inv.getInteger("start-hour")

finish_year = inv.getInteger("finish-year")
finish_month = inv.getInteger("finish-month")
finish_day = inv.getInteger("finish-day")
finish_hour = inv.getInteger("finish-hour")

if not inv.isValid():
    raise UserException()

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)

cal.clear()
cal.set(Calendar.YEAR, start_year)
cal.set(Calendar.MONTH, start_month - 1)
cal.set(Calendar.DAY_OF_MONTH, start_day)
cal.set(Calendar.HOUR_OF_DAY, start_hour)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
start_date = HhStartDate(cal.getTime())

cal.clear()
cal.set(Calendar.YEAR, finish_year)
cal.set(Calendar.MONTH, finish_month - 1)
cal.set(Calendar.DAY_OF_MONTH, finish_day)
cal.set(Calendar.HOUR_OF_DAY, finish_hour)
cal.set(Calendar.MINUTE, 30)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
finish_date = HhStartDate(cal.getTime())

query = Hiber.session().createQuery("select datum.value, datum.status, datum.startDate from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isImport is :isImport and datum.channel.isKwh is true and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate").setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate())

kva_at_md_query = Hiber.session().createQuery("select datum.value from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isImport is :isImport and datum.channel.isKwh is false and datum.startDate.date = :mdDate")

hh_count_query = Hiber.session().createQuery("select count(*) from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isImport is :isImport and datum.channel.isKwh is true and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate").setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate())

num_hh = round((finish_date.getDate().getTime() - start_date.getPrevious().getDate().getTime()) / (30 * 60 * 1000))

pw.println("Supply Id, Supply Name, Source, Generator Type, Site Ids, Site Names, From, To, PC, MTC, CoP, SSC, Import MPAN Core, Import LLFC, Import Supply Capacity,Import Supplier,Import Total MSP kWh, Import Non-actual MSP kWh, Import Total GSP kWh,Import MD / kW, Import MD Date, Import MD / kVA, Import Bad HHs, Export MPAN Core, Export LLFC, Export Supply Capacity,Export Supplier,Export Total MSP kWh, Export Non-actual MSP kWh,Export GSP kWh, Export MD / kW, Export MD Date, Export MD / kVA, Export Bad HHs")

if inv.hasParameter('supply-id'):
    supply_id = inv.getLong('supply-id')
    supplies_query = Hiber.session().createQuery("select distinct generation.supply, generation.supply.id from SupplyGeneration generation where  generation.supply = :supply and (generation.finishDate.date is null or generation.finishDate.date >= :startDate) and generation.startDate.date <= :finishDate order by generation.supply.id").setEntity('supply', Supply.getSupply(supply_id))
else:
    supplies_query = Hiber.session().createQuery("select distinct generation.supply, generation.supply.id from SupplyGeneration generation where (generation.finishDate.date is null or generation.finishDate.date >= :startDate) and generation.startDate.date <= :finishDate order by generation.supply.id")

supplies = supplies_query.setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate()).scroll()

while supplies.next():
    supply = supplies.get(0)
    site_codes = ''
    site_names = ''
    generations = supply.getGenerations(start_date, finish_date)
    generation = generations[len(generations) - 1]
    for site_supply_generation in generation.getSiteSupplyGenerations():
        site = site_supply_generation.getSite();
        site_codes = site_codes + site.getCode() + ', '
        site_names = site_names + site.getName() + ', '
    site_codes = site_codes[:-2]
    site_names = site_names[:-2]
    query.setEntity('supply', supply)
    kva_at_md_query.setEntity('supply', supply)
    hh_count_query.setEntity('supply', supply)
    generator_type = supply.getGeneratorType()
    if generator_type is None:
        generator_type = ''
    else:
        generator_type = generator_type.getCode()

    ssc = generation.getSsc()
    if ssc is None:
        ssc_code = ''
    else:
        ssc_code = str(ssc)

    pw.print(','.join(('"' + str(value) + '"') for value in [supply.getId(), supply.getName(), supply.getSource().getCode(), generator_type, site_codes, site_names, start_date, finish_date, generation.getPc(), generation.getMtc(), generation.getCop(), ssc_code]) + ',')
    pw.flush()
    pw.println(mpan_bit(query, kva_at_md_query, True, hh_count_query, num_hh, generation,comterp, forecast_date, start_date, finish_date) + "," + mpan_bit(query, kva_at_md_query, False, hh_count_query, num_hh, generation,comterp, forecast_date, start_date, finish_date))
    pw.flush()
    Hiber.session().clear()
supplies.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[151]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Admin: CSV Export Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Admin &gt; CSV Export
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/153/output/">
                    <xsl:value-of select="'Admin'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Export'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <br />
                <form action="{/source/request/@context-path}/reports/31/output/">
                <fieldset>
                        <label>Core<input type="radio" name="is-core" value="true" checked="true"/></label>
                        <label>User<input type="radio" name="is-core" value="false"/></label>
                    <br/>
 <br/>
                    <fieldset><legend>From</legend>
                        <label>Has Start?<input type="checkbox" name="has-start"/></label><xsl:value-of select="' '"/>
                        <input name="year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
<xsl:value-of select="' - '"/>
                        <select name="day">
                            <xsl:for-each select="/source/days/day">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@day">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
               </fieldset>
<br/>
<table>
  <tr>
    <td>DSO Contracts</td>
    <td><input type="checkbox" name="has-dso-contracts" value="true"/></td>
  </tr>
  <tr>
    <td>Non-core contracts</td>
    <td><input type="checkbox" name="has-non-core-contracts" value="true"/></td>
  </tr>
  <tr>
    <td>Reports</td>
    <td><input type="checkbox" name="has-reports" value="true" /></td>
  </tr>
  <tr>
    <td>Supplier Contracts</td>
    <td><input type="checkbox" name="has-supplier-contracts" value="true"/></td>
  </tr>
  <tr>
    <td>HHDC Contracts</td>
    <td><input type="checkbox" name="has-hhdc-contracts" value="true"/></td>
  </tr>
  <tr>
    <td>Sites</td>
    <td><input type="checkbox" name="has-sites" value="true" /></td>
  </tr>
  <tr>
    <td>Supplies</td>
    <td><input type="checkbox" name="has-supplies" value="true"/><xsl:value-of select="' '"/><label>Supply Id<xsl:value-of select="' '"/><input name="mpan-core"/></label></td>
  </tr>
  <tr>
    <td>HH Data</td>
    <td><input type="checkbox" name="has-hh-data" value="true" /></td>
  </tr>
  <tr>
    <td>Users</td>
    <td><input type="checkbox" name="has-users" value="true" /></td>
  </tr>
  <tr>
    <td>Configuration</td>
    <td><input type="checkbox" name="has-configuration" value="true"/></td>
  </tr>
  <tr>
    <td>Channel Snag Ignores</td>
    <td><input type="checkbox" name="has-channel-snag-ignores" value="true"/></td>
  </tr>
  <tr>
    <td>Site Snag Ignores</td>
    <td><input type="checkbox" name="has-site-snag-ignores" value="true"/></td>
  </tr>
</table>
    <br/>
    <input type="submit" value="Download"/><xsl:value-of select="' '"/><input type="reset" value="Reset"/>
    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[153]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Admin: Home]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Admin
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Admin'" />
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <ul>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/151/output/">CSV Export
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/configuration/">
                            Configuration
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/165/output/">DB Consistency Check
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/171/output/">System</a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/195/output/">Comparison against ECOES</a>
                    </li>
                </ul>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[155]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplies Monthly Duration Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; CSV Supplies Monthly Duration</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Supplies Monthly Duration'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/177/output/">
                    <fieldset>
                        <legend>Download</legend>
<br/>
<p><xsl:value-of select="' For MPAN Core '"/>
<input name="mpan-core" value="" maxlength="30" size="30" />

<xsl:value-of select="' for '"/>
                        <input name="months" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='months']">
                                <xsl:value-of select="/source/request/parameter[@name='months']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
                        <xsl:value-of select="' month(s) finishing at the end of '"/>
<input name="end-year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                    <input type="submit" value="Download"/>
</p>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[157]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies Snapshot Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; CSV Supplies Snapshot</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Supplies Snapshot'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/33/output/">
                    <fieldset>
                        <legend>Supply level information</legend>
<br/>
<fieldset><legend>For the end of</legend>
                        <input name="year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
</fieldset>
<br/>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[159]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Sites Monthly Duration Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; CSV Sites Monthly Duration</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Sites Monthly Duration'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/161/output/">
                    <fieldset>
                        <legend>Download</legend>
<br/>
<p><xsl:value-of select="' For Site Code '"/>
<input name="site-code" value="" maxlength="30" size="30" />

<xsl:value-of select="' for '"/>
                        <input name="months" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='months']">
                                <xsl:value-of select="/source/request/parameter[@name='months']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
                        <xsl:value-of select="' month(s) finishing at the end of '"/>
<input name="end-year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                    </p>
                    <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[161]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Sites Monthly Duration]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate, MpanCore, Site
from java.text import SimpleDateFormat, DecimalFormat
from java.lang import Math, System
from net.sf.chellow.billing import SupplierContract, NonCoreContract
from org.python.util import PythonInterpreter

year = inv.getInteger("end-year")
month = inv.getInteger("end-month")
months = inv.getInteger("months")
search_term = inv.getString('site-code')

if not inv.isValid():
    raise UserException()

search_term = search_term.strip()

computer = NonCoreContract.getNonCoreContract('computer')

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.clear()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.add(Calendar.MONTH, 1)
cal.set(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())
cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
start_date = HhStartDate(cal.getTime())

kwh_formatter = DecimalFormat('#0')
gbp_formatter = DecimalFormat('#0.00')

def gbp_format(gbp):
    return gbp_formatter.format(gbp)

def kwh_format(gbp):
    return gbp_formatter.format(gbp)

stream_names = ['import-net', 'export-net', 'import-gen', 'export-gen', 'import-3rd-party', 'export-3rd-party', 'msp', 'used', 'used-3rd-party']


comterp = PythonInterpreter()
comterp.exec(computer.getChargeScript())

def process_site(site_id, month_start, month_finish, forecast_date, pw):
    site = Site.getSite(site_id)
    site_code = site.getCode()
    associates = []
    sources = []
    generator_types = []
    metering_type = 'nhh'
    problem = ''
    month_data = {}

    for stream_name in stream_names:
        month_data[stream_name + '-kwh'] = 0
        month_data[stream_name + '-gbp'] = 0

    has_3rd_party = False
    third_party_contracts = {}

    for group in site.groups(month_start, month_finish, False):
        for cand_site in group.getSites():
            cand_site_code = cand_site.getCode()
            if  cand_site_code != site_code and cand_site_code not in associates:
                associates.append(cand_site_code)
        for cand_supply in group.getSupplies():
            for cand_gen in cand_supply.getGenerations(month_start, month_finish):
                imp_mpan = cand_gen.getImportMpan()
                if imp_mpan is not None and metering_type != 'hh':
                    if str(cand_gen.getPc()) == '00':
                        metering_type = 'hh'
                    elif cand_gen.getChannels().size() > 0:
                        metering_type = 'amr'

    for group in site.groups(month_start, month_finish, True):
        if group.getFrom().after(start_date):
            chunk_start = group.getFrom()
        else:
            chunk_start = start_date
        if group.getTo().after(finish_date):
            chunk_finish = finish_date
        else:
            chunk_finish = group.getTo()

        for supply in group.getSupplies():
            source_code = supply.getSource().getCode()
            if source_code not in sources:
                sources.append(source_code)

            if source_code in ['3rd-party', '3rd-party-reverse']:
                has_3rd_party = True

            if supply.getGeneratorType() is not None:
                gen_type = supply.getGeneratorType().getCode()
                if gen_type not in generator_types:
                    generator_types.append(gen_type)

            for supply_generation in Hiber.session().createQuery("from SupplyGeneration generation where generation.supply = :supply and generation.startDate.date <= :finishDate and (generation.finishDate is null or generation.finishDate.date >= :startDate)").setEntity('supply', supply).setTimestamp('startDate', chunk_start.getDate()).setTimestamp('finishDate', chunk_finish.getDate()).list():
                if has_3rd_party:
                    for mpan in supply_generation.getMpans():
                        contr = mpan.getSupplierContract()
                        third_party_contracts[contr.getName()] = contr
                import_mpan = supply_generation.getImportMpan()

                # GBP
                if import_mpan is None:
                    continue
                supplier_contract = import_mpan.getSupplierContract()
                if source_code in ['net', 'gen-net']:
                    #pw.println("starting vbill " + str(System.currentTimeMillis() - timing))
                    supply_source = comterp.get('supply_source')(forecast_date, comterp, pw)

                    #pw.println("starting init from mpan " + str(System.currentTimeMillis() - timing))
                    supply_source.init_from_mpan(chunk_start, chunk_finish, import_mpan)
                    #pw.println("finished init from mpan " + str(System.currentTimeMillis() - timing))
                    import_vb_function = comterp.get('contract_function')(supplier_contract, 'import_virtual_bill')
                    if import_vb_function is None:
                        problem += "Can't find the import_virtual_bill function in the supplier contract. "
                    else:
                        v_bill = import_vb_function(supply_source)
                    #pw.println("finishing vbill " + str(System.currentTimeMillis() - timing))

                        if 'net-gbp' in v_bill:
                            month_data['import-net-gbp'] += v_bill['net-gbp']
                        else:
                            problem += 'For the supply ' + import_mpan.toString() + ' the virtual bill ' + str(v_bill) + ' from the contract ' + supplier_contract.getName() + ' does not contain the net-gbp key.'
                    hhdc_contract = supply_generation.getHhdcContract()
                    if hhdc_contract is not None:
                        hhdc_bill = comterp.get('contract_function')(hhdc_contract, 'virtual_bill')(supply_source)
                        month_data['import-net-gbp'] += hhdc_bill['net-gbp']

        site_ds = comterp.get('site_source')(site, chunk_start, chunk_finish, forecast_date, comterp, pw)
        displaced_mpan = comterp.get('displaced_mpan')(group, chunk_start, chunk_finish)
        if displaced_mpan != None:
            #pw.println("starting displaced " + str(System.currentTimeMillis() - timing))
            site_ds.init_from_mpan(displaced_mpan)
            month_data['msp-gbp'] += comterp.get('contract_function')(displaced_mpan.getSupplierContract(), 'displaced_virtual_bill')(site_ds)['net-gbp']

            #pw.println("finishing displaced " + str(System.currentTimeMillis() - timing))
        elif has_3rd_party:
            site_ds.init_from_site()
            keys = third_party_contracts.keys()
            keys.sort()
            third_gbp = comterp.get('contract_function')(third_party_contracts[keys[0]], 'third_party_bill')(site_ds)['net-gbp']
            month_data['used-3rd-party-gbp'] += third_gbp
        else:
            site_ds.init_from_site()

        #pw.println("finishing site ds " + str(System.currentTimeMillis()))

        month_data['used-gbp'] += month_data['import-net-gbp'] + month_data['msp-gbp'] + month_data['used-3rd-party-gbp']
        for stream_name in stream_names:
            month_data[stream_name + '-kwh'] += site_ds.summary['sum-' + stream_name + '-kwh']

    associate_str = ''
    for associate in associates:
        associate_str = associate_str + associate + ', '
    sources.sort()
    sources_str = ''
    for source in sources:
        sources_str = sources_str + source + ', '
    generator_types.sort()
    generator_types_str = ''
    for generator_type in generator_types:
        generator_types_str += generator_type + ', '
    Hiber.close()
    result = [associate_str[:-2], sources_str[:-2], generator_types_str[:-2], month_format.format(Date(month_finish.getDate().getTime() - 1)), kwh_format(month_data['import-net-kwh']), kwh_format(month_data['msp-kwh']), kwh_format(month_data['export-net-kwh']), kwh_format(month_data['used-kwh']), kwh_format(month_data['export-gen-kwh']), kwh_format(month_data['import-gen-kwh']), kwh_format(month_data['import-3rd-party-kwh']), kwh_format(month_data['export-3rd-party-kwh']),  gbp_format(month_data['import-net-gbp']), gbp_format(month_data['msp-gbp']), 0, gbp_format(month_data['used-gbp']), gbp_format(month_data['used-3rd-party-gbp']), metering_type, problem]
    #pw.println("Finished call method " + str(System.currentTimeMillis() - timing))
    return result

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()
pw.println("Site Id,Site Name,Associated Site Ids,Sources,Generator Types,Month,Imported kWh,Displaced kWh,Exported kWh,Used kWh,Parasitic kWh,Generated kWh,3rd Party Import kWh,3rd Party Export kWh,Imported GBP,Displaced GBP,Exported GBP,Used GBP,3rd Party Import GBP,Metering Type,Problem")
pw.flush()

month_format = SimpleDateFormat("yyyy-MM-dd")
month_format.setCalendar(cal)

if len(search_term) == 0:
    query = Hiber.session().createQuery("from Site site order by site.code")
else:
    query = Hiber.session().createQuery("from Site site where site.code = :siteCode order by site.code").setString('siteCode', search_term)

forecast_date = comterp.get('forecast_date')()

sites = query.list()

for site in sites:
    #pw.println("starting site " + str(System.currentTimeMillis()))

    for i in range(months):
        cal.setTime(start_date.getDate())
        cal.add(Calendar.MONTH, i)
        month_start = HhStartDate(cal.getTime())
        cal.add(Calendar.MONTH, 1)
        cal.add(Calendar.MINUTE, -30)
        month_finish = HhStartDate(cal.getTime())
        pw.print('"' + site.getCode() + '","' + site.getName() + '",')
        for value in process_site(site.getId(), month_start, month_finish, forecast_date, pw):
            pw.print('"' + str(value) + '",')
        pw.println('')
        pw.flush()
    #pw.println("finishing site " + str(System.currentTimeMillis() - timing))
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[163]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Bills]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import Account

account_id = inv.getLong('account-id')
account = Account.getAccount(account_id)
bills_element = doc.createElement('bills')
source.appendChild(bills_element)
bills_element.appendChild(account.toXml(doc, XmlTree('contract')))
for bill in Hiber.session().createQuery("from Bill bill where bill.account = :account order by bill.startDate.date").setEntity('account', account).list():
    bills_element.appendChild(bill.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />

    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/bills/account/hhdc-contract/@name" />
                    &gt; Accounts &gt;
                    <xsl:value-of
                        select="/source/bills/account/@reference" />
                    &gt; Bills
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/113/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={/source/bills/account/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/bills/account/hhdc-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/109/output/?hhdc-contract-id={/source/bills/account/hhdc-contract/@id}">
                        <xsl:value-of select="'Accounts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/111/output/?account-id={/source/bills/account/@id}">
                        <xsl:value-of
                            select="/source/bills/account/@reference" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Bills'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>Bills</caption>
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Net</th>
                            <th>VAT</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/bills/bill">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/87/output/?bill-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(day-start-date/@year, '-', day-start-date/@month, '-', day-start-date/@day)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(day-finish-date/@year, '-', day-finish-date/@month, '-', day-finish-date/@day)" />
                                </td>
                                <td>
                                    <xsl:value-of select="@net" />
                                </td>
                                <td>
                                    <xsl:value-of select="@vat" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[165]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Admin: DB Consistency Check]]></value>
        <value><![CDATA[from net.sf.chellow.monad import UserException, Hiber
from net.sf.chellow.monad.types import MonadDate
from java.text import SimpleDateFormat
from java.util import Locale, Calendar, TimeZone, GregorianCalendar
from net.sf.chellow.physical import MpanCore, SiteGroup

inv.getResponse().setContentType('text/plain')
pw = inv.getResponse().getWriter()
pw.println("Checking for the 100 most recent bogus site snags...")
summary = []
for site_snag in Hiber.session().createQuery("from SiteSnag snag order by snag.finishDate.date desc").setMaxResults(100).list():
    pw.println("Checking site snag " + str(site_snag.getId()))
    site = site_snag.getSite()
    description = site_snag.getDescription()
    groups = site.groups(site_snag.getStartDate(), site_snag.getFinishDate(), False)
    for group in groups:
        pw.println('Checking group')
        hh_data = group.hhData()
        import_from_net = hh_data.get('import-net')
        export_to_net = hh_data.get('export-net')
        import_from_gen = hh_data.get('import-gen')
        export_to_gen = hh_data.get('export-gen')
        for i in range(len(import_from_net)):
            if description == SiteGroup.EXPORT_NET_GT_IMPORT_GEN:
                if export_to_net[i] <= import_from_gen[i]:
                    msg = "Bogus dude! Snag " + str(site_snag.getId()) + " num supplies " + str(group.getSupplies().size()) + " site " + str(site.getId()) + " " + site.getName() + " Export to net " + str(export_to_net[i]) + " is less than or equal to import from gen " + str(import_from_gen[i]) + " from " + site_snag.getStartDate().toString() + " to " + site_snag.getFinishDate().toString()
                    pw.println(msg)
                    summary.append(msg)
                else:
                    pw.println("Genuine")
            elif description == SiteGroup.EXPORT_GEN_GT_IMPORT:
                pass
            else:
                summary.append("Description not recognized.")
pw.println('')
pw.println('Summary')
for line in summary:
    pw.println(line)
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[167]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies HH Data Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = MonadDate.getCalendar()
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />

                <title>Chellow &gt; CSV Supplies HH Data</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Supplies HH Data'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/169/output/">
                    <fieldset>
                        <legend>Download HH Data</legend>
<br/>
<select name="measurement-class">
                        <option value="all">
                                    All
                        </option>
                        <option value="hh">
                                    HH
                        </option>
                        <option value="nhh">
                                    NHH
                        </option>
                        </select>

<xsl:value-of select="' '"/><select name="is-import">
                        <option value="true">
                                    Import
                        </option>
                        <option value="false">
                                    Export
                        </option>
                        </select>
<xsl:value-of select="' '"/><select name="is-kwh">
                        <option value="true">
                                    kWh
                        </option>
                        <option value="false">
                                    kVArh
                        </option>
                        </select>
                        <xsl:value-of select="' for '"/>
                        <input name="months" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='months']">
                                <xsl:value-of select="/source/request/parameter[@name='months']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
                        <xsl:value-of select="' month(s) finishing at the end of '"/>
<input name="end-year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                    <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[169]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies HH Data]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from java.util import Calendar, GregorianCalendar, TimeZone, Locale
from java.text import DateFormat
from java.util.zip import ZipOutputStream, ZipEntry
from java.io import OutputStreamWriter, PrintWriter
from org.hibernate import CacheMode, ScrollMode
from net.sf.chellow.physical import HhStartDate, MpanCore
from java.lang import System, Long
from net.sf.chellow.physical import Channel, Supply

end_year = inv.getInteger('end-year')
end_month = inv.getInteger('end-month')
months = inv.getInteger('months')
is_import = inv.getBoolean('is-import')
is_kwh = inv.getBoolean('is-kwh')

if not inv.isValid():
    raise UserException()

cal = MonadDate.getCalendar()
cal.clear()
cal.set(Calendar.YEAR, end_year)
cal.set(Calendar.MONTH, end_month - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finishDate = cal.getTime()

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
startDate = cal.getTime()

dateFormat = DateFormat.getDateInstance(DateFormat.LONG, Locale.UK)
dateFormat.applyLocalizedPattern("yyyy-MM-dd")
dateFormat.setCalendar(cal)

if inv.hasParameter('measurement-class'):
    measurement_class = inv.getString('measurement-class')
else:
    measurement_class = 'all'

if measurement_class == 'all':
    clause = ' '
elif measurement_class == 'hh':
    clause = " and generation.pc.code = 0"
elif measurement_class == 'nhh':
    clause = " and generation.pc.code != 0"
else:
    raise UserException("I don't recognize the measurement class.")

inv.getResponse().setContentType('application/zip')
inv.getResponse().setHeader('Content-Disposition', 'filename=output.zip;')
sout = inv.getResponse().getOutputStream()
zout = ZipOutputStream(sout)
pw = PrintWriter(OutputStreamWriter(zout, 'UTF-8'))

#inv.getResponse().setContentType('text/csv')
#inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="report.csv"')
#pw = inv.getResponse().getWriter()
#pw.println('hello')
#pw.flush()

if inv.hasParameter('supply-id'):
    supply_id = inv.getLong('supply-id')
    supplies = Hiber.session().createQuery("from Supply supply where supply = :supply").setEntity('supply', Supply.getSupply(supply_id)).scroll()
else:
    supplies = Hiber.session().createQuery("select distinct generation.supply from SupplyGeneration generation where (generation.finishDate.date is null or generation.finishDate.date >= :startDate) and generation.startDate.date <= :finishDate" + clause).setTimestamp("startDate", startDate).setTimestamp("finishDate", finishDate).scroll()
    
hh_data_query = Hiber.session().createQuery("select datum.value, datum.startDate.date from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate and datum.channel.isImport = :isImport and datum.channel.isKwh = :isKwh order by datum.startDate.date").setTimestamp("startDate", startDate).setTimestamp("finishDate", finishDate).setBoolean('isImport', is_import).setBoolean('isKwh', is_kwh)

while supplies.next():
    supply = supplies.get(0)
    generation = supply.getGeneration(HhStartDate(finishDate))
    if generation == None or generation.getImportMpan() == None:
        mpanCoreStr = "NA"
    else:
        mpanCoreStr = generation.getImportMpan().getCore().toString()
    zout.putNextEntry(ZipEntry(mpanCoreStr + '_' + str(supply.getId()) + '.csv'))
    pw.print("MPAN Core,Date,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48")
    currentDate = HhStartDate.roundUp(startDate)
    hhData = hh_data_query.setEntity("supply", supply).scroll()
    datumStartDate = None
    datumValue = None
    while not currentDate.getDate().after(finishDate):
        cal.setTime(currentDate.getDate())
        if cal.get(Calendar.HOUR_OF_DAY) == 0 and cal.get(Calendar.MINUTE) == 0:
            pw.print("\r\n" + mpanCoreStr + "," + dateFormat.format(currentDate.getDate()))
        pw.print(",")
        if (datumStartDate == None or datumStartDate.before(currentDate.getDate())) and hhData.next():
            datumValue = hhData.get(0).toString()
            datumStartDate = hhData.get(1)
        if datumStartDate is not None and datumStartDate.getTime() == currentDate.getDate().getTime():
            pw.print(datumValue)
        currentDate = currentDate.getNext()
    hhData.close()
    Hiber.session().clear()
    pw.flush()
supplies.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[171]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Admin: System]]></value>
        <value><![CDATA[from java.text import DecimalFormat
from java.lang import Runtime, System, Thread
from java.io import StringWriter, InputStreamReader
from net.sf.chellow.monad import Hiber, Monad

df = DecimalFormat("###,###,###,###,##0")
runtime = Runtime.getRuntime()
source.setAttribute("free-memory", df.format(runtime.freeMemory()))
source.setAttribute("max-memory", df.format(runtime.maxMemory()))
source.setAttribute("total-memory", df.format(runtime.totalMemory()))
source.setAttribute("available-processors", str(runtime.availableProcessors()))
props = doc.createElement('properties')
source.appendChild(props)
sw = StringWriter()
System.getProperties().store(sw, None)
props.setTextContent(sw.toString())
for entry in Thread.getAllStackTraces().entrySet():
    thread_element = doc.createElement('thread')
    source.appendChild(thread_element)
    thread = entry.getKey()
    trace = ''
    for trace_item in entry.getValue():
        trace = trace + trace_item.toString() + "\r"
    thread_element.setTextContent(trace)
    thread_element.setAttribute('id', str(thread.getId()))
    thread_element.setAttribute('name', thread.getName())
    thread_element.setAttribute('status', thread.getState().toString())
db_metadata = Hiber.session().connection().getMetaData()
source.setAttribute("db-product-name", db_metadata.getDatabaseProductName())
source.setAttribute("db-product-version", db_metadata.getDatabaseProductVersion())
source.setAttribute("db-driver-name", db_metadata.getDriverName())
source.setAttribute("db-driver-version", db_metadata.getDriverVersion())
istream = InputStreamReader(Monad.getContext().getResource("/WEB-INF/VERSION").openStream(), "UTF-8")
c = istream.read()
sr = StringWriter()
while c != -1:
    sr.write(c)
    c = istream.read()
source.setAttribute("chellow-version", sr.toString())]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; Admin &gt; System</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/153/output/">
                        <xsl:value-of select="'Admin'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'System'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
<p>Chellow Version
                    <xsl:value-of
                        select="/source/@chellow-version" /></p>
                <table style="text-align: right">
                    <caption>JVM memory (bytes)</caption>
                    <tr>
                        <th>Max</th>
                        <td>
                            <xsl:value-of select="/source/@max-memory" />
                        </td>
                    </tr>
                    <tr>
                        <th>Total</th>
                        <td>
                            <xsl:value-of
                                select="/source/@total-memory" />
                        </td>
                    </tr>
                    <tr>
                        <th>Free</th>
                        <td>
                            <xsl:value-of select="/source/@free-memory" />
                        </td>
                    </tr>
                </table>
                <p>Available Processors: <xsl:value-of select="/source/@available-processors"/></p>

<br/>

<table><caption>All Live Threads</caption>
<tr><th>Id</th><th>Name</th><th>Status</th><th>Stack Trace</th>
</tr>
<xsl:for-each select="/source/thread">
<tr><td><xsl:value-of select="@id"/></td><td><xsl:value-of select="@name"/></td><td><xsl:value-of select="@status"/></td><td><pre><xsl:value-of select="."/></pre></td></tr>
</xsl:for-each>
</table>

<h4>Java System Properties</h4>

<pre><xsl:value-of select="/source/properties"/></pre>

<h4>DBMS Properties</h4>

<table>
<tr><th>Product Name</th><td><xsl:value-of select="/source/@db-product-name" /></td></tr>
<tr><th>Product Version</th><td><xsl:value-of select="/source/@db-product-version"/></td></tr>
<tr><th>Driver Name</th><td><xsl:value-of select="/source/@db-driver-name"/></td></tr>
<tr><th>Driver Version</th><td><xsl:value-of select="/source/@db-driver-version"/></td></tr>
</table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[173]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Contract Rate Script]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import RateScript

script_id = inv.getLong('rate-script-id')
script = RateScript.getRateScript(script_id)
source.appendChild(script.toXml(doc, XmlTree('contract', XmlTree('party'))))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/rate-script/hhdc-contract/@name" />
                    &gt; Rate Script
                    <xsl:value-of select="/source/rate-script/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/113/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={/source/rate-script/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/rate-script/hhdc-contract/@name" />
                    </a>
                    &gt; Rate Script
                    <xsl:value-of
                        select="concat(/source/rate-script/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/hhdc-contracts/{/source/rate-script/hhdc-contract/@id}/rate-scripts/{/source/rate-script/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Start Date</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/rate-script/hh-start-date[@label='start']/@year, '-', /source/rate-script/hh-start-date[@label='start']/@month, '-', /source/rate-script/hh-start-date[@label='start']/@day)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Finish Date</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/rate-script/hh-start-date[@label='finish']">
                                    <xsl:value-of
                                        select="concat(/source/rate-script/hh-start-date[@label='finish']/@year, '-', /source/rate-script/hh-start-date[@label='finish']/@month, '-', /source/rate-script/hh-start-date[@label='finish']/@day)" />
                                </xsl:when>
                                <xsl:otherwise>Ongoing</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                </table>

                <h2>Script</h2>

                <pre>
                    <xsl:value-of select="/source/rate-script/@script" />
                </pre>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[175]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies TRIAD Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
if cal.get(Calendar.MONTH) < Calendar.MARCH:
    cal.add(Calendar.YEAR, -1)
source.setAttribute('year', str(cal.get(Calendar.YEAR)))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/style/" />

                <title>Chellow &gt; CSV Supplies TRIAD</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Supplies TRIAD'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/41/output/">
                    <fieldset>
                        <legend>Download Supplies TRIAD CSV</legend>
                        <br/>
                        <xsl:value-of select="'For financial year ending March '"/>
                        <input name="year" value="{/source/@year}" size="4" maxlength="4"/>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                        <input type="reset" value="Reset"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[177]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplies Monthly Duration]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate, MpanCore, Site
from java.text import SimpleDateFormat, DecimalFormat
from java.lang import Math, System
from net.sf.chellow.billing import SupplierContract, NonCoreContract
from org.python.util import PythonInterpreter

year = inv.getInteger("end-year")
month = inv.getInteger("end-month")
months = inv.getInteger("months")
search_term = inv.getString('mpan-core')

if not inv.isValid():
    raise UserException()

search_term = search_term.strip()

computer = NonCoreContract.getNonCoreContract('computer')

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.clear()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.add(Calendar.MONTH, 1)
cal.set(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())
cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
start_date = HhStartDate(cal.getTime())

kwh_formatter = DecimalFormat('#0')
gbp_formatter = DecimalFormat('#0.00')

def gbp_format(gbp):
    return gbp_formatter.format(gbp)

def kwh_format(kwh):
    return kwh_formatter.format(kwh)

comterp = PythonInterpreter()
comterp.exec(computer.getChargeScript())

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()
pw.println("Supply Id,Supply Name,Source,Generator Type,Month,PC,Site Id, Site Name, Metering Type,Import MPAN Core,Imported Total kWh,Import Estimated kWh,Export MPAN Core,Export Total kWh,Export Estimated kWh")
pw.flush()

month_format = SimpleDateFormat("yyyy-MM-dd")
month_format.setCalendar(cal)

if len(search_term) == 0:
    supplies_query = Hiber.session().createQuery("select distinct generation.supply from SupplyGeneration generation where generation.startDate.date <= :finishDate and (generation.finishDate is null or generation.finishDate.date >= :startDate)")
else:
    supply = MpanCore.getMpanCore(search_term).getSupply()
    supplies_query = Hiber.session().createQuery("select distinct generation.supply from SupplyGeneration generation where generation.supply = :supply and generation.startDate.date <= :finishDate and (generation.finishDate is null or generation.finishDate.date >= :startDate)").setEntity('supply', supply)

kwh_query = Hiber.session().createQuery("select sum(datum.value) from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isKwh is true and datum.channel.isImport = :isImport and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate")

est_kwh_query = Hiber.session().createQuery("select sum(datum.value) from HhDatum datum where datum.status = 'E' and datum.channel.supplyGeneration.supply = :supply and datum.channel.isKwh is true and datum.channel.isImport = :isImport and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate")

site_query = Hiber.session().createQuery("select ssgen.site from SiteSupplyGeneration ssgen where ssgen.supplyGeneration = :supplyGeneration and ssgen.isPhysical is true")


forecast_date = comterp.get('forecast_date')()

for i in range(months):
    cal.setTime(start_date.getDate())
    cal.add(Calendar.MONTH, i)
    month_start = HhStartDate(cal.getTime())
    cal.add(Calendar.MONTH, 1)
    cal.add(Calendar.MINUTE, -30)
    month_finish = HhStartDate(cal.getTime())
    supplies = supplies_query.setTimestamp('startDate', month_start.getDate()).setTimestamp('finishDate', month_finish.getDate()).scroll()

    while supplies.next():
        supply = supplies.get(0)
        #pw.println("starting site " + str(System.currentTimeMillis() - timing))
        pw.print('"' + str(supply.getId()) + '","' + supply.getName() + '",')
        generator_type = supply.getGeneratorType()
        if generator_type is None:
            generator_type = ''
        else:
            generator_type = generator_type.getCode()

        generation = supply.getGenerations(month_start, month_finish).get(0)

        pc_code = str(generation.getPc())
        if pc_code == '00':
            metering_type = 'hh'
        elif generation.getChannels().size() > 0:
            metering_type = 'amr'
        else:
            metering_type = 'nhh'

        site = site_query.setEntity('supplyGeneration', generation).uniqueResult()

        values = [supply.source.getCode(), generator_type, month_format.format(month_finish.getDate()), pc_code, site.getCode(), site.getName(), metering_type]

        kwh_query.setEntity('supply', supply).setTimestamp('startDate', month_start.getDate()).setTimestamp('finishDate', month_finish.getDate())
        est_kwh_query.setEntity('supply', supply).setTimestamp('startDate', month_start.getDate()).setTimestamp('finishDate', month_finish.getDate())
        for polarity in [True, False]:
            mpan = generation.getMpan(polarity)
            if mpan is None:
                values.append('')
            else:
                values.append(mpan.getCore())

            kwh_query.setBoolean('isImport', polarity)
            kwh = kwh_query.uniqueResult()
            if kwh is None:
                values.append('0')
            else:
                values.append(kwh_format(kwh.doubleValue()))
            est_kwh_query.setBoolean('isImport', polarity)
            est_kwh = est_kwh_query.uniqueResult()
            if est_kwh is None:
                values.append('0')
            else:
                values.append(kwh_format(est_kwh.doubleValue()))

        for value in values:
            pw.print('"' + str(value) + '",')
        pw.println('')
        pw.flush()
        Hiber.session().clear()
    supplies.close()
    #pw.println("finishing site " + str(System.currentTimeMillis() - timing))
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[179]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Sites TRIAD Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
if cal.get(Calendar.MONTH) < Calendar.MARCH:
    cal.add(Calendar.YEAR, -1)
source.setAttribute('year', str(cal.get(Calendar.YEAR)))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/style/" />

                <title>Chellow &gt; CSV Sites TRIAD</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Sites TRIAD'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/181/output/">
                    <fieldset>
                        <legend>Download Sites TRIAD CSV</legend>
                        <br/>
                        <xsl:value-of select="'For financial year ending March '"/>
                        <input name="year" value="{/source/@year}" size="4" maxlength="4"/>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                        <input type="reset" value="Reset"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[181]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Sites TRIAD]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import HhStartDate, SupplyGeneration, Supply
from java.util import Calendar
from net.sf.chellow.billing import NonCoreContract, Dso

computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
year = inv.getInteger('year')
if not inv.isValid():
    raise UserException()

pw = inv.getResponse().getWriter()

cal = MonadDate.getCalendar()
cal.clear()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, Calendar.APRIL)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MINUTE, -30)
march_finish = HhStartDate(cal.getTime())

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1)
march_start = HhStartDate(cal.getTime())

triad_contract = NonCoreContract.getNonCoreContract('TRIAD')

pw.println("Site Code, Site Name, Displaced TRIAD 1 Date, Displaced TRIAD 1 MSP kW, Displaced TRIAD LAF, Displaced TRIAD 1 GSP kW, Displaced TRIAD 2 Date, Displaced TRIAD 2 MSP kW, Displaced TRIAD 2 LAF, Displaced TRIAD 2 GSP kW, Displaced TRIAD 3 Date, Displaced TRIAD 3 MSP kW, Displaced TRIAD 3 LAF, Displaced TRIAD 3 GSP kW, Displaced GSP kW, Displaced Rate GBP / kW, GBP")
pw.flush()

forecast_date = comterp.get('forecast_date')()

if inv.hasParameter('site-id'):
    site_id = inv.getLong('site-id')
    site_query = Hiber.session().createQuery("from Site site where site = :site").setEntity('site', Site.getSite(site_id))
else:
    site_query = Hiber.session().createQuery("select distinct ssgen.site from SiteSupplyGeneration ssgen where ssgen.supplyGeneration.supply.source.code in ('gen', 'gen-net') and ssgen.supplyGeneration.startDate.date <= :marchFinish and (ssgen.supplyGeneration.finishDate is null or ssgen.supplyGeneration.finishDate.date >= :marchStart) order by ssgen.site.code").setTimestamp('marchFinish', march_finish.getDate()).setTimestamp('marchStart', march_start.getDate())

sites = site_query.scroll()
while sites.next():
    site = sites.get(0)
    for site_group in site.groups(march_start, march_finish, True):
        if site_group.getFrom().after(march_start):
            chunk_start = site_group.getStartDate()
        else:
            chunk_start = march_start
        if not site_group.getTo().before(march_finish):
            chunk_finish = march_finish
        else:
            continue

        pw.print('"' + site.getCode() + '","' + site.getName() + '"')

        displaced_mpan = comterp.get('displaced_mpan')(site_group, chunk_start, chunk_finish)
        if displaced_mpan is None:
            continue

        site_ds = comterp.get('site_source')(site, chunk_start, chunk_finish, forecast_date, comterp, pw)
        site_ds.init_from_mpan(displaced_mpan)

        dso_contract = comterp.get('get_dso_contract')(site_ds.dso_code, chunk_finish, pw)
        bill = {}
        site_ds.contract_function(triad_contract, 'triad')(bill, dso_contract, chunk_start, chunk_finish, site_ds)
        values = []
        for i in range(3):
            triad_prefix = 'triad-actual-' + str(i)
            for suffix in ['-date', '-msp-kw', '-laf', '-gsp-kw']:
                values.append(bill[triad_prefix + suffix])

        values += [bill['triad-actual-' + suf] for suf in ['gsp-kw', 'rate', 'gbp']]

        for value in values:
            pw.print("," + str(value))
        pw.println('')
        pw.flush()
    Hiber().session().clear()
sites.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[183]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Sites HH Data]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.lang import System
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate
from java.util.zip import ZipOutputStream, ZipEntry
from java.io import OutputStreamWriter, PrintWriter
from java.text import SimpleDateFormat

year = inv.getInteger("year")
month = inv.getInteger("month")
months = inv.getInteger("months")

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
start_date = HhStartDate(cal.getTime())

inv.getResponse().setContentType('application/zip')
inv.getResponse().setHeader('Content-Disposition', 'filename=output.zip;')
sout = inv.getResponse().getOutputStream()
zout = ZipOutputStream(sout)
pw = PrintWriter(OutputStreamWriter(zout, 'UTF-8'))

#inv.getResponse().setContentType("text/csv")
#inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
#pw = inv.getResponse().getWriter()

date_format = SimpleDateFormat("yyyy-MM-dd")
date_format.setCalendar(cal)
title_format = SimpleDateFormat("yyyy-MM-dd'T'hhmm'Z'")
title_format.setCalendar(cal)

sites = Hiber.session().createQuery("from Site site order by site.code").scroll()
#sites.last()
#sites.previous()
while sites.next():
    site = sites.get(0)
    for group in site.groups(start_date, finish_date, True):
        hh_date = start_date
        zout.putNextEntry(ZipEntry(site.getCode() + '_' + title_format.format(group.getFrom().getDate()) + '.csv'))
        pw.print("Site Code, Site Name, Associated Site Codes, Sources, Generator Types, From, To, Type,Date,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48")
        pw.flush()
        associates = ''
        group_sites = group.getSites()
        for i in range(1, len(group_sites)):
            associates = associates + group_sites[i].getCode() + ' '

        sources = []
        gen_types = []
        for a_supply in group.getSupplies():
            source = a_supply.getSource().getCode()
            if source not in sources:
                sources.append(source)
            gen_type = a_supply.getGeneratorType()
            if gen_type is not None:
                gen_type = gen_type.getCode()
                if gen_type not in gen_types:
                    gen_types.append(gen_type)
        sources.sort()
        sources_str = ''
        for source in sources:
            sources_str = sources_str + source + ' '
        gen_types.sort()
        gen_types_str = ''
        for gen_type in gen_types:
            gen_types_str = gen_types_str + gen_type + ''
        
        map = group.hhData()
        import_from_net = map.get('import-net')
        export_to_net = map.get('export-net')
        import_from_gen = map.get('import-gen')
        export_to_gen = map.get('export-gen')
        for i in range(len(import_from_net)):
            cal.setTime(hh_date.getDate())
            if cal.get(Calendar.HOUR_OF_DAY) == 0 and cal.get(Calendar.MINUTE) == 0:
                pw.print("\r\n" + site.getCode() + ',' + site.getName() + ',' + associates + ',' + sources_str + ',' + gen_types_str + ',' + group.getFrom().toString() + ',' + group.getTo().toString() + ',used,' + date_format.format(hh_date.getDate()))
            exported_kwh = export_to_net[i]
            imported_kwh = import_from_net[i]
            generated_kwh = import_from_gen[i]
            parasitic_kwh = export_to_gen[i]
            displaced_kwh = generated_kwh - exported_kwh - parasitic_kwh
            used_kwh = imported_kwh + displaced_kwh
            pw.print(',' + str(round(used_kwh, 2)))
            hh_date = hh_date.getNext()
        pw.flush()
    Hiber.session().clear()
sites.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[185]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MOP Contracts]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

contracts_element = doc.createElement('contracts')
source.appendChild(contracts_element)
for contract in Hiber.session().createQuery("from MopContract contract order by contract.startRateScript.startDate.date").list():
    contract_element = contract.toXml(doc, XmlTree('party'))
    contracts_element.appendChild(contract_element)
    start_rate_script = contract.getStartRateScript()
    start_rate_script.setLabel('start')
    contract_element.appendChild(start_rate_script.toXml(doc))
    finish_rate_script = contract.getFinishRateScript()
    finish_rate_script.setLabel('finish')
    contract_element.appendChild(finish_rate_script.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; MOP Contracts
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'MOP Contracts ['" />
                    <a
                        href="{/source/request/@context-path}/mop-contracts/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Start Date</th>
                            <th>Finish Date</th>
                            <th>MOP</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/contracts/mop-contract">
                            <tr>
                                <td>
<a href="{/source/request/@context-path}/reports/107/output/?mop-contract-id={@id}">
                                    <xsl:value-of select="@name" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(rate-script[@label='start']/hh-start-date[@label='start']/@year, '-', rate-script[@label='start']/hh-start-date[@label='start']/@month, '-', rate-script[@label='start']/hh-start-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="rate-script[@label='finish']/hh-start-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(rate-script[@label='finish']/hh-start-date[@label='finish']/@year, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@month, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/47/output/?provider-id={provider/@id}">
                                        <xsl:value-of
                                            select="provider/@name" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[187]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies Patched HH Data]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from java.util import Calendar, GregorianCalendar, TimeZone, Locale
from java.text import DateFormat
from java.util.zip import ZipOutputStream, ZipEntry
from java.io import OutputStreamWriter, PrintWriter
from org.hibernate import CacheMode, ScrollMode
from net.sf.chellow.physical import HhStartDate
from java.lang import System, Long
from net.sf.chellow.physical import Channel

end_year = inv.getInteger('end-year')
end_month = inv.getInteger('end-month')
months = inv.getInteger('months')
measurement_class = inv.getString('measurement-class')
if not inv.isValid():
    raise UserException()
cal = MonadDate.getCalendar()
cal.clear()
cal.set(Calendar.YEAR, end_year)
cal.set(Calendar.MONTH, end_month - 1)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finishDate = cal.getTime()

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
startDate = cal.getTime()

dateFormat = DateFormat.getDateInstance(DateFormat.LONG, Locale.UK)
dateFormat.applyLocalizedPattern("yyyy-MM-dd")
dateFormat.setCalendar(cal)

if measurement_class == 'all':
    clause = ''
elif measurement_class == 'hh':
    clause = "and mpan.pc.code = 0"
elif measurement_class == 'nhh':
    clause = "and mpan.pc.code != 0"
else:
    raise UserException("I don't recognize the measurement class.")

inv.getResponse().setContentType('application/zip')
inv.getResponse().setHeader('Content-Disposition', 'filename=output.zip;')
sout = inv.getResponse().getOutputStream()
zout = ZipOutputStream(sout)
pw = PrintWriter(OutputStreamWriter(zout, 'UTF-8'))

#inv.getResponse().setContentType("text/csv")
#inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
#pw = inv.getResponse().getWriter()

summaries = []

supplies = Hiber.session().createQuery("select distinct generation.supply, generation.supply.id from SupplyGeneration generation join generation.mpans mpan where (generation.finishDate.date is null or generation.finishDate.date > :finishDate) " + clause + " order by generation.supply.id").setTimestamp("finishDate", finishDate).scroll()
#channels.last()
#channels.previous()
while supplies.next():
    supply = supplies.get(0)
    generation = supply.getGeneration(HhStartDate(finishDate))
    if generation == None or generation.getImportMpan() == None:
        mpanCoreStr = "NA"
    else:
        mpanCoreStr = generation.getImportMpan().getCore().toString()
    zout.putNextEntry(ZipEntry(mpanCoreStr + '_' + str(supply.getId()) + '.csv'))
    pw.print("MPAN Core,Date,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48")
    currentDate = HhStartDate.roundUp(startDate)
    hhData = Hiber.session().createQuery("select datum.value, datum.startDate.date from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate and datum.channel.isImport is true and datum.channel.isKwh is true order by datum.startDate.date").setEntity("supply", supply).setTimestamp("startDate", startDate).setTimestamp("finishDate", finishDate).list()
    day_kwh = 0
    day_count = 0
    night_kwh = 0
    night_count = 0
    for row in hhData:
        datum_value = row[0].doubleValue()
        datum_end_date = row[1]
        cal.setTime(datum_end_date)
        decimal_hour = cal.get(Calendar.HOUR_OF_DAY) + cal.get(Calendar.MINUTE) / 60
        if decimal_hour > 0 and decimal_hour < 7.5:
            night_kwh = night_kwh + datum_value
            night_count = night_count + 1
        else:
            day_kwh = day_kwh + datum_value
            day_count = day_count + 1
    if day_count != 0:
        av_day_kwh = day_kwh / day_count
    else:
        av_day_kwh = 0
    if night_count != 0:
        av_night_kwh = night_kwh / night_count
    else:
        av_night_kwh = 0
    datumStartDate = None
    datumValue = None
    hh_data_count = 0
    total_kwh = 0
    while not currentDate.getDate().after(finishDate):
        cal.setTime(currentDate.getDate())
        if cal.get(Calendar.HOUR_OF_DAY) == 0 and cal.get(Calendar.MINUTE) == 30:
            pw.print("\r\n" + mpanCoreStr + "," + dateFormat.format(currentDate.getDate()))
        pw.print(",")
        if (datumStartDate == None or datumStartDate.before(currentDate.getDate())) and hh_data_count < len(hhData):
            row = hhData[hh_data_count]
            hh_data_count = hh_data_count + 1
            datumValue = row[0].doubleValue()
            datumStartDate = row[1]
        if datumStartDate is not None and datumStartDate.getTime() == currentDate.getDate().getTime():
            hh_val = datumValue
        else:
            decimal_hour = cal.get(Calendar.HOUR_OF_DAY) + cal.get(Calendar.MINUTE) / 60
            if decimal_hour > 0 and decimal_hour < 7.5:
                hh_val = av_night_kwh
            else:
                hh_val = av_day_kwh
        total_kwh = total_kwh + round(hh_val, 1)
        pw.print(str(round(hh_val, 1)))
        currentDate = currentDate.getNext()
    Hiber.session().clear()
    pw.flush()
    summaries.append(mpanCoreStr + ',' + str(round(total_kwh, 1)))
supplies.close()
zout.putNextEntry(ZipEntry('summary.csv'))
pw.println('MPAN Core,kWh')
for summary in summaries:
    pw.println(summary)
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[189]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies Patched HH Data Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = MonadDate.getCalendar()
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; CSV Patched HH Data</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Patched HH Data'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/187/output/">
                    <fieldset>
                        <legend>Download HH Data</legend>
<br/>
<xsl:value-of select="'Measurement Class '"/><select name="measurement-class">
                        <option value="all">
                                    All
                        </option>
                        <option value="hh">
                                    HH
                        </option>
                        <option value="nhh">
                                    NHH
                        </option>
                        </select>
<br/>
<br/>
<p>
                        <xsl:value-of select="'For '"/>
                        <input name="months" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='months']">
                                <xsl:value-of select="/source/request/parameter[@name='months']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
                        <xsl:value-of select="' month(s) finishing at the end of '"/>
<input name="end-year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                    </p>
                    <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[191]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MOP Contract Batches]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import MopContract

contract_id = inv.getLong('mop-contract-id')
contract = MopContract.getMopContract(contract_id)
batches_element = doc.createElement('batches')
source.appendChild(batches_element)
batches_element.appendChild(contract.toXml(doc, XmlTree('party')))
source.appendChild(batches_element)
for batch in Hiber.session().createQuery("from Batch batch where batch.contract = :contract order by batch.reference").setEntity("contract", contract).list():
    batches_element.appendChild(batch.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; MOP Contracts &gt;
                    <xsl:value-of
                        select="/source/batches/mop-contract/@name" />
                    &gt; Batches
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/185/output/?mop-id={/source/batches/mop-contract/@id}">
                        <xsl:value-of select="'MOP Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/107/output/?mop-contract-id={/source/batches/mop-contract/@id}">
                        <xsl:value-of
                            select="/source/batches/mop-contract/@name" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Batches ['" />
                    <a
                        href="{/source/request/@context-path}/mop-contracts/{/source/batches/mop-contract/@id}/batches/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>Batches</caption>
                    <thead>
                        <tr>
                            <th>Reference</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/batches/batch">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/193/output/?batch-id={@id}">
                                        <xsl:value-of select="@reference" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[193]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MOP Contract Batch]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import Batch

batch_id = inv.getLong('batch-id')
batch = Batch.getBatch(batch_id)
batch_element = batch.toXml(doc, XmlTree('contract', XmlTree('party')))
source.appendChild(batch_element)
for bill in Hiber.session().createQuery("from Bill bill where bill.batch = :batch order by bill.reference").setEntity("batch", batch).list():
    batch_element.appendChild(bill.toXml(doc, XmlTree("supply")))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Home &gt; MOP Contracts &gt;
                    <xsl:value-of
                        select="/source/batch/mop-contract/@name" />
                    &gt; Batches &gt;
                    <xsl:value-of select="/source/batch/@reference" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/185/output/">
                        <xsl:value-of select="'MOP Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/107/output/?mop-contract-id={/source/batch/mop-contract/@id}">
                        <xsl:value-of
                            select="/source/batch/mop-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/191/output/?mop-contract-id={/source/batch/mop-contract/@id}">
                        <xsl:value-of select="'Batches'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/batch/@reference, ' [')" />
                    <a
                        href="{/source/request/@context-path}/mop-contracts/{/source/batch/mop-contract/@id}/batches/{/source/batch/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                  <tr>
                    <th>Reference</th>
                    <td><xsl:value-of select="/source/batch/@reference"/></td>
                  </tr>
                </table>
                <br/>
                <table>
                    <caption>Bills</caption>
                    <thead>
                        <tr>
                            <th>Reference</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Net</th>
                            <th>VAT</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/batch/bill">
                            <tr>
                                <td>
<a
                                        href="{/source/request/@context-path}/reports/7/output/?supply-id={supply/@id}">
                                    <xsl:value-of select="@reference" />
 </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day, ' ', hh-start-date[@label='start']/@hour, ':', hh-start-date[@label='start']/@minute)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day, ' ', hh-start-date[@label='finish']/@hour, ':', hh-start-date[@label='finish']/@minute)" />
                                </td>
                                <td>
                                    <xsl:value-of select="@net" />
                                </td>
                                <td>
                                    <xsl:value-of select="@vat" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@is-paid='true'">
                                            Paid
                                        </xsl:when>
                                        <xsl:when test="@is-paid='false'">
                                            Rejected
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Pending
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[195]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[ECOES Comparison]]></value>
        <value><![CDATA[from org.apache.commons.httpclient import HttpClient
from net.sf.chellow.monad import Hiber, UserException
from java.lang import System, Integer, String
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate, Configuration
from net.sf.chellow.billing import Batch, NonCoreContract
from org.python.util import PythonInterpreter
from org.apache.commons.httpclient import HttpClient, NameValuePair, UsernamePasswordCredentials
from org.apache.commons.httpclient.auth import AuthScope
from org.apache.commons.httpclient.methods import GetMethod, PostMethod
from java.util import Properties
from java.io import StringReader


inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()

config = Configuration.getConfiguration()
properties = Properties()
properties.load(StringReader(config.getProperties()))

proxy_host = properties.get('proxy.host')
proxy_port = properties.get('proxy.port')
proxy_user_name = properties.get('proxy.user.name')
proxy_password = properties.get('proxy.password')
user_name = properties.get('ecoes.user.name')
password = properties.get('ecoes.password')

client = HttpClient()

if proxy_host is not None:
    client.getParams().setAuthenticationPreemptive(True)
    client.getHostConfiguration().setProxy(proxy_host, Integer.parseInt(proxy_port))
    proxy_creds = UsernamePasswordCredentials(proxy_user_name, proxy_password)
    client.getState().setProxyCredentials(AuthScope.ANY, proxy_creds)

get_method = GetMethod('http://www.ecoes.co.uk/')
pw.println('about to look at homepage')
pw.flush()
response_code = client.executeMethod(get_method)
pw.println('response code ' + str(response_code))
get_method.releaseConnection()

pw.println('user name ' + user_name + ' password ' + password + ' proxy user ' + proxy_user_name + ' proxy password ' + proxy_password)
pw.flush()
post_method = PostMethod("http://www.ecoes.co.uk/login.asp")
data = [NameValuePair("userName", user_name), NameValuePair("password", password), NameValuePair('beenHereBefore', '1'), NameValuePair('forceLogout', '0')]

post_method.setRequestBody(data)
response_code = client.executeMethod(post_method)
#page_is = post_method.getResponseAsStream()
pw.println('response code ' + str(response_code))
headers = post_method.getResponseHeaders()
for header in headers:
    pw.println(header)
response_body = post_method.getResponseBody()
pw.println(String(response_body))
post_method.releaseConnection()

#result = urllib2.urlopen('http://www.ecoes.co.uk/saveportfolioMpans.asp?guid=')

pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[197]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CoP]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Cop

cop_id = inv.getLong('cop-id')
cop = Cop.getCop(cop_id)
source.appendChild(cop.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; CoPs &gt;
                    <xsl:value-of
                        select="/source/cop/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/85/output/">
                        <xsl:value-of select="'CoPs'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/cop/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/cop/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/cop/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[199]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Bill Types]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

types_element = doc.createElement('bill-types')
source.appendChild(types_element)
for type in Hiber.session().createQuery("from BillType type order by type.code").list():
    types_element.appendChild(type.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Bill Types
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Bill Types'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/bill-types/bill-type">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/201/output/?bill-type-id={@id}">
                                        <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[201]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Bill Type]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import BillType

bill_type_id = inv.getLong('bill-type-id')
bill_type = BillType.getBillType(bill_type_id)
source.appendChild(bill_type.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Home &gt; Bill Types &gt;
                    <xsl:value-of
                        select="/source/bill-type/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/85/output/">
                        <xsl:value-of select="'Bill Types'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/bill-type/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/bill-type/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/bill-type/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
</csv>
