<?xml version="1.0"?>
<csv>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[1]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Home]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="html" encoding="US-ASCII"
      doctype-public="-//W3C//DTD HTML 4.01//EN"
      doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
  <xsl:template match="/">
    <html>
      <head>
        <link rel="stylesheet" type="text/css"
      href="{/source/request/@context-path}/reports/19/output/" />
    <title>
      Chellow
    </title>
      </head>
      <body>
        <p>
          <xsl:value-of select="'Chellow'" />
    </p>
        <xsl:if test="//message">
          <ul>
            <xsl:for-each select="//message">
              <li>
                <xsl:value-of select="@description" />
              </li>
        </xsl:for-each>
          </ul>
        </xsl:if>
        <ul>
          <li>
            <a href="{/source/request/@context-path}/reports/3/output/">Sites</a>
          </li>
          <li>
            <a href="{/source/request/@context-path}/reports/99/output/">
              Supplies
            </a>
          </li>
          <li>Contracts
            <ul>
              <li><a href="{/source/request/@context-path}/reports/113/output/">HHDC
            </a>
              </li>
              <li><a href="{/source/request/@context-path}/reports/185/output/">MOP
            </a>
              </li>
              <li><a href="{/source/request/@context-path}/reports/75/output/">Supplier
                  </a>
              </li>
            </ul>
          </li>
          <li><a href="{/source/request/@context-path}/reports/39/output/">
              Site Snags</a></li>
          <li>
      <a href="http://chellow.wikispaces.com/" target="_blank">Docs</a>
      </li>
        </ul>
        <table><caption>CSV Downloads</caption>
          <tr><th></th><th>Supplies</th><th>Sites</th></tr>
          <tr><th>Snapshot</th><td><a href="{/source/request/@context-path}/reports/157/output/">Download</a></td><td></td></tr>
          <tr>
            <th>Duration</th>
            <td><a href="{/source/request/@context-path}/reports/147/output/">Download</a></td>
            <td><a href="{/source/request/@context-path}/reports/57/output/">Download</a></td>
          </tr>
          <tr>
            <th>Monthly Duration</th>
            <td><a href="{/source/request/@context-path}/reports/155/output/">Download</a></td>
            <td><a href="{/source/request/@context-path}/reports/159/output/">Download</a></td>
          </tr>
          <tr><th>HH Data</th><td><a href="{/source/request/@context-path}/reports/167/output/">Download</a></td><td><a href="{/source/request/@context-path}/reports/145/output/">Download
            </a></td>
          </tr>
          <tr><th>Patched HH Data</th><td><a href="{/source/request/@context-path}/reports/189/output/">Download</a></td><td></td>
          </tr>
          <tr><th>TRIAD</th><td><a href="{/source/request/@context-path}/reports/175/output/">Download</a></td><td><a href="{/source/request/@context-path}/reports/179/output/">Download</a></td>
          </tr>
          <tr><th>CRC</th><td><a href="{/source/request/@context-path}/reports/209/output/">Download</a></td><td></td>
          </tr>
          <tr><th>Register Reads</th><td><a href="{/source/request/@context-path}/reports/217/output/">Download</a></td><td></td>
          </tr>
          <tr><th>Bills</th><td><a href="{/source/request/@context-path}/reports/153/output/">Download</a></td><td></td>
          </tr>

        </table>
        <h3>Industry Info</h3>
        <ul>
          <li>
            <a href="{/source/request/@context-path}/reports/71/output/">
            Market Participants
            </a>
          </li>
          <li>
            <a href="{/source/request/@context-path}/reports/121/output/">
              Market Roles
            </a>
          </li>
          <li>Parties
              <ul>
              <li>
              <a href="{/source/request/@context-path}/reports/137/output/">DNOs
              </a>
              </li>
              <li><a href="{/source/request/@context-path}/reports/45/output/">
                Providers
                </a>
              </li>
              </ul>
          </li>
          <li><a href="{/source/request/@context-path}/reports/53/output/">
            Profile Classes
            </a>
          </li>
          <li>
          <a
             href="{/source/request/@context-path}/reports/61/output/">
    Meter Timeswitch Classes
            </a>
                    </li>
                    <li>
                        <a
    href="{/source/request/@context-path}/reports/129/output/">
                            Meter Types
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/133/output/">
                            <xsl:value-of select="'Meter Payment Types'"/>
                        </a>
                    </li>
                    <li>
                        <a
    href="{/source/request/@context-path}/reports/95/output/">
                            TPRs
                        </a>
                    </li>
                    <li>
<a href="{/source/request/@context-path}/reports/125/output/">
                            SSCs
                        </a>
                    </li>
                    <li>
                        <a
    href="{/source/request/@context-path}/reports/43/output/">
    GSP Groups
                        </a>
                    </li>
                    <li>
                        <a
    href="{/source/request/@context-path}/reports/85/output/">
    CoPs
                        </a>
                    </li>
                    <li>
                        <a
    href="{/source/request/@context-path}/reports/199/output/">
    Bill Types
                        </a>
                    </li>
                    <li>
                        <a
    href="{/source/request/@context-path}/reports/141/output/">
    Read Types
                        </a>
                    </li>
                    <li>
                        <a href="{/source/request/@context-path}/sources/">
                            Sources
                        </a>
                    </li>
                    <li>
                        <a href="{/source/request/@context-path}/generator-types/">
                            Generator Types
                        </a>
                    </li>
                </ul>

    <h3>For Editors</h3>
    <ul>

                              <li>
                        <a href="{/source/request/@context-path}/non-core-contracts/">
                            Non-core Contracts
                        </a>
                    </li>
                    <li>
                        <a href="{/source/request/@context-path}/reports/">
                            Reports
                        </a>
                    </li>
                    <li>General Import / Export
                        <ul>
                        <li><a href="{/source/request/@context-path}/general-imports/">Import (CSV and XML)</a></li>
                        <li><a href="{/source/request/@context-path}/reports/151/output/">Export (XML)</a></li>
                        </ul>
                    </li>
                    <li>
                        <a href="{/source/request/@context-path}/users/">
                            Users
                        </a>
                        <ul>
                            <li>
                                <a href="{/source/request/@context-path}/users/me/">
                                    Me
                                </a>
                            </li>
                        </ul>
                    </li>
                    <li>
                        <a href="{/source/request/@context-path}/user-roles/">
                            User Roles
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/configuration/">
                            Configuration
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/165/output/">DB Consistency Check
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/171/output/">System</a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/195/output/">Comparison against ECOES</a>
                    </li>
                    <li>Importers
                    <ul>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/221/output/">System Price Importer</a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/223/output/">TLM Importer</a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/225/output/">RCRC Importer</a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/227/output/">BSUoS Importer</a>
                    </li>
                    </ul>
                    </li>
                </ul>
      </body>
    </html>
  </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[3]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Sites]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber
from net.sf.chellow.monad.types import MonadUri

if inv.hasParameter('search-pattern'):
    search_pattern = inv.getString('search-pattern').strip()
    sites = Hiber.session().createQuery("from Site site where lower(site.code || ' ' || site.name) like '%' || lower(:searchPattern) || '%' order by site.code").setString("searchPattern", search_pattern).setMaxResults(50).list()
    if len(sites) == 1:
        inv.sendTemporaryRedirect("/reports/5/output/?site-id=" + str(sites[0].getId()))
    else:
        for site in sites:
            source.appendChild(site.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Sites
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Sites ['" />
                    <a
                        href="{/source/request/@context-path}/sites/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>

                <form name="siteselection" action=".">
                    <fieldset>
                        <input name="search-pattern"
                            value="{/source/request/parameter[@name='search-pattern']/value}" 
tabindex="1" />
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Search" />
                    </fieldset>
                </form>
                <xsl:choose>
                    <xsl:when test="/source/site">
                        <p>
                            Only the first 50 sites of the search
                            results are shown.
                        </p>
                        <ul>
                            <xsl:for-each select="/source/site">
                                <li>
                                    <a
                                        href="{/source/request/@context-path}/reports/5/output/?site-id={@id}">
                                        <xsl:value-of
                                            select="concat(@code, ' ', @name)" />
                                    </a>
                                </li>
                            </xsl:for-each>
                        </ul>
                    </xsl:when>
                    <xsl:when
                        test="/source/request/parameter[@name='search-pattern']">
                        <p>No sites matched your search</p>
                    </xsl:when>
                </xsl:choose>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[5]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.monad.types import MonadDate
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date, Properties
from net.sf.chellow.physical import Site, HhStartDate, Supply, Configuration
from java.lang import Long
from java.io import StringReader
from net.sf.chellow.ui import Report

site_id = inv.getLong("site-id")
if not inv.isValid():
    raise UserException()
site = Site.getSite(site_id)
site_element = site.toXml(doc)
source.appendChild(site_element)

prev_supply_id = None
prev_start_date = None
generation_group = None
generation_groups_time = {}

debug_str = ''

for generation in Hiber.session().createQuery("select siteSupplyGeneration.supplyGeneration from SiteSupplyGeneration siteSupplyGeneration where siteSupplyGeneration.site = :site order by siteSupplyGeneration.supplyGeneration.supply.id, siteSupplyGeneration.supplyGeneration.startDate.date desc").setEntity('site', site).list():
    supply = generation.getSupply()
    generation_finish_date = generation.getFinishDate()
    if prev_supply_id is None or prev_supply_id != supply.getId() or generation_finish_date is None or not generation_finish_date.getNext().equals(prev_start_date):
        if generation_finish_date is None:
            key = Long.MAX_VALUE
        else:
            key = generation_finish_date.getDate().getTime()
        generation_group = []
        generation_groups_id = generation_groups_time.setdefault(key, {})
        generation_group = generation_groups_id.setdefault(supply.getId(), [])
    prev_supply_id = supply.getId()
    prev_start_date = generation.getStartDate()
    generation_group.append(generation)


time_keys = generation_groups_time.keys()
time_keys.sort(None, None, True)
for time_key in time_keys:
    generation_groups_id = generation_groups_time[time_key]
    id_keys = generation_groups_id.keys()
    id_keys.sort()
    for id_key in id_keys:
        generation_group = generation_groups_id[id_key]
        first_generation = generation_group[0]
        generation_group_element = first_generation.getSupply().toXml(doc, XmlTree('source').put('generatorType'))
        site_element.appendChild(generation_group_element)
        for generation in generation_group:
            generation_group_element.appendChild(generation.toXml(doc, XmlTree("mpans", XmlTree("core", XmlTree('dno')).put('llfc')).put("siteSupplyGenerations", XmlTree('site'))))


now = HhStartDate.roundDown(Date())

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.setTime(now.getDate())
cal.add(Calendar.MONTH, -1)
last_month = MonadDate(cal.getTime())
last_month.setLabel('last-month')
source.appendChild(last_month.toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))

cal.setTime(now.getDate())
cal.add(Calendar.DAY_OF_MONTH, -1)
yesterday = MonadDate(cal.getTime())
yesterday.setLabel('yesterday')
source.appendChild(yesterday.toXml(doc))

group_element = doc.createElement('group')
source.appendChild(group_element)
for group_site in site.groups(now, now, False)[0].getSites():
    if group_site.getId() != site.getId():
        group_element.appendChild(group_site.toXml(doc))
source.setAttribute('debug', debug_str)

config = Configuration.getConfiguration()
properties = Properties()
properties.load(StringReader(config.getProperties()))

for key in properties.propertyNames():
    if key.startswith('site.report.'):
        site_report_id = properties.get(key)
        if site_report_id is not None:
            report = Report.getReport(int(site_report_id))
            source.appendChild(report.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
  <xsl:template match="/">
    <html>
      <head>
        <link rel="stylesheet" type="text/css" href="{/source/request/@context-path}/reports/19/output/" />
          <title>
            Chellow &gt; Sites &gt;
              <xsl:value-of select="/source/site/@name" />
          </title>
      </head>
      <body>
        <p>
          <a href="{/source/request/@context-path}/reports/1/output/"><xsl:value-of select="'Chellow'" /></a> &gt;
          <a href="{/source/request/@context-path}/reports/3/output/"><xsl:value-of select="'Sites'" /></a>
          &gt; <xsl:value-of select="concat(/source/site/@name, ' [')" />
          <a href="{/source/request/@context-path}/sites/{/source/site/@id}/">
          <xsl:value-of select="'edit'" /></a>
          <xsl:value-of select="']'" />
        </p>
<xsl:value-of select="/source/@debug"/>
    <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/site/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Name</th>
                        <td>
                            <xsl:value-of select="/source/site/@name" />
                        </td>
                    </tr>
                  <xsl:if test="/source/report">
                  <tr>
                    <th>Custom Reports</th>
                    <td>
                        <ul>
                        <xsl:for-each select="/source/report">
                        <li><a
                        href="{/source/request/@context-path}/reports/{@id}/output/?site-id={/source/site/@id}">
<xsl:value-of select="@name"/></a></li>
                        </xsl:for-each>
                        </ul>
                    </td>
                  </tr>
                  </xsl:if>
                </table>
                <br/>
                <xsl:if test="/source/group/site">
                <table><caption>Other sites in this group</caption>
                <tr><th>Code</th><th>Name</th></tr>
                <xsl:for-each select="/source/group/site">
                  <tr><td><a href="{/source/request/@context-path}/reports/5/output/?site-id={@id}"><xsl:value-of select="@code" /></a></td><td><xsl:value-of select="@name" /></td></tr>
                </xsl:for-each>
                </table>
                </xsl:if>
                <br/>
                <table>
                    <caption>Supplies that power this site</caption>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Source</th>
                            <th>Generator Type</th>
                            <th>Import MPAN core</th>
                            <th>Export MPAN core</th>
                            <th>Physical Location</th>
                            <th>Also Supplies</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/site/supply">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/7/output/?supply-id={@id}">
                                        <xsl:value-of select="@name" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(supply-generation[last()]/hh-start-date[@label='start']/@year, '-', supply-generation[last()]/hh-start-date[@label='start']/@month, '-', supply-generation[last()]/hh-start-date[@label='start']/@day)" />
                                </td>
                                <td>
<xsl:choose>
<xsl:when test="supply-generation[1]/hh-start-date[@label='finish']">
                                    <xsl:value-of
                                        select="concat(supply-generation/hh-start-date[@label='finish']/@year, '-', supply-generation/hh-start-date[@label='finish']/@month, '-', supply-generation/hh-start-date[@label='finish']/@day)" />
</xsl:when>
<xsl:otherwise>
Ongoing
</xsl:otherwise>
</xsl:choose>
</td>
                                <td>
                                    <xsl:value-of select="source/@code" />
                                </td>
                                <td>
                                    <xsl:value-of select="generator-type/@code" />
                                </td>
                                <td>
                                    <xsl:if
                                        test="supply-generation/mpan[llfc/@is-import='true']"><xsl:value-of
 select="supply-generation/mpan[llfc/@is-import='true']/mpan-core/@core" />
                                     </xsl:if>
                                </td>
                                <td>
                                    <xsl:if
                                        test="supply-generation/mpan[llfc/@is-import='false']">
                                        <xsl:value-of
                                            select="supply-generation/mpan[llfc/@is-import='false']/mpan-core/@core" />
                                    </xsl:if>
                                </td>
                                <td>
                                  <xsl:choose>
                                  <xsl:when test="/source/site/@id=supply-generation[position()=1]/site-supply-generation[@is-physical='true']/site/@id">
                                  this site
                                  </xsl:when>
                                  <xsl:otherwise>
<a href="{/source/request/@context-path}/reports/5/output/?site-id={supply-generation/site-supply-generation[@is-physical]/site/@id}"><xsl:value-of select="supply-generation[position()=1]/site-supply-generation[@is-physical='true']/site/@code"/></a>
                                  </xsl:otherwise>
                                  </xsl:choose>                  
                                </td>
                                <td>
                                  <xsl:for-each select="supply-generation[position()=1]/site-supply-generation[@is-physical='false' and site/@id != /source/site/@id]/site">
<a href="{/source/request/@context-path}/reports/5/output/?site-id={@id}"><xsl:value-of select="@code"/></a>
                                  </xsl:for-each>                  
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
      <ul>
        <li><a href="{/source/request/@context-path}/reports/9/output/?site-id={/source/site/@id}&amp;months=1&amp;finish-year={/source/date[@label = 'yesterday']/@year}&amp;finish-month={/source/date[@label = 'yesterday']/@month}"><xsl:value-of select="'Graph of site usage'" /></a>
         </li>
         <li><a href="{/source/request/@context-path}/reports/11/output/?site-id={/source/site/@id}&amp;months=1&amp;finish-year={/source/date[@label = 'yesterday']/@year}&amp;finish-month={/source/date[@label = 'yesterday']/@month}">
         <xsl:value-of select="'Generation Graphs'" />
                        </a>
          </li>
          <li><a href="{/source/request/@context-path}/reports/13/output/?site-id={/source/site/@id}">
<xsl:value-of select="'Table of site level monthly kWh, MD kWh etc.'" /></a>
          </li>
          <li>
        <a href="{/source/request/@context-path}/reports/25/output/?site-code={/source/site/@code}&amp;year={/source/date[@label = 'yesterday']/@year}&amp;month={/source/date[@label = 'yesterday']/@month}">
                            <xsl:value-of select="'Table of hh data'" />
                        </a>
          </li>
        </ul>

        <h3>CSV Downloads</h3>
<form action="{/source/request/@context-path}/reports/161/output/">
                    <fieldset>
<input type="hidden" name="site-code" value="{/source/site/@code}" />
                        <legend>Monthly Duration</legend>
<br/>
<xsl:value-of select="'For '"/>
<input name="months" value="1" maxlength="2" size="2" />
<xsl:value-of select="' month(s) until the end of '"/>
                        <input name="end-year" value="{/source/date[@label='last-month']/@year}" maxlength="4" size="4" /><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date[@label='last-month']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
                <br/>
<form action="{/source/request/@context-path}/reports/181/output/">
                    <fieldset>
                    <input type="hidden" name="site-id" value="{/source/site/@id}" />
                    
                        <legend>Download TRIAD CSV</legend>
                        <br/>
                        <xsl:value-of select="'For financial year ending March '"/>
                        <input name="year" value="{/source/date/@year}" size="4" maxlength="4"/>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                        <input type="reset" value="Reset"/>
                    </fieldset>
                </form>
                <br/>
                <form
                    action="{/source/request/@context-path}/reports/29/output/">
                    <fieldset>
                        <legend>Download HH data (kWh)</legend>
                        <input type="hidden" name="site-id"
                            value="{/source/site/@id}" />
                        <br/>
                            <select name="type">
                                <option value="used">Used</option>
                                <option value="imported">
                                    Imported
                                </option>
                                <option value="exported">
                                    Exported
                                </option>
                                <option value="generated">
                                    Generated
                                </option>
                                <option value="displaced">
                                    Displaced
                                </option>
                                <option value="parasitic">
                                    Parasitic
                                </option>
                            </select>
                        <xsl:value-of select="' for '" /><input size="2" length="2" name="months" value="1" /><xsl:value-of select="' month(s) finishing at the end of '" /><input size="4" length="4" name="year" value="{/source/date/@year}" /><xsl:value-of select="' - '" />
                                               <select name="month">
                            <xsl:for-each
                                select="/source/months/month">
                                <option>
                                    <xsl:if
                                        test="/source/date[@label='last-month']/@month = @number">
                                        <xsl:attribute
                                    name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Download" />
                    </fieldset>
                </form>
<br/>
<form action="{/source/request/@context-path}/reports/109/output/">
                    <fieldset>
                        <input type="hidden" name="site-id" value="{/source/site/@id}"/>
                        <legend>Displaced Virtual Bills</legend>
<br/>
<xsl:value-of select="'For '"/>
<input name="months" value="1" maxlength="2" size="2" />
<xsl:value-of select="' month(s) until the end of '"/>
                        <input name="end-year" value="{/source/date[@label='last-month']/@year}" maxlength="4" size="4" /><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date[@label='last-month']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
      </body>
    </html>
  </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[7]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supply]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException, XmlTree
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import Supply, HhStartDate, Configuration
from net.sf.chellow.billing import Bill, SupplierContract, MopContract, HhdcContract
from java.lang import Class, Long
from java.math import BigInteger
from org.hibernate.criterion import Restrictions, Order
from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date, Properties
from java.io import StringReader
from net.sf.chellow.ui import Report


debug = ''

supply_id = inv.getLong("supply-id")
if not inv.isValid():
    raise UserException()
supply = Supply.getSupply(supply_id)
supply_element = supply.toXml(doc, XmlTree("source").put("mpanCores").put("gspGroup").put("generatorType"))
source.appendChild(supply_element)
for generation in supply.getGenerations():
    generation_element = generation.toXml(doc, XmlTree("siteSupplyGenerations", XmlTree('site')).put('pc').put("mtc").put('ssc').put('cop').put("hhdcContract", XmlTree("party")).put('mopContract', XmlTree('party')))
    supply_element.appendChild(generation_element)
    generation_element.setAttribute('mop-account', generation.getMopAccount())
    for channel in generation.getChannels():
        channel_element = channel.toXml(doc)
        generation_element.appendChild(channel_element)
        for snag in Hiber.session().createQuery("from ChannelSnag snag where snag.channel = :channel and snag.isIgnored is false order by snag.startDate.date").setEntity('channel', channel).list():
            channel_element.appendChild(snag.toXml(doc))

    for mpan in generation.getMpans():
        mpan_element = mpan.toXml(doc, XmlTree("core").put("llfc", XmlTree("voltageLevel")).put('supplierContract'))
        generation_element.appendChild(mpan_element)
        for sup in Hiber.session().createQuery("select distinct mpan.supplyGeneration.supply from Mpan mpan where mpan.supplierAccount = :supplierAccount and mpan.supplyGeneration.supply <> :supply").setString('supplierAccount', mpan.getSupplierAccount()).setEntity('supply', supply).list():
            mpan_element.appendChild(sup.toXml(doc))
    pc_code = str(generation.getPc())

    BILL_GROUP_NAMES = ['import-bills', 'export-bills', 'hhdc-bills', 'mop-bills']
    bill_groups = {}
    for bill_group_name in BILL_GROUP_NAMES:
        bill_group_element = doc.createElement(bill_group_name)
        bill_groups[bill_group_name] = {'element': bill_group_element, 'bill-dict': {}}
        generation_element.appendChild(bill_group_element)

    tpr_codes = []
    import_bills_element = bill_groups['import-bills']['element']
    if pc_code != '00':
        for tpr in Hiber.session().createQuery("select mr.tpr from MeasurementRequirement mr where mr.ssc = :ssc order by mr.tpr.code").setEntity('ssc', generation.getSsc()).list():
            tpr_codes.append(tpr.getCode())
            import_bills_element.appendChild(tpr.toXml(doc))
        if pc_code in ['05', '06', '07', '08']:
            import_bills_element.appendChild(doc.createElement('tpr'))
            tpr_codes.append('md')
        tpr_codes.sort()        

    bills_crit = Hiber.session().createCriteria(Class.forName('net.sf.chellow.billing.Bill')).add(Restrictions.eq('supply', generation.getSupply())).add(Restrictions.ge('startDate.date', generation.getStartDate().getDate()))
    finish_date = generation.getFinishDate()
    if finish_date is not None:
        bills_crit.add(Restrictions.le('startDate.date', generation.getFinishDate().getDate()))
    bill_dict = {}
    num_outer_read_cols = 0
    for bill in bills_crit.list():
        bill_element = bill.toXml(doc, XmlTree('batch', XmlTree('contract')).put('type'))
        bill_contract = bill.getBatch().getContract()
        bill_contract_id = bill_contract.getId()
        try:
            SupplierContract.getSupplierContract(bill_contract_id)
            export_mpan = generation.getExportMpan()
            if export_mpan is not None and bill_contract == export_mpan.getSupplierContract():
                bill_group_name = 'export-bills'
            else:
                bill_group_name = 'import-bills'
        except:
            try:
                HhdcContract.getHhdcContract(bill_contract_id)
                bill_group_name = 'hhdc-bills'
            except:
                try:
                    MopContract.getMopContract(bill_contract_id)
                    bill_group_name = 'mop-bills'
                except:
                    raise UserException('bill group name not found for bill_contract_id ' + str(bill_contract_id))

        bill_group = bill_groups[bill_group_name]
        bill_dict = bill_group['bill-dict']

        if bill_group_name == 'import-bills' and pc_code != '00':
            tpr_map = dict(zip(tpr_codes, ([] for code in tpr_codes)))
            outside_tprs = []
            for read in Hiber.session().createQuery("from RegisterRead read where read.bill = :bill order by bill.startDate.date").setEntity('bill', bill).list():
                tpr = read.getTpr()
                if tpr is None:
                    tpr_code = 'md'
                else:
                    tpr_code = tpr.getCode()
                read_element = read.toXml(doc, XmlTree('tpr'))
                if tpr_code in tpr_map:
                    tpr_map[tpr_code].append(read_element)
                else:
                    outside_tprs.append(read_element)
            rows_high = max([len(val) for val in tpr_map.values()] + [1])
            bill_element.setAttribute('rows-high', str(rows_high))
        
            for j in range(rows_high):
                inner_reads_element = doc.createElement('inner-reads')
                bill_element.appendChild(inner_reads_element)
                for code in tpr_codes:
                    elements = tpr_map[code]
                    if j < len(elements):
                        inner_reads_element.appendChild(elements[j])
                    else:
                        inner_reads_element.appendChild(doc.createElement('register-read'))
            outer_reads_element = doc.createElement('outer-reads')
            bill_element.appendChild(outer_reads_element)
            for element in outside_tprs:
                element.setAttribute('rows-high', str(rows_high))
                outer_reads_element.appendChild(element)
            num_outer_read_cols = max(num_outer_read_cols, len(outside_tprs))

        key = bill.getStartDate().getDate().getTime()
        if not bill_dict.has_key(key):
            bill_dict[key] = []
        bill_dict[key].append(bill_element)

    for bill_group_name, bill_group in bill_groups.iteritems():
        bill_dict = bill_group['bill-dict']
        bills_element = bill_group['element']
        bill_keys = bill_dict.keys()
        bill_keys.sort(reverse=True)
        for key in bill_keys:
            for elem in bill_dict[key]:
                bills_element.appendChild(elem)
        for i in range(num_outer_read_cols):
            outer_read_element = doc.createElement('outer-read')
            outer_read_element.setAttribute('index', str(i + 1))
            bills_element.appendChild(outer_read_element)


source.appendChild(MonadDate().toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
if cal.get(Calendar.MONTH) < Calendar.MARCH:
    cal.add(Calendar.YEAR, -1)

source.setAttribute('triad-year', str(cal.get(Calendar.YEAR)))

cal.setTime(Date())
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())
finish_date.setLabel('finish')
source.appendChild(finish_date.toXml(doc))

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1)
start_date = HhStartDate(cal.getTime())
start_date.setLabel('start')
source.appendChild(start_date.toXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))
source.appendChild(MonadDate.getHoursXml(doc))
source.setAttribute('debug', debug)

config = Configuration.getConfiguration()
properties = Properties()
properties.load(StringReader(config.getProperties()))

for key in properties.propertyNames():
    if key.startswith('supply.report.'):
        supply_report_id = properties.get(key)
        if supply_report_id is not None:
            report = Report.getReport(int(supply_report_id))
            source.appendChild(report.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN" doctype-system="http://www.w3.org/TR/html4/strict.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Supplies &gt;
                    <xsl:value-of select="/source/supply/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a href="{/source/request/@context-path}/reports/99/output/">
                        <xsl:value-of select="'Supplies'" />
                    </a>
                    &gt;
                    <xsl:value-of select="concat(/source/supply/@id, ' [')" />
                    <a href="{/source/request/@context-path}/supplies/{/source/supply/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                    <xsl:value-of select="/source/@debug" />
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Name</th>
                        <td>
                            <xsl:value-of select="/source/supply/@name" />
                        </td>
                    </tr>
                    <tr>
                        <th>Source</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/supply/source/@code, ' - ', /source/supply/source/@name)" />
                            <xsl:if test="/source/supply/source/@code='gen'">
                                <xsl:value-of
                                    select="concat(' (', /source/supply/generator-type/@code, ' ', /source/supply/generator-type/@name, ')')" />
                            </xsl:if>
                        </td>
                    </tr>
                    <tr>
                        <th>GSP Group</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/supply/gsp-group/@code, ' ', /source/supply/gsp-group/@description)" />
                        </td>
                    </tr>
                 <xsl:if test="/source/report">
                  <tr>
                    <th>Custom Reports</th>
                    <td>
                        <ul>
                        <xsl:for-each select="/source/report">
                        <li><a
                        href="{/source/request/@context-path}/reports/{@id}/output/?supply-id={/source/supply/@id}">
<xsl:value-of select="@name"/></a></li>
                        </xsl:for-each>
                        </ul>
                    </td>
                  </tr>
                  </xsl:if>
                </table>
                <br />
                <xsl:for-each select="/source/supply/supply-generation">
                    <table>
                        <caption>
                            <xsl:value-of select="'Generation ['" />
                            <a
                                href="{/source/request/@context-path}/supplies/{/source/supply/@id}/generations/{@id}/">
                                <xsl:value-of select="'edit'" />
                            </a>
                            <xsl:value-of select="']'" />
                        </caption>
                        <thead>
                            <tr>
                                <th rowspan="2">From</th>
                                <th rowspan="2">To</th>
                                <th rowspan="2">Sites</th>
                                <th rowspan="2">
                                    <a title="Profile Class">PC</a>
                                </th>
                                <th rowspan="2">
                                    <a title="Meter Serial Number">MSN</a>
                                </th>
                                <th rowspan="2">
                                    <a title="Meter Timeswitch Class">MTC</a>
                                </th>
                                <th rowspan="2">
                                    <a title="Metering Code Of Practice">CoP</a>
                                </th>
                                <th rowspan="2">
                                    <a title="Standard Settlement Configuration">SSC</a>
                                </th>
                                <th colspan="2">
                                    <a title="Meter Operator">MOP</a>
                                </th>
                                <th colspan="2">
                                    <a title="Data Collector">DC</a>
                                </th>
                                <th rowspan="2">
                                    Channels
                                    <xsl:value-of select="'['" />
                                    <a
                                        href="{/source/request/@context-path}/supplies/{/source/supply/@id}/generations/{@id}/channels/">
                                        <xsl:value-of select="'edit'" />
                                    </a>
                                    <xsl:value-of select="']'" />
                                </th>
                                <th rowspan="2">
                                    <a title="Line Loss Factor Class">LLFC</a>
                                </th>
                                <th rowspan="2">MPAN Core</th>
                                <th rowspan="2">kVA</th>
                                <th colspan="2">Supplier</th>
                            </tr>
                            <tr>
                                <th>Contract</th>
                                <th>Account</th>
                                <th>Contract</th>
                                <th>Account</th>
                                <th>Contract</th>
                                <th>Account</th>

                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td rowspan="4">
                                    <a
                                        title="{concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day, ' ', hh-start-date[@label='start']/@hour, ':', hh-start-date[@label='start']/@minute)}">
                                        <xsl:value-of
                                            select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day)" />
                                    </a>
                                </td>
                                <td rowspan="4">
                                    <xsl:choose>
                                        <xsl:when test="hh-start-date[@label='finish']">
                                            <a
                                                title="{concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day, ' ', hh-start-date[@label='finish']/@hour, ':', hh-start-date[@label='finish']/@minute)}">
                                                <xsl:value-of
                                                    select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day)" />
                                            </a>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td rowspan="4">
                                    <a
                                        href="{/source/request/@context-path}/reports/5/output/?site-id={site-supply-generation[@is-physical='true']/site/@id}"
                                        title="{site-supply-generation[@is-physical='true']/site/@name}">
                                        <xsl:value-of
                                            select="site-supply-generation[@is-physical='true']/site/@code" />
                                    </a>
                                    <xsl:if test="site-supply-generation[@is-physical='false']/site">
                                        <xsl:value-of select="' (also '" />
                                        <xsl:for-each
                                            select="site-supply-generation[@is-physical='false']/site">
                                            <a
                                                href="{/source/request/@context-path}/reports/5/output/?site-id={@id}"
                                                title="{@name}">
                                                <xsl:value-of select="@code" />
                                            </a>
                                        </xsl:for-each>
                                        <xsl:value-of select="')'" />
                                    </xsl:if>
                                </td>
                                <td rowspan="4">
                                    <a
                                        href="{/source/request/@context-path}/reports/55/output/?pc-id={pc/@id}"
                                        title="{pc/@description}">
                                        <xsl:value-of select="pc/@code" />
                                    </a>
                                </td>
                                <td rowspan="4">
                                    <xsl:value-of select="@meter-serial-number" />
                                </td>
                                <td rowspan="4">
                                    <a
                                        href="{/source/request/@context-path}/reports/63/output/?mtc-id={mtc/@id}"
                                        title="{mtc/@description}">
                                        <xsl:value-of select="mtc/@code" />
                                    </a>
                                </td>
                                <td rowspan="4">
                                    <a
                                        href="{/source/request/@context-path}/reports/197/output/?cop-id={cop/@id}"
                                        title="{cop/@description}">
                                        <xsl:value-of select="cop/@code" />
                                    </a>
                                </td>
                                <td rowspan="4">
                                    <a
                                        href="{/source/request/@context-path}/reports/127/output/?ssc-id={ssc/@id}"
                                        title="{ssc/@description}">
                                        <xsl:value-of select="ssc/@code" />
                                    </a>
                                </td>
                                <td rowspan="4">
                                    <a
                                        href="{/source/request/@context-path}/reports/107/output/?mop-contract-id={mop-contract/@id}">
                                        <xsl:value-of select="mop-contract/@name" />
                                    </a>
                                </td>
                                <td rowspan="4">
                                    <xsl:value-of select="@mop-account" />
                                </td>
                                <td rowspan="4">
                                    <a
                                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={hhdc-contract/@id}">
                                        <xsl:value-of select="hhdc-contract/@name" />
                                    </a>
                                </td>
                                <td rowspan="4">
                                    <xsl:value-of select="@hhdc-account" />
                                </td>
                                <th colspan="6">Import</th>
                            </tr>
                            <tr>
                                <td>
                                    <xsl:for-each select="channel[@is-import='true']">

                                        <xsl:choose>
                                            <xsl:when test="channel-snag">
                                                <xsl:attribute name="title">
<xsl:for-each select="channel-snag">
<xsl:value-of
                                                    select="concat(@description, ' ', hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-',  hh-start-date[@label='start']/@day, ' ', hh-start-date[@label='start']/@hour, ':', hh-start-date[@label='start']/@minute, ' to ')" />
<xsl:choose>
<xsl:when test="hh-start-date[@label='finish']">
<xsl:value-of
                                                    select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-',  hh-start-date[@label='finish']/@day, ' ', hh-start-date[@label='finish']/@hour, ':', hh-start-date[@label='finish']/@minute, ', ')" />
</xsl:when>
<xsl:otherwise>
<xsl:value-of select="'ongoing'" />
</xsl:otherwise>
</xsl:choose>
</xsl:for-each>
</xsl:attribute>
                                                <xsl:call-template name="channel" />
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:call-template name="channel" />
                                            </xsl:otherwise>
                                        </xsl:choose>

                                    </xsl:for-each>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/51/output/?llfc-id={mpan/llfc[@is-import='true']/@id}"
                                        title="{mpan/llfc[@is-import='true']/@description}">
                                        <xsl:value-of select="mpan/llfc[@is-import='true']/@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="mpan[llfc/@is-import='true']/mpan-core/@core" />
                                </td>

                                <td>
                                    <xsl:value-of
                                        select="mpan[llfc/@is-import='true']/@agreed-supply-capacity" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={mpan[llfc/@is-import='true']/supplier-contract/@id}">
                                        <xsl:value-of
                                            select="mpan[llfc/@is-import='true']/supplier-contract/@name" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="mpan[llfc/@is-import='true']/@supplier-account" />
                                    <xsl:if test="mpan/supply">
                                        <xsl:value-of select="'('" />
                                        <xsl:for-each select="mpan/supply">
                                            <xsl:value-of select="concat(@id, ' ')" />
                                        </xsl:for-each>
                                        <xsl:value-of select="')'" />
                                    </xsl:if>
                                </td>
                            </tr>
                            <tr>
                                <th colspan="6">Export</th>
                            </tr>
                            <tr>
                                <td>
                                    <xsl:if test="not(mpan/llfc[@is-import='false'])">
                                        &#xA0;
                                    </xsl:if>
                                    <xsl:for-each select="channel[@is-import='false']">

                                        <xsl:choose>
                                            <xsl:when test="channel-snag">
                                                <xsl:attribute name="title">
<xsl:for-each select="channel-snag">
<xsl:value-of
                                                    select="concat(@description, ' ', hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-',  hh-start-date[@label='start']/@day, ' ', hh-start-date[@label='start']/@hour, ':', hh-start-date[@label='start']/@minute, ' to ')" />
<xsl:choose>
<xsl:when test="hh-start-date[@label='finish']">
<xsl:value-of
                                                    select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-',  hh-start-date[@label='finish']/@day, ' ', hh-start-date[@label='finish']/@hour, ':', hh-start-date[@label='finish']/@minute, ', ')" />
</xsl:when>
<xsl:otherwise>
<xsl:value-of select="'ongoing'" />
</xsl:otherwise>
</xsl:choose>
</xsl:for-each>
</xsl:attribute>
                                                <xsl:call-template name="channel" />
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:call-template name="channel" />
                                            </xsl:otherwise>
                                        </xsl:choose>

                                    </xsl:for-each>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/51/output/?llfc-id={mpan/llfc[@is-import='false']/@id}"
                                        title="{mpan/llfc[@is-import='false']/@description}">
                                        <xsl:value-of select="mpan/llfc[@is-import='false']/@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="mpan[llfc/@is-import='false']/mpan-core/@core" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="mpan[llfc/@is-import='false']/@agreed-supply-capacity" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={mpan[llfc/@is-import='false']/supplier-contract/@id}">
                                        <xsl:value-of
                                            select="mpan[llfc/@is-import='false']/supplier-contract/@name" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="mpan[llfc/@is-import='false']/@supplier-account" />
                                    <xsl:if test="mpan[llfc/@is-import='false']/supply">
                                        <xsl:value-of select="'('" />
                                        <xsl:for-each select="mpan/supply">
                                            <xsl:value-of select="concat(@id, ' ')" />
                                        </xsl:for-each>
                                        <xsl:value-of select="')'" />
                                    </xsl:if>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <br/>
                    <xsl:call-template name="supplier-bills" />
                    <br />
                    <table>
                        <caption>DC Bills</caption>
                        <thead>
                            <tr>
                                <th>Edit</th>
                                <th>Batch</th>
                                <th>Reference</th>
                                <th>Account</th>
                                <th>Issue Date</th>
                                <th>From</th>
                                <th>To</th>
                                <th>kWh</th>
                                <th>Net</th>
                                <th>VAT</th>
                                <th>Gross</th>
                                <th>Type</th>
                            </tr>
                        </thead>
                        <tbody>
                            <xsl:for-each select="hhdc-bills/bill">
                                <tr>
                                    <td>
                                        [
                                        <a
                                            href="{/source/request/@context-path}/hhdc-contracts/{batch/hhdc-contract/@id}/batches/{batch/@id}/bills/{@id}/">
                                            <xsl:value-of select="'edit'" />
                                        </a>
                                        ]
                                    </td>
                                    <td>
                                        <a
                                            href="{/source/request/@context-path}/reports/203/output/?batch-id={batch/@id}">
                                            <xsl:value-of select="batch/@reference" />
                                        </a>
                                    </td>
                                    <td>
                                        <xsl:value-of select="@reference" />
                                    </td>
                                    <td>
                                        <xsl:value-of select="@account" />
                                    </td>
                                    <td>
                                        <xsl:value-of
                                            select="concat(date[@label='issue']/@year, '-', date[@label='issue']/@month, '-', date[@label='issue']/@day, ' ', date[@label='issue']/@hour, ':', date[@label='issue']/@minute)" />
                                    </td>
                                    <td>
                                        <xsl:value-of
                                            select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day, ' ', hh-start-date[@label='start']/@hour, ':', hh-start-date[@label='start']/@minute)" />
                                    </td>
                                    <td>
                                        <xsl:value-of
                                            select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day, ' ', hh-start-date[@label='finish']/@hour, ':', hh-start-date[@label='finish']/@minute)" />
                                    </td>
                                    <td>
                                        <xsl:value-of select="@kwh" />
                                    </td>
                                    <td>
                                        <xsl:value-of select="@net" />
                                    </td>
                                    <td>
                                        <xsl:value-of select="@vat" />
                                    </td>
                                    <td>
                                        <xsl:value-of select="@gross" />
                                    </td>
                                    <td>
                                        <a
                                            href="{/source/request/@context-path}/reports/201/output/?bill-type-id={bill-type/@id}"
                                            title="{bill-type/@description}">
                                            <xsl:value-of select="bill-type/@code" />
                                        </a>
                                    </td>
                                </tr>
                            </xsl:for-each>
                        </tbody>
                    </table>
                    <br />
                    <table>
                        <caption>MOP Bills</caption>
                        <thead>
                            <tr>
                                <th>Edit</th>
                                <th>Batch</th>
                                <th>Reference</th>
                                <th>Account</th>
                                <th>Issue Date</th>
                                <th>From</th>
                                <th>To</th>
                                <th>kWh</th>
                                <th>Net</th>
                                <th>VAT</th>
                                <th>Gross</th>
                                <th>Type</th>
                            </tr>
                        </thead>
                        <tbody>
                            <xsl:for-each select="mop-bills/bill">
                                <tr>
                                    <td>
                                        [
                                        <a
                                            href="{/source/request/@context-path}/mop-contracts/{batch/mop-contract/@id}/batches/{batch/@id}/bills/{@id}/">
                                            <xsl:value-of select="'edit'" />
                                        </a>
                                        ]
                                    </td>
                                    <td>
                                        <a
                                            href="{/source/request/@context-path}/reports/193/output/?batch-id={batch/@id}">
                                            <xsl:value-of select="batch/@reference" />
                                        </a>
                                    </td>
                                    <td>
                                        <xsl:value-of select="@reference" />
                                    </td>
                                    <td>
                                        <xsl:value-of select="@account" />
                                    </td>
                                    <td>
                                        <xsl:value-of
                                            select="concat(date[@label='issue']/@year, '-', date[@label='issue']/@month, '-', date[@label='issue']/@day, ' ', date[@label='issue']/@hour, ':', date[@label='issue']/@minute)" />
                                    </td>
                                    <td>
                                        <xsl:value-of
                                            select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day, ' ', hh-start-date[@label='start']/@hour, ':', hh-start-date[@label='start']/@minute)" />
                                    </td>
                                    <td>
                                        <xsl:value-of
                                            select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day, ' ', hh-start-date[@label='finish']/@hour, ':', hh-start-date[@label='finish']/@minute)" />
                                    </td>
                                    <td>
                                        <xsl:value-of select="@kwh" />
                                    </td>
                                    <td>
                                        <xsl:value-of select="@net" />
                                    </td>
                                    <td>
                                        <xsl:value-of select="@vat" />
                                    </td>
                                    <td>
                                        <xsl:value-of select="@gross" />
                                    </td>
                                    <td>
                                        <a
                                            href="{/source/request/@context-path}/reports/201/output/?bill-type-id={bill-type/@id}"
                                            title="{bill-type/@description}">
                                            <xsl:value-of select="bill-type/@code" />
                                        </a>
                                    </td>
                                </tr>
                            </xsl:for-each>
                        </tbody>
                    </table>
                    <br />
                </xsl:for-each>
                <ul>
                    <li>
                        kWh, kVA, MD etc. by month:
                        <a
                            href="{/source/request/@context-path}/reports/15/output/?supply-id={/source/supply/@id}&amp;is-import=true">
                            <xsl:value-of select="'Import'" />
                        </a>
                        <xsl:value-of select="' '" />
                        <a
                            href="{/source/request/@context-path}/reports/15/output/?supply-id={/source/supply/@id}&amp;is-import=false">
                            <xsl:value-of select="'Export'" />
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/17/output/?supply-id={/source/supply/@id}&amp;months=1&amp;finish-year={/source/date/@year}&amp;finish-month={/source/date/@month}">
                            Raw HH data
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/101/output/?supply-id={/source/supply/@id}">
                            Virtual Bill
                        </a>
                    </li>
                </ul>

                <h3>CSV Downloads</h3>

                <form action="{/source/request/@context-path}/reports/87/output/">
                    <fieldset>
                        <input type="hidden" name="supply-id" value="{/source/supply/@id}" />
                        <legend>Virtual Bills</legend>
                        <select name="supply-polarity">
                            <option value="import">
                                Import
                                </option>
                            <option value="export">
                                Export
                                </option>
                        </select>
                        <xsl:value-of select="' from '" />
                        <input name="start-year" value="{/source/hh-start-date[@label='start']/@year}"
                            maxlength="4" size="4" />
                        <xsl:value-of select="'-'" />
                        <select name="start-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='start']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="'-'" />
                        <select name="start-day">
                            <xsl:for-each select="/source/days/day">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='start']/@day">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <select name="start-hour">
                            <xsl:for-each select="/source/hours/hour">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='start']/@hour">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="':00 to '" />
                        <input name="finish-year" value="{/source/hh-start-date[@label='finish']/@year}"
                            maxlength="4" size="4" />
                        <xsl:value-of select="'-'" />
                        <select name="finish-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="'-'" />
                        <select name="finish-day">
                            <xsl:for-each select="/source/days/day">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@day">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <select name="finish-hour">
                            <xsl:for-each select="/source/hours/hour">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@hour">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="':30 '" />
                        <input type="submit" value="Download" />
                    </fieldset>
                </form>
                <br />
                <br />
                <form action="{/source/request/@context-path}/reports/169/output/">
                    <fieldset>
                        <legend>HH Data</legend>
                        <input type="hidden" name="supply-id" value="{/source/supply/@id}" />
                        <br />
                        <xsl:value-of select="' '" />
                        <select name="is-import">
                            <option value="true">
                                Import
                        </option>
                            <option value="false">
                                Export
                        </option>
                        </select>
                        <xsl:value-of select="' '" />
                        <select name="is-kwh">
                            <option value="true">
                                kWh
                        </option>
                            <option value="false">
                                kVArh
                        </option>
                        </select>
                        <xsl:value-of select="' for '" />
                        <input name="months" maxlength="2" size="2">
                            <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when
                                test="/source/request/parameter[@name='months']">
                                <xsl:value-of
                                select="/source/request/parameter[@name='months']/value" />
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'" />
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
                        <xsl:value-of select="' month(s) finishing at the end of '" />
                        <input name="end-year" value="{/source/date/@year}"
                            maxlength="4" size="4" />
                        <xsl:value-of select="'-'" />
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Download" />
                    </fieldset>
                </form>
                <br />
                <form action="{/source/request/@context-path}/reports/41/output/">
                    <fieldset>
                        <legend>TRIAD</legend>
                        <input type="hidden" name="supply-id" value="{/source/supply/@id}" />
                        <br />
                        <xsl:value-of select="'For financial year ending March '" />
                        <input name="year" value="{/source/@triad-year}" size="4"
                            maxlength="4" />
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Download" />
                        <input type="reset" value="Reset" />
                    </fieldset>
                </form>
                <br />
                <form action="{/source/request/@context-path}/reports/149/output/">
                    <fieldset>
                        <input type="hidden" name="supply-id" value="{/source/supply/@id}" />
                        <legend>Duration</legend>
                        <p>
                            <xsl:value-of select="'From '" />
                            <input name="start-year" value="{/source/hh-start-date[@label='start']/@year}"
                                maxlength="4" size="4" />
                            <xsl:value-of select="'-'" />
                            <select name="start-month">
                                <xsl:for-each select="/source/months/month">
                                    <option value="{@number}">
                                        <xsl:if test="@number=/source/hh-start-date[@label='start']/@month">
                                            <xsl:attribute name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                            <xsl:value-of select="'-'" />
                            <select name="start-day">
                                <xsl:for-each select="/source/days/day">
                                    <option value="{@number}">
                                        <xsl:if test="@number=/source/hh-start-date[@label='start']/@day">
                                            <xsl:attribute name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                            <xsl:value-of select="' '" />
                            <select name="start-hour">
                                <xsl:for-each select="/source/hours/hour">
                                    <option value="{@number}">
                                        <xsl:if test="@number=/source/hh-start-date[@label='start']/@hour">
                                            <xsl:attribute name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                            <xsl:value-of select="':00 to '" />
                            <input name="finish-year"
                                value="{/source/hh-start-date[@label='finish']/@year}"
                                maxlength="4" size="4" />
                            <xsl:value-of select="'-'" />
                            <select name="finish-month">
                                <xsl:for-each select="/source/months/month">
                                    <option value="{@number}">
                                        <xsl:if
                                            test="@number=/source/hh-start-date[@label='finish']/@month">
                                            <xsl:attribute name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                            <xsl:value-of select="'-'" />
                            <select name="finish-day">
                                <xsl:for-each select="/source/days/day">
                                    <option value="{@number}">
                                        <xsl:if test="@number=/source/hh-start-date[@label='finish']/@day">
                                            <xsl:attribute name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                            <xsl:value-of select="' '" />
                            <select name="finish-hour">
                                <xsl:for-each select="/source/hours/hour">
                                    <option value="{@number}">
                                        <xsl:if test="@number=/source/hh-start-date[@label='finish']/@hour">
                                            <xsl:attribute name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                            <xsl:value-of select="':30 '" />
                            <input type="submit" value="Download" />
                        </p>
                    </fieldset>
                </form>
                <br />
                <form action="{/source/request/@context-path}/reports/177/output/">
                    <fieldset>
                        <input type="hidden" name="supply-id" value="{/source/supply/@id}" />
                        <legend>Monthly Duration</legend>
                        <br />
                        <xsl:value-of select="'For '" />
                        <input name="months" maxlength="2" size="2">
                            <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when
                                test="/source/request/parameter[@name='months']">
                                <xsl:value-of
                                select="/source/request/parameter[@name='months']/value" />
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'" />
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
                        <xsl:value-of select="' month(s) finishing at the end of '" />
                        <input name="end-year" value="{/source/date/@year}"
                            maxlength="4" size="4" />
                        <xsl:value-of select="' - '" />
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Download" />
                    </fieldset>
                </form>
                <br />
                <form action="{/source/request/@context-path}/reports/33/output/">
                    <input type="hidden" name="supply-id" value="{/source/supply/@id}" />

                    <fieldset>
                        <legend>Snapshot</legend>
                        <br />
                        <xsl:value-of select="'For the end of '" />
                        <input name="year" value="{/source/date/@year}" maxlength="4"
                            size="4" />
                        <xsl:value-of select="' - '" />
                        <select name="month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Download" />
                    </fieldset>
                </form>
                <br />
                <form action="{/source/request/@context-path}/reports/219/output/">
                    <input type="hidden" name="supply-id" value="{/source/supply/@id}" />

                    <fieldset>
                        <legend>Register Reads</legend>
                        <br />
                        <br />
                        <xsl:value-of select="'For '" />
                        <input name="months" maxlength="2" size="2">
                            <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when
                                test="/source/request/parameter[@name='months']">
                                <xsl:value-of
                                select="/source/request/parameter[@name='months']/value" />
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'" />
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
                        <xsl:value-of select="' month(s) finishing at the end of '" />
                        <input name="end-year" value="{/source/date/@year}"
                            maxlength="4" size="4" />
                        <xsl:value-of select="' - '" />
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Download" />
                    </fieldset>
                </form>
                <br />
                <form action="{/source/request/@context-path}/reports/207/output/">
                    <input type="hidden" name="supply-id" value="{/source/supply/@id}" />

                    <fieldset>
                        <legend>CRC</legend>
                        <br />
                        <xsl:value-of select="'For financial year starting April '" />
                        <input name="year" value="{/source/date/@year}" size="4"
                            maxlength="4" />
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Download" />
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
    <xsl:template name="channel">
        <xsl:choose>
            <xsl:when test="@is-kwh='true'">
                kWh
            </xsl:when>
            <xsl:otherwise>
                kVArh
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="supplier-bills">
        <table>
            <caption>Import Supplier Bills</caption>
            <thead>
                <tr>
                    <th rowspan="2">View</th>
                    <th rowspan="2">From</th>
                    <th rowspan="2">To</th>
                    <th rowspan="2">Batch</th>
                    <th rowspan="2">Reference</th>
                    <th rowspan="2">kWh</th>
                    <th rowspan="2">Net</th>
                    <th rowspan="2">VAT</th>
                    <th rowspan="2">Type</th>
                    <xsl:for-each select="import-bills/tpr">
                        <th colspan="4">
                            <xsl:choose>
                                <xsl:when test="@code">
                                    <a
                                        href="{/source/request/@context-path}/reports/97/output/?tpr-id={@id}">
                                        <xsl:value-of select="@code" />
                                    </a>
                                </xsl:when>
                                <xsl:otherwise>
                                    MD
                                </xsl:otherwise>
                            </xsl:choose>
                        </th>
                    </xsl:for-each>
                    <xsl:for-each select="import-bills/outer-read">
                        <th colspan="5">
                            <xsl:value-of select="@index" />
                        </th>
                    </xsl:for-each>
                </tr>

                <tr>
                    <xsl:for-each select="import-bills/tpr">
                        <th colspan="2">Previous</th>
                        <th colspan="2">Present</th>
                    </xsl:for-each>
                    <xsl:for-each select="import-bills/outer-read">
                        <th>TPR</th>
                        <th colspan="2">Previous</th>
                        <th colspan="2">Present</th>
                    </xsl:for-each>
                </tr>
            </thead>
            <tbody>
                <xsl:for-each select="import-bills/bill">
                    <xsl:choose>
                        <xsl:when test="inner-reads | outer-reads">
                            <xsl:for-each select="inner-reads">
                                <tr>
                                    <xsl:if test="position()=1">
                                        <td rowspan="{../@rows-high}">
                                            <a
                                                href="{/source/request/@context-path}/reports/105/output/?bill-id={../@id}">
                                                <xsl:value-of select="'view'" />
                                            </a>
                                        </td>
                                        <td rowspan="{../@rows-high}">
                                            <a
                                                title="{concat(../hh-start-date[@label='start']/@year, '-', ../hh-start-date[@label='start']/@month, '-', ../hh-start-date[@label='start']/@day, ' ', ../hh-start-date[@label='start']/@hour, ':', ../hh-start-date[@label='start']/@minute)}">
                                                <xsl:value-of
                                                    select="concat(../hh-start-date[@label='start']/@year, '-', ../hh-start-date[@label='start']/@month, '-', ../hh-start-date[@label='start']/@day)" />
                                            </a>
                                        </td>
                                        <td rowspan="{../@rows-high}">
                                            <a
                                                title="{concat(../hh-start-date[@label='finish']/@year, '-', ../hh-start-date[@label='finish']/@month, '-', ../hh-start-date[@label='finish']/@day, ' ', ../hh-start-date[@label='finish']/@hour, ':', ../hh-start-date[@label='finish']/@minute)}">
                                                <xsl:value-of
                                                    select="concat(../hh-start-date[@label='finish']/@year, '-', ../hh-start-date[@label='finish']/@month, '-', ../hh-start-date[@label='finish']/@day)" />
                                            </a>
                                        </td>
                                        <td rowspan="{../@rows-high}">
                                            <a
                                                href="{/source/request/@context-path}/reports/91/output/?batch-id={../batch/@id}">
                                                <xsl:value-of select="../batch/@reference" />
                                            </a>
                                        </td>
                                        <td rowspan="{../@rows-high}">
                                            <xsl:value-of select="../@reference" />
                                        </td>
                                        <td rowspan="{../@rows-high}">
                                            <xsl:value-of select="../@kwh" />
                                        </td>
                                        <td rowspan="{../@rows-high}">
                                            <xsl:value-of select="../@net" />
                                        </td>
                                        <td rowspan="{../@rows-high}">
                                            <xsl:value-of select="../@vat" />
                                        </td>
                                        <td rowspan="{../@rows-high}">
                                            <a
                                                href="{/source/request/@context-path}/reports/201/output/?bill-type-id={../bill-type/@id}"
                                                title="{../bill-type/@description}">
                                                <xsl:value-of select="../bill-type/@code" />
                                            </a>
                                        </td>
                                    </xsl:if>

                                    <xsl:for-each select="register-read">
                                        <td style="border-right: none;">
                                            <a
                                                title="{concat(hh-start-date[@label='previous']/@year, '-', hh-start-date[@label='previous']/@month, '-', hh-start-date[@label='previous']/@day, ' ', @meter-serial-number)}">
                                                <xsl:value-of select="@previous-value" />
                                            </a>
                                        </td>
                                        <td style="border-left: none;">
                                            <xsl:value-of select="read-type[@label='previous']/@code" />
                                        </td>

                                        <td style="border-right: none;">
                                            <a
                                                title="{concat(hh-start-date[@label='present']/@year, '-', hh-start-date[@label='present']/@month, '-', hh-start-date[@label='present']/@day, ' ', @meter-serial-number)}">
                                                <xsl:value-of select="@present-value" />
                                            </a>
                                        </td>
                                        <td style="border-left: none;">
                                            <xsl:value-of select="read-type[@label='present']/@code" />
                                        </td>
                                    </xsl:for-each>
                                    <xsl:if test="position()=1">
                                        <xsl:for-each select="../outer-reads/register-read">
                                            <td>
                                                <a
                                                    href="{/source/request/@context-path}/reports/97/output/?tpr-id={tpr/@id}">
                                                    <xsl:value-of select="tpr/@code" />
                                                </a>
                                            </td>
                                            <td style="border-right: none;">
<a title="{concat(hh-start-date[@label='previous']/@year, '-', hh-start-date[@label='previous']/@month, '-', hh-start-date[@label='previous']/@day, ' ', @meter-serial-number)}">
                                                <xsl:value-of select="@previous-value" /></a>
                                            </td>
                                            <td style="border-left: none;">
                                                <xsl:value-of select="read-type[@label='previous']/@code" />
                                            </td>
                                            <td style="border-right: none;">
<a title="{concat(hh-start-date[@label='present']/@year, '-', hh-start-date[@label='present']/@month, '-', hh-start-date[@label='present']/@day, ' ', @meter-serial-number)}"><xsl:value-of select="@present-value" /></a>
                                            </td>
                                            <td style="border-left: none;">
                                                <xsl:value-of select="read-type[@label='present']/@code" />
                                            </td>
                                        </xsl:for-each>
                                    </xsl:if>
                                </tr>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/105/output/?bill-id={@id}">
                                        <xsl:value-of select="'view'" />
                                    </a>
                                </td>
                                <td>
                                    <a
                                        title="{concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day, ' ', hh-start-date[@label='start']/@hour, ':', hh-start-date[@label='start']/@minute)}">
                                        <xsl:value-of
                                            select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day)" />
                                    </a>
                                </td>
                                <td>
                                    <a
                                        title="{concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day, ' ', hh-start-date[@label='finish']/@hour, ':', hh-start-date[@label='finish']/@minute)}">
                                        <xsl:value-of
                                            select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day)" />
                                    </a>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/91/output/?batch-id={batch/@id}">
                                        <xsl:value-of select="batch/@reference" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@reference" />
                                </td>
                                <td>
                                    <xsl:value-of select="@kwh" />
                                </td>
                                <td>
                                    <xsl:value-of select="@net" />
                                </td>
                                <td>
                                    <xsl:value-of select="@vat" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/201/output/?bill-type-id={bill-type/@id}"
                                        title="{bill-type/@description}">
                                        <xsl:value-of select="bill-type/@code" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:for-each>
            </tbody>
        </table>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[9]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site hh graph container]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import Site
from java.util import Calendar

site_id = inv.getLong("site-id")
year = inv.getInteger("finish-year")
month = inv.getInteger("finish-month")
months = inv.getInteger("months")

if not inv.isValid():
    raise UserException()

site = Site.getSite(site_id)
source.appendChild(site.toXml(doc))

source.appendChild(MonadDate.getMonthsXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output" />
                <title>
                    Chellow &gt; Sites &gt;
                    <xsl:value-of select="/source/site/@name" />
                    HH graph of site use
                </title>
            </head>
            <body>
                <p>
                    <a href="{/source/request/@context-path}/reports/1/output/">Chellow</a> &gt;
                    <a href="{/source/request/@context-path}/reports/3/output/">
                        <xsl:value-of select="'Sites'" />
                    </a>
                    &gt; <a
                        href="{/source/request/@context-path}/reports/5/output/?site-id={/source/site/@id}">
                        <xsl:value-of select="/source/site/@name" />
                    </a>
                    &gt; HH graph of site use
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <p>
                    <img
                        src="{/source/request/@context-path}/reports/21/output/?site-id={/source/site/@id}&amp;finish-year={/source/request/parameter[@name='finish-year']/value}&amp;finish-month={/source/request/parameter[@name='finish-month']/value}&amp;months={/source/request/parameter[@name='months']/value}" />
                </p>
                <form action=".">
                    <fieldset>
                        <legend>Show graph</legend>
                        <input type="hidden" name="site-id"
                            value="{/source/request/parameter[@name='site-id']/value}" />
                        <xsl:value-of select="'For '" />
                        <input name="months" maxlength="2" size="2" value="{/source/request/parameter[@name='months']/value}"/>
                        <xsl:value-of select="' months finishing in '" />
                        <input size="4" length="4"
                            name="finish-year" value="{/source/request/parameter[@name='finish-year']/value}" />
                        <xsl:value-of select="' - '" />
                        <select name="finish-month">
                            <xsl:for-each select="/source/months/month">
                                <option>
                                    <xsl:if
                                        test="/source/request/parameter[@name='finish-month']/value = @number">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Show" />
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[11]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site Generation Graph Container]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import Site
from java.util import Calendar
from java.lang import System

site_id = inv.getLong("site-id")
if not inv.isValid():
    raise UserException()

if inv.hasParameter('finish-year'):
    year = inv.getInteger("finish-year")
    month = inv.getInteger("finish-month")
    months = inv.getInteger("months")
    if not inv.isValid():
        raise UserException()

    site = Site.getSite(site_id)
    source.appendChild(site.toXml(doc))

    source.appendChild(MonadDate.getMonthsXml(doc))
else:
    cal = MonadDate.getCalendar()
    cal.setTimeInMillis(System.currentTimeMillis())
    inv.sendTemporaryRedirect('/reports/11/output/?site-id=' + str(site_id) + '&months=1&finish-month=' + str(cal.get(Calendar.MONTH) + 1) + '&finish-year=' + str(cal.get(Calendar.YEAR)))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml" encoding="US-ASCII"
    doctype-public="-//W3C//DTD XHTML 1.1//EN"
    doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
    indent="yes" />
  <xsl:template match="/">
    <html>
      <head>
        <link rel="stylesheet" type="text/css"
            href="{/source/request/@context-path}/reports/19/output/" />
        <title>Chellow &gt; Sites &gt;
            <xsl:value-of select="/source/site/@name" />
        </title>
      </head>
      <body>
        <p>
          <a href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
          &gt;
          <a href="{/source/request/@context-path}/reports/3/output/">
            <xsl:value-of select="'Sites'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/5/output/?site-id={/source/site/@id}">
                        <xsl:value-of select="/source/site/@name" />
                    </a>
                    &gt; HH graph of generation
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>

                <p>
                    <img
                        src="{/source/request/@context-path}/reports/23/output/?site-id={/source/site/@id}&amp;finish-year={/source/request/parameter[@name='finish-year']/value}&amp;finish-month={/source/request/parameter[@name='finish-month']/value}&amp;months={/source/request/parameter[@name='months']/value}" />
                </p>
                <form action=".">
                    <fieldset>
                        <legend>Show graph</legend>
                        <input type="hidden" name="site-id"
                            value="{/source/request/parameter[@name='site-id']/value}" />


                        <xsl:value-of select="'For '" />
                        <input name="months" maxlength="2" size="2" value="{/source/request/parameter[@name='months']/value}"/>
                        <xsl:value-of select="' months finishing at the end of '" />
                        <input size="4" length="4"
                            name="finish-year" value="{/source/request/parameter[@name='finish-year']/value}" />
                        <xsl:value-of select="' - '" />
                        <select name="finish-month">
                            <xsl:for-each select="/source/months/month">
                                <option>
                                    <xsl:if
                                        test="/source/request/parameter[@name='finish-month']/value = @number">
                                        <xsl:attribute
                                            name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Show" />

                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[13]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site Monthly figures]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException, XmlTree
from java.lang import System
from net.sf.chellow.monad.types import MonadDate
import math
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate
from net.sf.chellow.physical import Site

site_id = inv.getLong("site-id")
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
if inv.hasParameter("finish-year"):
    year = inv.getInteger("finish-year")
    cal.set(Calendar.YEAR, year)
if inv.hasParameter("finish-month"):
    month = inv.getInteger("finish-month")
    cal.set(Calendar.MONTH, month - 1)
for i in range(12):
    month_element = doc.createElement("month-in-year")
    source.appendChild(month_element)
    month_element.setAttribute('value', '%02d' % (i + 1))
#source.appendChild(inv.requestXml(doc))
if not inv.isValid():
    raise UserException()

cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())

source.setAttribute("finish-year", str(cal.get(Calendar.YEAR)))
source.setAttribute("finish-month", str(cal.get(Calendar.MONTH) + 1))
cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -12)
start_date = HhStartDate(cal.getTime())

site = Site.getSite(site_id)
source.appendChild(site.toXml(doc))
supplies = Hiber.session().createQuery("select distinct supply from Supply supply join supply.generations supplyGeneration join supplyGeneration.siteSupplyGenerations siteSupplyGeneration where siteSupplyGeneration.site = :site and supply.source.code != 'sub'").setEntity('site', site).list()
con = Hiber.session().connection()
if len(supplies) == 0:
    stmt = con.prepareStatement("select * from hh_datum where hh_datum.value = 0 and hh_datum.value = 1")
else:
    supplies_sql = ','.join(str(supply.getId()) for supply in supplies)

    stmt = con.prepareStatement("select hh_datum.value, hh_datum.start_date, hh_datum.status, channel.is_import, supply.name, source.code from hh_datum, channel, supply, supply_generation, source where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = supply.id and supply.source_id = source.id and channel.is_kwh is true and hh_datum.start_date >= ? and hh_datum.start_date <= ? and supply.id in (" + supplies_sql + ") order by hh_datum.start_date desc", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
    stmt.setTimestamp(1, Timestamp(start_date.getDate().getTime()))
    stmt.setTimestamp(2, Timestamp(finish_date.getDate().getTime()))
    stmt.setFetchSize(100)

rs = stmt.executeQuery()
hhDate = finish_date.getDate().getTime()
maxExportedKw = 0
maxExportedKwDate = None
maxExportedKwYear = 0
maxExportedKwYearDate = None
exportedKwhMonth = 0
exportedKwhYear = 0
exportedKwh = 0
maxImportedKw = 0
maxImportedKwDate = None
maxImportedKwYear = 0
maxImportedKwYearDate = None
importedKwhMonth = 0
importedKwhYear = 0
importedKwh = 0
maxGeneratedKw = 0
maxGeneratedKwDate = None
maxGeneratedKwYear = 0
maxGeneratedKwYearDate = None
generatedKwhMonth = 0
generatedKwhYear = 0
generatedKwh = 0
maxParasiticKw = 0
maxParasiticKwDate = None
maxParasiticKwYear = 0
maxParasiticKwYearDate = None
parasiticKwhMonth = 0
parasiticKwhYear = 0
parasiticKwh = 0
maxDisplacedKw = 0
maxDisplacedKwDate = None
maxDisplacedKwYear = 0
maxDisplacedKwYearDate = None
displacedKwhMonth = 0
displacedKwhYear = 0
displacedKwh = 0
maxUsedKw = 0
maxUsedKwDate = None
maxUsedKwYear = 0
maxUsedKwYearDate = None
usedKwhMonth = 0
usedKwhYear = 0
usedKwh = 0

siteSnagQuery = Hiber.session().createQuery("select count(*) from SiteSnag snag where snag.site = :site and snag.startDate.date <= :finishDate and snag.finishDate.date >= :startDate)").setEntity("site", site)

if rs.next():
    hhChannelKw = rs.getFloat("value") * 2
    hhChannelStartDate = rs.getTimestamp("start_date")
    isImport = rs.getBoolean("is_import")
    status = rs.getString("status")
    sourceCode = rs.getString("code")
    supplyName = rs.getString("name")
    finishDateMillis = finish_date.getDate().getTime()
    startDateMillis = start_date.getDate().getTime()
    cal.clear()
    cal.setTime(hhChannelStartDate)
    previousMonth = cal.get(Calendar.MONTH)
    while hhDate >= startDateMillis:
        exportedKw = 0
        importedKw = 0
        parasiticKw = 0
        generatedKw = 0
        while hhChannelStartDate != None and hhChannelStartDate.getTime() == hhDate:
            if not isImport and sourceCode in ('net', 'gen-net'):
                exportedKw = exportedKw + hhChannelKw
            if isImport and sourceCode in ('net', 'gen-net'):
                importedKw = importedKw + hhChannelKw
            if (isImport and sourceCode == 'gen') or (not isImport and sourceCode == 'gen-net'):
                generatedKw = generatedKw + hhChannelKw
            if (not isImport and sourceCode == 'gen') or (isImport and sourceCode == 'gen-net'):
                parasiticKw = parasiticKw + hhChannelKw
            if rs.next():
                sourceCode = rs.getString("code")
                supplyName = rs.getString("name")
                hhChannelKw = rs.getFloat("value") * 2
                hhChannelStartDate = rs.getTimestamp("start_date")
                isImport = rs.getBoolean("is_import")
                status = rs.getString("status")
                cal.clear()
                cal.setTime(hhChannelStartDate)
                month = cal.get(Calendar.MONTH)
            else:
                hhChannelStartDate = None
        if exportedKw > maxExportedKw:
            maxExportedKw = exportedKw
            maxExportedKwDate = hhDate
        if importedKw > maxImportedKw:
            maxImportedKw = importedKw
            maxImportedKwDate = hhDate
        if generatedKw > maxGeneratedKw:
            maxGeneratedKw = generatedKw
            maxGeneratedKwDate = hhDate
        if parasiticKw > maxParasiticKw:
            maxParasiticKw = parasiticKw
            maxParasiticKwDate = hhDate
        displacedKw = generatedKw - parasiticKw - exportedKw
        if displacedKw > maxDisplacedKw:
            maxDisplacedKw = displacedKw
            maxDisplacedKwDate = hhDate
        usedKw = importedKw + displacedKw
        if usedKw > maxUsedKw:
            maxUsedKw = usedKw
            maxUsedKwDate = hhDate
        exportedKwhMonth = exportedKwhMonth + exportedKw / 2
        importedKwhMonth = importedKwhMonth + importedKw / 2
        generatedKwhMonth = generatedKwhMonth + generatedKw / 2
        parasiticKwhMonth = parasiticKwhMonth + parasiticKw / 2
        displacedKwhMonth = displacedKwhMonth + displacedKw / 2
        usedKwhMonth = usedKwhMonth + usedKw / 2
        cal.clear()
        cal.setTimeInMillis(hhDate)
        if cal.get(Calendar.DAY_OF_MONTH) == 1 and cal.get(Calendar.HOUR_OF_DAY) == 0 and cal.get(Calendar.MINUTE) == 0:
            monthElement = doc.createElement("month")
            source.appendChild(monthElement)
            cal.add(Calendar.MINUTE, 30)
            monthStartDate = cal.getTime()
            cal.add(Calendar.MONTH, 1)
            cal.add(Calendar.MINUTE, -30)
            monthFinishDate = cal.getTime()
            if siteSnagQuery.setTimestamp("startDate", monthStartDate).setTimestamp("finishDate", monthFinishDate).uniqueResult() > 0:
                monthElement.setAttribute("has-site-snags", "true")
            monthStartMonadDate = HhStartDate(monthStartDate)
            monthStartMonadDate.setLabel("start")
            monthElement.appendChild(monthStartMonadDate.toXml(doc))
            monthFinishMonadDate = HhStartDate(monthFinishDate)
            monthFinishMonadDate.setLabel("finish")
            monthElement.appendChild(monthFinishMonadDate.toXml(doc))
            monthElement.setAttribute("max-exported-kw", str(int(round(maxExportedKw))))
            if maxExportedKwDate != None:
                monthElement.setAttribute("max-exported-kw-date", MonadDate(Date(maxExportedKwDate)).toString())
            monthElement.setAttribute("exported-kwh", str(int(round(exportedKwhMonth))))
            monthElement.setAttribute("max-imported-kw", str(int(round(maxImportedKw))))
            if maxImportedKwDate != None:
                monthElement.setAttribute("max-imported-kw-date", MonadDate(Date(maxImportedKwDate)).toString())
            monthElement.setAttribute("imported-kwh", str(int(round(importedKwhMonth))))
            monthElement.setAttribute("max-generated-kw", str(int(round(maxGeneratedKw))))
            if maxGeneratedKwDate != None:
                monthElement.setAttribute("max-generated-kw-date", MonadDate(Date(maxGeneratedKwDate)).toString())
            monthElement.setAttribute("generated-kwh", str(int(round(generatedKwhMonth))))
            monthElement.setAttribute("max-parasitic-kw", str(int(round(maxParasiticKw))))
            if maxParasiticKwDate != None:
                monthElement.setAttribute("max-parasitic-kw-date", MonadDate(Date(maxParasiticKwDate)).toString())
            monthElement.setAttribute("parasitic-kwh", str(int(round(parasiticKwhMonth))))
            monthElement.setAttribute("max-displaced-kw", str(int(round(maxDisplacedKw))))
            if maxDisplacedKwDate != None:
                monthElement.setAttribute("max-displaced-kw-date", MonadDate(Date(maxDisplacedKwDate)).toString())
            monthElement.setAttribute("displaced-kwh", str(int(round(displacedKwhMonth))))
            monthElement.setAttribute("max-used-kw", str(int(round(maxUsedKw))))
            if maxUsedKwDate != None:
                monthElement.setAttribute("max-used-kw-date", MonadDate(Date(maxUsedKwDate)).toString())
            monthElement.setAttribute("used-kwh", str(int(round(usedKwhMonth))))
            if maxExportedKw > maxExportedKwYear:
                maxExportedKwYear = maxExportedKw
                maxExportedKwYearDate = maxExportedKwDate
            maxExportedKw = 0
            maxExportedKwDate = None
            exportedKwhYear = exportedKwhYear + exportedKwhMonth
            exportedKwhMonth = 0
            if maxImportedKw > maxImportedKwYear:
                maxImportedKwYear = maxImportedKw
                maxImportedKwYearDate = maxImportedKwDate
            maxImportedKw = 0
            maxImportedKwDate = None
            importedKwhYear = importedKwhYear + importedKwhMonth
            importedKwhMonth = 0
            if maxGeneratedKw > maxGeneratedKwYear:
                maxGeneratedKwYear = maxGeneratedKw
                maxGeneratedKwYearDate = maxGeneratedKwDate
            maxGeneratedKw = 0
            maxGeneratedKwDate = None
            generatedKwhYear = generatedKwhYear + generatedKwhMonth
            generatedKwhMonth = 0
            if maxParasiticKw > maxParasiticKwYear:
                maxParasiticKwYear = maxParasiticKw
                maxParasiticKwYearDate = maxParasiticKwDate
            maxParasiticKw = 0
            maxParasiticKwDate = None
            parasiticKwhYear = parasiticKwhYear + parasiticKwhMonth
            parasiticKwhMonth = 0
            if maxDisplacedKw > maxDisplacedKwYear:
                maxDisplacedKwYear = maxDisplacedKw
                maxDisplacedKwYearDate = maxDisplacedKwDate
            maxDisplacedKw = 0
            maxDisplacedKwDate = None
            displacedKwhYear = displacedKwhYear + displacedKwhMonth
            displacedKwhMonth = 0
            if maxUsedKw > maxUsedKwYear:
                maxUsedKwYear = maxUsedKw
                maxUsedKwYearDate = maxUsedKwDate
            maxUsedKw = 0
            maxUsedKwDate = None
            usedKwhYear = usedKwhYear + usedKwhMonth
            usedKwhMonth = 0
        hhDate = HhStartDate.getPrevious(cal, hhDate)
    source.setAttribute("max-exported-kw", str(int(round(maxExportedKwYear))))
    if maxExportedKwYearDate != None:
        source.setAttribute("max-exported-kw-date", MonadDate(Date(maxExportedKwYearDate)).toString())
    source.setAttribute("exported-kwh", str(int(round(exportedKwhYear))))
    source.setAttribute("max-imported-kw", str(int(round(maxImportedKwYear))))
    if maxImportedKwYearDate != None:
        source.setAttribute("max-imported-kw-date", MonadDate(Date(maxImportedKwYearDate)).toString())
    source.setAttribute("imported-kwh", str(int(round(importedKwhYear))))
    source.setAttribute("max-generated-kw", str(int(round(maxGeneratedKwYear))))
    if maxGeneratedKwYearDate != None:
        source.setAttribute("max-generated-kw-date", MonadDate(Date(maxGeneratedKwYearDate)).toString())
    source.setAttribute("generated-kwh", str(int(round(generatedKwhYear))))
    source.setAttribute("max-parasitic-kw", str(int(round(maxParasiticKwYear))))
    if maxParasiticKwYearDate != None:
        source.setAttribute("max-parasitic-kw-date", MonadDate(Date(maxParasiticKwYearDate)).toString())
    source.setAttribute("parasitic-kwh", str(int(round(parasiticKwhYear))))
    source.setAttribute("max-displaced-kw", str(int(round(maxDisplacedKwYear))))
    if maxDisplacedKwYearDate != None:
        source.setAttribute("max-displaced-kw-date", MonadDate(Date(maxDisplacedKwYearDate)).toString())
    source.setAttribute("displaced-kwh", str(int(round(displacedKwhYear))))
    source.setAttribute("max-used-kw", str(int(round(maxUsedKwYear))))
    if maxUsedKwYearDate != None:
        source.setAttribute("max-used-kw-date", MonadDate(Date(maxUsedKwYearDate)).toString())
    source.setAttribute("used-kwh", str(int(round(usedKwhYear))))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
  <xsl:template match="/">
    <html>
      <head>
        <link rel="stylesheet" type="text/css"
            href="{/source/request/@context-path}/reports/10/output/" />
        <title>Chellow &gt; Sites &gt; <xsl:value-of
                        select="concat(/source/site/@code, ' ', /source/site/@name)" />
                    &gt; Monthly figures
        </title>
                <style>
                    &lt;![CDATA[
                colgroup.gray {
                    background: silver;
                }

                tr.error {
                    color: red;
                }
                ]]&gt;
                </style>
      </head>
      <body>
        <p><a href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/3/output/">
                        <xsl:value-of select="'Sites'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/5/output/?site-id={/source/site/@id}">
                        <xsl:value-of
                            select="concat(/source/site/@code, ' ', /source/site/@name)" />
                    </a>
                    &gt; Monthly figures
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action=".">
                    <fieldset>
                        <legend>Show table</legend>
                        <input type="hidden" name="site-id"
                            value="{/source/request/parameter[@name='site-id']/value}" />
                        <xsl:value-of
                            select="'For 12 months finishing at the end of '" />
                        <input size="4" length="4"
                            name="finish-year" value="{/source/@finish-year}" />
                        <xsl:value-of select="' - '" />
                        <select name="finish-month">
                            <xsl:for-each
                                select="/source/month-in-year">
                                <option>
                                    <xsl:if
                                        test="number(/source/@finish-month) = number(@value)">
                                        <xsl:attribute
                                            name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@value" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Show" />
                    </fieldset>
                </form>

                <table>
                    <caption>Months</caption>
                    <colgroup />
                    <colgroup class="gray" span="3" />
                    <colgroup span="3" />
                    <colgroup class="gray" span="3" />
                    <colgroup span="3" />
                    <colgroup class="gray" span="3" />
                    <colgroup span="3" />
                    <tfoot>
                        <tr>
                            <th>For all months</th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-imported-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-imported-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-imported-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@imported-kwh" />
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-used-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-used-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-used-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@used-kwh" />
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-displaced-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-displaced-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-displaced-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@displaced-kwh" />
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-generated-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-generated-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-generated-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@generated-kwh" />
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-exported-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-exported-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-exported-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@exported-kwh" />
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-parasitic-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-parasitic-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-parasitic-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@parasitic-kwh" />
                            </th>
                        </tr>
                    </tfoot>
                    <thead>
                        <tr>
                            <th rowspan="2">Month</th>
                            <th colspan="3">Imported</th>
                            <th colspan="3">Used</th>
                            <th colspan="3">Displaced</th>
                            <th colspan="3">Generated</th>
                            <th colspan="3">Exported</th>
                            <th colspan="3">Parasitic</th>
                        </tr>
                        <tr>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>Data quality</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/month">
                            <tr>
                                <xsl:if test="@has-site-snags">
                                    <xsl:attribute name="class">
                                        <xsl:value-of select="'error'" />
                                    </xsl:attribute>
                                </xsl:if>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@max-imported-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-imported-kw-date">
                                            <xsl:value-of
                                                select="@max-imported-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@imported-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of select="@max-used-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-used-kw-date">
                                            <xsl:value-of
                                                select="@max-used-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of select="@used-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@max-displaced-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-displaced-kw-date">
                                            <xsl:value-of
                                                select="@max-displaced-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@displaced-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@max-generated-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-generated-kw-date">
                                            <xsl:value-of
                                                select="@max-generated-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@generated-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@max-exported-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-exported-kw-date">
                                            <xsl:value-of
                                                select="@max-exported-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@exported-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@max-parasitic-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-parasitic-kw-date">
                                            <xsl:value-of
                                                select="@max-parasitic-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@parasitic-kwh" />
                                </td>
                                <td>
                                    <xsl:if
                                        test="@has-site-snags = 'true'">
                                        See
                                        <a
                                            href="{/source/request/@context-path}/reports/11/output/?site-id={/source/site/@id}&amp;months=1&amp;finish-year={hh-start-date[@label='start']/@year}&amp;finish-month={hh-start-date[@label='start']/@month}">
                                            generation graph
                                        </a>
                                        for errors.
                                    </xsl:if>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[15]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supply MPAN months]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.monad.types import MonadDate
from java.util import Calendar, Locale, TimeZone, GregorianCalendar
from net.sf.chellow.physical import HhStartDate, Supply

supply_id = inv.getLong("supply-id")
supply = Supply.getSupply(supply_id)
source.appendChild(supply.toXml(doc))
is_import = inv.getBoolean("is-import");
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
source.appendChild(MonadDate().toXml(doc))
if inv.hasParameter('year'):
    year = inv.getInteger('year')
    years = inv.getInteger('years')
else:
    year = cal.get(Calendar.YEAR)
    years = 1

source.appendChild(MonadDate.getMonthsXml(doc))

cal.set(Calendar.YEAR, year - years + 1)
cal.set(Calendar.MONTH, Calendar.JANUARY)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
month_start = HhStartDate(cal.getTime())

kwh_at_md_query = Hiber.session().createQuery("from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isKwh = true and datum.channel.isImport = :isImport and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate order by datum.value desc, datum.startDate.date").setEntity("supply", supply).setBoolean('isImport', is_import)

kvarh_at_md_query = Hiber.session().createQuery("from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isKwh = false and datum.channel.isImport = :isImport and datum.startDate.date = :mdDate").setEntity("supply", supply).setBoolean('isImport', is_import)

total_kwh_query = Hiber.session().createQuery("select sum(datum.value) from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isKwh = true and datum.channel.isImport = :isImport and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate").setEntity("supply", supply).setBoolean('isImport', is_import)

for i in range(12 * years):
    cal.add(Calendar.MONTH, 1)
    next_month_start = HhStartDate(cal.getTime())
    month_finish = next_month_start.getPrevious()
    
    month_element = doc.createElement("month")
    source.appendChild(month_element)
    generation = supply.getGeneration(month_finish)
    if generation != None:
        mpan = generation.getMpan(is_import)
        if mpan != None:
            month_element.setAttribute("mpan-core", mpan.getCore().toString())
            month_element.setAttribute("agreed-supply-capacity", str(mpan.getAgreedSupplyCapacity()))
    kwh_at_md_datum = kwh_at_md_query.setTimestamp("startDate", month_start.getDate()).setTimestamp("finishDate", month_finish.getDate()).setMaxResults(1).uniqueResult()
    if kwh_at_md_datum is not None:
        kwh_at_md = kwh_at_md_datum.getValue().doubleValue()
        month_element.setAttribute("md-kw", str(round(kwh_at_md * 2)))
        md_date = kwh_at_md_datum.getStartDate()
        md_date.setLabel('md')
        month_element.appendChild(md_date.toXml(doc))
        kvarh_at_md_datum = kvarh_at_md_query.setTimestamp("mdDate", kwh_at_md_datum.getStartDate().getDate()).uniqueResult()
        if kvarh_at_md_datum != None:
            kvarh_at_md = kvarh_at_md_datum.getValue().doubleValue()
            kvah_at_md = (kwh_at_md ** 2 + kvarh_at_md ** 2) ** 0.5
            if kvah_at_md > 0:
                pf = kwh_at_md / kvah_at_md
                month_element.setAttribute("pf", str(round(pf, 4)))
            month_element.setAttribute("kva-at-md", str(round(kvah_at_md * 2)))
    total_kwh = total_kwh_query.setTimestamp("startDate", month_start.getDate()).setTimestamp("finishDate", month_finish.getDate()).uniqueResult()
    if total_kwh != None:
        month_element.setAttribute("total-kwh", str(round(total_kwh.doubleValue())))
    month_start.setLabel('month-start')
    month_element.appendChild(month_start.toXml(doc))
    month_start = next_month_start]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Supplies &gt;
                    <xsl:value-of select="/source/supply/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/99/output/">
                        <xsl:value-of select="'Supplies'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/7/output/?supply-id={/source/supply/@id}">
                        <xsl:value-of select="/source/supply/@id" />
                    </a>
                    &gt;
                    <xsl:choose>
                        <xsl:when
                            test="/source/request/parameter[@name='is-import']/value = 'true'">
                            Import
                        </xsl:when>
                        <xsl:otherwise>Export</xsl:otherwise>
                    </xsl:choose>
                    data by month
                </p>

                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action=".">
                    <fieldset>
                        <input type="hidden" name="is-import" value="{/source/request/parameter[@name='is-import']/value}"/>
                        <input type="hidden" name="supply-id" value="{/source/supply/@id}"/>
                        <legend>View Supply Months</legend>
<br/>

                        <xsl:value-of select="'For '"/>
                        <input name="years" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='years']">
                                <xsl:value-of select="/source/request/parameter[@name='years']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input><xsl:value-of select="' years, ending 31st December '"/>
<input name="year" maxlength="4" size="4">
<xsl:attribute name="value">
    <xsl:choose>
        <xsl:when test="/source/request/parameter[@name='year']">
            <xsl:value-of select="/source/request/parameter[@name='year']"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="/source/date/@year"/>
        </xsl:otherwise>
    </xsl:choose>
</xsl:attribute>
</input><xsl:value-of select="' '"/>
                       <input type="submit" value="View"/><br/><br/>
                    </fieldset>
                </form>
                <table>
                    <caption>Months</caption>
                    <thead>
                        <tr>
                            <th rowspan="2">Month Starting (UTC)</th>
                            <th rowspan="2">MPAN Core</th>
                            <th colspan="4">At MD kW</th>
                            <th rowspan="2">Agreed Supply Capacity (kVA)</th>
                            <th rowspan="2">kWh</th>
                        </tr>
                        <tr>
                            <th>Date (UTC)</th>
                            <th>kW</th>
                            <th>Power Factor</th>
                            <th>kVA</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/month">
                            <tr>
                                <td>
                                    <xsl:value-of select="concat(hh-start-date[@label='month-start']/@year, '-', hh-start-date[@label='month-start']/@month, '-', hh-start-date[@label='month-start']/@day, ' ', hh-start-date[@label='month-start']/@hour, ':', hh-start-date[@label='month-start']/@minute)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@mpan-core">
                                            <xsl:value-of
                                                select="@mpan-core" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="hh-start-date[@label='md']">
                                            <xsl:value-of
                                                select="concat(hh-start-date[@label='md']/@year, '-', hh-start-date[@label='md']/@month, '-', hh-start-date[@label='md']/@day, ' ', hh-start-date[@label='md']/@hour, ':', hh-start-date[@label='md']/@minute)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@md-kw">
                                            <xsl:value-of
                                                select="round(@md-kw)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@pf">
                                            <xsl:value-of select="@pf" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@kva-at-md">
                                            <xsl:value-of
                                                select="round(@kva-at-md)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@agreed-supply-capacity">
                                            <xsl:value-of
                                                select="@agreed-supply-capacity" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@total-kwh">
                                            <xsl:value-of
                                                select="round(@total-kwh)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[17]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supply Raw HH Data]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException, XmlTree
from java.util import Calendar, GregorianCalendar, TimeZone, Locale, Date
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.text import SimpleDateFormat
from net.sf.chellow.physical import HhStartDate, HhDatum, Supply

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
supply_id = inv.getLong("supply-id")
months = inv.getInteger('months')
finish_year = inv.getInteger("finish-year")
finish_month = inv.getInteger("finish-month")
if not inv.isValid():
    raise UserException()

cal.clear()
cal.set(Calendar.YEAR, finish_year)
cal.set(Calendar.MONTH, finish_month - 1)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = cal.getTime()
cal.add(Calendar.MINUTE, 30)

cal.add(Calendar.MONTH, months * -1)
start_date = cal.getTime()
dateFormat = SimpleDateFormat("yyyy-MM-dd' 'HH:mm'Z'")
dateFormat.setCalendar(cal)
supply = Supply.getSupply(supply_id)
supplyElement = supply.toXml(doc, XmlTree("generationLast", XmlTree("mpans", XmlTree("core").put('llfc'))).put("source"))
source.appendChild(supplyElement)
source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))
con = Hiber.session().connection()
stmt = con.prepareStatement("select hh_datum.value, hh_datum.start_date, hh_datum.status, channel.is_import, channel.is_kwh from hh_datum, channel, supply_generation where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = ? and hh_datum.start_date >= ? and hh_datum.start_date <= ? order by hh_datum.start_date", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
stmt.setInt(1, supply.getId())
stmt.setTimestamp(2, Timestamp(start_date.getTime()))
stmt.setTimestamp(3, Timestamp(finish_date.getTime()))
stmt.setFetchSize(100)
rs = stmt.executeQuery()
hhDate = start_date.getTime()
actualStatus = HhDatum.ACTUAL
if rs.next():
    value_str = rs.getBigDecimal("value").toString()
    hhChannelStartDate = rs.getTimestamp("start_date")
    isImport = rs.getBoolean("is_import")
    isKwh = rs.getBoolean("is_kwh")
    status = rs.getString("status")
    finishDateMillis = finish_date.getTime()
    cal = MonadDate.getCalendar()
    while hhDate <= finishDateMillis:
        datumElement = doc.createElement("datum")
        supplyElement.appendChild(datumElement)
        datumElement.setAttribute("timestamp", dateFormat.format(Date(hhDate)))
        while hhChannelStartDate != None and hhChannelStartDate.getTime() == hhDate:
            if isImport:
                if isKwh:
                    datumElement.setAttribute("import-kwh-value", value_str)
                    datumElement.setAttribute("import-kwh-status", status)
                else:
                    datumElement.setAttribute("import-kvarh-value", value_str)
                    datumElement.setAttribute("import-kvarh-status", status)
            else:
                if isKwh:
                    datumElement.setAttribute("export-kwh-value", value_str)
                    datumElement.setAttribute("export-kwh-status", status)
                else:
                    datumElement.setAttribute("export-kvarh-value", value_str)
                    datumElement.setAttribute("export-kvarh-status", status)
            if rs.next():
                value_str = rs.getBigDecimal("value").toString()
                hhChannelStartDate = rs.getTimestamp("start_date")
                isImport = rs.getBoolean("is_import")
                isKwh = rs.getBoolean("is_kwh")
                status = rs.getString("status")
            else:
                hhChannelStartDate = None
        hhDate = HhStartDate.getNext(cal, hhDate)
rs.close()]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />

    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; Supplies &gt;
                    <xsl:value-of select="/source/supply/@name" />
                    &gt; Hh data
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/99/output/">
                        <xsl:value-of select="'Supplies'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/7/output/?supply-id={/source/supply/@id}">
                        <xsl:value-of select="/source/supply/@name" />
                    </a>
                    &gt; HH Data
                </p>

                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>

                <table><caption>Supply</caption>
                    <tr>
                        <th>Name</th>
                        <td><xsl:value-of select="/source/supply/@name" /></td>
                    </tr>
                    <tr>
                        <th>Import MPAN core</th>
                        <td><xsl:value-of
                            select="/source/supply/supply-generation/mpan[llfc/@is-import='true']/mpan-core/@core" /></td>
                    </tr>
                    <tr>
                        <th>Export MPAN core</th>
                        <td><xsl:value-of
                            select="/source/supply/supply-generation/mpan[llfc/@is-import='false']/mpan-core/@core" /></td>
                    </tr>
                    <tr>
                        <th>Source Code</th>
                        <td><xsl:value-of
                            select="/source/supply/source/@code" /></td>
                    </tr>
                </table>
                <br/>
                <form action=".">
                    <fieldset>
                        <legend>Show HH Data</legend>
                        <input type="hidden" name="supply-id"
                            value="{/source/supply/@id}" />
<br/>
                        <xsl:value-of select="'For '"/>
                        <input name="months" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='months']">
                                <xsl:value-of select="/source/request/parameter[@name='months']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
<xsl:value-of select="' month(s) finishing at the end of '"/>
                        <input name="finish-year" value="{/source/request/parameter[@name='finish-year']/value}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="finish-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/request/parameter[@name='finish-month']/value">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Show"/>
                    </fieldset>
                </form>
                <table>
                    <caption>Hh Data</caption>
                    <thead>
                        <tr>
                            <th rowspan="3">HH Starting</th>
                            <th colspan="4">Import</th>
                            <th colspan="4">Export</th>
                        </tr>
                        <tr>
                            <th colspan="2">kWh</th>
                            <th colspan="2">kVArh</th>
                            <th colspan="2">kWh</th>
                            <th colspan="2">kVArh</th>
                        </tr>
                        <tr>
                            <th>Value</th>
                            <th>Status</th>
                            <th>Value</th>
                            <th>Status</th>
                            <th>Value</th>
                            <th>Status</th>
                            <th>Value</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/supply/datum">
                            <tr>
                                <td>
                                    <xsl:value-of select="@timestamp" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@import-kwh-value" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@import-kwh-status" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@import-kvarh-value" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@import-kvarh-status" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@export-kwh-value" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@export-kwh-status" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@export-kvarh-value" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@export-kvarh-status" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[19]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Style Sheet]]></value>
        <value><![CDATA[inv.getResponse().setContentType("text/css")
pw = inv.getResponse().getWriter()
pw.println("table {                         ")
pw.println("    border: thin solid gray;    ")
pw.println("    border-collapse: collapse;  ")
pw.println("}                               ")
pw.println("td {                            ")
pw.println("    border: thin solid gray;    ")
pw.println("}                               ")
pw.println("th {                            ")
pw.println("    border: thin solid gray;    ")
pw.println("}                               ")
pw.println("#title {                        ")
pw.println("    font-size: xx-large         ")
pw.println("}                               ")
pw.println(".logo {                         ")
pw.println("    color: green;               ")
pw.println("}                               ")
pw.println("                                ")
pw.println("                                ")
pw.println("                                ")
pw.println("                                ")
pw.println("                                ")
pw.println("                                ")
pw.println("                                ")
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[21]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site HH Graph]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.lang import System
from net.sf.chellow.monad.types import MonadDate 
from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date
from java.awt.image import BufferedImage
from javax.imageio import ImageIO
from java.awt import Font, Color
import math
from java.sql import ResultSet, Timestamp
from java.text import SimpleDateFormat
from net.sf.chellow.physical import HhStartDate, HhDatum, Site

start = System.currentTimeMillis()
inv.getResponse().setContentType("image/png")
site_id = inv.getLong("site-id")
finishDateYear = inv.getInteger("finish-year")
finishDateMonth = inv.getInteger("finish-month")
months = inv.getInteger("months")
if not inv.isValid():
    raise UserException()
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.clear()
cal.set(Calendar.YEAR, finishDateYear)
cal.set(Calendar.MONTH, finishDateMonth)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finishDate = cal.getTime()
cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
startDate = cal.getTime()

cal.setTime(finishDate)
cal.add(Calendar.DAY_OF_MONTH, -1)

site = Site.getSite(site_id)
supplies = Hiber.session().createQuery("select distinct supply from Supply supply join supply.generations supplyGeneration join supplyGeneration.siteSupplyGenerations siteSupplyGeneration where siteSupplyGeneration.site = :site and supply.source.code not in ('sub', 'gen-net')").setEntity('site', site).list()

con = Hiber.session().connection()

stmt = con.prepareStatement("select hh_datum.value, hh_datum.start_date, hh_datum.status, channel.is_import, source.code from hh_datum, channel, supply_generation, supply, source where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = supply.id and supply.source_id = source.id and channel.is_kwh is true and hh_datum.start_date >= ? and hh_datum.start_date <= ? and supply.id in (" + ','.join(str(supply.getId()) for supply in supplies)
 + ") order by hh_datum.start_date", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)

stmt.setTimestamp(1, Timestamp(startDate.getTime()))
stmt.setTimestamp(2, Timestamp(finishDate.getTime()))
stmt.setFetchSize(100)
rs = stmt.executeQuery()
hhDate = HhStartDate(startDate).getDate().getTime()
maxScale = 2
minScale = 0
resultData = []
actualStatus = HhDatum.ACTUAL
if rs.next():
    hhChannelValue = rs.getFloat("value")
    hhChannelStartDate = rs.getTimestamp("start_date")
    isImport = rs.getBoolean("is_import")
    status = rs.getString("status")
    source_code = rs.getString('code')
    finishDateMillis = finishDate.getTime()
    cal = MonadDate.getCalendar()
    while hhDate <= finishDateMillis:
        complete = "blank"
        hhValue = 0
        while hhChannelStartDate != None and hhChannelStartDate.getTime() == hhDate:
            if (isImport and source_code != '3rd-party-reverse') or (not isImport and source_code == '3rd-party-reverse'):
                hhValue += hhChannelValue
            else:
                hhValue -= hhChannelValue
            if status == actualStatus:
                if complete == "blank":
                    complete = "actual"
            else:
                complete = "not-actual"
            if rs.next():
                hhChannelValue = rs.getFloat("value")
                hhChannelStartDate = rs.getTimestamp("start_date")
                isImport = rs.getBoolean("is_import")
                status = rs.getString("status")
            else:
                hhChannelStartDate = None
        hhDate = HhStartDate.getNext(cal, hhDate)
        resultData.append([hhValue, hhDate, complete == "actual"])
        maxScale = max(maxScale, int(math.ceil(hhValue)))
        minScale = min(minScale, int(math.floor(hhValue)))
    #System.err.println('ooostep is max scale' + str(maxScale) + ' min scale ' + str(minScale))

    #raise Exception('pppstep is max scale' + str(maxScale) + ' min scale ' + str(minScale))
    step = 10**int(math.floor(math.log10(maxScale - minScale)))
    #raise Exception('step is ' + str(step))

    #System.err.println('kkstep is ' + str(step) + ' max scale' + str(maxScale) + ' min scale ' + str(minScale))
    '''
    if step > (maxScale - minScale) / 2:
        step = int(float(step) / 4)
    '''
if len(resultData) > 0:
    graphLeft = 100
    image = BufferedImage(graphLeft + len(resultData) + 100, 400, BufferedImage.TYPE_4BYTE_ABGR)
    graphics = image.createGraphics()
    defaultFont = graphics.getFont()
    smallFont = Font(defaultFont.getName(), defaultFont.getStyle(), 10)
    maxHeight = 300
    scaleFactor = float(maxHeight) / (maxScale - minScale)
    graphTop = 50
    xAxis = int(graphTop + maxScale * scaleFactor)
    monthDateFormat = SimpleDateFormat("MMMMMM")
    monthDateFormat.setCalendar(cal)
    yearDateFormat = SimpleDateFormat("yyyy")
    yearDateFormat.setCalendar(cal)
    monthPoints = []
    for i in range(len(resultData)):
        dataHh = resultData[i]
        value = dataHh[0]
        date = dataHh[1]
        cal.setTimeInMillis(date)
        hour = cal.get(Calendar.HOUR_OF_DAY)
        minute = cal.get(Calendar.MINUTE)
        height = int(value * scaleFactor)
        if dataHh[2]:
            graphics.setColor(Color.BLUE)
        else:
            graphics.setColor(Color.GRAY)
            graphics.fillRect(graphLeft + i, graphTop, 1, maxHeight)
            graphics.setColor(Color.BLACK)
        if height > 0:
            graphics.fillRect(graphLeft + i, xAxis - height, 1, height)
        else:
            graphics.fillRect(graphLeft + i, xAxis, 1, abs(height))
        if hour == 0 and minute == 0:
            day = cal.get(Calendar.DAY_OF_MONTH)
            dayOfWeek = cal.get(Calendar.DAY_OF_WEEK)
            if dayOfWeek == 7 or dayOfWeek == 1:
                graphics.setColor(Color.RED)
            else:
                graphics.setColor(Color.BLACK)
            graphics.drawString(str(day), graphLeft + i + 16, graphTop + maxHeight + 20)
            graphics.setColor(Color.BLACK)
            graphics.fillRect(graphLeft + i, graphTop + maxHeight, 1, 5)
            if day == 15:
                graphics.drawString(monthDateFormat.format(cal.getTime()), graphLeft + i + 16, graphTop + maxHeight + 45)
                monthPoints.append(i)
    graphics.setColor(Color.BLACK)
    graphics.fillRect(graphLeft, graphTop, 1, maxHeight)

    graphics.setColor(Color.BLACK)

    for point in range(0, maxScale, step) + range(0, minScale, step * -1):
        graphics.fillRect(graphLeft - 5, int(xAxis - point * scaleFactor), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxis - point * scaleFactor + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxis - point * scaleFactor - 2))

    graphics.drawString("kW", graphLeft - 90, 100)
    title = "Electricity use at site " + site.getCode() + " " + site.getName() + " for " + str(months) + " month"
    if months > 1:
        title += "s"
    title += " ending " + monthDateFormat.format(Date(finishDate.getTime() - 1)) + " " + yearDateFormat.format(Date(finishDate.getTime() - 1))
    graphics.drawString(title, 30, 30)
    graphics.setFont(smallFont)
    graphics.drawString("Poor data is denoted by a grey background and black foreground.", 30, 395)
else:
    image = BufferedImage(400, 400, BufferedImage.TYPE_4BYTE_ABGR)
    graphics = image.createGraphics()
    graphics.setColor(Color.BLACK)
    graphics.drawString("No data available for this period.", 30, 10)

os = inv.getResponse().getOutputStream()
graphics.setColor(Color.BLACK)
#graphics.drawString("report took..." + str(java.lang.System.currentTimeMillis() - start) + "ms", 10, 390)
ImageIO.write(image, "png", os)
os.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[23]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Generation Graph]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.physical import HhStartDate, HhDatum, Site
from net.sf.chellow.monad.types import MonadDate
from java.awt.image import BufferedImage
from javax.imageio import ImageIO
from java.awt import Color, Font
import math
from java.sql import Timestamp, ResultSet
from java.text import SimpleDateFormat
from java.lang import System
from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date

colour_list = [Color.BLUE, Color.GREEN, Color.RED, Color.YELLOW, Color.MAGENTA, Color.CYAN, Color.PINK, Color.ORANGE]

def set_colour(graphics, supplies, id):
    graphics.setColor(supplies[id][0])

def add_colour(supplies, id, name, source_code):
    if not id in supplies:
        supplies[id] = [len(supplies), name, source_code]

def sort_colour(supplies):
    keys = supplies.keys()
    keys.sort()
    for i in range(len(keys)):
        supplies[keys[i]][0] = colour_list[i]

def paint_legend(supplies, graph_top):
    i = 0
    keys = supplies.keys()
    keys.sort()
    for key in keys:
        supply = supplies[key]
        graphics.setColor(supply[0])
        graphics.fillRect(12, int(graph_top + 15 + (10 * i)), 8, 8)
        graphics.setColor(Color.BLACK)
        graphics.drawString(supply[2] + ' ' + supply[1], 25, int(graph_top + 22 + (10 * i)))
        i = i + 1        

def minimum_scale(min_scale, max_scale):
    if min_scale == 0 and max_scale == 0:
        min_scale = 0
        max_scale = 10
    if min_scale < 0 and min_scale > -10:
        min_scale = -10
    if max_scale > 0 and max_scale < 10:
        max_scale = 10
    return min_scale, max_scale

start = System.currentTimeMillis()
inv.getResponse().setContentType("image/png")
site_id = inv.getLong("site-id")
finishDateYear = inv.getInteger("finish-year")
finishDateMonth = inv.getInteger("finish-month")
months = inv.getInteger("months")
if not inv.isValid():
    raise UserException()
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.set(Calendar.YEAR, finishDateYear)
cal.set(Calendar.MONTH, finishDateMonth - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finishDate = cal.getTime()

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
startDate = cal.getTime()

#cal.setTime(finishDate)
#cal.add(Calendar.DAY_OF_MONTH, -1)

generated_supplies = {}
imported_supplies = {}
exported_supplies = {}
maxHeight = 80
pxStep = 10
maxOverallScale = 0
minOverallScale = 0
maxExportedScale = 0
minExportedScale = 0
maxImportedScale = 0
minImportedScale = 0
maxGeneratedScale = 0
maxParasiticScale = 0
maxDisplacedScale = 0
minDisplacedScale = 0
maxUsedScale = 0
minUsedScale = 0
resultData = []
actualStatus = HhDatum.ACTUAL

site = Site.getSite(site_id)
con = Hiber.session().connection()
hhDate = HhStartDate(startDate).getDate().getTime()
groups = site.groups(HhStartDate(startDate), HhStartDate(finishDate), True)
for i in range(groups.size()):
    group = groups.get(i)
    suppliesSQL = ''
    for supply in group.getSupplies():
        suppliesSQL = suppliesSQL + str(supply.getId()) + ','
    stmt = con.prepareStatement("select hh_datum.value, hh_datum.start_date, hh_datum.status, channel.is_import, supply.name, source.code, supply.id from hh_datum, channel, supply_generation, supply, source where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = supply.id and supply.source_id = source.id and channel.is_kwh is true and hh_datum.start_date >= ? and hh_datum.start_date <= ? and supply.id in (" + suppliesSQL[:-1] + ") order by hh_datum.start_date, supply.id", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
    stmt.setTimestamp(1, Timestamp(group.getFrom().getDate().getTime()))
    stmt.setTimestamp(2, Timestamp(group.getTo().getDate().getTime()))
    stmt.setFetchSize(100)
    rs = stmt.executeQuery()
    if rs.next():
        hhChannelValue = rs.getFloat("value")
        hhChannelStartDate = rs.getTimestamp("start_date")
        isImport = rs.getBoolean("is_import")
        status = rs.getString("status")
        source_code = rs.getString("code")
        supply_name = rs.getString("name")
        supply_id = rs.getLong('id')
        finishDateMillis = finishDate.getTime()
        cal = MonadDate.getCalendar()
        while hhDate <= finishDateMillis:
            complete = "blank"
            exportedValue = 0
            importedValue = 0
            parasiticValue = 0
            generatedValue = 0
            third_party_import = 0
            third_party_export = 0
            supplyList = []
            while hhChannelStartDate != None and hhChannelStartDate.getTime() == hhDate:
                if not isImport and source_code in ('net', 'gen-net'):
                    exportedValue = exportedValue + hhChannelValue
                    add_colour(exported_supplies, supply_id, supply_name, source_code)
                if isImport and source_code in ('net', 'gen-net'):
                    importedValue = importedValue + hhChannelValue
                    add_colour(imported_supplies, supply_id, supply_name, source_code)
                if (isImport and source_code == 'gen') or (not isImport and source_code == 'gen-net'):
                    generatedValue = generatedValue + hhChannelValue
                    add_colour(generated_supplies, supply_id, supply_name, source_code)
                if (not isImport and source_code == 'gen') or (isImport and source_code == 'gen-net'):
                    parasiticValue = parasiticValue + hhChannelValue
                    add_colour(generated_supplies, supply_id, supply_name, source_code)
                supplyList.append([supply_name, source_code, isImport, hhChannelValue, supply_id])
                if (isImport and source_code == '3rd-party') or (not isImport and source_code == '3rd-party-reverse'):
                    third_party_import = third_party_import + hhChannelValue
                if (not isImport and source_code == '3rd-party') or (isImport and source_code == '3rd-party-reverse'):
                    third_party_export = third_party_export + hhChannelValue
                if rs.next():
                    source_code = rs.getString("code")
                    supply_name = rs.getString("name")
                    hhChannelValue = rs.getFloat("value")
                    hhChannelStartDate = rs.getTimestamp("start_date")
                    isImport = rs.getBoolean("is_import")
                    status = rs.getString("status")
                    supply_id = rs.getLong('id')
                else:
                    hhChannelStartDate = None
            maxExportedScale = max(maxExportedScale, exportedValue)
            minExportedScale = min(minExportedScale, exportedValue)
            maxImportedScale = max(maxImportedScale, importedValue)
            minImportedScale = min(minImportedScale, importedValue)
            maxGeneratedScale = max(maxGeneratedScale, generatedValue)
            maxParasiticScale = max(maxParasiticScale, parasiticValue)
            displacedValue = generatedValue - parasiticValue - exportedValue
            maxDisplacedScale = max(maxDisplacedScale, displacedValue)
            minDisplacedScale = min(minDisplacedScale, displacedValue)
            usedValue = importedValue + displacedValue + third_party_import - third_party_export
            maxUsedScale = max(maxUsedScale, usedValue)
            minUsedScale = min(minUsedScale, usedValue)
            resultData.append([hhDate, supplyList, usedValue, displacedValue])
            hhDate = HhStartDate.getNext(cal, hhDate)
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter("ResultData: " + str(resultData)) 
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter("Overall: " + str(maxOverallScale) + " " + str(minOverallScale) + " Exported: " + str(maxExportedScale) + " " + str(minExportedScale) + " Imported: " + str(maxImportedScale) + " " + str(minImportedScale) + " Generated: " + str(maxGeneratedScale) + " Parasitic: " + str(maxParasiticScale) + " Displaced: " + str(maxDisplacedScale) + " " + str(minDisplacedScale) + " Used: " + str(maxUsedScale) + " " + str(minUsedScale))
    sort_colour(generated_supplies)
    sort_colour(imported_supplies)
    sort_colour(exported_supplies)
    minimized_scale = minimum_scale(minExportedScale, maxExportedScale)
    minExportedScale = minimized_scale[0]
    maxExportedScale = minimized_scale[1]
    minimized_scale = minimum_scale(minImportedScale, maxImportedScale)
    minImportedScale = minimized_scale[0]
    maxImportedScale = minimized_scale[1]
    if maxGeneratedScale == 0 and maxParasiticScale == 0:
        maxGeneratedScale = 10
        maxParasiticScale = 10
    minimized_scale = minimum_scale(minUsedScale, maxUsedScale)
    minUsedScale = minimized_scale[0]
    maxUsedScale = minimized_scale[1]
    minimized_scale = minimum_scale(minDisplacedScale, maxDisplacedScale)
    minDisplacedScale = minimized_scale[0]
    maxDisplacedScale = minimized_scale[1]
    maxOverallScale = max(maxExportedScale, maxImportedScale, maxGeneratedScale, maxDisplacedScale, maxUsedScale)
    minOverallScale = min(minExportedScale, minImportedScale, minDisplacedScale, minUsedScale)
    rawStepOverall = (maxOverallScale * 2) / (maxHeight / pxStep)
    factorOverall = 10**int(math.floor(math.log10(rawStepOverall)))
    endOverall = rawStepOverall / factorOverall
    newEndOverall = 1
    if endOverall >= 2:
        newEndOverall = 2
    if endOverall >= 5:
        newEndOverall = 5
    stepOverall = newEndOverall * factorOverall
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter("Overall Step: " + str(stepOverall))
if len(resultData) > 0:
    graphLeft = 180
    scaleFactorOverall = float(maxHeight) / maxOverallScale
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter(str(scaleFactorExported) + " " + str(scaleFactorUsed) + " " + str(scaleFactorDisplaced) + " " + str(scaleFactorImported) + " " + str(scaleFactorGenerated))
    graphOrderExported = 5
    graphOrderImported = 4
    graphOrderGenerated = 3
    graphOrderUsed = 1
    graphOrderDisplaced = 2
    minUsed = 0
    minDisplaced = 0
    minParasitic = 0
    for i in range(0, int(minUsedScale), stepOverall * -1):
        minUsed = min(minUsed, i)
    for i in range(0, int(minDisplacedScale), stepOverall * -1):
        minDisplaced = min(minDisplaced, i)
    for i in range(0, int(maxParasiticScale), stepOverall):
        minParasitic = max(minParasitic, i)
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter(str(int((abs(minParasitic)) * scaleFactorOverall)))
    minUsed = int(abs(minUsed) * scaleFactorOverall)
    minDisplaced = int(abs(minDisplaced) * scaleFactorOverall)
    minParasitic = int(abs(minParasitic) * scaleFactorOverall)
    graphTopExported = ((graphOrderExported - 1) * (maxHeight + 22)) + 30 + minUsed + minDisplaced + minParasitic
    graphTopImported = ((graphOrderImported - 1) * (maxHeight + 22)) + 30 + minUsed + minDisplaced + minParasitic
    graphTopGenerated = ((graphOrderGenerated - 1) * (maxHeight + 22)) + 30 + minUsed + minDisplaced
    graphTopUsed = ((graphOrderUsed - 1) * (maxHeight + 22)) + 30
    graphTopDisplaced = ((graphOrderDisplaced - 1) * (maxHeight + 22)) + 30 + minUsed
    image = BufferedImage(graphLeft + len(resultData) + 100, ((maxHeight + 22) * 5) + 60 + minUsed + minDisplaced + minParasitic, BufferedImage.TYPE_4BYTE_ABGR)
    graphics = image.createGraphics()
    defaultFont = graphics.getFont()
    smallFont = Font(defaultFont.getName(), defaultFont.getStyle(), 10)
    keyFont = Font(defaultFont.getName(), defaultFont.getStyle(), 9)
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter(str(graphTopExported) + " " + str(graphTopImported) + " " + str(graphTopUsed) + " " + str(graphTopDisplaced))
    xAxisExported = int(graphTopExported + maxOverallScale * scaleFactorOverall)
    xAxisImported = int(graphTopImported + maxOverallScale * scaleFactorOverall)
    xAxisGenerated = int(graphTopGenerated + maxOverallScale * scaleFactorOverall)
    xAxisUsed = int(graphTopUsed + maxOverallScale * scaleFactorOverall)
    xAxisDisplaced = int(graphTopDisplaced + maxOverallScale * scaleFactorOverall)
    month_format = SimpleDateFormat("MMMMMM")
    month_format.setCalendar(cal)
    year_format = SimpleDateFormat("yyyy")
    year_format.setCalendar(cal)
    monthPoints = []
    for i in range(len(resultData)):
        dataHh = resultData[i]
        date = dataHh[0]
        usedValue = dataHh[2]
        displacedValue = dataHh[3]
        dataHhSupplyList = dataHh[1]
        cal.setTimeInMillis(date)
        hour = cal.get(Calendar.HOUR_OF_DAY)
        minute = cal.get(Calendar.MINUTE)
        graphics.setColor(Color.BLUE)
        usedHeight = int(round(usedValue * scaleFactorOverall))
        if usedHeight < 0:
            graphics.fillRect(graphLeft + i, xAxisUsed, 1, abs(usedHeight))
        else:
            graphics.fillRect(graphLeft + i, xAxisUsed - usedHeight, 1, usedHeight)
        displacedHeight = int(round(displacedValue * scaleFactorOverall))
        if displacedHeight < 0:
            graphics.fillRect(graphLeft + i, xAxisDisplaced, 1, abs(displacedHeight))
        else:
            graphics.fillRect(graphLeft + i, xAxisDisplaced - displacedHeight, 1, displacedHeight)
        generatedTotal = 0
        parasiticTotal = 0
        importedTotal = 0
        exportedTotal = 0
        for j in dataHhSupplyList:
            name = j[0]
            source = j[1]
            isImport = j[2]
            value = j[3]
            id = j[4]
            height = int(round(value * scaleFactorOverall))
            if source in ('net', 'gen-net') and not isImport:
                set_colour(graphics, exported_supplies, id)
                exportedTotal = exportedTotal + height
                graphics.fillRect(graphLeft + i, xAxisExported - exportedTotal, 1, height)
            if source in ('net', 'gen-net') and isImport:
                set_colour(graphics, imported_supplies, id)
                importedTotal = importedTotal + height
                graphics.fillRect(graphLeft + i, xAxisImported - importedTotal, 1, height)
            if (isImport and source == 'gen') or (not isImport and source == 'gen-net'):
                set_colour(graphics, generated_supplies, id)
                generatedTotal = generatedTotal + height
                graphics.fillRect(graphLeft + i, xAxisGenerated - generatedTotal, 1, height)
            if (not isImport and source == 'gen') or (isImport and source == 'gen-net'):
                set_colour(graphics, generated_supplies, id)
                parasiticTotal = parasiticTotal + height
                graphics.fillRect(graphLeft + i, xAxisGenerated, 1, height)
        if hour == 0 and minute == 0:
            day = cal.get(Calendar.DAY_OF_MONTH)
            dayOfWeek = cal.get(Calendar.DAY_OF_WEEK)
            if dayOfWeek == 7 or dayOfWeek == 1:
                graphics.setColor(Color.RED)
            else:
                graphics.setColor(Color.BLACK)
            graphics.drawString(str(day), graphLeft + i + 16, ((maxHeight + 22) * 5) + 30 + minUsed + minDisplaced + minParasitic)
            graphics.setColor(Color.BLACK)
            graphics.fillRect(graphLeft + i, graphTopExported + maxHeight, 1, 5)
            graphics.fillRect(graphLeft + i, graphTopImported + maxHeight, 1, 5)
            graphics.fillRect(graphLeft + i, graphTopGenerated + maxHeight, 1, 5)
            graphics.fillRect(graphLeft + i, graphTopUsed + maxHeight, 1, 5)
            graphics.fillRect(graphLeft + i, graphTopDisplaced + maxHeight, 1, 5)
            if day == 15:
                graphics.drawString(month_format.format(cal.getTime()), graphLeft + i + 16, ((maxHeight + 22) * 5) + 50 + minUsed + minDisplaced + minParasitic)
                monthPoints.append(i)
    graphics.setColor(Color.BLACK)
    graphics.fillRect(graphLeft, graphTopExported, 1, maxHeight)
    graphics.fillRect(graphLeft, graphTopImported, 1, maxHeight)
    graphics.fillRect(graphLeft, graphTopGenerated, 1, maxHeight + minParasitic)
    graphics.fillRect(graphLeft, graphTopUsed, 1, maxHeight + minUsed)
    graphics.fillRect(graphLeft, graphTopDisplaced, 1, maxHeight + minDisplaced)
    scalePointsExported = []
    for i in range(0, int(maxOverallScale), stepOverall):
        scalePointsExported.append(i)
    #for i in range(0, int(minExportedScale), stepOverall * -1):
        #scalePointsExported.append(i)
    graphics.setColor(Color.BLACK)
    for point in scalePointsExported:
        graphics.fillRect(graphLeft - 5, int(xAxisExported - point * scaleFactorOverall), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisExported - point * scaleFactorOverall + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisExported - point * scaleFactorOverall - 2))
    scalePointsImported = []
    for i in range(0, int(maxOverallScale), stepOverall):
        scalePointsImported.append(i)
    #for i in range(0, int(minOverallScale), stepOverall * -1):
        #scalePointsImported.append(i)
    graphics.setColor(Color.BLACK)
    for point in scalePointsImported:
        graphics.fillRect(graphLeft - 5, int(xAxisImported - point * scaleFactorOverall), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisImported - point * scaleFactorOverall + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisImported - point * scaleFactorOverall - 2))
    scalePointsGenerated = []
    for i in range(0, int(maxOverallScale), stepOverall):
        scalePointsGenerated.append(i)
    for i in range(0, int(maxParasiticScale), stepOverall):
        scalePointsGenerated.append(i * -1)
    graphics.setColor(Color.BLACK)
    for point in scalePointsGenerated:
        graphics.fillRect(graphLeft - 5, int(xAxisGenerated - point * scaleFactorOverall), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisGenerated - point * scaleFactorOverall + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisGenerated - point * scaleFactorOverall - 2))
    scalePointsUsed = []
    for i in range(0, int(maxOverallScale), stepOverall):
        scalePointsUsed.append(i)
    for i in range(0, int(minUsedScale), stepOverall * -1):
        scalePointsUsed.append(i)
    for point in scalePointsUsed:
        graphics.fillRect(graphLeft - 5, int(xAxisUsed - point * scaleFactorOverall), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisUsed - point * scaleFactorOverall + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisUsed - point * scaleFactorOverall - 2))
    scalePointsDisplaced = []
    for i in range(0, int(maxOverallScale), stepOverall):
        scalePointsDisplaced.append(i)
    for i in range(0, int(minDisplacedScale), stepOverall * -1):
        scalePointsDisplaced.append(i)
    for point in scalePointsDisplaced:
        graphics.fillRect(graphLeft - 5, int(xAxisDisplaced - point * scaleFactorOverall), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisDisplaced - point * scaleFactorOverall + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisDisplaced - point * scaleFactorOverall - 2))
    graphics.drawString("kW", graphLeft - 90, graphTopExported + 10)
    graphics.drawString("kW", graphLeft - 90, graphTopImported + 10)
    graphics.drawString("kW", graphLeft - 90, graphTopGenerated + 10)
    graphics.drawString("kW", graphLeft - 90, graphTopUsed + 10)
    graphics.drawString("kW", graphLeft - 90, graphTopDisplaced + 10)
    title = "Electricity generation at site " + site.getCode() + " " + site.getName() + " for " + str(months) + " month"
    if months > 1:
        title = title + "s"
    title = title + " up to and including " + month_format.format(Date(finishDate.getTime() - 1)) + " " + year_format.format(Date(finishDate.getTime() - 1))
    graphics.drawString(title, 30, 20)
    graphics.drawString("Imported", 10, graphTopImported + 10)
    graphics.drawString("Exported", 10, graphTopExported + 10)
    graphics.drawString("Generated", 10, graphTopGenerated + 10)
    graphics.drawString("Used", 10, graphTopUsed + 10)
    graphics.drawString("Displaced", 10, graphTopDisplaced + 10)
    graphics.setFont(smallFont)
    graphics.drawString("Poor data is denoted by a grey background and black foreground.", 30, ((maxHeight + 22) * 5) + 50 + minUsed + minDisplaced + minParasitic)
    graphics.setFont(keyFont)
    paint_legend(exported_supplies, graphTopExported)
    paint_legend(imported_supplies, graphTopImported)
    paint_legend(generated_supplies, graphTopGenerated)
else:
    image = BufferedImage(400, 400, BufferedImage.TYPE_4BYTE_ABGR)
    graphics = image.createGraphics()
    graphics.setColor(Color.BLACK)
    graphics.drawString("No data available for this period.", 30, 10)

os = inv.getResponse().getOutputStream()
graphics.setColor(Color.BLACK)
#graphics.drawString("report took..." + str(java.lang.System.currentTimeMillis() - start) + "ms", 10, 390)
ImageIO.write(image, "png", os)
os.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[25]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site HH figures]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException, XmlTree
from java.lang import System
from net.sf.chellow.monad.types import MonadDate
import math
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate, Site, Supply

debug_str = ''

site_code = inv.getString("site-code")
cal = MonadDate.getCalendar()

year = inv.getInteger("year")
month = inv.getInteger("month")
if not inv.isValid():
  raise UserException()

cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)

start_date = HhStartDate(cal.getTime())
source.appendChild(start_date.toXml(doc))

cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())

site = Site.getSite(site_code)

source.appendChild(site.toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))

for group in Site.getSite(site.getId()).groups(start_date, finish_date, True):
    group_element = doc.createElement('group')
    source.appendChild(group_element)

    sup_ids = sorted(supply.getId() for supply in group.getSupplies())

    for sup_id in sup_ids:
        group_element.appendChild(Supply.getSupply(sup_id).toXml(doc, XmlTree('source').put('generatorType')))

    data = Hiber.session().createQuery("select datum.value, datum.startDate, datum.status, datum.channel.supplyGeneration.supply.source.code, datum.channel.isImport, datum.channel.supplyGeneration.supply.id from HhDatum datum where datum.channel.isKwh is true and datum.channel.supplyGeneration.supply.id in (" + ','.join(str(id) for id in sup_ids) + ") and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate order by datum.startDate.date, datum.channel.supplyGeneration.supply.id").setTimestamp('startDate', group.getFrom().getDate()).setTimestamp('finishDate', group.getTo().getDate()).scroll()
    hh_value = None
    if data.next():
        hh_value = data.get(0)
        hh_double_value = hh_value.doubleValue()
        hh_start_date = data.get(1)
        hh_status = data.get(2)
        source_code = data.get(3)
        is_import = data.get(4)
        supply_id = data.get(5)

    hh_date = group.getFrom()
    while not hh_date.after(group.getTo()):
        export_kwh = 0
        import_kwh = 0
        parasitic_kwh = 0
        generated_kwh = 0
        third_party_import_kwh = 0
        third_party_export_kwh = 0

        hh_element = doc.createElement("hh")
        group_element.appendChild(hh_element)
        hh_element.appendChild(hh_date.toXml(doc))
        for sup_id in sup_ids:
            datum = doc.createElement("datum")
            hh_element.appendChild(datum)
            #debug_str += 'hh value ' + str(hh_value) + ' hh start date ' + str(hh_start_date) + ' hh_date ' + str(hh_date) + ' sup_id ' + str(sup_id) + ' supply_id ' + str(supply_id)
            while hh_value is not None and hh_start_date.getDate().getTime() == hh_date.getDate().getTime() and sup_id == supply_id:
                if is_import:
                    prefix = 'import'
                else:
                    prefix = 'export'
                datum.setAttribute(prefix + '-kwh', str(hh_value))
                datum.setAttribute(prefix + '-status', hh_status)

                if not is_import and source_code in ('net', 'gen-net'):
                    export_kwh += hh_double_value
                if is_import and source_code in ('net', 'gen-net'):
                    import_kwh += hh_double_value
                if (is_import and source_code == 'gen') or (not is_import and source_code == 'gen-net'):
                    generated_kwh += hh_double_value
                if (not is_import and source_code == 'gen') or (is_import and source_code == 'gen-net'):
                    parasitic_kwh += hh_double_value
                if (is_import and source_code == '3rd-party') or (not is_import and source_code == '3rd-party-reverse'):
                    third_party_import += hh_double_value
                if (not is_import and source_code == '3rd-party') or (is_import and source_code == '3rd-party-reverse'):
                    third_party_export += hh_double_value
                if data.next():
                    hh_value = data.get(0)
                    hh_double_value = hh_value.doubleValue()
                    hh_start_date = data.get(1)
                    hh_status = data.get(2)
                    source_code = data.get(3)
                    is_import = data.get(4)
                    supply_id = data.get(5)
                else:
                    hh_value = None

        displaced_kwh = generated_kwh - export_kwh - parasitic_kwh
        used_kwh = import_kwh + displaced_kwh
        hh_element.setAttribute("exported-kwh", str(export_kwh))
        hh_element.setAttribute("imported-kwh", str(import_kwh))
        hh_element.setAttribute("generated-kwh", str(generated_kwh))
        hh_element.setAttribute("parasitic-kwh", str(parasitic_kwh))
        hh_element.setAttribute("displaced-kwh", str(displaced_kwh))
        hh_element.setAttribute("used-kwh", str(used_kwh))
        hh_date = hh_date.getNext()
source.setAttribute('debug', debug_str)]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
      doctype-public="-//W3C//DTD HTML 4.01//EN"
      doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Sites &gt;
                    <xsl:value-of
                        select="concat(/source/site/@code, ' ', /source/site/@name)" />
                    &gt; HH data
                </title>
                <style>
                    &lt;![CDATA[
                colgroup.gray {
                    background: silver;
                }

                tr.error {
                    color: red;
                }
                ]]&gt;
                </style>
            </head>

            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/3/output/">
                        <xsl:value-of select="'Sites'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/5/output/?site-id={/source/site/@id}">
                        <xsl:value-of
                            select="concat(/source/site/@code, ' ', /source/site/@name)" />
                    </a>
                    &gt; HH data
                </p>

                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <xsl:value-of select="/source/@debug"/>
                <form action=".">
                    <fieldset>
                        <legend>Show data</legend>
                        <br />
                        <label>
                            <xsl:value-of select="'Site Code '" />
                            <input name="site-code"
                                value="{/source/request/parameter[@name='site-code']/value}" />
                        </label>
                        <br />
                        <br />
                        <fieldset>
                            <legend>Month</legend>
                            <br />
                            <input size="4" length="4" name="year"
                                value="{/source/hh-start-date/@year}" />
                            <xsl:value-of select="' - '" />
                            <select name="month">
                                <xsl:for-each
                                    select="/source/months/month">
                                    <option>
                                        <xsl:if
                                            test="number(/source/hh-start-date/@month) = number(@number)">
                                            <xsl:attribute
                                                name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                        </fieldset>
                        <br />
                        <input type="submit" value="Show" />
                    </fieldset>
                </form>
            <xsl:for-each select="/source/group">
                <table>
                    <caption>HH Data</caption>
                    <colgroup />
                    <colgroup class="gray" />
                    <colgroup />
                    <colgroup class="gray" />
                    <colgroup />
                    <colgroup class="gray" />
                    <thead>
                        <tr>
                            <th rowspan="3">HH Starting</th>
                            <th colspan="6">kWh</th>
                            <xsl:for-each select="supply">
                            <th colspan="4"><xsl:value-of select="concat(@name, ' ', source/@code, ' ', generator-type/@code)"/></th>
                            </xsl:for-each>
                        </tr>
                        <tr>
                            <th rowspan="2">Imported</th>
                            <th rowspan="2">Used</th>
                            <th rowspan="2">Displaced</th>
                            <th rowspan="2">Generated</th>
                            <th rowspan="2">Exported</th>
                            <th rowspan="2">Parasitic</th>
                            <xsl:for-each select="supply">
                            <th colspan="2">Import</th>
                            <th colspan="2">Export</th>
                            </xsl:for-each>
                        </tr>
                        <tr>
<xsl:for-each select="supply">
                            <th>kWh</th>
                            <th>Status</th>
                            <th>kWh</th>
                            <th>Status</th>
                            </xsl:for-each>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="hh">
                            <tr>
                                <xsl:if test="@has-site-snags">
                                    <xsl:attribute name="class">
                                        <xsl:value-of select="'error'" />
                                    </xsl:attribute>
                                </xsl:if>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date/@year, '-', hh-start-date/@month, '-', hh-start-date/@day, ' ', hh-start-date/@hour, ':', hh-start-date/@minute, 'Z')" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@imported-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of select="@used-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@displaced-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@generated-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@exported-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@parasitic-kwh" />
                                </td>
                                <!--
                                    <td>
                                    <xsl:if
                                    test="@has-site-snags = 'true'">
                                    See
                                    <a
                                    href="{/source/request/@context-path}/orgs/1/reports/5/screen/output/?site-id={/source/site/@id}&amp;months=1&amp;finish-year={hh-start-date[@label='start']/@year}&amp;finish-month={hh-start-date[@label='start']/@month}">
                                    generation graph
                                    </a>
                                    for errors.
                                    </xsl:if>
                                    </td>
                                -->
                            <xsl:for-each select="datum">
                            <td>
                              <xsl:choose>
                              <xsl:when test="@import-kwh">
                              <xsl:value-of select="@import-kwh"/>
                              </xsl:when>
                              <xsl:otherwise>
                              Missing
                              </xsl:otherwise>
                              </xsl:choose>
                            </td>
                            <td><xsl:value-of select="@import-status"/>
                            </td>
                            <td>
                              <xsl:choose>
                              <xsl:when test="@export-kwh">
                              <xsl:value-of select="@export-kwh"/>
                              </xsl:when>
                              <xsl:otherwise>
                              Missing
                              </xsl:otherwise>
                              </xsl:choose>
                            </td>
                            <td><xsl:value-of select="@export-status"/>
                            </td>
                            </xsl:for-each>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </xsl:for-each>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[27]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Bills]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate, MpanCore, Site, Supply
from java.text import SimpleDateFormat, DecimalFormat
from java.lang import Math, System
from net.sf.chellow.billing import SupplierContract, NonCoreContract
from org.python.util import PythonInterpreter

year = inv.getInteger("end-year")
month = inv.getInteger("end-month")
months = inv.getInteger("months")

if not inv.isValid():
    raise UserException()

if inv.hasParameter('supply-id'):
    supply_id = inv.getLong('supply-id')
    query = Hiber.session().createQuery("select bill, bill.batch, bill.batch.contract, bill.supply from Bill bill where bill.supply = :supply and bill.startDate.date >= :startDate and bill.startDate.date <= :finishDate order by bill.startDate.date").setEntity('supply', Supply.getSupply(supply_id))
else:
    query = Hiber.session().createQuery("select bill, bill.batch, bill.batch.contract from Bill bill where bill.startDate.date >= :startDate and bill.startDate.date <= :finishDate")

cal = MonadDate.getCalendar()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())
cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
start_date = HhStartDate(cal.getTime())

now_date = Date()
file_date_format = SimpleDateFormat("yyyy-MM-dd'_'HHmm")
file_date_format.setCalendar(cal)

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=bills_' + file_date_format.format(now_date) + '.csv;')
pw = inv.getResponse().getWriter()
pw.println("Report Start,Report Finish,Supply Id,Import MPAN Core,Export MPAN Core,Contract Name,Batch Reference,Bill Id,Bill From,Bill To,Bill Reference,Bill Issue Date,Bill Type, Bill kWh, Bill Net, Bill VAT, Bill Gross")
pw.flush()

issue_format = SimpleDateFormat("yyyy-MM-dd HH:mm")
issue_format.setCalendar(cal)

bills = query.setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate()).scroll()
while bills.next():
    bill = bills.get(0)
    batch = bills.get(1)
    contract = bills.get(2)
    supply = bill.getSupply()

    generation = supply.getGeneration(bill.getStartDate())
    if generation is None:
        import_mpan_core = 'No Generation'
        export_mpan_core = 'No Generation'
    else:
        import_mpan = generation.getImportMpan()
        if import_mpan is None:
            import_mpan_core = ''
        else:
            import_mpan_core = import_mpan.getCore()
        export_mpan = generation.getExportMpan()
        if export_mpan is None:
            export_mpan_core = ''
        else:
            export_mpan_core = export_mpan.getCore()

    pw.println(','.join('"' + str(value) + '"' for value in [start_date, finish_date, supply.getId(), import_mpan_core, export_mpan_core, contract.getName(), batch.getReference(), bill.getId(), bill.getStartDate(), bill.getFinishDate(), bill.getReference(), issue_format.format(bill.getIssueDate()), bill.getType().getCode(), bill.getKwh(), bill.getNet(), bill.getVat(), bill.getGross()]))
    pw.flush()
    Hiber.session().clear()

bills.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[29]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site HH bulk figures]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date
from net.sf.chellow.monad import Hiber, UserException
from org.hibernate import CacheMode, ScrollMode
from java.text import DateFormat
from net.sf.chellow.physical import HhStartDate, Site
from java.sql import ResultSet, Timestamp

TYPES = ['used', 'generated', 'exported', 'displaced', 'parasitic', 'imported']
site_id = inv.getLong("site-id")
year = inv.getInteger("year")
month = inv.getInteger("month")
months = inv.getInteger("months")
type = inv.getString("type")
if not inv.isValid():
    raise UserException()
if not type in TYPES:
    raise UserException('The type must be one of ' + str(TYPES))
site = Site.getSite(site_id)
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.set(Calendar.MILLISECOND, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.MONTH, month - 1)
cal.set(Calendar.YEAR, year)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finishDate = cal.getTime()

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
startDate = cal.getTime()
inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()
pw.print("Site Code,Type,Date,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48")
dateFormat = DateFormat.getDateInstance(DateFormat.LONG, Locale.UK)
dateFormat.applyLocalizedPattern("yyyy-MM-dd")

con = Hiber.session().connection()
supplies = Hiber.session().createQuery("select distinct supply from Supply supply join supply.generations supplyGeneration join supplyGeneration.siteSupplyGenerations siteSupplyGeneration where siteSupplyGeneration.site = :site and supply.source.code != 'sub'").setEntity('site', site).list()
suppliesSQL = ''
for supply in supplies:
    suppliesSQL = suppliesSQL + str(supply.getId()) + ','
stmt = con.prepareStatement("select hh_datum.value, hh_datum.start_date, hh_datum.status, channel.is_import, supply.name, source.code from hh_datum, channel, supply_generation, supply, source where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = supply.id and supply.source_id = source.id and channel.is_kwh is true and hh_datum.start_date >= ? and hh_datum.start_date <= ? and supply.id in (" + suppliesSQL[:-1] + ") order by hh_datum.start_date", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
stmt.setTimestamp(1, Timestamp(startDate.getTime()))
stmt.setTimestamp(2, Timestamp(finishDate.getTime()))
stmt.setFetchSize(100)
rs = stmt.executeQuery()
hhDate = startDate.getTime()
siteSnagQuery = Hiber.session().createQuery("select count(*) from SiteSnag snag where snag.site = :site and snag.startDate.date <= :finishDate and snag.finishDate.date >= :startDate and snag.isIgnored is true").setEntity("site", site)
if rs.next():
    hhChannelKwh = rs.getFloat("value")
    hhChannelStartDate = rs.getTimestamp("start_date")
    isImport = rs.getBoolean("is_import")
    status = rs.getString("status")
    sourceCode = rs.getString("code")
    supplyName = rs.getString("name")
    finishDateMillis = finishDate.getTime()
    startDateMillis = startDate.getTime()
    while hhDate <= finishDateMillis:
        exportedKwh = 0
        importedKwh = 0
        parasiticKwh = 0
        generatedKwh = 0
        displacedKwh = 0
        while hhChannelStartDate != None and hhChannelStartDate.getTime() == hhDate:
            if not isImport and sourceCode in ('net', 'gen-net'):
                exportedKwh = exportedKwh + hhChannelKwh
            if isImport and sourceCode in ('net', 'gen-net'):
                importedKwh = importedKwh + hhChannelKwh
            if (isImport and sourceCode == 'gen') or (not isImport and sourceCode == 'gen-net'):
                generatedKwh = generatedKwh + hhChannelKwh
            if (not isImport and sourceCode == 'gen') or (isImport and sourceCode == 'gen-net'):
                parasiticKwh = parasiticKwh + hhChannelKwh
            if rs.next():
                sourceCode = rs.getString("code")
                supplyName = rs.getString("name")
                hhChannelKwh = rs.getFloat("value")
                hhChannelStartDate = rs.getTimestamp("start_date")
                isImport = rs.getBoolean("is_import")
                status = rs.getString("status")
            else:
                hhChannelStartDate = None
        displacedKwh = generatedKwh - exportedKwh - parasiticKwh
        usedKwh = importedKwh + displacedKwh
        '''
        if siteSnagQuery.setTimestamp("startDate", startDate).setTimestamp("finishDate", monthFinishDate).uniqueResult() > 0:
            monthElement.setAttribute("has-site-snags", "true")
        '''
        cal.clear()
        cal.setTimeInMillis(hhDate)
        if cal.get(Calendar.HOUR_OF_DAY) == 0 and cal.get(Calendar.MINUTE) == 0:
            pw.print('\r\n' + site.getCode() + ',' + type + ',' + dateFormat.format(Date(hhDate)))
            pw.flush()
        pw.print(",")
        if type == 'used':
            hh_value = usedKwh
        elif type == 'imported':
            hh_value = importedKwh
        elif type == 'exported':
            hh_value = exportedKwh
        elif type == 'parasitic':
            hh_value = parasiticKwh
        elif type == 'displaced':
            hh_value = displacedKwh
        elif type == 'generated':
            hh_value = generatedKwh
        pw.print(str(round(hh_value, 1)))
        hhDate = HhStartDate.getNext(cal, hhDate)
        Hiber.session().clear()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[31]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Admin: CSV Export]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException, MonadUtils
from net.sf.chellow.monad.types import UriPathElement, MonadDate
from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date
from net.sf.chellow.physical import HhStartDate, Configuration, MpanCore
from java.text import DateFormat
from java.util.zip import ZipOutputStream, ZipEntry
from java.io import OutputStreamWriter, PrintWriter
from java.security import MessageDigest
from com.Ostermiller.util import Base64
from java.lang import String, System, Boolean

def mpan_fields(mpan):
    if mpan is None:
        return ['', '', '', '', '']
    else:
        return [mpan.getCore(), mpan.getLlfc(), mpan.getAgreedSupplyCapacity(), mpan.getSupplierContract().getName(), mpan.getSupplierAccount()]

#inv.getResponse().setContentType('application/zip')
#inv.getResponse().setHeader('Content-Disposition', 'filename=output.zip;')
#sout = inv.getResponse().getOutputStream()
#zout = ZipOutputStream(sout)
#pw = PrintWriter(OutputStreamWriter(zout, 'UTF-8'))
#zout.putNextEntry(ZipEntry('out.xml'))

inv.getResponse().setContentType('text/xml')
inv.getResponse().setHeader('Content-Disposition', 'attachment; filename=output.xml;')
pw = inv.getResponse().getWriter()

def print_line(values):
    pw.println('    <line>')
    for value in values:
        if value is None:
            value = ''
        else:
            value = str(value)
        pw.println('        <value><' + '![CDATA[' + value + ']]' + '></value>')
    pw.println('    </line>')
    pw.flush()


def print_batches(contract, role_name):
    reads_query = Hiber.session().createQuery("select read.meterSerialNumber, read.mpanStr, read.coefficient, read.units, read.tpr.code, read.previousDate, read.previousValue, read.previousType.code, read.presentDate, read.presentValue, read.presentType.code from RegisterRead read where read.bill = :bill order by read.id")

    range_11 = range(11)

    bills_query = Hiber.session().createQuery("select bill from Bill bill where bill.batch = :batch order by bill.id")

    batches = Hiber.session().createQuery("from Batch batch where batch.contract.id = :contractId order by batch.id").setLong('contractId', contract.getId()).scroll()
    while batches.next():
        batch = batches.get(0)
        print_line(['insert', 'batch', role_name, contract.getName(), batch.getReference(), batch.getDescription()])
        bills = bills_query.setEntity('batch', batch).scroll()
        while bills.next():
            bill = bills.get(0)
            values = ['insert', 'bill', role_name, contract.getName(), batch.getReference(), bill.getSupply().getMpanCores().iterator().next(), MonadDate(bill.getIssueDate()), bill.getStartDate(), bill.getFinishDate(), bill.getNet(), bill.getVat(), bill.getGross(), bill.getAccount(), bill.getReference(), bill.getType(), bill.getBreakdown(), bill.getKwh()]
            reads = reads_query.setEntity('bill', bill).scroll()
            while reads.next():
                values += [reads.get(i) for i in range_11]
            reads.close()
            print_line(values)
            Hiber.session().clear()
        bills.close()
        Hiber.session().clear()
    batches.close()



is_core = inv.getBoolean('is-core')
has_dno_contracts = inv.getBoolean('has-dno-contracts')    
has_non_core_contracts = inv.getBoolean('has-non-core-contracts')
has_reports = inv.getBoolean('has-reports')
has_supplier_contracts = inv.getBoolean('has-supplier-contracts')
has_supplier_batches = inv.getBoolean('has-supplier-batches')
has_hhdc_contracts = inv.getBoolean('has-hhdc-contracts')
has_mop_contracts = inv.getBoolean('has-mop-contracts')
has_sites = inv.getBoolean('has-sites')    
has_supplies = inv.getBoolean('has-supplies')
has_hh_data = inv.getBoolean('has-hh-data')
has_users = inv.getBoolean('has-users')
has_configuration = inv.getBoolean('has-configuration')
has_channel_snag_ignores = inv.getBoolean('has-channel-snag-ignores')
has_site_snag_ignores = inv.getBoolean('has-site-snag-ignores')

if not inv.isValid():
    raise UserException()

if has_supplies:
    mpan_core_str = inv.getString('mpan-core')

pw.println('<' + '?xml version="1.0"?>')
pw.flush()
pw.println('<csv>')

if has_reports:
    query = Hiber.session().createQuery("from Report report where mod(report.id, 2) = :remainder order by report.id")
    if is_core:
        query.setInteger('remainder', 1)
        is_core_str = 'true'
    else:
        query.setInteger('remainder', 0)
        is_core_str = 'false'
    reports = query.scroll()
    while reports.next():
        report = reports.get(0)
        template = report.getTemplate()
        if template is not None:
            template = template.replace("<!" + "[CDATA[", "&" + "lt;![CDATA[").replace("]]" + ">", "]]" + "&" + "gt;")
        print_line(['insert', 'report', str(report.getId()), is_core_str, report.getName(), report.getScript().replace("<!" + "[CDATA[", "&" + "lt;![CDATA[").replace("]]" + ">", "]]" + "&" + "gt;"), template])
    reports.close()

if has_dno_contracts and is_core:
    contracts = Hiber.session().createQuery("from DnoContract contract order by contract.party.code, contract.name").scroll()
    while contracts.next():
        contract = contracts.get(0)
        contract_name = contract.getName()
        rate_scripts = Hiber.session().createQuery("from RateScript script where script.contract.id = :contractId order by script.startDate.date").setLong('contractId', contract.getId()).list()
        start_rate_script = rate_scripts[0]
        print_line(['insert', 'dno-contract', contract.getParty().getCode(), contract.getId(), contract_name, start_rate_script.getStartDate(), rate_scripts[len(rate_scripts) - 1].getFinishDate(), contract.getChargeScript(), start_rate_script.getId(), start_rate_script.getScript()])
        for i in range(1, len(rate_scripts)):
            rate_script = rate_scripts[i]
            print_line(['insert', 'dno-contract-rate-script', contract.getParty().getCode(), contract.getName(), rate_script.getId(), rate_script.getStartDate(), rate_script.getScript()])
    Hiber.session().clear()
    contracts.close()


if has_non_core_contracts:
    query = Hiber.session().createQuery("from NonCoreContract contract where mod(contract.id, 2) = :remainder order by contract.name")
    if is_core:
        query.setInteger('remainder', 1)
    else:
        query.setInteger('remainder', 0)

    contracts = query.scroll()
    while contracts.next():
        contract = contracts.get(0)
        contract_name = contract.getName()
        rate_scripts = Hiber.session().createQuery("from RateScript script where script.contract = :contract order by script.startDate.date").setEntity('contract', contract).list()
        start_rate_script = rate_scripts[0]
        print_line(['insert', 'non-core-contract', contract.getId(), None, contract.getParty().getParticipant().getCode(), contract_name, contract.getChargeScript(), start_rate_script.getId(), start_rate_script.getStartDate(), rate_scripts[len(rate_scripts) - 1].getFinishDate(), start_rate_script.getScript()])
        for i in range(1, len(rate_scripts)):
            rate_script = rate_scripts[i]
            print_line(['insert', 'non-core-contract-rate-script', contract_name, rate_script.getId(), rate_script.getStartDate(), rate_script.getScript()])
    Hiber.session().clear()
    contracts.close()


if has_users:
    users = Hiber.session().createQuery("from User user order by user.id").scroll()
    while users.next():
        user = users.get(0)
        print_line(['insert', 'user', user.getEmailAddress(), '', user.getPasswordDigest(), user.getRole().getCode(), '', ''])
    users.close()


if has_configuration:
    print_line(['update', 'configuration', Configuration.getConfiguration().getProperties()])


if has_sites and not is_core:
    sites = Hiber.session().createQuery("from Site site order by site.id").scroll()
    while sites.next():
        site = sites.get(0)
        print_line(['insert', 'site', site.getCode(), site.getName()])
    sites.close()


if has_hhdc_contracts and not is_core:
    contracts = Hiber.session().createQuery("from HhdcContract contract order by contract.id").scroll()
    while contracts.next():
        contract = contracts.get(0)
        rate_scripts = Hiber.session().createQuery("from RateScript script where script.contract.id = :contractId order by script.startDate.date").setLong('contractId', contract.getId()).list()
        start_rate_script = contract.getStartRateScript()
        finish_rate_script = contract.getFinishRateScript()
        print_line(['insert', 'hhdc-contract', contract.getId(), contract.getParty().getParticipant().getCode(), contract.getName(), start_rate_script.getStartDate(), finish_rate_script.getFinishDate(), contract.getChargeScript(), contract.getProperties(), contract.getState(), start_rate_script.getId(), start_rate_script.getScript()])
        if len(rate_scripts) > 1:
            for rate_script in rate_scripts[1:]:
                print_line(['insert', 'hhdc-contract-rate-script', contract.getName(), rate_script.getId(), rate_script.getStartDate(), rate_script.getScript()])
        Hiber.session().clear()
    contracts.close()

if has_mop_contracts and not is_core:
    contracts = Hiber.session().createQuery("from MopContract contract order by contract.id").scroll()
    while contracts.next():
        contract = contracts.get(0)
        rate_scripts = Hiber.session().createQuery("from RateScript script where script.contract.id = :contractId order by script.startDate.date").setLong('contractId', contract.getId()).list()
        start_rate_script = rate_scripts[0]
        finish_rate_script = rate_scripts[len(rate_scripts) - 1]
        print_line(['insert', 'mop-contract', contract.getId(), contract.getParty().getParticipant().getCode(), contract.getName(), start_rate_script.getStartDate(),  finish_rate_script.getFinishDate(), contract.getChargeScript(), start_rate_script.getId(), start_rate_script.getScript()])
        if len(rate_scripts) > 1:
            for rate_script in rate_scripts[1:]:
                print_line(['insert', 'mop-contract-rate-script', contract.getName(), rate_script.getId(), rate_script.getStartDate(), rate_script.getScript()])
        Hiber.session().clear()
    contracts.close()


if has_supplier_contracts and not is_core:
    contracts = Hiber.session().createQuery("from SupplierContract contract order by contract.id").scroll()
    while contracts.next():
        contract = contracts.get(0)
        contract_name = contract.getName()

        rate_scripts = Hiber.session().createQuery("from RateScript script where script.contract.id = :contractId order by script.startDate.date").setLong('contractId', contract.getId()).list()

        start_rate_script = rate_scripts.get(0)
        finish_rate_script = rate_scripts.get(len(rate_scripts) - 1)
        print_line(['insert', 'supplier-contract', contract.getId(), contract.getParty().getParticipant().getCode(), contract_name, start_rate_script.getStartDate(), finish_rate_script.getFinishDate(), contract.getChargeScript(), start_rate_script.getId(), start_rate_script.getScript()])

        for i in range(1, len(rate_scripts)):
            rate_script = rate_scripts[i]
            print_line(['insert', 'supplier-contract-rate-script', rate_script.getContract().getName(), rate_script.getId(), rate_script.getStartDate(), rate_script.getScript()])
            Hiber.session().clear()
        Hiber.session().clear()
    contracts.close()

if has_supplies and not is_core:
    if len(mpan_core_str) == 0:
        supplies = Hiber.session().createQuery("from Supply supply order by supply.id").scroll()
    else:
        supplies = Hiber.session().createQuery("from Supply supply where supply = :supply").setEntity('supply', MpanCore.getMpanCore(mpan_core_str)
.getSupply()).scroll()
    while supplies.next():
        supply = supplies.get(0) 
        supplyGenerations = Hiber.session().createQuery('from SupplyGeneration generation where generation.supply = :supply order by generation.startDate.date').setEntity('supply', supply).list()
        first_generation = supplyGenerations[0]
        last_generation = supplyGenerations[len(supplyGenerations) - 1]
        physical_site = Hiber.session().createQuery("select siteSupplyGeneration.site from SiteSupplyGeneration siteSupplyGeneration where siteSupplyGeneration.supplyGeneration = :supplyGeneration and siteSupplyGeneration.isPhysical is true").setEntity('supplyGeneration', last_generation).uniqueResult()
        site_code = physical_site.getCode()
        supply_name = supply.getName()
        start_date = first_generation.getStartDate().toString()
        finish_date = last_generation.getFinishDate()
        if finish_date is None:
            finish_date = ''
        else:
            finish_date = finish_date.toString()
        source = supply.getSource().getCode()
        generator_type = supply.getGeneratorType()
        if generator_type is None:
            generator_type = ''
        else:
            generator_type = generator_type.getCode()

        mop_contract = first_generation.getMopContract()
        if mop_contract is None:
            mop_contract_name = ''
            mop_account = ''
        else:
            mop_contract_name = mop_contract.getName()
            mop_account = first_generation.getMopAccount()

        hhdc_contract = first_generation.getHhdcContract()
        if hhdc_contract is None:
            hhdc_contract_name = ''
            hhdc_account = ''
        else:
            hhdc_contract_name = hhdc_contract.getName()
            hhdc_account = first_generation.getHhdcAccount()
        values = ['insert', 'supply', site_code, source, generator_type, supply_name, supply.getGspGroup().getCode(), start_date, finish_date, mop_contract_name, mop_account, hhdc_contract_name, hhdc_account]
        for is_import in [True, False]:
            for is_kwh in [True, False]:
                values.append(Boolean(first_generation.getChannel(is_import, is_kwh) != None))

        values += [first_generation.getMeterSerialNumber(), first_generation.getPc(), first_generation.getMtc(), first_generation.getCop().getCode(), first_generation.getSsc()] + mpan_fields(first_generation.getImportMpan()) + mpan_fields(first_generation.getExportMpan())
        first_mpan_core_str = str(first_generation.getMpans().iterator().next().getCore())
        print_line(values)
        generations = Hiber.session().createQuery("from SupplyGeneration generation where generation.supply = :supply order by generation.startDate.date").setEntity('supply', supply).scroll()
        generations.next()
        while generations.next():
            generation = generations.get(0)
            physical_site = Hiber.session().createQuery("select siteSupplyGeneration.site from SiteSupplyGeneration siteSupplyGeneration where siteSupplyGeneration.supplyGeneration = :supplyGeneration and siteSupplyGeneration.isPhysical is true").setEntity('supplyGeneration', last_generation).uniqueResult()
            site_code = physical_site.getCode()
            start_date = generation.getStartDate()

            mop_contract = generation.getMopContract()
            if mop_contract is None:
                mop_contract_name = ''
                mop_account = ''
            else:
                mop_contract_name = mop_contract.getName()
                mop_account = generation.getMopAccount()

            hhdc_contract = generation.getHhdcContract()
            if hhdc_contract is None:
                hhdc_contract_name = ''
                hhdc_account = ''
            else:
                hhdc_contract_name = hhdc_contract.getName()
                hhdc_account = generation.getHhdcAccount()
            values = ['insert', 'supply-generation', first_mpan_core_str, start_date, site_code, mop_contract_name, mop_account, hhdc_contract_name, hhdc_account]
            for is_import in [True, False]:
                for is_kwh in [True, False]:
                    values.append(Boolean(generation.getChannel(is_import, is_kwh) != None))

            values += [generation.getMeterSerialNumber(), generation.getPc(), generation.getMtc(), generation.getCop().getCode(), generation.getSsc()] + mpan_fields(generation.getImportMpan()) + mpan_fields(generation.getExportMpan())
            print_line(values)
        generations.beforeFirst()
        while generations.next():
            generation = generations.get(0)
            start_date = generation.getStartDate()
            finish_date = generation.getFinishDate()
            site_supply_generations = Hiber.session().createQuery("from SiteSupplyGeneration siteSupplyGeneration where siteSupplyGeneration.supplyGeneration = :supplyGeneration and siteSupplyGeneration.isPhysical is false").setEntity('supplyGeneration', generation).scroll()
            while site_supply_generations.next():
                site_supply_generation = site_supply_generations.get(0)
                print_line(['insert', 'site-supply-generation', site_supply_generation.getSite().getCode(), first_mpan_core_str, start_date, 'false'])
            site_supply_generations.close()
            query = "select datum.startDate, datum.value, datum.status from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isImport = :isImport and datum.channel.isKwh = :isKwh and datum.startDate.date >= :startDate"
            if finish_date is None:
                hh_data_q = Hiber.session().createQuery(query + " order by datum.startDate.date").setTimestamp('startDate', start_date.getDate())
            else:
                hh_data_q = Hiber.session().createQuery(query + " and datum.startDate.date <= :finishDate  order by datum.startDate.date").setTimestamp('finishDate', finish_date.getDate())
            hh_data_q.setTimestamp('startDate', start_date.getDate()).setEntity('supply', supply)
            channels = Hiber.session().createQuery("from Channel channel where channel.supplyGeneration = :supplyGeneration").setEntity('supplyGeneration', generation).scroll()
            while channels.next():
                channel = channels.get(0)
                if channel.getIsImport():
                    is_import = 'true'
                else:
                    is_import = 'false'
                if channel.getIsKwh():
                    is_kwh = 'true'
                else:
                    is_kwh = 'false'
                if has_hh_data:
                    hh_data_q.setBoolean('isImport', channel.getIsImport()).setBoolean('isKwh', channel.getIsKwh()),
                    hh_data = hh_data_q.scroll()
                    hh_str = ''
                    prev_end_date = None
                    count = 0
                    while hh_data.next():
                        end_date = hh_data.get(0)
                        if prev_end_date is None or not prev_end_date.getNext().getDate().equals(end_date.getDate()) or count > 1000:
                            if prev_end_date is not None:
                                pw.println('</value>')
                                pw.println('    </line>')
                            pw.println('    <line>')
                            for value in ['insert', 'hh-datum', first_mpan_core_str, str(end_date), is_import, is_kwh]:
                                pw.println('        <value>' + value + '</value>')
                            pw.print('        <value>')
                            count = 0
                        else:
                            pw.print(',')
                        status = hh_data.get(2)
                        if status is None:
                            status = ''
                        pw.print(str(hh_data.get(1)) + ',' + status)
                        prev_end_date = end_date
                        count = count + 1
                    if prev_end_date is not None:
                        pw.println('</value>')
                        pw.println('    </line>')
                    hh_data.close()
            channels.close()
        generations.close()
        Hiber.session().clear()
    supplies.close()

if has_channel_snag_ignores and not is_core:
    timing = System.currentTimeMillis()
    #pw.println('about to start ' + str(System.currentTimeMillis() - timing))
    snags = Hiber.session().createQuery("from ChannelSnag snag where snag.isIgnored is true").scroll()
    #pw.println('finished ' + str(System.currentTimeMillis() - timing))
    while snags.next():
        snag = snags.get(0)
        channel = snag.getChannel()
        print_line(['insert', 'channel-snag-ignore', channel.getSupplyGeneration().getMpans().iterator().next().getCore().toString(), Boolean(channel.getIsImport()), Boolean(channel.getIsKwh()), snag.getDescription(), snag.getStartDate(), snag.getFinishDate()])
        Hiber.session().clear()
    snags.close()


if has_site_snag_ignores and not is_core:
    snags = Hiber.session().createQuery("from SiteSnag snag where snag.isIgnored is true").scroll()
    while snags.next():
        snag = snags.get(0)
        print_line(['insert', 'site-snag-ignore', snag.getSite().getCode(), snag.getDescription(), snag.getStartDate(), snag.getFinishDate()])
        Hiber.session().clear()
    snags.close()

if has_hhdc_contracts and not is_core:
    contracts = Hiber.session().createQuery("from HhdcContract contract order by contract.id").scroll()
    while contracts.next():
        print_batches(contracts.get(0), 'hhdc')
        Hiber.session().clear()
    contracts.close()


if has_mop_contracts and not is_core:
    contracts = Hiber.session().createQuery("from MopContract contract order by contract.id").scroll()
    while contracts.next():
        print_batches(contracts.get(0), 'mop')
        Hiber.session().clear()
    contracts.close()


if has_supplier_batches and not is_core:
    contracts = Hiber.session().createQuery("from SupplierContract contract order by contract.id").scroll()
    while contracts.next():
        print_batches(contracts.get(0), 'supplier')
        Hiber.session().clear()
    contracts.close()


pw.println('</csv>')
pw.flush()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[33]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies Snapshot]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import ReadType, HhStartDate, Supply
from java.util import Calendar
from java.text import SimpleDateFormat

def mpan_fields(mpan, date, is_import, mand_query, metering_type, bill_query, prev_read_query, pres_read_query):
    avg_months = ''
    if mpan is None:
        mpan_core_str = ''
        agreed_sc_str = ''
        llfc_code_str = ''
        llfc_description = ''
        last_read_date_str = ''
        mandatory_hh = ''
        supplier_account = ''
        supplier_contract_name = ''
        latest_supplier_bill_date = 'No Supplier'
    else:
        mpan_core_str = mpan.getCore().toString()
        agreed_sc_str = str(mpan.getAgreedSupplyCapacity())
        llfc = mpan.getLlfc()
        llfc_code_str = str(llfc)
        llfc_description = llfc.getDescription()

        cal = MonadDate.getCalendar()
        cal.setTime(date)
        mandatory_hh = False
        supplier_contract = mpan.getSupplierContract()
        supplier_account = mpan.getSupplierAccount()
        supplier_contract_name = supplier_contract.getName()
        if metering_type != 'nhh':
            month_mds = []
            mand_query.setBoolean('isImport', is_import)
            for i in range(12):
                mand_query.setTimestamp('finishDate', cal.getTime())
                cal.add(Calendar.MONTH, -1)
                cal.add(Calendar.MINUTE, 30)
                month_md = mand_query.setTimestamp('startDate', cal.getTime()).uniqueResult()
                cal.add(Calendar.MINUTE, -30)
                if month_md is not None:
                    month_mds.append(month_md.doubleValue() * 2)
            month_mds.sort()
            num_months = min(len(month_mds), 3)
            avg_months = 0
            for month_md in month_mds[-1 * num_months:]:
                avg_months += month_md
            if num_months > 0:
                avg_months = avg_months / num_months
            if avg_months > 100:
                mandatory_hh = True

        if metering_type == 'hh':
            latest_supplier_bill_date = bill_query.setEntity('contract', supplier_contract).uniqueResult()
        else:
            latest_previous_read = latest_previous_read_query.setEntity('supply', supply).uniqueResult()
            latest_present_read = latest_present_read_query.setEntity('supply', supply).uniqueResult()

            if latest_previous_read is None and latest_present_read is None:
                latest_read = None
            elif latest_present_read is not None and latest_previous_read is None:
                latest_read = latest_present_read
            elif latest_present_read is None and latest_previous_read is not None:
                latest_read = latest_previous_read
            elif latest_present_read.getPresentDate().after(latest_previous_read.getPreviousDate()):
                latest_read = latest_present_read
            else:
                latest_read = latest_previous_read

            if latest_read is None:
                latest_supplier_bill_date = None
            else:
                latest_supplier_bill_date = latest_read.getBill().getFinishDate()

        if latest_supplier_bill_date is not None:
            latest_supplier_bill_date = formatter.format(latest_supplier_bill_date.getDate())

    return [mpan_core_str, agreed_sc_str, llfc_code_str, llfc_description, supplier_contract_name, supplier_account, avg_months, latest_supplier_bill_date, mandatory_hh]

year = inv.getInteger('year')
month = inv.getInteger('month')
if not inv.isValid():
    raise UserException()

cal = MonadDate.getCalendar()
cal.clear()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.add(Calendar.MONTH, 1)
date = HhStartDate(cal.getTime()).getPrevious().getDate()

formatter = SimpleDateFormat("yyyy-MM-dd HH:mm")
formatter.setCalendar(cal)

inv.getResponse().setContentType('text/csv')
inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="report.csv"')
pw = inv.getResponse().getWriter()

pw.println("Date,Physical Site Id, Physical Site Name, Other Site Ids, Other Site Names, Supply Id, Source, Generator Type, DNO Name, Voltage Level, Metering Type, Mandatory HH, PC, MTC, CoP, SSC, MOP Contract, Mop Account, HHDC Contract, HHDC Account, Meter Serial Number,Latest Normal Meter Read Date,Latest Normal Meter Read Type,Latest DC Bill Date, Latest MOP Bill Date,Has Import kWh?, Has Import kVArh?, Has Export kWh?, Has Export kVArh?,Import MPAN core, Import Agreed Supply Capacity (kVA), Import LLFC Code, Import LLFC Description, Import Supplier Contract, Import Supplier Account, Import Mandatory kWh,Latest Import Supplier Bill Date, Export MPAN core, Export Agreed Supply Capacity (kVA), Export LLFC Code, Export LLFC Description, Export Supplier Contract, Export Supplier Account, Export Mandatory kWh,Latest Export Supplier Bill Date")
pw.flush()

mand_query = Hiber.session().createQuery("select max(datum.value) from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isKwh is true and datum.channel.isImport = :isImport and datum.startDate.date >= :startDate and datum.startDate <= :finishDate")

latest_previous_normal_read_query = Hiber.session().createQuery("from RegisterRead read where read.previousType.code in ('N', 'C', 'N3') and read.previousDate.date <= :startDate and read.bill.supply = :supply order by read.previousDate.date desc").setTimestamp('startDate', date).setMaxResults(1)

latest_present_normal_read_query = Hiber.session().createQuery("from RegisterRead read where read.presentType.code in ('N', 'C', 'N3') and read.presentDate.date <= :startDate and read.bill.supply = :supply order by read.presentDate.date desc").setTimestamp('startDate', date).setMaxResults(1)

latest_previous_read_query = Hiber.session().createQuery("from RegisterRead read where read.previousDate.date <= :startDate and read.bill.supply = :supply order by read.previousDate.date desc").setTimestamp('startDate', date).setMaxResults(1)

latest_present_read_query = Hiber.session().createQuery("from RegisterRead read where read.presentDate.date <= :startDate and read.bill.supply = :supply order by read.presentDate.date desc").setTimestamp('startDate', date).setMaxResults(1)

latest_bill_date_query = Hiber.session().createQuery("select bill.finishDate from Bill bill where bill.startDate.date <= :startDate and bill.supply = :supply and bill.batch.contract = :contract order by bill.finishDate.date desc").setTimestamp('startDate', date).setMaxResults(1)

if inv.hasParameter('supply-id'):
    supply_id = inv.getLong('supply-id')
    supply = Supply.getSupply(supply_id)

    supply_generations_query = Hiber.session().createQuery("from SupplyGeneration generation where generation.startDate.date <= :date and (generation.finishDate.date is null or generation.finishDate.date >= :date) and supply = :supply order by generation.supply.id").setEntity('supply', supply)
else:
    supply_generations_query = Hiber.session().createQuery("from SupplyGeneration generation where generation.startDate.date <= :date and (generation.finishDate.date is null or generation.finishDate.date >= :date) order by generation.supply.id")

supply_generations = supply_generations_query.setTimestamp('date', date).scroll()

while supply_generations.next():
    supply_generation = supply_generations.get(0)
    site_codes = ''
    site_names = ''
    for site_supply_generation in supply_generation.getSiteSupplyGenerations():
        if site_supply_generation.getIsPhysical():
            physical_site = site_supply_generation.getSite()
        else:
            site = site_supply_generation.getSite();
            site_codes = site_codes + site.getCode() + ', '
            site_names = site_names + site.getName() + ', '
    site_codes = site_codes[:-2]
    site_names = site_names[:-2]
    supply = supply_generation.getSupply()
    mpan = supply_generation.getMpans().iterator().next()
    generator_type = supply.getGeneratorType()
    if generator_type is None:
        generator_type = ''
    else:
        generator_type = generator_type.getCode()

    if supply_generation.getPc().getCode() == 0:
        metering_type = 'hh'
    elif supply_generation.getChannels().size() > 0:
        metering_type = 'amr'
    elif supply_generation.getMtc().getMeterType().getCode() in ['UM', 'PH']:
        metering_type = 'unmetered'
    else:
        metering_type = 'nhh'

    if metering_type == 'nhh':
        latest_previous_normal_read = latest_previous_normal_read_query.setEntity('supply', supply).uniqueResult()
        latest_present_normal_read = latest_present_normal_read_query.setEntity('supply', supply).uniqueResult()

        if latest_previous_normal_read is None and latest_present_normal_read is None:
            latest_normal_read_date = None
            latest_normal_read_type = None
        elif latest_present_normal_read is not None and latest_previous_normal_read is None:
            latest_normal_read_date = latest_present_normal_read.getPresentDate()
            latest_normal_read_type = latest_present_normal_read.getPresentType()
        elif latest_present_normal_read is None and latest_previous_normal_read is not None:
            latest_normal_read_date = latest_previous_normal_read.getPreviousDate()
            latest_normal_read_type = latest_previous_normal_read.getPreviousType()
        elif latest_present_normal_read.getPresentDate().after(latest_previous_normal_read.getPreviousDate()):
            latest_normal_read_date = latest_present_normal_read.getPresentDate()
            latest_normal_read_type = latest_present_normal_read.getPresentType()
        else:
            latest_normal_read_date = latest_previous_normal_read.getPreviousDate()
            latest_normal_read_type = latest_previous_normal_read.getPreviousType()
        if latest_normal_read_date is not None:
            latest_normal_read_date = formatter.format(latest_normal_read_date.getDate())

    else:
        latest_normal_read_date = metering_type
        latest_normal_read_type = None
        latest_read_date = metering_type

    latest_bill_date_query.setEntity('supply', supply)
    latest_previous_read_query.setEntity('supply', supply)
    latest_present_read_query.setEntity('supply', supply)

    mand_query.setEntity('supply', supply)
    mop_contract = supply_generation.getMopContract()
    if mop_contract is None:
        mop_contract_name = ''
        mop_account = ''
        latest_mop_bill_date = 'No MOP'
    else:
        mop_contract_name = mop_contract.getName()
        mop_account = supply_generation.getMopAccount()
        latest_mop_bill_date = latest_bill_date_query.setEntity('contract', mop_contract).uniqueResult()
        if latest_mop_bill_date is not None:
            latest_mop_bill_date = formatter.format(latest_mop_bill_date.getDate())

    hhdc_contract = supply_generation.getHhdcContract()
    if hhdc_contract is None:
        hhdc_contract_name = ''
        hhdc_account = ''
        latest_hhdc_bill_date = 'No HHDC'
    else:
        hhdc_contract_name = hhdc_contract.getName()
        hhdc_account = supply_generation.getHhdcAccount()
        latest_hhdc_bill_date = latest_bill_date_query.setEntity('contract', hhdc_contract).uniqueResult()
        if latest_hhdc_bill_date is not None:
            latest_hhdc_bill_date = formatter.format(latest_hhdc_bill_date.getDate())

    meter_serial_number = supply_generation.getMeterSerialNumber()
    import_values = mpan_fields(supply_generation.getImportMpan(), date, True, mand_query, metering_type, latest_bill_date_query, latest_previous_read_query, latest_present_read_query)
    export_values = mpan_fields(supply_generation.getExportMpan(), date, False, mand_query, metering_type, latest_bill_date_query, latest_previous_read_query, latest_present_read_query)
    channel_values = []
    for is_import in [True, False]:
        for is_kwh in [True, False]:
            if supply_generation.getChannel(is_import, is_kwh) is None:
                channel_values.append('false')
            else:
                channel_values.append('true')
    if import_values[-1] or export_values[-1]:
        mandatory_hh = 'yes'
    else:
        mandatory_hh = 'no'

    values = []
    for value in [HhStartDate(date), physical_site.getCode(), physical_site.getName(), site_codes, site_names, supply.getId(), supply.getSource().getCode(), generator_type, mpan.getCore().getDno().getName(), mpan.getLlfc().getVoltageLevel().getCode(), metering_type, mandatory_hh, supply_generation.getPc(), supply_generation.getMtc(), supply_generation.getCop(), supply_generation.getSsc(), mop_contract_name, mop_account, hhdc_contract_name, hhdc_account, meter_serial_number, latest_normal_read_date, latest_normal_read_type, latest_hhdc_bill_date, latest_mop_bill_date] + channel_values + import_values[:-1] + export_values[:-1]:
        if value is None:
           values.append('')
        else:
           values.append(value)

    pw.println(','.join(('"' + str(value) + '"') for value in values))
    Hiber.session().clear()
    pw.flush()
supply_generations.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[35]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[GSP Group]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import GspGroup

group_id = inv.getLong('gsp-group-id')
group = GspGroup.getGspGroup(group_id)
source.appendChild(group.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; GSP Groups &gt;
                    <xsl:value-of
                        select="/source/gsp-group/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/43/output/">
                        <xsl:value-of select="'GSP Groups'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/gsp-group/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/gsp-group/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/gsp-group/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[37]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Channel Snags]]></value>
        <value><![CDATA[from net.sf.chellow.monad import XmlTree, Hiber, UserException
from java.util import Date
from java.lang import System
from net.sf.chellow.billing import HhdcContract
from net.sf.chellow.physical import HhStartDate

contract_id = inv.getLong('hhdc-contract-id')
hidden_days = inv.getLong('hidden-days')
if not inv.isValid():
    raise UserException()
contract = HhdcContract.getHhdcContract(contract_id)
source.appendChild(contract.toXml(doc, XmlTree('party'))) 

snag_count = Hiber.session().createQuery("select count(distinct snag) from ChannelSnag snag join snag.channel.supplyGeneration.siteSupplyGenerations siteSupplyGeneration where snag.isIgnored is false and snag.channel.supplyGeneration.hhdcContract = :contract and snag.startDate.date < :activeDate").setEntity('contract', contract).setTimestamp("activeDate",Date(System.currentTimeMillis()-(5*24*60*60*1000))).uniqueResult()

snags = Hiber.session().createQuery("select distinct snag, siteSupplyGeneration.site.code, snag.startDate.date, snag.channel.id from ChannelSnag snag join snag.channel.supplyGeneration.siteSupplyGenerations siteSupplyGeneration where snag.isIgnored is false and snag.channel.supplyGeneration.hhdcContract = :contract and snag.startDate.date < :activeDate order by siteSupplyGeneration.site.code, snag.startDate.date, snag.channel.id").setEntity('contract', contract).setTimestamp("activeDate",Date(System.currentTimeMillis()-(hidden_days * 24 * 60 * 60 * 1000))).scroll()

i = 0
prev_snag = None
while snags.next() and i < 200:
    snag = snags.get(0)
    if prev_snag is None or not snag.getChannel().getSupplyGeneration().equals(prev_snag.getChannel().getSupplyGeneration()) or not snag.getStartDate().equals(prev_snag.getStartDate()) or not HhStartDate.isEqual(snag.getFinishDate(), prev_snag.getFinishDate()) or snag.getDescription() != prev_snag.getDescription():
        snag_group_element = doc.createElement('snag-group')
        source.appendChild(snag_group_element)
    snag_group_element.appendChild(snag.toXml(doc, XmlTree('channel', XmlTree('supplyGeneration', XmlTree('supply').put('siteSupplyGenerations', XmlTree('site')).put("mpans", XmlTree("core", XmlTree("dno")))))))
    prev_snag = snag
    i = i + 1
snags.close()

activeSites = Hiber.session().createQuery("select count(distinct siteSupplyGeneration.site) from ChannelSnag snag join snag.channel.supplyGeneration.siteSupplyGenerations siteSupplyGeneration where snag.isIgnored is false and snag.channel.supplyGeneration.hhdcContract = :contract and snag.startDate.date < :activeDate").setEntity('contract', contract).setTimestamp("activeDate",Date(System.currentTimeMillis()-(5*24*60*60*1000))).uniqueResult()

totalSites = Hiber.session().createQuery("select count(distinct siteSupplyGeneration.site) from ChannelSnag snag join snag.channel.supplyGeneration.siteSupplyGenerations siteSupplyGeneration where snag.isIgnored is false and snag.channel.supplyGeneration.hhdcContract = :contract").setEntity('contract', contract).uniqueResult()

source.setAttribute("snag-count", str(snag_count))
source.setAttribute("site-count", str(activeSites))
source.setAttribute("pending-site-count", str(totalSites - activeSites))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/hhdc-contract/@name" />
                    &gt; Channel Snags
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/113/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/hhdc-contract/@name" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Channel Snags ['" />
                    <a
                        href="{/source/request/@context-path}/hhdc-contracts/{/source/hhdc-contract/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <p>
                    <xsl:value-of
                        select="source/@snag-count" />
                    Snag(s) (older then 5 days) Total over
                    <xsl:value-of
                        select="source/@site-count" />
                    Site(s)
                </p>
                <p>
                    A further
                    <xsl:value-of
                        select="source/@pending-site-count" />
                    site(s) have snags not yet older then 5 days
                </p>
                <form action="{/source/request/@context-path}/reports/233/output/">
                <fieldset><legend>Download CSV</legend>
                <input type="hidden" name="dc-contract-id" value="{/source/hhdc-contract/@id}"/>
                <label>Snags less than <input size="3" maxlength="3" name="hidden-days" value="1"/> GMT calendar day(s) old are hidden.</label>
                <input type="submit" value="Download"/>
                </fieldset>
                </form>
                <br/>
                <form action=".">
                <fieldset><legend>Show Channel Snags</legend>
                <input type="hidden" name="hhdc-contract-id" value="{/source/hhdc-contract/@id}"/>
                <label>Snags less than <input size="3" maxlength="3" name="hidden-days" value="{/source/request/parameter[@name='hidden-days']/value}"/> days old are hidden.</label>
                <input type="submit" value="Show"/>
                </fieldset>
                </form>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>MPAN</th>
                            <th>Sites</th>
                            <th>Snag Description</th>
                            <th>Supply</th>
                            <th>Units</th>
                            <th>Duration</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/snag-group">
                            <tr>
                                <td>
                                    <ul>
                                      <xsl:for-each select="channel-snag">
                                      <li>
                                      <a
                                        href="{/source/request/@context-path}/reports/117/output/?snag-id={@id}">
                                        <xsl:value-of select="@id" />
                                      </a>
                                      <xsl:value-of select="' ['" />
                                      <a
                                        href="{/source/request/@context-path}/supplies/{channel/supply-generation/supply/@id}/generations/{channel/supply-generation/@id}/channels/{channel/@id}/snags/{@id}/">
                                          <xsl:value-of select="'edit'" />
                                      </a>
                                      <xsl:value-of select="']'" />
                                      </li>
                                      </xsl:for-each>
                                    </ul>
                                </td>
                                <td>
                                  <xsl:value-of select="concat(channel-snag/channel/supply-generation/mpan/mpan-core/dno/@code, channel-snag/channel/supply-generation/mpan/mpan-core/@uniquePart, channel-snag/channel/supply-generation/mpan/mpan-core/@checkDigit)" />
                                </td>
                                <td>
                                    <ul>
                                        <xsl:for-each
                                            select="channel-snag[position() = 1]/channel/supply-generation/site-supply-generation">
                                            <li>
                                                <xsl:value-of
                                                    select="concat(site/@code, ' ', site/@name)" />
                                            </li>
                                        </xsl:for-each>
                                    </ul>
                                </td>
                                <td>
                                    <xsl:value-of select="channel-snag/@description" />
                                </td>
                                <td>
                                    <ul>
                                      <xsl:for-each select="channel-snag">
                                        <li>
                                          <xsl:choose>
                                            <xsl:when
                                                test="channel/@is-import='true'">
                                                Import
                                            </xsl:when>
                                            <xsl:otherwise>
                                                Export
                                            </xsl:otherwise>
                                          </xsl:choose>
                                        </li>
                                      </xsl:for-each>
                                    </ul>
                                </td>
                                <td>
                                    <ul>
                                      <xsl:for-each select="channel-snag">
                                        <li>

                                    <xsl:choose>
                                        <xsl:when
                                            test="channel/@is-kwh='true'">
                                            kWh
                                        </xsl:when>
                                        <xsl:otherwise>
                                            kVArh
                                        </xsl:otherwise>
                                    </xsl:choose>
                                        </li>
                                      </xsl:for-each>
                                    </ul>
                                </td>
                                <td>
                                    Start
                                    <xsl:apply-templates
                                        select="channel-snag[position() = 1]/hh-start-date[@label='start']" />
                                    <br />
                                    Finish
                                    <xsl:choose>
                                    <xsl:when test="channel-snag[position() = 1]/hh-start-date[@label='finish']">
                                    <xsl:apply-templates
                                        select="channel-snag[position() = 1]/hh-start-date[@label='finish']" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                         Ongoing
                                    </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
    <xsl:template match="hh-start-date">
        <xsl:value-of select="concat(@year,'-',@month,'-',@day,' ',@hour,':',@minute,' Z')" />
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[39]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site Group Snags]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import HhdcContract

snags = Hiber.session().createQuery("select snag, snag.site from SiteSnag snag where snag.isIgnored = false order by snag.site.code, snag.startDate.date desc").list()
snags_element = doc.createElement('site-snags')
source.appendChild(snags_element)
for snag_row in snags:
    snag_element = snag_row[0].toXml(doc)
    snags_element.appendChild(snag_element)
    site_element = snag_row[1].toXml(doc)
    snag_element.appendChild(site_element)
sites = Hiber.session().createQuery("select count(distinct snag.site) from SiteSnag snag where snag.isIgnored = false").uniqueResult()
snags_element.setAttribute("snag-count", str(len(snags)))
snags_element.setAttribute("site-count", str(sites))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />

    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Site Snags
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Site Snags ['" />
                    <a
                        href="{/source/request/@context-path}/site-snags/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <p>
                    <xsl:value-of
                        select="source/site-snags/@snag-count" />
                    Snag(s) (older then 5 days) Total over
                    <xsl:value-of
                        select="source/site-snags/@site-count" />
                    Site(s)
                    <br />
                </p>
                <table>
                    <thead>
                        <tr>
                            <th></th>
                            <th>Creation Date</th>
                            <th>Site ID</th>
                            <th>Site Name</th>
                            <th>Snag Description</th>
                            <th>Start Date</th>
                            <th>Finish Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/site-snags/site-snag">
                            <tr>
                                <td>
                                    <xsl:value-of select="' ['" />
                                    <a
                                        href="{/source/request/@context-path}/site-snags/{@id}/">
                                        <xsl:value-of select="'edit'" />
                                    </a>
                                    <xsl:value-of select="']'" />
                                </td>
                                <td>
                                    <xsl:value-of select="concat(date[@label='created']/@year, '-', date[@label='created']/@month, '-', date[@label='created']/@day, ' ', date[@label='created']/@hour, ':', date[@label='created']/@minute)"/>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/5/output/?site-id={site/@id}">
                                        <xsl:value-of
                                            select="site/@code" />
                                    </a>
                                </td>

                                <td>
                                    <xsl:value-of select="site/@name" />
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>

                                <td>
                                    <xsl:apply-templates
                                        select="hh-start-date[@label='start']" />
                                </td>
                                <td>
                                    <xsl:apply-templates
                                        select="hh-start-date[@label='finish']" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
    <xsl:template match="hh-start-date">
        <xsl:value-of select="concat(@year, '-', @month, '-', @day, ' ', @hour, ':',@minute)" />
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[41]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies TRIAD]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import HhStartDate, SupplyGeneration, Supply
from java.util import Calendar
from net.sf.chellow.billing import NonCoreContract, Dno

computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
year = inv.getInteger('year')
if not inv.isValid():
    raise UserException()

pw = inv.getResponse().getWriter()

cal = MonadDate.getCalendar()
cal.clear()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, Calendar.APRIL)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MINUTE, -30)
year_finish = HhStartDate(cal.getTime())

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.YEAR, -1)
year_start = HhStartDate(cal.getTime())
cal.add(Calendar.MONTH, 11)
march_start = HhStartDate(cal.getTime())

triad_contract = NonCoreContract.getNonCoreContract('TRIAD')

def triad_csv(supply_source):
    if supply_source is None or supply_source.id.startswith('99'):
        return ['' for item in range(19)]

    dno_contract = comterp.get('get_dno_contract')(supply_source.dno_code, year_finish, pw)
    bill = {}
    supply_source.contract_function(triad_contract, 'triad')(bill, dno_contract, march_start, year_finish, supply_source)
    values = [supply_source.id]
    for i in range(3):
        triad_prefix = 'triad-actual-' + str(i)
        for suffix in ['-date', '-msp-kw', '-status', '-laf', '-gsp-kw']:
            values.append(bill[triad_prefix + suffix])

    values += [bill['triad-actual-' + suf] for suf in ['gsp-kw', 'rate', 'gbp']]
    return values


pw.println("Site Code, Site Name, Supply Name, Source, Generator Type, Import MPAN Core, Import T1 Date, Import T1 MSP kW, Import T1 Status, Import T1 LAF, Import T1 GSP kW, Import T2 Date, Import T2 MSP kW, Import T2 Status, Import T2 LAF, Import T2 GSP kW, Import T3 Date, Import T3 MSP kW, Import T3 Status, Import T3 LAF, Import T3 GSP kW, Import GSP kW, Import Rate GBP / kW, Import GBP, Export MPAN Core, Export T1 Date, Export T1 MSP kW, Export T1 Status, Export T1 LAF, Export T1 GSP kW, Export T2 Date, Export T2 MSP kW, Export T2 Status, Export T2 LAF, Export T2 GSP kW, Export T3 Date, Export T3 MSP kW, Export T3 Status, Export T3 LAF, Export T3 GSP kW, Export GSP kW, Export Rate GBP / kW, Export GBP")
pw.flush()

forecast_date = comterp.get('forecast_date')()

if inv.hasParameter('supply-id'):
    supply_id = inv.getLong('supply-id')
    generations = Hiber.session().createQuery("from SupplyGeneration generation where generation.startDate.date <= :yearFinish and (generation.finishDate.date is null or generation.finishDate.date >= :yearFinish) and generation.supply.source.code in ('net', 'gen-net') and generation.supply = :supply and generation.pc.code = 0").setEntity('supply', Supply.getSupply(supply_id)).setTimestamp('yearFinish', year_finish.getDate()).scroll()
else:
    generations = Hiber.session().createQuery("from SupplyGeneration generation where generation.startDate.date <= :yearFinish and (generation.finishDate.date is null or generation.finishDate.date >= :yearFinish) and generation.supply.source.code in ('net', 'gen-net') and generation.pc.code = 0 order by generation.supply.id").setTimestamp('yearFinish', year_finish.getDate()).scroll()

while generations.next():
    generation = generations.get(0)
    site = Hiber.session().createQuery("select siteSupGen.site from SiteSupplyGeneration siteSupGen where siteSupGen.supplyGeneration = :generation and siteSupGen.isPhysical is true").setEntity('generation', generation).uniqueResult()
    supply = generation.getSupply()
    pw.print(site.getCode() + ',"' + site.getName() + '","' + supply.getName() + '",' + supply.getSource().getCode())
    pw.flush()

    import_mpan = generation.getImportMpan()
    if import_mpan is None:
        import_supply_source = None
    else:
        import_supply_source = comterp.get('supply_source')(forecast_date, comterp, pw)
        import_supply_source.init_from_mpan(year_finish, year_finish, import_mpan)
    export_mpan = generation.getExportMpan()
    if export_mpan is None:
        export_supply_source = None
    else:
        export_supply_source = comterp.get('supply_source')(forecast_date, comterp, pw)
        export_supply_source.init_from_mpan(year_finish, year_finish, export_mpan)

    gen_type = supply.getGeneratorType()
    if gen_type is None:
        gen_type = ''
    else:
        gen_type = gen_type.getCode()

    for value in [gen_type] + triad_csv(import_supply_source) + triad_csv(export_supply_source):
        pw.print("," + str(value))
    pw.println('')
    pw.flush()
    Hiber().session().clear()
generations.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[43]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[GSP Groups]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

groups_element = doc.createElement('gsp-groups')
source.appendChild(groups_element)
for group in Hiber.session().createQuery("from GspGroup group order by group.code").list():
    groups_element.appendChild(group.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    <xsl:value-of select="'Chellow'" />
                    &gt; GSP Groups
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'GSP Groups'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/gsp-groups/gsp-group">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/35/output/?gsp-group-id={@id}">
                                       <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[45]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Providers]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

for provider in Hiber.session().createQuery("from Provider provider order by provider.participant.code, provider.role.code").list():
    source.appendChild(provider.toXml(doc, XmlTree('participant').put('role')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>Chellow &gt; Providers</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt; Providers
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <th>Name</th>
                        <th>Participant</th>
                        <th>Market Role</th>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/provider">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/47/output/?provider-id={@id}">
                                       <xsl:value-of select="@name" />
                                    </a>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/73/output/?participant-id={participant/@id}">
                                        <xsl:value-of
                                            select="participant/@name" />
                                    </a>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/121/output/?role-id={market-role/@id}">
                                        <xsl:value-of
                                            select="market-role/@description" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[47]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Provider]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import Provider
from net.sf.chellow.physical import MarketRole

provider_id = inv.getLong('provider-id')
provider = Provider.getProvider(provider_id)
provider_element = provider.toXml(doc, XmlTree('participant').put('role'))
source.appendChild(provider_element)
provider_role_code = provider.getRole().getCode()
query = None
if provider_role_code == MarketRole.HHDC:
    query = Hiber.session().createQuery("from HhdcContract contract where contract.party = :party order by contract.party.name").setEntity('party', provider)
elif provider_role_code == MarketRole.SUPPLIER:
    query = Hiber.session().createQuery("from SupplierContract contract where contract.party = :party order by contract.party.name").setEntity('party', provider)
elif provider_role_code == MarketRole.NON_CORE_ROLE:
    query = Hiber.session().createQuery("from NonCoreContract contract where contract.party = :party order by contract.party.name").setEntity('party', provider)
elif provider_role_code == MarketRole.MOP:
    query = Hiber.session().createQuery("from MopContract contract where contract.party = :party order by contract.party.name").setEntity('party', provider)

if query != None:
    for contract in query.list():
        contract_element = contract.toXml(doc, XmlTree('rateScripts'))
        start_rate_script = contract.getStartRateScript()
        start_rate_script.setLabel('start')
        contract_element.appendChild(start_rate_script.toXml(doc))
        finish_rate_script = contract.getFinishRateScript()
        finish_rate_script.setLabel('finish')
        contract_element.appendChild(finish_rate_script.toXml(doc))
        provider_element.appendChild(contract_element)]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Providers &gt;
                    <xsl:value-of select="/source/provider/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/45/output/">
                        <xsl:value-of select="'Providers'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/provider/@name" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Name</th>
                        <td>
                            <xsl:value-of
                                select="/source/provider/@name" />
                        </td>
                    </tr>

                    <tr>
                        <th>Participant</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/73/output/?participant-id={/source/provider/participant/@id}">
                                <xsl:value-of
                                    select="/source/provider/participant/@name" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>Role</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/123/output/?role-id={/source/provider/market-role/@id}">
                                <xsl:value-of
                                    select="/source/provider/market-role/@description" />
                            </a>
                        </td>
                    </tr>
                    <xsl:if
                        test="/source/provider/market-role/@code='R'">
                        <tr>
                            <th>DNO Code</th>
                            <td>
                                <xsl:value-of
                                    select="/source/provider/@dno-code" />
                            </td>
                        </tr>
                    </xsl:if>
                </table>
                <br />
                <table>
                    <caption>
                        Contracts
                    </caption>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Start Date</th>
                            <th>Finish Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/provider/hhdc-contract | /source/provider/supplier-contract | /source/provider/mop-contract">
                            <tr>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="/source/provider/market-role/@code = 'C'">
                                            <a
                                                href="{/source/request/@context-path}/reports/113/output/?contract-id={@id}">
                                               <xsl:value-of select="@name" />
                                            </a>
                                        </xsl:when>
                                        <xsl:when
                                            test="/source/provider/market-role/@code = 'R'">
                                            <a
                                                href="{/source/request/@context-path}/reports/113/output/?contract-id={@id}">
                                               <xsl:value-of select="@name" />
                                            </a>
                                        </xsl:when>
                                        <xsl:when
                                            test="/source/provider/market-role/@code = 'X'">
                                            <a
                                                href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={@id}">
                                                <xsl:value-of select="@name" />
                                            </a>
                                        </xsl:when>
                                        <xsl:when
                                            test="/source/provider/market-role/@code = 'M'">
                                            <a
                                                href="{/source/request/@context-path}/reports/107/output/?mop-contract-id={@id}">
                                                <xsl:value-of select="@name" />
                                            </a>
                                        </xsl:when>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(rate-script[@label='start']/hh-start-date[@label='start']/@year, '-', rate-script[@label='start']/hh-start-date[@label='start']/@month, '-', rate-script[@label='start']/hh-start-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="rate-script[@label='finish']/hh-start-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(rate-script[@label='finish']/hh-start-date[@label='finish']/@year, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@month, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
          </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[49]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[DNO LLFCs]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import Dno

dno_id = inv.getLong('dno-id')
dno = Dno.getDno(dno_id)
llfcs_element = doc.createElement('llfcs')
source.appendChild(llfcs_element)
for llfc in Hiber.session().createQuery("from Llfc llfc where llfc.dno = :dno order by llfc.code").setEntity("dno", dno).list():
    llfcs_element.appendChild(llfc.toXml(doc, XmlTree("voltageLevel")))
llfcs_element.appendChild(dno.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; DNOs &gt;
                    <xsl:value-of
                        select="/source/llfcs/dno/@code" />
                    &gt; LLFCs
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/137/output/">
                        <xsl:value-of select="'DNOs'"/>
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/139/output/?dno-id={/source/llfcs/dno/@id}">
                        <xsl:value-of
                            select="/source/llfcs/dno/@code" />
                    </a>
                    &gt; LLFCs
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                            <th>Voltage Level</th>
                            <th>Is Substation?</th>
                            <th>Is Import?</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/llfcs/llfc">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/51/output/?llfc-id={@id}">
                                    <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(voltage-level/@code, ' - ', voltage-level/@name)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@is-substation='true'">
                                            Has Substation
                                        </xsl:when>
                                        <xsl:otherwise>
                                            No Substation
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@is-import='true'">
                                            Import
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Export
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[51]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[DNO LLFC]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Llfc

llfc_id = inv.getLong('llfc-id')
llfc = Llfc.getLlfc(llfc_id)
source.appendChild(llfc.toXml(doc, XmlTree('dno').put('voltageLevel')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; DNOs &gt;
                    <xsl:value-of
                        select="/source/llfc/dno/@code" />
                    &gt; LLFCs &gt;
                    <xsl:value-of select="/source/llfc/@code" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/137/output/">
                        <xsl:value-of select="'DNOs'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/139/output/?dno-id={/source/llfc/dno/@id}">
                        <xsl:value-of
                            select="/source/llfc/dno/@code" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/49/output/?dno-id={/source/llfc/dno/@id}">
                        <xsl:value-of select="'LLFCs'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/llfc/@code" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/llfc/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/llfc/@description" />
                        </td>

                    </tr>
                    <tr>
                        <th>Voltage Level</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/llfc/voltage-level/@code, ' - ', /source/llfc/voltage-level/@name)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Is Substation?</th>
                        <td>
                            <xsl:value-of
                                select="/source/llfc/@is-substation" />
                        </td>
                    </tr>
                    <tr>
                        <th>Is Import?</th>
                        <td>
                            <xsl:value-of
                                select="/source/llfc/@is-import" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[53]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Profile Classes]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

pcs_element = doc.createElement('pcs')
source.appendChild(pcs_element)
for pc in Hiber.session().createQuery("from Pc pc order by pc.code").list():
    pcs_element.appendChild(pc.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>Chellow &gt; Profile Classes</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt; Profile Classes
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/pcs/pc">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/55/output/?pc-id={@id}">
                                        <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[55]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Profile Class]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Pc

pc_id = inv.getLong('pc-id')
pc = Pc.getPc(pc_id)
source.appendChild(pc.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; Profile Classes &gt;
                    <xsl:value-of select="/source/pc/@code" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/53/output/">
                        <xsl:value-of select="'Profile Classes'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/pc/@code" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/pc/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/pc/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[57]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Sites Duration Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/style/" />

                <title>Chellow &gt; CSV Sites Duration</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Sites Duration'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/59/output/">
                    <fieldset>
                        <legend>Download</legend>
<br/>
                        <xsl:value-of select="'For '"/>
                        <input name="months" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='months']">
                                <xsl:value-of select="/source/request/parameter[@name='months']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
<xsl:value-of select="' month(s) finishing at the end of '"/>
                        <input name="year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[59]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Sites Duration]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.lang import System
from net.sf.chellow.monad.types import MonadDate
import math
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate

year = inv.getInteger("year")
month = inv.getInteger("month")
months = inv.getInteger("months")

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.clear()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.add(Calendar.MONTH, 1)
finish_date = HhStartDate(cal.getTime())
cal.add(Calendar.MONTH, -1 * months)
cal.add(Calendar.MINUTE, 30)
start_date = HhStartDate(cal.getTime())

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()
pw.println("Site Id, Site Name, Associated Site Ids, Sources, Generator Types, From, To, Imported kWh, Displaced kWh, Exported kWh, Used kWh, Parasitic kWh, Generated kWh,Meter Type")
pw.flush()
sites = Hiber.session().createQuery("from Site site order by site.code").scroll()
while sites.next():
    query = Hiber.session().createQuery("select sum(datum.value) from HhDatum datum where datum.channel.supplyGeneration = :supplyGeneration and datum.channel.isImport is :isImport and datum.channel.isKwh is true and datum.channel.supplyGeneration.supply.source.code in (:sources) and datum.startDate.date >= :startDate and datum.startDate <= :finishDate")
    site = sites.get(0)
    site_code = site.getCode()
    associates = []
    sources = []
    generator_types = []
    has_physical = False
    site_supply_generations = Hiber.session().createQuery("from SiteSupplyGeneration siteSupplyGeneration where siteSupplyGeneration.site = :site and siteSupplyGeneration.isPhysical is true and siteSupplyGeneration.supplyGeneration.supply.source.code != 'sub' and siteSupplyGeneration.supplyGeneration.startDate.date <= :finishDate and (siteSupplyGeneration.supplyGeneration.finishDate is null or siteSupplyGeneration.supplyGeneration.finishDate.date >= :startDate)").setEntity('site', site).setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate()).scroll()
    import_from_net = 0
    export_to_net = 0
    import_from_gen = 0
    export_to_gen = 0
    metering_type = 'nhh'
    while site_supply_generations.next():
        has_physical = True
        site_supply_generation = site_supply_generations.get(0)
        supply_generation = site_supply_generation.getSupplyGeneration()
        if metering_type == 'nhh' and supply_generation.getChannels().size() > 0:
            metering_type = 'amr'
        if supply_generation.getPc().getCode() == 0:
            metering_type = 'hh'
        for ss_gen in supply_generation.getSiteSupplyGenerations():
            ss_gen_site_code = ss_gen.getSite().getCode()
            if ss_gen.getId() != site_supply_generation.getId() and ss_gen_site_code != site_code and ss_gen_site_code not in associates:
                associates.append(ss_gen_site_code)
            sup = ss_gen.getSupplyGeneration().getSupply()
            ss_gen_source = sup.getSource().getCode()
            if ss_gen_source not in sources:
                sources.append(ss_gen_source)
            if sup.getGeneratorType() is not None:
                ss_gen_gtype = sup.getGeneratorType().getCode()
                if sup.getGeneratorType() not in generator_types:
                    generator_types.append(ss_gen_gtype)
        result = query.setEntity('supplyGeneration', supply_generation).setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate()).setBoolean('isImport', True).setParameterList('sources', ['net', 'gen-net']).uniqueResult()
        if result is not None:
            import_from_net = import_from_net + result.doubleValue()
        result = query.setBoolean('isImport', False).uniqueResult()
        if result is not None:
            export_to_net = export_to_net + result.doubleValue()
        result = query.setParameterList('sources', ['gen']).uniqueResult()
        if result is not None:
            export_to_gen = export_to_gen + result.doubleValue()
        result = query.setParameterList('sources', ['gen-net']).uniqueResult()
        if result is not None:
            import_from_gen = import_from_gen + result.doubleValue()
        result = query.setBoolean('isImport', True).uniqueResult()
        if result is not None:
            export_to_gen = export_to_gen + result.doubleValue()
        result = query.setParameterList('sources', ['gen']).uniqueResult()
        if result is not None:
            import_from_gen = import_from_gen + result.doubleValue()
    if has_physical:
        associate_str = ''
        for associate in associates:
            associate_str = associate_str + associate + ', '
        sources.sort()
        sources_str = ''
        for source in sources:
            sources_str = sources_str + source + ', '
        generator_types.sort()
        generator_types_str = ''
        for generator_type in generator_types:
            generator_types_str = generator_types_str + generator_type + ', '
        displaced = import_from_gen - export_to_net - export_to_gen
        used = displaced + import_from_net
        pw.print('"' + site_code + '","')
        pw.print(site.getName() + '","')     
        pw.print(associate_str[:-2] + '","')
        pw.print(sources_str[:-2] + '","')
        pw.print(generator_types_str[:-2] + '",')
        pw.print(start_date.toString() + ',')
        pw.print(finish_date.toString() + ',')
        pw.print(str(round(import_from_net)))
        pw.print(',' + str(round(displaced)) + ',')
        pw.print(str(round(export_to_net)) + ',')
        pw.print(str(round(used)) + ',')
        pw.print(str(round(export_to_gen)) + ',')
        pw.print(str(round(import_from_gen)) + ',' + metering_type + '\n')
    pw.flush()
    Hiber.session().clear()
sites.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[61]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MTCs]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

mtcs_element = doc.createElement('mtcs')
source.appendChild(mtcs_element)
for mt in Hiber.session().createQuery("select mtc from Mtc mtc left outer join mtc.dno dno order by mtc.code, dno.code").list():
    mtcs_element.appendChild(mt.toXml(doc, XmlTree('dno').put('meterType')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>Chellow &gt; MTCs</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'"/>
                    </a>
                    &gt; MTCs
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Dno</th>
                            <th>Description</th>
                            <th>Meter Type</th>
                            <th>TPR count</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/mtcs/mtc">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/63/output/?mtc-id={@id}">
                                        <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="dno">
                                            <a
                                                href="{/source/request/@context-path}/reports/139/output/?dno-id={dno/@id}">
                                                <xsl:value-of
                                                    select="dno/@code" />
                                            </a>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            All
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                                <td>
                                    <a href="{/source/request/@context-path}/reports/131/output/?type-id={meter-type/@id}">
                                                <xsl:value-of
                                                    select="meter-type/@code" />
                                            </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@tpr-count" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[63]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MTC]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Mtc

mtc_id = inv.getLong('mtc-id')
mtc = Mtc.getMtc(mtc_id)
source.appendChild(mtc.toXml(doc, XmlTree('meterType').put('paymentType').put('dno')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; MTCs &gt;
                    <xsl:value-of select="/source/mtc/@code" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/61/output/">
                        <xsl:value-of select="'MTCs'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/mtc/@code" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/mtc/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Dno</th>
                        <td>
                            <xsl:choose>
                                <xsl:when test="/source/mtc/dno">
                                    <a
                                        href="{/source/request/@context-path}/reports/139/output/?dno-id={/source/mtc/dno/@id}">
                                        <xsl:value-of
                                            select="/source/mtc/dno/@code" />
                                    </a>
                                </xsl:when>
                                <xsl:otherwise>All</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/mtc/@description" />
                        </td>
                    </tr>
                    <tr>
                        <th>Has Related Metering?</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/mtc/@has-related-metering = 'true'">
                                    Yes
                                </xsl:when>
                                <xsl:otherwise>No</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Has Comms?</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/mtc/@has-comms">
                                    <xsl:choose>
                                        <xsl:when
                                            test="/source/mtc/@has-comms='true'">
                                            Yes
                                        </xsl:when>
                                        <xsl:otherwise>
                                            No
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:when>
                                <xsl:otherwise>Unknown</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Measurement Class</th>
                        <td>
                            <xsl:choose>
                                <xsl:when test="/source/mtc/@is-hh">
                                    <xsl:choose>
                                        <xsl:when
                                            test="/source/mtc/@is-hh='true'">
                                            HH
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NHH
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:when>
                                <xsl:otherwise>Unknown</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Meter Type</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/131/output/?type-id={/source/mtc/meter-type/@id}">
                                <xsl:value-of
                                    select="/source/mtc/meter-type/@description" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>Payment Type</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/135/output/?type-id={/source/mtc/meter-payment-type/@id}">
                                <xsl:value-of
                                    select="/source/mtc/meter-payment-type/@description" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>TPR Count</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/mtc/@tpr-count">
                                    <xsl:value-of
                                        select="/source/mtc/@tpr-count" />
                                </xsl:when>
                                <xsl:otherwise>N/A</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Valid From</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/mtc/date[@label='from']/@year, '-', /source/mtc/date[@label='from']/@month, '-', /source/mtc/date[@label='from']/@day, ' ', /source/mtc/date[@label='from']/@hour, ':', /source/mtc/date[@label='from']/@minute, ' Z')" />
                        </td>
                    </tr>
                    <tr>
                        <th>Valid To</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/mtc/date[@label='to']">
                                    <xsl:value-of
                                        select="concat(/source/mtc/date[@label='to']/@year, '-', /source/mtc/date[@label='to']/@month, '-', /source/mtc/date[@label='to']/@day, ' ', /source/mtc/date[@label='to']/@hour, ':', /source/mtc/date[@label='to']/@minute, ' Z')" />
                                </xsl:when>
                                <xsl:otherwise>Ongoing</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[65]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Contract HH Data Import]]></value>
        <value><![CDATA[from net.sf.chellow.billing import HhdcContract
from net.sf.chellow.monad import XmlTree, MonadMessage

hhdc_contract_id = inv.getLong('hhdc-contract-id')
process_id = inv.getLong('process-id')

processes =  inv.getMonad().getServletConfig().getServletContext().getAttribute('net.sf.chellow.hh_import_map')

contract = HhdcContract.getHhdcContract(hhdc_contract_id)

process = processes[hhdc_contract_id][process_id]

process_element = process.to_xml(doc)
source.appendChild(process_element);
process_element.appendChild(contract.toXml(doc, XmlTree("party")))

if not process.isAlive():
    messages = process.messages
    if len(messages) == 0:
        successful = True
    else:
        successful = False
    process_element.setAttribute("successful", str(successful))

    for message in messages:
        process_element.appendChild(MonadMessage(message).toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN" doctype-system="http://www.w3.org/TR/html4/strict.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; HHDC Contracts &gt;
                    <xsl:value-of select="/source/hh-data-import/hhdc-contract/@name" />
                    &gt; HH Data Imports &gt;
                    <xsl:value-of select="/source/hh-data-import/@uri-id" />
                </title>
            </head>
            <body>
                <p>
                    <a href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a href="{/source/request/@context-path}/reports/113/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={/source/hh-data-import/hhdc-contract/@id}">
                        <xsl:value-of select="/source/hh-data-import/hhdc-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/211/output/?hhdc-contract-id={/source/hh-data-import/hhdc-contract/@id}">
                        <xsl:value-of select="'HH Data Imports'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/hh-data-import/@id" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <p>
                    <xsl:choose>
                        <xsl:when test="/source/hh-data-import/@successful">

                            <xsl:choose>
                                <xsl:when test="/source/hh-data-import/@successful = 'True'">

                                    The import has completed
                                    successfully.
                                </xsl:when>
                                <xsl:otherwise>
                                    The import didn't complete
                                    successfully.
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="/source/hh-data-import/@progress" />
                        </xsl:otherwise>
                    </xsl:choose>
                </p>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[67]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[DNO Contract]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import DnoContract

contract_id = inv.getLong('dno-contract-id')
contract = DnoContract.getDnoContract(contract_id)
contract_element = contract.toXml(doc, XmlTree('party'))
source.appendChild(contract_element)
for rate_script in contract.getRateScripts():
    contract_element.appendChild(rate_script.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; DNOs &gt;
                    <xsl:value-of
                        select="/source/dno-contract/dno/@code" />
                    &gt; Contract: <xsl:value-of select="/source/dno-contract/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/137/output/">
                        <xsl:value-of select="'DNOs'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/139/output/?dno-id={/source/dno-contract/dno/@id}">
                        <xsl:value-of
                            select="/source/dno-contract/dno/@code" />
                    </a>
                    &gt;
                    <xsl:value-of select="concat('Contract ', /source/dno-contract/@name, ' [')" />
                    <a
                        href="{/source/request/@context-path}/dnos/{/source/dno-contract/dno/@id}/contracts/{/source/dno-contract/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                        <tr>
                            <th>Name</th>
                            <td>
                                <xsl:value-of
                                    select="/source/dno-contract/@name" />
                            </td>
                        </tr>
                        <tr>
                            <th>Start Date</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/dno-contract/rate-script[position()=1]/hh-start-date[@label='start']/@year, '-', /source/dno-contract/rate-script[position()=1]/hh-start-date[@label='start']/@month, '-', /source/dno-contract/rate-script[position()=1]/hh-start-date[@label='start']/@day, ' ', /source/dno-contract/rate-script[position()=1]/hh-start-date[@label='start']/@hour, ':', /source/dno-contract/rate-script[position()=1]/hh-start-date[@label='start']/@minute)" />
                            </td>
                        </tr>
                        <tr>
                            <th>Finish Date</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/dno-contract/rate-script[position()=last()]/hh-start-date[@label='finish']">
                                        <xsl:value-of
                                            select="concat(/source/dno-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@year, '-', /source/dno-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@month, '-', /source/dno-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@day)" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Ongoing
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <br/>
                <table><caption>Rate Scripts [<a href="{/source/request/@context-path}/dnos/{/source/dno-contract/dno/@id}/contracts/{/source/dno-contract/@id}/rate-scripts/">edit</a>]</caption>
                    <thead>
                        <tr>
                            <th></th>
                            <th>From</th>
                            <th>To</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/dno-contract/rate-script">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/69/output/?dno-rate-script-id={@id}">
                                        <xsl:value-of select="'View'" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="hh-start-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>

                <h2>Script</h2>
                <pre>
                    <xsl:value-of
                        select="/source/dno-contract/@charge-script" />
                </pre>

            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[69]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[DNO Contract Rate Script]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import RateScript

script_id = inv.getLong('dno-rate-script-id')
script = RateScript.getRateScript(script_id)
source.appendChild(script.toXml(doc, XmlTree('contract', XmlTree('party'))))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; DNOs &gt;
                    <xsl:value-of
                        select="/source/rate-script/dno-contract/dno/@code" />
                    &gt; Contracts &gt;
                    <xsl:value-of
                        select="/source/rate-script/dno-contract/@name" />
                    &gt; Rate Script
                    <xsl:value-of select="/source/rate-script/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/137/output/">
                        <xsl:value-of select="'DNOs'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/139/output/?dno-id={/source/rate-script/dno-contract/dno/@id}">
                        <xsl:value-of
                            select="/source/rate-script/dno-contract/dno/@code" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/67/output/?dno-contract-id={/source/rate-script/dno-contract/@id}">
                        <xsl:value-of
                            select="concat('Contract ', /source/rate-script/dno-contract/@name)" />
                    </a>
                    &gt; Rate Script
                    <xsl:value-of select="concat(/source/rate-script/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/dnos/{/source/rate-script/dno-contract/dno/@id}/contracts/{/source/rate-script/dno-contract/@id}/rate-scripts/{/source/rate-script/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                        <tr>
                            <th>Start Date</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/rate-script/hh-start-date[@label='start']/@year, '-', /source/rate-script/hh-start-date[@label='start']/@month, '-', /source/rate-script/hh-start-date[@label='start']/@day, ' ', /source/rate-script/hh-start-date[@label='start']/@hour, ':', /source/rate-script/hh-start-date[@label='start']/@minute)" />
                            </td>
                        </tr>
                        <tr>
                            <th>Finish Date</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/rate-script/hh-start-date[@label='finish']">
                                        <xsl:value-of
                                            select="concat(/source/rate-script/hh-start-date[@label='finish']/@year, '-', /source/rate-script/hh-start-date[@label='finish']/@month, '-', /source/rate-script/hh-start-date[@label='finish']/@day, ' ', /source/rate-script/hh-start-date[@label='finish']/@hour, ':', /source/rate-script/hh-start-date[@label='finish']/@minute)" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Ongoing
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <h2>Script</h2>

                <pre>
                    <xsl:value-of select="/source/rate-script/@script" />
                </pre>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[71]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Participants]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber

for participant in Hiber.session().createQuery('from Participant participant order by participant.code').list():
    source.appendChild(participant.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Participants
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Participants'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/participant">
                            <tr>
                                <td>
<a
                                        href="{/source/request/@context-path}/reports/73/output/?participant-id={@id}">
                                    <xsl:value-of select="@code" /></a>
                                </td>
                                <td>
                                    <xsl:value-of select="@name" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[73]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Participant]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Participant

participant_id = inv.getLong('participant-id')
participant = Participant.getParticipant(participant_id)
participant_element = participant.toXml(doc)
source.appendChild(participant_element);
for party in Hiber.session().createQuery("from Party party where party.participant = :participant order by party.role.code").setEntity('participant', participant).list():
    participant_element.appendChild(party.toXml(doc, XmlTree('role')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Market Participants &gt;
                    <xsl:value-of select="/source/participant/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/71/output/">
                        <xsl:value-of select="'Market Participants'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/participant/@name" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                        <tr>
                            <th>Code</th>
                            <td>
                                <xsl:value-of
                                    select="/source/participant/@code" />
                            </td>
                        </tr>
                        <tr>
                            <th>Name</th>
                            <td>
                                <xsl:value-of
                                    select="/source/participant/@name" />
                            </td>
                        </tr>
                    </tbody>
                </table>
<br/>
                <table>
                    <caption>Parties</caption>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Market Role</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/participant[provider or dno]/*">
                            <tr>
                                <td>
                                  <xsl:choose>
                                    <xsl:when test="../provider">
                                      <a
                                          href="{/source/request/@context-path}/reports/47/output/?provider-id={@id}">
                                          <xsl:value-of select="@name" />
                                      </a>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <a
                                          href="{/source/request/@context-path}/reports/139/output/?dno-id={@id}">
                                          <xsl:value-of select="@name" />
                                      </a>
                                    </xsl:otherwise>
                                   </xsl:choose>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/123/output/?role-id={market-role/@id}">
                                        <xsl:value-of
                                            select="market-role/@description" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[75]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contracts]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

contracts_element = doc.createElement('contracts')
source.appendChild(contracts_element)
for contract in Hiber.session().createQuery("from SupplierContract contract order by contract.name").list():
    contract_element = contract.toXml(doc, XmlTree('party'))
    contracts_element.appendChild(contract_element)
    start_rate_script = contract.getStartRateScript()
    start_rate_script.setLabel('start')
    contract_element.appendChild(start_rate_script.toXml(doc))
    finish_rate_script = contract.getFinishRateScript()
    finish_rate_script.setLabel('finish')
    contract_element.appendChild(finish_rate_script.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Supplier Contracts
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Supplier Contracts ['" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Start Date</th>
                            <th>Finish Date</th>
                            <th>Provider</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/contracts/supplier-contract">
                            <tr>
                                <td>
<a href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={@id}">
                                    <xsl:value-of select="@name" />
</a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(rate-script[@label='start']/hh-start-date[@label='start']/@year, '-', rate-script[@label='start']/hh-start-date[@label='start']/@month, '-', rate-script[@label='start']/hh-start-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="rate-script[@label='finish']/hh-start-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(rate-script[@label='finish']/hh-start-date[@label='finish']/@year, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@month, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/47/output/?provider-id={provider/@id}">
                                        <xsl:value-of
                                            select="provider/@name" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[77]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contract]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import SupplierContract
from net.sf.chellow.monad.types import MonadDate
from java.util import Calendar, Date
from net.sf.chellow.physical import HhStartDate


contract_id = inv.getLong('supplier-contract-id')
contract = SupplierContract.getSupplierContract(contract_id)
contract_element = contract.toXml(doc, XmlTree('party'))
source.appendChild(contract_element)
for rate_script in contract.getRateScripts():
    contract_element.appendChild(rate_script.toXml(doc))
for account in Hiber.session().createQuery("from Batch batch where batch.contract = :contract order by batch.reference").setEntity('contract', contract).list():
    contract_element.appendChild(account.toXml(doc))

cal = MonadDate.getCalendar()
cal.setTime(Date())
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))
source.appendChild(MonadDate.getHoursXml(doc))

cal.setTime(Date())
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())
finish_date.setLabel('finish')
source.appendChild(finish_date.toXml(doc))

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1)
start_date = HhStartDate(cal.getTime())
start_date.setLabel('start')
source.appendChild(start_date.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/supplier-contract/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/75/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/supplier-contract/@name, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/supplier-contract/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                        <tr>
                            <th>Name</th>
                            <td>
                                <xsl:value-of
                                    select="/source/supplier-contract/@name" />
                            </td>
                        </tr>
                        <tr>
                            <th>Supplier</th>
                            <td>
                                <a
                                    href="{/source/request/@context-path}/reports/47/output/?provider-id={/source/supplier-contract/provider/@id}">
                                    <xsl:value-of
                                        select="/source/supplier-contract/provider/@name" />
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <th>Start Date</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/supplier-contract/rate-script[position()=1]/hh-start-date[@label='start']/@year, '-', /source/supplier-contract/rate-script[position()=1]/hh-start-date[@label='start']/@month, '-', /source/supplier-contract/rate-script[position()=1]/hh-start-date[@label='start']/@day)" />
                            </td>
                        </tr>
                        <tr>
                            <th>Finish Date</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/supplier-contract/rate-script[position()=last()]/hh-start-date[@label='finish']">
                                        <xsl:value-of
                                            select="concat(/source/supplier-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@year, '-', /source/supplier-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@month, '-', /source/supplier-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@day)" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Ongoing
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <br />
                <table>
                    <caption>Rate Scripts [<a href="{/source/request/@context-path}/supplier-contracts/{/source/supplier-contract/@id}/rate-scripts/"><xsl:value-of select="'edit'"/></a>]</caption>
                    <thead>
                        <tr>
                            <th></th>
                            <th>From</th>
                            <th>To</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/supplier-contract/rate-script">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/79/output/?rate-script-id={@id}">
                                        <xsl:value-of select="'view'" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day, ' ', hh-start-date[@label='start']/@hour, ':', hh-start-date[@label='start']/@minute)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="hh-start-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day, ' ', hh-start-date[@label='finish']/@hour, ':', hh-start-date[@label='finish']/@minute)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>

                <ul>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/89/output/?supplier-contract-id={/source/supplier-contract/@id}">
                            Batches
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/105/output/?supplier-contract-id={/source/supplier-contract/@id}">
                            Snags
                        </a>
                    </li>
                </ul>

<h3>CSV Downloads</h3>

                <form action="{/source/request/@context-path}/reports/87/output/">
                    <fieldset>
                        <input type="hidden" name="contract-id" value="{/source/supplier-contract/@id}"/>
                        <legend>Download Supply Level Virtual Bills</legend>
<br/>
<xsl:value-of select="'For '"/>
<select name="supply-polarity">
                                <option value="import">
                                    Import
                                </option>
                                <option value="export">
                                    Export
                                </option>
                        </select>
<xsl:value-of select="' from '"/>
<input name="start-year" value="{/source/hh-start-date[@label='start']/@year}" maxlength="4" size="4"/><xsl:value-of select="'-'"/>
                        <select name="start-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='start']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="'-'"/>
                        <select name="start-day">
                            <xsl:for-each select="/source/days/day">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='start']/@day">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="' '"/>
                        <select name="start-hour">
                            <xsl:for-each select="/source/hours/hour">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='start']/@hour">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="':00 to '"/>
<input name="finish-year" value="{/source/hh-start-date[@label='finish']/@year}" maxlength="4" size="4"/><xsl:value-of select="'-'"/>
                        <select name="finish-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="'-'"/>
                        <select name="finish-day">
                            <xsl:for-each select="/source/days/day">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@day">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="' '"/>
                        <select name="finish-hour">
                            <xsl:for-each select="/source/hours/hour">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@hour">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="':30 '"/>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
                <br/>
                <form action="{/source/request/@context-path}/reports/109/output/">
                    <fieldset>
                        <input type="hidden" name="contract-id" value="{/source/supplier-contract/@id}"/>
                        <legend>Download Displaced Virtual Bills</legend>
<br/>
<xsl:value-of select="'For '"/>
<input name="months" value="1" maxlength="2" size="2" />
<xsl:value-of select="' month(s) until the end of '"/>
                        <input name="end-year" value="{/source/date/@year}" maxlength="4" size="4" /><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
                <br/>
                <form action="{/source/request/@context-path}/reports/103/output/">
                    <fieldset>
                        <input type="hidden" name="contract-id" value="{/source/supplier-contract/@id}"/>
                        <legend>Download Third Party Virtual Bills</legend>
<br/>
<xsl:value-of select="'For site code '"/>
<input name="site-code" value="" maxlength="30" size="30" />
<xsl:value-of select="' for '"/>
<input name="months" value="1" maxlength="2" size="2" />
<xsl:value-of select="' month(s) until the end of '"/>
                        <input name="end-year" value="{/source/date/@year}" maxlength="4" size="4" /><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>

                <h3>Script</h3>
                <pre>
                    <xsl:value-of
                        select="/source/supplier-contract/@charge-script" />
                </pre>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[79]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contract Rate Script]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import RateScript

script_id = inv.getLong('rate-script-id')
script = RateScript.getRateScript(script_id)
source.appendChild(script.toXml(doc, XmlTree('contract', XmlTree('party'))))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/rate-script/supplier-contract/@name" />
                    &gt; Rate Script
                    <xsl:value-of select="/source/rate-script/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/75/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={/source/rate-script/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/rate-script/supplier-contract/@name" />
                    </a>
                    &gt; Rate Script
                    <xsl:value-of
                        select="concat(/source/rate-script/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/rate-script/supplier-contract/@id}/rate-scripts/{/source/rate-script/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Start Date</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/rate-script/hh-start-date[@label='start']/@year, '-', /source/rate-script/hh-start-date[@label='start']/@month, '-', /source/rate-script/hh-start-date[@label='start']/@day, ' ', /source/rate-script/hh-start-date[@label='start']/@hour, ':', /source/rate-script/hh-start-date[@label='start']/@minute)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Finish Date</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/rate-script/hh-start-date[@label='finish']">
                                    <xsl:value-of
                                        select="concat(/source/rate-script/hh-start-date[@label='finish']/@year, '-', /source/rate-script/hh-start-date[@label='finish']/@month, '-', /source/rate-script/hh-start-date[@label='finish']/@day, ' ', /source/rate-script/hh-start-date[@label='finish']/@hour, ':', /source/rate-script/hh-start-date[@label='finish']/@minute)" />
                                </xsl:when>
                                <xsl:otherwise>Ongoing</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                </table>

                <h2>Script</h2>

                <pre>
                    <xsl:value-of select="/source/rate-script/@script" />
                </pre>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[81]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Contract Virtual Bills]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.physical import HhStartDate, Supply
from java.sql import Timestamp, ResultSet
from net.sf.chellow.billing import HhdcContract, NonCoreContract
    
inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()
end_year = inv.getInteger("end-year")
end_month = inv.getInteger("end-month")
months = inv.getInteger("months")
contract_id = inv.getLong('contract-id')
if not inv.isValid():
    raise UserException()

contract = HhdcContract.getHhdcContract(contract_id)

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.set(Calendar.YEAR, end_year)
cal.set(Calendar.MONTH, end_month - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, months * -1)
start_date = HhStartDate(cal.getTime())

computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])

forecast_date = comterp.get('forecast_date')()

pw.print('Import MPAN Core, Export MPAN Core, Start Date, Finish Date')
bill_titles = comterp.get('contract_function')(contract, 'virtual_bill_titles')()
for title in bill_titles:
    pw.print(',' + title)
pw.println('')
pw.flush()

generations = Hiber.session().createQuery("select distinct generation from SupplyGeneration generation where (generation.finishDate.date is null or generation.finishDate.date >= :startDate) and generation.startDate.date <= :finishDate and generation.hhdcContract = :contract order by generation.supply.id").setEntity('contract', contract).setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate()).scroll()
while generations.next():
    generation = generations.get(0)
    import_mpan = generation.getImportMpan()
    if import_mpan is None:
        import_mpan_core_str = ''
    else:
        mpan = import_mpan
        import_mpan_core_str = import_mpan.getCore().toString()

    export_mpan = generation.getExportMpan()
    if export_mpan is None:
        export_mpan_core_str = ''
    else:
        mpan = export_mpan
        export_mpan_core_str = export_mpan.getCore().toString()

    pw.print(import_mpan_core_str + ',' + export_mpan_core_str + ',' + str(start_date) + ',' + str(finish_date) + ',')
    supply_source = comterp.get('supply_source')(forecast_date, comterp, pw)
    supply_source.init_from_mpan(start_date, finish_date, mpan)
    bill = supply_source.contract_function(contract, 'virtual_bill')(supply_source)
    for title in bill_titles:
        pw.print('"' + str(bill.get(title, '')) + '",')
        if title in bill:
            del bill[title]
    keys = bill.keys()
    keys.sort()
    for k in keys:
        pw.print(',"' + k + '","' + str(bill[k]) + '"')
    pw.println('')
    pw.flush()
    Hiber.session().clear()
generations.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[83]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Contract Virtual Bill Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.monad import Hiber
from net.sf.chellow.billing import HhdcContract

contract_id = inv.getLong('hhdc-contract-id')
if not inv.isValid():
    raise UserException()

contract = HhdcContract.getHhdcContract(contract_id)

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(contract.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
<head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; HHDC Contracts &gt;
                    <xsl:value-of select="/source/hhdc-contract/@name" /> &gt; Virtual Bills
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/113/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                    <xsl:value-of
                        select="/source/hhdc-contract/@name" />
                    </a>
                    &gt;
                    Virtual Bills
                </p>

                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/81/output/">
                    <fieldset>
                        <legend>Download Virtual Bills</legend>
                        <input type="hidden" name="contract-id" value="{/source/hhdc-contract/@id}"/>
<br/>
<xsl:value-of select="'For '"/>
<input name="months" value="1" maxlength="2" size="2" />
<xsl:value-of select="' month(s) until the end of '"/>
                        <input name="end-year" value="{/source/date/@year}" maxlength="4" size="4" /><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[85]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CoPs]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

cops_element = doc.createElement('cops')
source.appendChild(cops_element)
for cop in Hiber.session().createQuery("from Cop cop order by cop.code").list():
    cops_element.appendChild(cop.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; CoPs
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CoPs'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/cops/cop">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/197/output/?cop-id={@id}">
                                        <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[87]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contract Import Virtual Bills]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber
from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date
from net.sf.chellow.physical import MpanCore, HhStartDate, Supply
from net.sf.chellow.billing import SupplierContract, NonCoreContract, Dno
from java.text import DecimalFormat
from java.lang import System

inv.getResponse().setContentType("text/csv")
inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="output.csv"')
pw = inv.getResponse().getWriter()

start_year = inv.getInteger('start-year')
start_month = inv.getInteger('start-month')
start_day = inv.getInteger('start-day')
start_hour = inv.getInteger('start-hour')

finish_year = inv.getInteger('finish-year')
finish_month = inv.getInteger('finish-month')
finish_day = inv.getInteger('finish-day')
finish_hour = inv.getInteger('finish-hour')

supply_polarity = inv.getString('supply-polarity')

if not inv.isValid():
    raise UserException()

site_query = Hiber.session().createQuery("select supGen.site from SiteSupplyGeneration supGen where supGen.supplyGeneration = :supplyGeneration and supGen.isPhysical = true")

if inv.hasParameter('contract-id'):
    contract_id = inv.getLong('contract-id')
    contract = SupplierContract.getSupplierContract(contract_id)
    supply = None
elif inv.hasParameter('supply-id'):
    supply_id = inv.getLong('supply-id')
    supply = Supply.getSupply(supply_id)
    contract = None
else:
    raise UserException("There must be either a contract-id or supply-id parameter.")

computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])

if supply is None:
    pw.print('MPAN Core,Site Code,Site Name,Account,From,To')
    pw.flush()
    contract_function = comterp.get('contract_function')
    #pw.println("contract func " + str(contract) + " " + supply_polarity)
    titles_function = contract_function(contract, supply_polarity + '_virtual_bill_titles')
    #pw.println("titles func " + str(titles_function))
    bill_titles = titles_function()
    for title in bill_titles:
        pw.print(',' + title)
    pw.println('')
    pw.flush()

ct_cal = GregorianCalendar(TimeZone.getTimeZone("Europe/London"), Locale.UK)

utc_cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)

utc_cal.set(Calendar.YEAR, start_year)
utc_cal.set(Calendar.MONTH, start_month - 1)
utc_cal.set(Calendar.DAY_OF_MONTH, start_day)
utc_cal.set(Calendar.HOUR_OF_DAY, start_hour)
utc_cal.set(Calendar.MINUTE, 0)
utc_cal.set(Calendar.SECOND, 0)
utc_cal.set(Calendar.MILLISECOND, 0)
start_date = HhStartDate(utc_cal.getTime())

utc_cal.set(Calendar.YEAR, finish_year)
utc_cal.set(Calendar.MONTH, finish_month - 1)
utc_cal.set(Calendar.DAY_OF_MONTH, finish_day)
utc_cal.set(Calendar.HOUR_OF_DAY, finish_hour)
utc_cal.set(Calendar.MINUTE, 30)
utc_cal.set(Calendar.SECOND, 0)
utc_cal.set(Calendar.MILLISECOND, 0)
finish_date = HhStartDate(utc_cal.getTime())

forecast_date = comterp.get('forecast_date')()
timing = System.currentTimeMillis()

utc_cal.setTime(start_date.getDate())
utc_cal.set(Calendar.DAY_OF_MONTH, 1)
utc_cal.set(Calendar.HOUR_OF_DAY, 0)
utc_cal.set(Calendar.MINUTE, 0)
month_start = HhStartDate(utc_cal.getTime())

utc_cal.add(Calendar.MONTH, 1)
utc_cal.add(Calendar.MINUTE, -30)
month_finish = HhStartDate(utc_cal.getTime())

while not month_start.after(finish_date):
    if month_start.before(start_date):
        period_start = start_date
    else:
        period_start = month_start

    if month_finish.after(finish_date):
        period_finish = finish_date
    else:
        period_finish = month_finish

    for data_source in comterp.get(supply_polarity + '_data_sources')(contract, supply, period_start, period_finish, forecast_date, comterp, pw):

        if contract is None:
            sup_gen = supply.getGenerations(data_source.start_date, data_source.finish_date)[0]
            if supply_polarity == 'import':
                mpan = sup_gen.getImportMpan()
            else:
                mpan = sup_gen.getExportMpan()

            sup_con = mpan.getSupplierContract()
            bill_titles = comterp.get('contract_function')(sup_con, supply_polarity + '_virtual_bill_titles')()
            pw.print('MPAN Core,Site Code,Site Name,Account,From,To,' + ','.join(bill_titles))
            pw.println('')
            pw.flush()
        else:
            sup_con = contract

        site = site_query.setEntity('supplyGeneration', data_source.supply_generation).uniqueResult()
        pw.print(','.join('"' + str(value) + '"' for value in [data_source.mpan_core_str, site.getCode() , site.getName(), data_source.supplier_account, data_source.start_date, data_source.finish_date]))
        pw.flush()

        bill = comterp.get('contract_function')(sup_con, supply_polarity + '_virtual_bill')(data_source)
        for title in bill_titles:
            pw.print(',"' + str(bill.get(title, '')) + '"')
            if title in bill:
                del bill[title]
        keys = bill.keys()
        keys.sort()
        for k in keys:
            pw.print(',"' + k + '","' + str(bill[k]) + '"')
        pw.println('')
        pw.flush()
        Hiber.session().clear()

    utc_cal.setTime(month_start.getDate())
    utc_cal.add(Calendar.MONTH, 1)
    month_start = HhStartDate(utc_cal.getTime())
    utc_cal.add(Calendar.MONTH, 1)
    utc_cal.add(Calendar.MINUTE, -30)
    month_finish = HhStartDate(utc_cal.getTime())
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[89]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contract Batches]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import SupplierContract

contract_id = inv.getLong('supplier-contract-id')
contract = SupplierContract.getSupplierContract(contract_id)
batches_element = doc.createElement('batches')
source.appendChild(batches_element)
batches_element.appendChild(contract.toXml(doc, XmlTree('party')))
source.appendChild(batches_element)
for batch in Hiber.session().createQuery("from Batch batch where batch.contract = :contract order by batch.reference").setEntity("contract", contract).list():
    batches_element.appendChild(batch.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/batches/supplier-contract/@name" />
                    &gt; Batches
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/75/output/?supplier-id={/source/batches/supplier-contract/@id}">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={/source/batches/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/batches/supplier-contract/@name" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Batches ['" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/batches/supplier-contract/@id}/batches/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>Batches</caption>
                    <thead>
                        <tr>
                            <th>Reference</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/batches/batch">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/91/output/?batch-id={@id}">
                                        <xsl:value-of select="@reference" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[91]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contract Batch]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import Batch
from net.sf.chellow.physical import Configuration
from java.util import Properties
from java.io import StringReader
from net.sf.chellow.ui import Report


batch_id = inv.getLong('batch-id')
batch = Batch.getBatch(batch_id)
batch_element = batch.toXml(doc, XmlTree('contract', XmlTree('party')))
source.appendChild(batch_element)
bills = Hiber.session().createQuery("from Bill bill where bill.batch = :batch order by bill.reference, bill.startDate.date").setEntity("batch", batch).list()
for bill in bills:
    batch_element.appendChild(bill.toXml(doc, XmlTree("supply").put('type')))
source.setAttribute('bill-count', str(len(bills)))

config = Configuration.getConfiguration()
properties = Properties()
properties.load(StringReader(config.getProperties()))

for key in properties.propertyNames():
    if key.startswith('batch.report.'):
        batch_report_id = properties.get(key)
        if batch_report_id is not None:
            report = Report.getReport(int(batch_report_id))
            batch_element.appendChild(report.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/batch/supplier-contract/@name" />
                    &gt; Batches &gt;
                    <xsl:value-of select="/source/batch/@reference" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/75/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={/source/batch/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/batch/supplier-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/89/output/?supplier-contract-id={/source/batch/supplier-contract/@id}">
                        <xsl:value-of select="'Batches'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/batch/@reference, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/batch/supplier-contract/@id}/batches/{/source/batch/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                  <tr>
                    <th>Reference</th>
                    <td><xsl:value-of select="/source/batch/@reference"/></td>
                  </tr>
                  <tr>
                    <th>Description</th>
                    <td><xsl:value-of select="/source/batch/@description"/></td>
                  </tr>
                  <tr>
                    <th>Number Of Bills</th>
                    <td><xsl:value-of select="/source/@bill-count"/></td>
                  </tr>
                  <xsl:if test="/source/batch/report">
                  <tr>
                    <th>Custom Reports</th>
                    <td>
                        <ul>
                        <xsl:for-each select="/source/batch/report">
                        <li><a
                        href="{/source/request/@context-path}/reports/{@id}/output/?batch-id={/source/batch/@id}">
<xsl:value-of select="@name"/></a></li>
                        </xsl:for-each>
                        </ul>
                    </td>
                  </tr>
                  </xsl:if>
                </table>
                <br/>
                    <ul>
                    <li><a href="{/source/request/@context-path}/reports/111/output/?batch-id={/source/batch/@id}">Check Bills</a>
                    </li>
                    <li>[<a href="{/source/request/@context-path}/supplier-contracts/{/source/batch/supplier-contract/@id}/batches/{/source/batch/@id}/bill-imports/">Bill Imports</a>]</li>
                    </ul>
                <table>
                    <caption>Bills [<a href="{/source/request/@context-path}/supplier-contracts/{/source/batch/supplier-contract/@id}/batches/{/source/batch/@id}/bills/">edit</a>]</caption>
                    <thead>
                        <tr>
                            <th>View</th>
                            <th>Reference</th>
                            <th>Account</th>
                            <th>Issued</th>
                            <th>From</th>
                            <th>To</th>
                            <th>kWh</th>
                            <th>Net</th>
                            <th>VAT</th>
                            <th>Gross</th>
                            <th>Type</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/batch/bill">
                            <tr>
                                <td>
<a
                                        href="{/source/request/@context-path}/reports/105/output/?bill-id={@id}">
                                    <xsl:value-of select="'view'" />
 </a>
                                </td>

                                <td>
                                    <xsl:value-of select="@reference" />
                                </td>
                                <td>
                                    <xsl:value-of select="@account" />
                                </td>

                                <td>
                                    <xsl:value-of
                                        select="concat(date[@label='issue']/@year, '-', date[@label='issue']/@month, '-', date[@label='issue']/@day, ' ', date[@label='issue']/@hour, ':', date[@label='issue']/@minute)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day, ' ', hh-start-date[@label='start']/@hour, ':', hh-start-date[@label='start']/@minute)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day, ' ', hh-start-date[@label='finish']/@hour, ':', hh-start-date[@label='finish']/@minute)" />
                                </td>
                                <td>
                                    <xsl:value-of select="@kwh" />
                                </td>
                                <td>
                                    <xsl:value-of select="@net" />
                                </td>
                                <td>
                                    <xsl:value-of select="@vat" />
                                </td>
                                <td>
                                    <xsl:value-of select="@gross" />
                                </td>
                                <td>
                                  <a href="{/source/request/@context-path}/reports/201/output/?bill-type-id={bill-type/@id}" title="{bill-type/@description}">
                                  <xsl:value-of select="bill-type/@code" />
                                  </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[93]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Contract Batches]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import HhdcContract

contract_id = inv.getLong('hhdc-contract-id')
contract = HhdcContract.getHhdcContract(contract_id)
batches_element = doc.createElement('batches')
source.appendChild(batches_element)
batches_element.appendChild(contract.toXml(doc, XmlTree('party')))
source.appendChild(batches_element)
for batch in Hiber.session().createQuery("from Batch batch where batch.contract = :contract order by batch.reference").setEntity("contract", contract).list():
    batches_element.appendChild(batch.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/batches/hhdc-contract/@name" />
                    &gt; Batches
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/113/output/?hhdc-id={/source/batches/hhdc-contract/@id}">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={/source/batches/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/batches/hhdc-contract/@name" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Batches ['" />
                    <a
                        href="{/source/request/@context-path}/hhdc-contracts/{/source/batches/hhdc-contract/@id}/batches/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>Batches</caption>
                    <thead>
                        <tr>
                            <th>Reference</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/batches/batch">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/203/output/?batch-id={@id}">
                                        <xsl:value-of select="@reference" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[95]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[TPRs]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

tprs_element = doc.createElement('tprs')
source.appendChild(tprs_element)
for tpr in Hiber.session().createQuery("from Tpr tpr order by tpr.code").list():
    tprs_element.appendChild(tpr.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>Chellow &gt; TPRs</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt; TPRs
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <ul>
                    <xsl:for-each select="/source/tprs/tpr">
                        <li>
                            <a
                                href="{/source/request/@context-path}/reports/97/output/?tpr-id={@id}">
                                <xsl:value-of select="@code" />
                            </a>
                        </li>
                    </xsl:for-each>
                </ul>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[97]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[TPR]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Tpr

tpr_id = inv.getLong('tpr-id')
tpr = Tpr.getTpr(tpr_id)
source.appendChild(tpr.toXml(doc, XmlTree("measurementRequirements", XmlTree("ssc")).put("clockIntervals")))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; TPRs &gt;
                    <xsl:value-of select="/source/tpr/@code" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/95/output/">
                        <xsl:value-of select="'TPRs'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/tpr/@code" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/tpr/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Teleswitch or Clock</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/tpr/@is-teleswitch='true'">
                                    Teleswitch
                                </xsl:when>
                                <xsl:otherwise>Clock</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>GMT or Clock Time</th>
                        <td>
                            <xsl:choose>
                                <xsl:when test="@is-gmt='true'">
                                    GMT
                                </xsl:when>
                                <xsl:otherwise>
                                    Clock Time
                                </xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                </table>
                <br />
                <table>
                    <caption>Clock Intervals</caption>
                    <thead>
                        <th>Day Of Week</th>
                        <th>Start Day</th>
                        <th>Start Month</th>
                        <th>End Day</th>
                        <th>End Month</th>
                        <th>Start Hour</th>
                        <th>Start Minute</th>
                        <th>End Hour</th>
                        <th>End Minute</th>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/tpr/clock-interval">
                            <tr>
                                <td>
                                    <xsl:value-of select="@day-of-week" />
                                </td>
                                <td>
                                    <xsl:value-of select="@start-day" />
                                </td>
                                <td>
                                    <xsl:value-of select="@start-month" />
                                </td>
                                <td>
                                    <xsl:value-of select="@end-day" />
                                </td>
                                <td>
                                    <xsl:value-of select="@end-month" />
                                </td>
                                <td>
                                    <xsl:value-of select="@start-hour" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@start-minute" />
                                </td>
                                <td>
                                    <xsl:value-of select="@end-hour" />
                                </td>
                                <td>
                                    <xsl:value-of select="@end-minute" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>

                <h3>SSCs</h3>

                <ul>
                    <xsl:for-each
                        select="/source/tpr/measurement-requirement/ssc">
                        <li>
                            <a
                                href="{/source/request/@context-path}/reports/127/output/?ssc-id={@id}">
                                <xsl:value-of select="@code"></xsl:value-of>
                            </a>
                        </li>
                    </xsl:for-each>
                </ul>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[99]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplies]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, Debug
from net.sf.chellow.monad.types import MonadUri

if inv.hasParameter("search-pattern"):
    pattern = inv.getString("search-pattern")
    pattern = pattern.strip()
    reduced_pattern = pattern.replace(" ", "")
    last_supply = None
    generations = []
    for supply_generation_res in Hiber.session().createQuery("select distinct mpan.supplyGeneration, mpan.supplyGeneration.startDate, mpan.supplyGeneration.supply from Mpan mpan where (lower(mpan.core.dno.code || mpan.core.uniquePart || mpan.core.checkDigit) like lower(:reducedPattern)) or lower(mpan.supplierAccount) like lower(:pattern) or (mpan.supplyGeneration.hhdcAccount is not null and lower(mpan.supplyGeneration.hhdcAccount) like lower(:pattern)) or (mpan.supplyGeneration.mopAccount is not null and lower(mpan.supplyGeneration.mopAccount) like lower(:pattern)) or lower(mpan.supplyGeneration.meterSerialNumber) like lower(:pattern) order by mpan.supplyGeneration.supply.id, mpan.supplyGeneration.startDate desc").setString("pattern", "%" + pattern + "%").setString("reducedPattern", "%" + reduced_pattern + "%").setMaxResults(50).list():
        supply_generation = supply_generation_res[0]
        supply_id = supply_generation.getSupply().getId()
        if supply_id == last_supply:
            continue
        last_supply = supply_id
        generations.append(supply_generation)

    if len(generations) == 1:
        inv.sendTemporaryRedirect("/reports/7/output/?supply-id=" + str(generations[0].getSupply().getId()))
    else:
        for generation in generations:
            source.appendChild(generation.toXml(doc, XmlTree("supply").put('hhdcContract').put('pc').put('mtc').put('mpans', XmlTree('llfc').put('core').put('supplierContract'))))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; Supplies
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt; Supplies
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>


                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action=".">
                    <fieldset><legend>Search for supply generations by MPAN core, account number or meter serial number</legend>
                        <input name="search-pattern"
                            value="{/source/request/parameter[@name='search-pattern']/value}" />
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Search" />
                    </fieldset>
                </form>
                <xsl:choose>
                    <xsl:when test="/source/supply-generation">
                        <p>
                            Only the first 50 supply generations of the search
                            results are shown.
                        </p>
                        <table>
                            <caption>
                                Supplies
                            </caption>
                            <tr>
                                <th rowspan="3">Supply</th>
                                <th rowspan="3">Meter Serial Number</th>
                                <th colspan="2">HHDC</th>
                                <th colspan="3">Import</th>
                                <th colspan="3">Export</th>
                            </tr>
                            <tr>
                                <th rowspan="2">Contract</th>
                                <th rowspan="2">Account</th>
                                <th rowspan="2">Mpan</th>
                                <th colspan="2">Supplier</th>
                                <th rowspan="2">Mpan</th>
                                <th colspan="2">Supplier</th>
                            </tr>
                            <tr>
                                <th>Contract</th>
                                <th>Account</th> 
                                <th>Contract</th>
                                <th>Account</th> 
                           </tr>
                            <xsl:for-each
                                select="/source/supply-generation">
                                <tr>
                                    <td>
                                        <a
                                            href="{/source/request/@context-path}/reports/7/output/?supply-id={supply/@id}">
                                            <xsl:value-of
                                                select="'supply'" />
                                        </a>
                                    </td>
                                    <td>
                                        <xsl:value-of
                                            select="@meter-serial-number" />
                                    </td>
                                    <td>
                                        <a
                                            href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={hhdc-contract/@id}">
                                        <xsl:value-of
                                            select="hhdc-contract/@name" />
                                        </a>
                                    </td>
                                    <td>
                                        <xsl:value-of
                                            select="@hhdc-account" />
                                    </td>
                                    <td>
                                      <xsl:if test="mpan/llfc/@is-import='true'">
                                        <xsl:value-of
                                            select="concat(pc/@code, ' ', mpan[llfc/@is-import='true']/mtc/@code, ' ', mpan/llfc[@is-import='true']/@code, ' ', mpan[llfc/@is-import='true']/mpan-core/@core)" />
                                      </xsl:if>
                                    </td>
                                    <td>
                                      <xsl:if test="mpan/llfc/@is-import='true'">
                                         <a href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={mpan[llfc/@is-import='true']/supplier-contract/@id}">
                                        <xsl:value-of
                                            select="mpan[llfc/@is-import='true']/supplier-contract/@name" />
                                         </a>
                                      </xsl:if>
                                    </td>
                                    <td>
                                      <xsl:if test="mpan/llfc/@is-import='true'">
                                        <xsl:value-of
                                            select="mpan[llfc/@is-import='true']/@supplier-account" />
                                      </xsl:if>
                                    </td>
                                    <td>
                                      <xsl:if test="mpan/llfc/@is-import='false'">
                                        <xsl:value-of
                                            select="concat(pc/@code, ' ', mpan[llfc/@is-import='false']/mtc/@code, ' ', mpan/llfc[@is-import='false']/@code, ' ', mpan[llfc/@is-import='false']/mpan-core/@core)" />
                                      </xsl:if>
                                    </td>
                                    <td>
                                      <xsl:if test="mpan/llfc/@is-import='false'">
                                         <a href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={mpan[llfc/@is-import='false']/supplier-contract/@id}">
                                        <xsl:value-of
                                            select="mpan[llfc/@is-import='false']/supplier-contract/@name" />
                                         </a>
                                      </xsl:if>
                                    </td>
<td>
                                      <xsl:if test="mpan/llfc/@is-import='false'">
                                        <xsl:value-of
                                            select="mpan[llfc/@is-import='false']/@supplier-account" />
                                      </xsl:if>
                                    </td>
                                </tr>
                            </xsl:for-each>
                        </table>
                    </xsl:when>
                    <xsl:when
                        test="/source/request/parameter[@name='search-pattern']">
                        <p>No supplies matched your search</p>
                    </xsl:when>
                </xsl:choose>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[101]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supply Virtual Bill]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.monad.types import MonadDate
from java.util import Calendar, Locale, TimeZone, GregorianCalendar
from net.sf.chellow.physical import HhStartDate, Supply
from net.sf.chellow.billing import NonCoreContract
from java.io import StringWriter

supply_id = inv.getLong("supply-id")
supply = Supply.getSupply(supply_id)
source.appendChild(supply.toXml(doc))

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
if inv.hasParameter('start-year'):
    start_year = inv.getInteger('start-year')
    start_month = inv.getInteger('start-month') - 1
    start_day = inv.getInteger('start-day')
   
    finish_year = inv.getInteger('finish-year')
    finish_month = inv.getInteger('finish-month') - 1
    finish_day = inv.getInteger('finish-day')
else:
    cal.add(Calendar.MONTH, -1)
    start_year = finish_year = cal.get(Calendar.YEAR)
    start_month = finish_month = cal.get(Calendar.MONTH)
    start_day = 1
    cal.set(Calendar.DAY_OF_MONTH, 1)
    cal.set(Calendar.HOUR_OF_DAY, 0)
    cal.set(Calendar.MINUTE, 0)
    cal.set(Calendar.SECOND, 0)
    cal.set(Calendar.MILLISECOND, 0)
    cal.add(Calendar.MONTH, 1)
    cal.add(Calendar.MINUTE, -30)
    finish_day = cal.get(Calendar.DAY_OF_MONTH)

cal.set(Calendar.YEAR, start_year)
cal.set(Calendar.MONTH, start_month)
cal.set(Calendar.DAY_OF_MONTH, start_day)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.MILLISECOND, 0)
start_date = HhStartDate(cal.getTime())

cal.set(Calendar.YEAR, finish_year)
cal.set(Calendar.MONTH, finish_month)
cal.set(Calendar.DAY_OF_MONTH, finish_day)
cal.set(Calendar.HOUR_OF_DAY, 23)
cal.set(Calendar.MINUTE, 30)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
finish_date = HhStartDate(cal.getTime())

source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))
start_date.setLabel('start')
source.appendChild(start_date.toXml(doc))
finish_date.setLabel('finish')
source.appendChild(finish_date.toXml(doc))

pw = StringWriter()
computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])
forecast_date = comterp.get('forecast_date')()

# Do months
mb_cal = MonadDate.getCalendar()
mb_cal.setTime(start_date.getDate())
mb_cal.set(Calendar.DAY_OF_MONTH, 1)
mb_cal.set(Calendar.HOUR_OF_DAY, 0)
mb_cal.set(Calendar.MINUTE, 0)

me_cal = MonadDate.getCalendar()
me_cal.setTime(start_date.getDate())
me_cal.set(Calendar.DAY_OF_MONTH, 1)
me_cal.set(Calendar.HOUR_OF_DAY, 0)
me_cal.set(Calendar.MINUTE, 0)
me_cal.add(Calendar.MONTH, 1)
me_cal.add(Calendar.MINUTE, -30)

net_gbp = 0

while not mb_cal.getTime().after(finish_date.getDate()):
    month_begin = HhStartDate(mb_cal.getTime())
    month_end = HhStartDate(me_cal.getTime())
    if start_date.after(month_begin):
        chunk_start = start_date
    else:
        chunk_start = month_begin
    if finish_date.before(month_end):
        chunk_finish = finish_date
    else:
        chunk_finish = month_end
    generations_element = doc.createElement('generations')
    source.appendChild(generations_element)
    generations = Hiber.session().createQuery("select distinct generation from SupplyGeneration generation where generation.supply = :supply and generation.importMpan is not null and generation.startDate.date <= :finishDate and (generation.finishDate is null or generation.finishDate.date >= :startDate)").setEntity('supply', supply).setTimestamp('startDate', chunk_start.getDate()).setTimestamp('finishDate', chunk_finish.getDate()).scroll()
    while generations.next():
        generation_element = doc.createElement('generation')
        generations_element.appendChild(generation_element)
        generation = generations.get(0)
        mpan = generation.getImportMpan()
        contract = mpan.getSupplierContract()
        mpan_core = mpan.getCore()
        mpan_core_str = str(mpan_core)
        data_source = comterp.get('supply_source')(forecast_date, comterp, pw)
        data_source.init_from_mpan(chunk_start, chunk_finish, mpan)
        for name, value in [('id', data_source.id), ('supplier contract', contract.getName()), ('account', data_source.supplier_account), ('start date', data_source.start_date), ('finish date', data_source.finish_date)]:
            field_element = doc.createElement('field')
            generation_element.appendChild(field_element)
            field_element.setAttribute('name', name)
            field_element.setAttribute('value', str(value))
        bill = comterp.get('contract_function')(contract, 'import_virtual_bill')(data_source)
        net_gbp += bill['net-gbp']
        #raise UserException('start date ' + str(data_source.start_date) + ' finish date ' + str(data_source.finish_date) + ' ' + str(bill))
        for title in comterp.get('contract_function')(contract, 'import_virtual_bill_titles')():
            if title == 'consumption-info':
                del bill[title]
                continue
            field_element = doc.createElement('field')
            generation_element.appendChild(field_element)
            field_element.setAttribute('name', title)
            field_element.setAttribute('value', str(bill.get(title, '')))
            if title in bill:
                del bill[title]
        keys = bill.keys()
        keys.sort()
        for k in keys:
            field_element = doc.createElement('field')
            generation_element.appendChild(field_element)
            field_element.setAttribute('name', k)
            field_element.setAttribute('value', str(bill[k]))
    mb_cal.add(Calendar.MONTH, 1)
    me_cal.add(Calendar.MINUTE, 30)
    me_cal.add(Calendar.MONTH, 1)
    me_cal.add(Calendar.MINUTE, -30)
generations.close()
source.setAttribute('start-date', str(start_date))
source.setAttribute('finish-date', str(finish_date))
source.setAttribute('net-gbp', str(net_gbp))
source.setAttribute('debug', pw.toString())]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Supplies &gt;
                    <xsl:value-of select="/source/supply/@name" /> &gt; Virtual Bill
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/99/output/">
                        <xsl:value-of select="'Supplies'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/7/output/?supply-id={/source/supply/@id}">
                        <xsl:value-of select="/source/supply/@id" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Virtual Bill'" />
                </p>

                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action=".">
                    <fieldset>
                        <input type="hidden" name="supply-id" value="{/source/supply/@id}"/>
                        <legend>Show Virtual Bills</legend>
<br/>
<xsl:value-of select="'From '"/>
                        <input name="start-year" value="{/source/hh-start-date[@label='start']/@year}" maxlength="4" size="4" /><xsl:value-of select="' - '"/>
                        <select name="start-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='start']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
<xsl:value-of select="' '"/>
                        <select name="start-day">
                            <xsl:for-each select="/source/days/day">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='start']/@day">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
<xsl:value-of select="' to '"/>
                        <input name="finish-year" value="{/source/hh-start-date[@label='finish']/@year}" maxlength="4" size="4" /><xsl:value-of select="' - '"/>
                        <select name="finish-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
<xsl:value-of select="' '"/>
                        <select name="finish-day">
                            <xsl:for-each select="/source/days/day">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@day">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Show"/>
                    </fieldset>
                </form>
<xsl:value-of select="/source/@debug"/>
<table><caption>Summary</caption>
    <tr>
        <th>From</th>
        <td><xsl:value-of select="/source/@start-date"/></td>
    </tr>
    <tr>
        <th>To</th>
        <td><xsl:value-of select="/source/@finish-date"/></td>
    </tr>
    <tr>
        <th>Net GBP</th>
        <td><xsl:value-of select="/source/@net-gbp"/></td>
    </tr>
</table>
<table><caption>Import Supplier Virtual Bill</caption>
<xsl:for-each select="/source/generations/generation">
    <thead>
        <tr>
            <xsl:for-each select="field">
                <th><xsl:value-of select="@name"/></th>
            </xsl:for-each>
        </tr>
    </thead>
    <tbody>
        <tr>
            <xsl:for-each select="field">
                <td><xsl:value-of select="@value"/></td>
            </xsl:for-each>
        </tr>
    </tbody>
</xsl:for-each>
</table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[103]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contract 3rd Party Virtual Bills]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.physical import MpanCore, HhStartDate, Supply
from net.sf.chellow.billing import SupplierContract, NonCoreContract
from java.text import DecimalFormat
from net.sf.chellow.monad.types import MonadDate

end_year = inv.getInteger('end-year')
end_month = inv.getInteger('end-month')
months = inv.getInteger('months')
contract_id = inv.getLong('contract-id')
site_code = inv.getString('site-code')
if not inv.isValid():
    raise UserException()
site_code = site_code.strip()

inv.getResponse().setContentType("text/csv")
inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="output.csv"')
pw = inv.getResponse().getWriter()

contract = SupplierContract.getSupplierContract(contract_id)
computer = NonCoreContract.getNonCoreContract('computer')

comterp = computer.callFunction('create_comterp', [])

pw.print('Site Id,From,To')
pw.flush()
bill_titles = contract.callFunction('third_party_virtual_bill_titles', [])
for title in bill_titles:
    pw.print(',' + title)
pw.println('')
pw.flush()

if len(site_code) == 0:
    site_query = Hiber.session().createQuery("select distinct site from Site site join site.siteSupplyGenerations ssGen where ssGen.supplyGeneration.supply.source.code in ('3rd-party', '3rd-party-reverse') order by site.code")
else:
    site_query = Hiber.session().createQuery("from Site site where site.code = :siteCode order by site.code").setString('siteCode', site_code)
sites = site_query.scroll()

cal = MonadDate.getCalendar()

while sites.next():
    for month in range(months):
        cal.clear()
        cal.set(Calendar.YEAR, end_year)
        cal.set(Calendar.MONTH, end_month - 1)
        cal.add(Calendar.MONTH, 1 - month)
        cal.add(Calendar.MINUTE, -30)
        finish_date = HhStartDate(cal.getTime())
        cal.add(Calendar.MINUTE, 30)
        cal.add(Calendar.MONTH, -1)
        start_date = HhStartDate(cal.getTime())
        
        site = sites.get(0)
        forecast_date = computer.callFunction('forecast_date', [])
        data_source = computer.callFunction('site_source', [site, start_date, finish_date, forecast_date, comterp, pw])
        bill = contract.callFunction('third_party_bill', [data_source])

        for value in [data_source.id, data_source.start_date, data_source.finish_date]:
            pw.print('"' + str(value) + '",')
        for title in bill_titles:
            pw.print('"' + str(bill.get(title, '')) + '",')
            if title in bill:
                del bill[title]
        keys = bill.keys()
        keys.sort()
        for k in keys:
            pw.print(',"' + k + '","' + str(bill[k]) + '"')
        pw.println('')
        pw.flush()
        Hiber.session().clear()
sites.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[105]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contract Bill]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import Bill

bill_id = inv.getLong('bill-id')
bill = Bill.getBill(bill_id)
source.appendChild(bill.toXml(doc, XmlTree('batch', XmlTree('contract', XmlTree('party'))).put('reads', XmlTree('tpr')).put('type').put('supply')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/bill/batch/supplier-contract/@name" />
                    &gt; Batches &gt;
                    <xsl:value-of select="/source/bill/batch/@reference" />
                    &gt; <xsl:value-of select="/source/bill/@reference" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/75/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/77/output/?supplier-contract-id={/source/bill/batch/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/bill/batch/supplier-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/89/output/?supplier-contract-id={/source/bill/batch/supplier-contract/@id}">
                        <xsl:value-of select="'Batches'" />
                    </a>
                    &gt;
                    <a href="{/source/request/@context-path}/reports/91/output/?batch-id={/source/bill/batch/@id}">
                    <xsl:value-of
                        select="/source/bill/batch/@reference" /></a>
                    &gt;
                    <xsl:value-of
                        select="concat('Bill ', /source/bill/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/bill/batch/supplier-contract/@id}/batches/{/source/bill/batch/@id}/bills/{/source/bill/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />

                </p>
                <xsl:if test="//message">
                    <br />
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <br/>
                <table><caption>Bill</caption>
                    <thead>
                        <tr>
                            <th>Supply</th>
                            <th>Reference</th>
                            <th>Account</th>
                            <th>Issue Date</th>
                            <th>From</th>
                            <th>To</th>
                            <th>kWh</th>
                            <th>Net</th>
                            <th>VAT</th>
                            <th>Gross</th>
                            <th>Type</th>
                            <th>Check</th>
                        </tr>
                    </thead>
                    <tbody>
                            <tr>
<td>
<a
                                        href="{/source/request/@context-path}/reports/7/output/?supply-id={/source/bill/supply/@id}">
                                    Supply
 </a>
                                </td>

                                <td>
                                    <xsl:value-of select="/source/bill/@reference" />
                                </td>
<td>
                                    <xsl:value-of select="/source/bill/@account" />
                                </td>
<td>
                                    <xsl:value-of
                                        select="concat(/source/bill/date[@label='issue']/@year, '-', /source/bill/date[@label='issue']/@month, '-', /source/bill/date[@label='issue']/@day, ' ', /source/bill/date[@label='issue']/@hour, ':', /source/bill/date[@label='issue']/@minute)" />
                                </td>
                                <td>
                                    <xsl:value-of select="concat(/source/bill/hh-start-date[@label='start']/@year, '-', /source/bill/hh-start-date[@label='start']/@month, '-', /source/bill/hh-start-date[@label='start']/@day, ' ', /source/bill/hh-start-date[@label='start']/@hour, ':', /source/bill/hh-start-date[@label='start']/@minute)" />
                                </td>
                                <td>
                                    <xsl:value-of select="concat(/source/bill/hh-start-date[@label='finish']/@year, '-', /source/bill/hh-start-date[@label='finish']/@month, '-', /source/bill/hh-start-date[@label='finish']/@day, ' ', /source/bill/hh-start-date[@label='finish']/@hour, ':', /source/bill/hh-start-date[@label='finish']/@minute)" />
                                </td>
                                <td>
                                    <xsl:value-of select="/source/bill/@kwh" />
                                </td>
                                <td>
                                    <xsl:value-of select="/source/bill/@net" />
                                </td>
                                <td>
                                    <xsl:value-of select="/source/bill/@vat" />
                                </td>
                                <td>
                                    <xsl:value-of select="/source/bill/@gross" />
                                </td>
                                <td>
                                  <a href="{/source/request/@context-path}/reports/201/output/?bill-type-id={/source/bill/bill-type/@id}" title="{/source/bill/bill-type/@description}">
                                  <xsl:value-of select="/source/bill/bill-type/@code" />
                                  </a>
                                </td>
                                <td><form action="{/source/request/@context-path}/reports/111/output/"><fieldset>
                  <input type="hidden" name="bill-id" value="{/source/bill/@id}"/><input type="submit" name="check" value="Check"/>
                  </fieldset>
                </form>
                               </td>
                            </tr>
                    </tbody>
                </table>
                <br/>
                <br/>
                <table><caption>Reads  [<a href="{/source/request/@context-path}/supplier-contracts/{/source/bill/batch/supplier-contract/@id}/batches/{/source/bill/batch/@id}/bills/{/source/bill/@id}/reads/">edit</a>]</caption>
                    <thead>
                        <tr>
                            <th rowspan="2">Edit</th>
                            <th rowspan="2">MPAN</th>
                            <th rowspan="2">Coefficient</th>
                            <th rowspan="2">Units</th>
                            <th rowspan="2">TPR</th>
                            <th rowspan="2">Meter Serial Number</th>
                            <th colspan="3">Previous</th>
                            <th colspan="3">Present</th>
                        </tr>
                        <tr>
                            <th>Date</th>
                            <th>Value</th>
                            <th>Type</th>
                            <th>Date</th>
                            <th>Value</th>
                            <th>Type</th>
                        </tr>
                    </thead>
                    <xsl:for-each select="/source/bill/register-read">
                        <tr>
                            <td>
                                <xsl:value-of select="'['"/>
                                <a href="{/source/request/@context-path}/supplier-contracts/{/source/bill/batch/supplier-contract/@id}/batches/{/source/bill/batch/@id}/bills/{/source/bill/@id}/reads/{@id}/">
                                    <xsl:value-of select="'edit'" />
                                </a><xsl:value-of select="']'"/>
                            </td>
                            <td>
                                <xsl:value-of select="@mpan-str" />
                            </td>
                            <td>
                                <xsl:value-of select="@coefficient" />
                            </td>
                            <td>
                                <xsl:value-of select="@units" />
                            </td>
                            <td>
                                <a href="{/source/request/@context-path}/reports/97/output/?tpr-id={tpr/@id}">
                                    <xsl:value-of select="tpr/@code" />
                                </a>
                            </td>
                            <td>
                                <xsl:value-of select="@meter-serial-number" />
                            </td>
                            <td>
                                <xsl:value-of select="concat(hh-start-date[@label='previous']/@year, '-', hh-start-date[@label='previous']/@month, '-', hh-start-date[@label='previous']/@day, ' ', hh-start-date[@label='previous']/@hour, ':', hh-start-date[@label='previous']/@minute)" />
                            </td>
                            <td>
                                <xsl:value-of select="@previous-value" />
                            </td>
                            <td>
<a title="{read-type[@label='present']/@description}" href="{/source/request/@context-path}/reports/143/output/?type-id={read-type[@label='previous']/@id}">
                                <xsl:value-of select="read-type[@label='previous']/@code" /></a>
                            </td>
                            <td>
                                <xsl:value-of
                                    select="concat(hh-start-date[@label='present']/@year, '-', hh-start-date[@label='present']/@month, '-', hh-start-date[@label='present']/@day, ' ', hh-start-date[@label='present']/@hour, ':', hh-start-date[@label='present']/@minute)" />
                            </td>
                            <td>
                                <xsl:value-of select="@present-value" />
                            </td>
                            <td>
<a title="{read-type[@label='present']/@description}" href="{/source/request/@context-path}/reports/143/output/?type-id={read-type[@label='present']/@id}">
                                <xsl:value-of select="read-type[@label='present']/@code" /></a>
                            </td>
                        </tr>
                    </xsl:for-each>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[107]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MOP Contract]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import MopContract

contract_id = inv.getLong('mop-contract-id')
contract = MopContract.getMopContract(contract_id)
source.appendChild(contract.toXml(doc, XmlTree('party', XmlTree('participant')).put('rateScripts')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; MOP Contracts &gt;
                    <xsl:value-of select="/source/mop-contract/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/185/output/">
                        <xsl:value-of select="'MOP Contracts'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/mop-contract/@name, ' [')" />
                    <a
                        href="{/source/request/@context-path}/mop-contracts/{/source/mop-contract/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                            <tr>
                                <th>Provider</th>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/47/output/?provider-id={/source/mop-contract/provider/@id}">
                                        <xsl:value-of
                                            select="/source/mop-contract/provider/@name" />
                                    </a>
                                </td>
                            </tr>
                        <tr>
                            <th>Name</th>
                            <td>
                                <xsl:value-of
                                    select="/source/mop-contract/@name" />
                            </td>
                        </tr>
                        <tr>
                            <th>Start Date</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/mop-contract/rate-script[position()=1]/hh-start-date[@label='start']/@year, '-', /source/mop-contract/rate-script[position()=1]/hh-start-date[@label='start']/@month, '-', /source/mop-contract/rate-script[position()=1]/hh-start-date[@label='start']/@day)" />
                            </td>
                        </tr>
                        <tr>
                            <th>Finish Date</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/mop-contract/rate-script[position()=last()]/hh-start-date[@label='finish']">
                                        <xsl:value-of
                                            select="concat(/source/mop-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@year, '-', /source/mop-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@month, '-', /source/mop-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@day)" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Ongoing
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <br />
                    <table>
                    <caption>Rate Scripts [<a href="{/source/request/@context-path}/mop-contracts/{/source/mop-contract/@id}/rate-scripts/">edit</a>]</caption>
                    <thead>
                    <tr>
                    <th></th>
                    <th>From</th>
                    <th>To</th>
                    </tr>
                    </thead>
                    <tbody>
                    <xsl:for-each
                    select="/source/mop-contract/rate-script">
                    <tr>
                    <td>
                    <a
                    href="{/source/request/@context-path}/reports/205/output/?rate-script-id={@id}">
                    <xsl:value-of select="'view'" />
                    </a>
                    </td>
                    <td>
                    <xsl:value-of
                    select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day, ' ', hh-start-date[@label='start']/@hour, ':', hh-start-date[@label='start']/@minute)" />
                    </td>
                    <td>
                    <xsl:choose>
                    <xsl:when
                    test="hh-start-date[@label='finish']">
                    <xsl:value-of
                    select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day, ' ', hh-start-date[@label='finish']/@hour, ':', hh-start-date[@label='finish']/@minute)" />
                    </xsl:when>
                    <xsl:otherwise>
                    Ongoing
                    </xsl:otherwise>
                    </xsl:choose>
                    </td>
                    </tr>
                    </xsl:for-each>
                    </tbody>
                    </table>
                <ul>
                        <li>
                        <a
                        href="{/source/request/@context-path}/reports/191/output/?mop-contract-id={/source/mop-contract/@id}">
                        Batches
                        </a>
                        </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/229/output/?mop-contract-id={/source/mop-contract/@id}">
                            Virtual Bills
                        </a>
                    </li>

                </ul>

                    <h2>Script</h2>
                    <pre>
                    <xsl:value-of
                    select="/source/mop-contract/@charge-script" />
                    </pre>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[109]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Supplier Contract Displaced Virtual Bills]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date
from net.sf.chellow.physical import MpanCore, HhStartDate, Supply, Site
from net.sf.chellow.billing import SupplierContract, NonCoreContract
from java.text import DecimalFormat
from java.sql import Timestamp, ResultSet
from net.sf.chellow.monad.types import MonadDate

end_year = inv.getInteger('end-year')
end_month = inv.getInteger('end-month')
months = inv.getInteger('months')

if not inv.isValid():
    raise UserException()

inv.getResponse().setContentType("text/csv")
inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="output.csv"')
pw = inv.getResponse().getWriter()

computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])

pw.print('Site Code,Site Name,Associated Site Ids,From,To,Gen Types,CHP kWh,LM kWh, Turbine kWh')
pw.flush()

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.set(Calendar.YEAR, end_year)
cal.set(Calendar.MONTH, end_month - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
start_date = HhStartDate(cal.getTime())

kwh_format = DecimalFormat("#,###")
gbp_format = DecimalFormat("#,##0.00")

forecast_date = comterp.get('forecast_date')()

if inv.hasParameter('site-id'):
    site_id = inv.getLong('site-id')
    site_query = Hiber.session().createQuery("from Site site where site = :site").setEntity('site', Site.getSite(site_id))
    contract = None
    bill_titles = ['net-gbp']
elif inv.hasParameter('contract-id'):
    contract_id = inv.getLong('contract-id')
    contract = SupplierContract.getSupplierContract(contract_id)
    site_query = Hiber.session().createQuery("select distinct ssgen.site from SiteSupplyGeneration ssgen where ((ssgen.supplyGeneration.finishDate is null or ssgen.supplyGeneration.finishDate.date >= :startDate) and ssgen.supplyGeneration.startDate <= :finishDate) and (ssgen.supplyGeneration.supply.source.code in ('gen', 'gen-net') or ssgen.supplyGeneration.exportMpan is not null)").setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate())
    bill_titles = comterp.get('contract_function')(contract, 'displaced_virtual_bill_titles')()
else:
    raise UserException("Need a site-id or contract-id.")

for title in bill_titles:
    if title == 'total-msp-kwh':
        title = 'total-displaced-msp-kwh'
    pw.print(',' + title)
pw.println('')
pw.flush()

sites = site_query.scroll()
while sites.next():
    site = sites.get(0)
    month_start = start_date
    cal.setTime(month_start.getDate())
    cal.add(Calendar.MONTH, 1)
    cal.add(Calendar.MINUTE, -30)
    month_finish = HhStartDate(cal.getTime())
    while not month_finish.after(finish_date):
        for site_group in site.groups(month_start, month_finish, True):
            if site_group.getFrom().after(month_start):
                chunk_start = site_group.getStartDate()
            else:
                chunk_start = month_start
            if site_group.getTo().after(month_finish):
                chunk_finish = month_finish
            else:
                chunk_finish = site_group.getTo()

            displaced_mpan = comterp.get('displaced_mpan')(site_group, chunk_start, chunk_finish)
            if displaced_mpan is None:
                continue
            supplier_contract = displaced_mpan.getSupplierContract()
            if contract is not None and not contract.equals(supplier_contract):
                continue
        
            linked_sites = ','.join(str(a_site.getCode()) for a_site in site_group.getSites() if not a_site.equals(site))
            generator_types = ' '.join(sorted([supply.getGeneratorType().getCode() for supply in site_group.getSupplies() if supply.getGeneratorType() is not None]))

            pw.print(','.join('"' + value + '"' for value in [site.getCode(), site.getName(), linked_sites, str(chunk_start), str(chunk_finish), generator_types]))

            total_gen_breakdown = {}
            con = Hiber.session().connection()
            supplies_sql = ','.join(str(supply.getId()) for supply in site_group.getSupplies())

            stmt = con.prepareStatement("select supply.id, hh_datum.value, hh_datum.start_date, channel.is_import, source.code, generator_type.code as gen_type_code from hh_datum, channel, source, supply_generation, supply left outer join generator_type on supply.generator_type_id = generator_type.id where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = supply.id and supply.source_id = source.id and channel.is_kwh is true and not (source.code = 'net' and channel.is_import is true) and hh_datum.start_date >= ? and hh_datum.start_date <= ? and supply.id in (" + supplies_sql + ") order by hh_datum.start_date, supply.id", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
            stmt.setTimestamp(1, Timestamp(chunk_start.getDate().getTime()))
            stmt.setTimestamp(2, Timestamp(chunk_finish.getDate().getTime()))
            stmt.setFetchSize(100)
            rs = stmt.executeQuery()
            if rs.next():
                hh_data = []
                hhChannelValue = rs.getFloat("value")
                hhChannelStartDate = rs.getTimestamp("start_date")
                isImport = rs.getBoolean("is_import")
                source_code = rs.getString("code")
                gen_type = rs.getString("gen_type_code")
                finishDateMillis = finish_date.getDate().getTime()
                hh_date = chunk_start.getDate().getTime()
                cal = MonadDate.getCalendar()
                while hh_date <= finishDateMillis:
                    gen_breakdown = {}
                    exported = 0
                    while hhChannelStartDate != None and hhChannelStartDate.getTime() == hh_date:
                        if not isImport and source_code in ('net', 'gen-net'):
                            exported += hhChannelValue
                        if (isImport and source_code == 'gen') or (not isImport and source_code == 'gen-net'):
                            gen_breakdown[gen_type] = gen_breakdown.setdefault(gen_type, 0) + hhChannelValue

                        if (not isImport and source_code == 'gen') or (isImport and source_code == 'gen-net'):
                            gen_breakdown[gen_type] = gen_breakdown.setdefault(gen_type, 0) - hhChannelValue

                        if rs.next():
                            source_code = rs.getString("code")
                            hhChannelValue = rs.getFloat("value")
                            hhChannelStartDate = rs.getTimestamp("start_date")
                            isImport = rs.getBoolean("is_import")
                            gen_type = rs.getString("gen_type_code")
                        else:
                            hhChannelStartDate = None

                    displaced = sum(gen_breakdown.itervalues()) - exported
                    added_so_far = 0
                    for key in sorted(gen_breakdown.iterkeys()):
                        kwh = gen_breakdown[key]
                        if kwh + added_so_far > displaced:
                            total_gen_breakdown[key] = total_gen_breakdown.get(key, 0) + displaced - added_so_far
                            break
                        else:
                            total_gen_breakdown[key] = total_gen_breakdown.get(key, 0) + kwh
                            added_so_far += kwh
                    
                    hh_date = HhStartDate.getNext(cal, hh_date)
            for title in ['chp', 'lm', 'turb']:
                pw.print(',' + str(total_gen_breakdown.get(title, '')))


            site_ds = comterp.get('site_source')(site, chunk_start, chunk_finish, forecast_date, comterp, pw)
            site_ds.init_from_mpan(displaced_mpan)
            cont_func = comterp.get('contract_function')
            disp_func = cont_func(supplier_contract, 'displaced_virtual_bill')
            bill = disp_func(site_ds)
            for title in bill_titles:
                pw.print(',"' + str(bill.get(title, '')) + '"')
                if title in bill:
                    del bill[title]
            keys = bill.keys()
            keys.sort()
            for k in keys:
                pw.print(',"' + k + '","' + str(bill[k]) + '"')
            pw.println('')
            pw.flush()
            Hiber.session().clear()
        cal.setTime(month_start.getDate())
        cal.add(Calendar.MONTH, 1)
        month_start = HhStartDate(cal.getTime())
        cal.add(Calendar.MONTH, 1)
        cal.add(Calendar.MINUTE, -30)
        month_finish = HhStartDate(cal.getTime())
sites.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[111]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Bill Checker]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.lang import System
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate
from net.sf.chellow.billing import Batch, NonCoreContract, Bill, SupplierContract, HhdcContract, MopContract
from org.python.util import PythonInterpreter

def find_contract_type(bill):
    contract_id = bill.getBatch().getContract().getId()
    try:
        SupplierContract.getSupplierContract(contract_id)
        contract_type = 'supplier'
    except:
        try:
            HhdcContract.getHhdcContract(contract_id)
            contract_type = 'dc'
        except:
            try:
                MopContract.getMopContract(contract_id)
                contract_type = 'mop'
            except:
                raise UserException('contract type not found')
    return contract_type

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()
pw.println("Batch,Reference, Type, Breakdown, kWh, Net GBP, VAT GBP, Start Date, Finish Date, MPAN Core, Covered From, Covered To, Covered Bills, Covered kWh, Covered Net, Covered VAT, Virtual kWh, Virtual Net, Error GBP, Problem")
pw.flush()

computer = NonCoreContract.getNonCoreContract('computer')
comterp = PythonInterpreter()
comterp.exec(computer.getChargeScript())
forecast_date = comterp.get('forecast_date')()

if inv.hasParameter('batch-id'):
    batch_id = inv.getLong("batch-id")
    if not inv.isValid():
        raise UserException()
    batch = Batch.getBatch(batch_id)
    bills = Hiber.session().createQuery("from Bill bill where bill.batch = :batch order by bill.reference").setEntity('batch', batch).scroll()
elif inv.hasParameter('bill-id'):
    bill_id = inv.getLong("bill-id")
    if not inv.isValid():
        raise UserException()
    bill = Bill.getBill(bill_id)
    bills = Hiber.session().createQuery("from Bill bill where bill = :bill").setEntity('bill', bill).scroll()
    batch = bill.getBatch()

while bills.next():
    problem = ''
    #pw.println('starting bill ' + str(System.currentTimeMillis()))
    bill = bills.get(0)
    supply = bill.getSupply()

    cal = MonadDate.getCalendar()
    read_dict = {}
    for read in bill.getReads():
        cal.setTime(read.getPresentDate().getDate())
        cal.set(Calendar.HOUR_OF_DAY, 0)
        cal.set(Calendar.MINUTE, 0)
        gen_start = HhStartDate(cal.getTime())
        cal.add(Calendar.DAY_OF_MONTH, 1)
        cal.add(Calendar.MINUTE, -30)
        gen_finish = HhStartDate(cal.getTime())
        msn_match = False
        read_msn = read.getMeterSerialNumber()
        for read_generation in supply.getGenerations(gen_start, gen_finish):
            if read_msn == read_generation.getMeterSerialNumber():
                msn_match = True
                break

        if not msn_match:
            problem += "The MSN " + read_msn + " of the register read " + str(read.getId()) + " doesn't match the MSN of the generation."

        for dt, type in [(read.getPresentDate(), read.getPresentType()), (read.getPreviousDate(), read.getPreviousType())]:
            key = str(dt) + "-" + read.getMeterSerialNumber()
            try:
                if type != read_dict[key]:
                    problem += " Reads taken on " + str(dt) + " have differing read types."
            except KeyError:
                read_dict[key] = type        

    bill_start = bill.getStartDate()
    bill_finish = bill.getFinishDate()

    contract_type = find_contract_type(bill)
    generation = supply.getGeneration(bill.getFinishDate())
    if generation is None:
        pw.println(",,,,,,,,,,Extraordinary! There isn't a generation for this bill!")
        continue
    mpan = generation.getMpans().iterator().next()

    msn = generation.getMeterSerialNumber()

    covered_start = bill_start
    covered_finish = bill_finish
    covered_bill_ids = []
    covered_net = 0
    covered_vat = 0
    covered_primary_bill = None
    enlarged = True
    covered_query = Hiber.session().createQuery("from Bill bill where bill.supply = :supply and bill.startDate.date <= :finishDate and bill.finishDate >= :startDate order by bill.issueDate desc, bill.startDate.date").setEntity('supply', supply)
    while enlarged:
        enlarged = False
        for covered_bill in covered_query.setTimestamp('finishDate', covered_finish.getDate()).setTimestamp('startDate', covered_start.getDate()).list():
            if contract_type != find_contract_type(covered_bill):
                continue

            if covered_primary_bill is None and covered_bill.getReads() is not None and len(covered_bill.getReads()) > 0:
                covered_primary_bill = covered_bill
            if covered_bill.getStartDate().before(covered_start):
                covered_start = covered_bill.getStartDate()
                enlarged = True
                break
            if covered_bill.getFinishDate().after(covered_finish):
                covered_finish = covered_bill.getFinishDate()
                enlarged = True
                break
    top_bills = []
    for covered_bill in covered_query.setTimestamp('finishDate', covered_finish.getDate()).setTimestamp('startDate', covered_start.getDate()).list():
        if contract_type != find_contract_type(covered_bill):
            continue
        covered_bill_ids.append(covered_bill.getId())
        covered_net += covered_bill.getNet().doubleValue()
        covered_vat += covered_bill.getVat().doubleValue()
        can_insert = True
        for top_bill in top_bills:
            if not covered_bill.getStartDate().after(top_bill.getFinishDate()) and not covered_bill.getFinishDate().before(top_bill.getStartDate()):
                can_insert = False
                break
        if can_insert:
            top_bills.append(covered_bill)
    covered_kwh = sum(bl.getKwh().doubleValue() for bl in top_bills)


    mb_cal = MonadDate.getCalendar()
    mb_cal.setTime(covered_start.getDate())
    mb_cal.set(Calendar.DAY_OF_MONTH, 1)
    mb_cal.set(Calendar.HOUR_OF_DAY, 0)
    mb_cal.set(Calendar.MINUTE, 0)

    me_cal = MonadDate.getCalendar()
    me_cal.setTime(mb_cal.getTime())
    me_cal.add(Calendar.MONTH, 1)
    me_cal.add(Calendar.MINUTE, -30)

    virtual_kwh = 0
    net_gbp = 0

    while not mb_cal.getTime().after(covered_finish.getDate()):
        month_begin = HhStartDate(mb_cal.getTime())
        month_end = HhStartDate(me_cal.getTime())
        if covered_start.after(month_begin):
            chunk_start = covered_start
        else:
            chunk_start = month_begin
        if covered_finish.before(month_end):
            chunk_finish = covered_finish
        else:
            chunk_finish = month_end

        generations = Hiber.session().createQuery("select distinct generation from SupplyGeneration generation where generation.supply = :supply and generation.importMpan is not null and generation.startDate.date <= :finishDate and (generation.finishDate is null or generation.finishDate.date >= :startDate)").setEntity('supply', supply).setTimestamp('startDate', chunk_start.getDate()).setTimestamp('finishDate', chunk_finish.getDate()).scroll()
        while generations.next():
            #pw.println('starting vbill ' + str(System.currentTimeMillis()))
            
            generation = generations.get(0)
            mpan = generation.getImportMpan()
            contract = mpan.getSupplierContract()
            mpan_core = mpan.getCore()
            mpan_core_str = str(mpan_core)
            data_source = comterp.get('supply_source')(forecast_date, comterp, pw, covered_primary_bill)
            data_source.init_from_mpan(chunk_start, chunk_finish, mpan)

            vbf = comterp.get('contract_function')(contract, 'import_virtual_bill')
            if vbf is None:
                raise UserException('The contract ' + contract.getName() + " doesn't have a function import_virtual_bill.")
            v_bill = vbf(data_source)
            net_gbp += v_bill['net-gbp']
            virtual_kwh += v_bill['sum-msp-kwh']
            problem += v_bill['problem']
            values = [('start-date', data_source.start_date), ('finish-date', data_source.finish_date)]
            for title in data_source.contract_function(contract, 'import_virtual_bill_titles')():
                if title in v_bill:
                    value = v_bill[title]
                    del v_bill[title]
                else:
                    value = ''
                values.append((title, value))
            values += [(k, v) for k, v in v_bill.iteritems()]
            pw.println(','.join('"' + title + '","' + str(value) + '"' for title, value in values))
            #raise UserException('start date ' + str(data_source.start_date) + ' finish date ' + str(data_source.finish_date) + ' ' + str(bill))
        mb_cal.add(Calendar.MONTH, 1)
        me_cal.add(Calendar.MINUTE, 30)
        me_cal.add(Calendar.MONTH, 1)
        me_cal.add(Calendar.MINUTE, -30)
        generations.close()
    
    pw.println(','.join('"' + str(value) + '"' for value in [batch.getReference(), bill.getReference(), bill.getType(), bill.getBreakdown(), bill.getKwh(), bill.getNet(), bill.getVat(), bill_start, bill_finish, mpan.getCore(), covered_start, covered_finish, ';'.join(str(id).replace(',', '') for id in covered_bill_ids), covered_kwh, covered_net, covered_vat, virtual_kwh, net_gbp, covered_net - net_gbp, problem]))
    pw.flush()
    Hiber.session().clear()
bills.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[113]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Contracts]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

contracts_element = doc.createElement('contracts')
source.appendChild(contracts_element)
for contract in Hiber.session().createQuery("from HhdcContract contract order by contract.startRateScript.startDate.date").list():
    contract_element = contract.toXml(doc, XmlTree('party'))
    contracts_element.appendChild(contract_element)
    start_rate_script = contract.getStartRateScript()
    start_rate_script.setLabel('start')
    contract_element.appendChild(start_rate_script.toXml(doc))
    finish_rate_script = contract.getFinishRateScript()
    finish_rate_script.setLabel('finish')
    contract_element.appendChild(finish_rate_script.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; HHDC Contracts
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'HHDC Contracts ['" />
                    <a
                        href="{/source/request/@context-path}/hhdc-contracts/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Start Date</th>
                            <th>Finish Date</th>
                            <th>HHDC</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/contracts/hhdc-contract">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={@id}">
                                    <xsl:value-of select="@name" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(rate-script[@label='start']/hh-start-date[@label='start']/@year, '-', rate-script[@label='start']/hh-start-date[@label='start']/@month, '-', rate-script[@label='start']/hh-start-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="rate-script[@label='finish']/hh-start-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(rate-script[@label='finish']/hh-start-date[@label='finish']/@year, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@month, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/47/output/?provider-id={provider/@id}">
                                        <xsl:value-of
                                            select="provider/@name" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[115]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Contract]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import HhdcContract

contract_id = inv.getLong('hhdc-contract-id')
contract = HhdcContract.getHhdcContract(contract_id)
source.appendChild(contract.toXml(doc, XmlTree('party', XmlTree('participant')).put('rateScripts')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; HHDC Contracts &gt;
                    <xsl:value-of select="/source/hhdc-contract/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/113/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/hhdc-contract/@name, ' [')" />
                    <a
                        href="{/source/request/@context-path}/hhdc-contracts/{/source/hhdc-contract/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                            <tr>
                                <th>Provider</th>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/47/output/?provider-id={/source/hhdc-contract/provider/@id}">
                                        <xsl:value-of
                                            select="/source/hhdc-contract/provider/@name" />
                                    </a>
                                </td>
                            </tr>
                        <tr>
                            <th>Name</th>
                            <td>
                                <xsl:value-of
                                    select="/source/hhdc-contract/@name" />
                            </td>
                        </tr>
                        <tr>
                            <th>Start Date</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/hhdc-contract/rate-script[position()=1]/hh-start-date[@label='start']/@year, '-', /source/hhdc-contract/rate-script[position()=1]/hh-start-date[@label='start']/@month, '-', /source/hhdc-contract/rate-script[position()=1]/hh-start-date[@label='start']/@day)" />
                            </td>
                        </tr>
                        <tr>
                            <th>Finish Date</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/hhdc-contract/rate-script[position()=last()]/hh-start-date[@label='finish']">
                                        <xsl:value-of
                                            select="concat(/source/hhdc-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@year, '-', /source/hhdc-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@month, '-', /source/hhdc-contract/rate-script[position()=last()]/hh-start-date[@label='finish']/@day)" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Ongoing
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                    </tbody>
                </table>
 <ul>
                        <li>
                        <a
                        href="{/source/request/@context-path}/reports/93/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                        Batches
                        </a>
                        </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/37/output/?hhdc-contract-id={/source/hhdc-contract/@id}&amp;hidden-days=5">
                            Channel Snags
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/83/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                            Virtual Bills
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/213/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                            Automatic HH Data Importer
                        </a>
                    </li>
                    <li>
                        [<a href="{/source/request/@context-path}/reports/211/output/?hhdc-contract-id={/source/hhdc-contract/@id}">HH data imports</a>]
                    </li>
                </ul>
                <br />
                    <table>
                    <caption>Rate Scripts [<a href="{/source/request/@context-path}/hhdc-contracts/{/source/hhdc-contract/@id}/rate-scripts/">edit</a>]</caption>
                    <thead>
                    <tr>
                    <th></th>
                    <th>From</th>
                    <th>To</th>
                    </tr>
                    </thead>
                    <tbody>
                    <xsl:for-each
                    select="/source/hhdc-contract/rate-script">
                    <tr>
                    <td>
                    <a
                    href="{/source/request/@context-path}/reports/173/output/?rate-script-id={@id}">
                    <xsl:value-of select="'view'" />
                    </a>
                    </td>
                    <td>
                    <xsl:value-of
                    select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day, ' ', hh-start-date[@label='start']/@hour, ':', hh-start-date[@label='start']/@minute)" />
                    </td>
                    <td>
                    <xsl:choose>
                    <xsl:when
                    test="hh-start-date[@label='finish']">
                    <xsl:value-of
                    select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day, ' ', hh-start-date[@label='finish']/@hour, ':', hh-start-date[@label='finish']/@minute)" />
                    </xsl:when>
                    <xsl:otherwise>
                    Ongoing
                    </xsl:otherwise>
                    </xsl:choose>
                    </td>
                    </tr>
                    </xsl:for-each>
                    </tbody>
                    </table>
               
                    <h2>Script</h2>
                    <pre>
                    <xsl:value-of
                    select="/source/hhdc-contract/@charge-script" />
                    </pre>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[117]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Channel Snag]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.physical import ChannelSnag

snag_id = inv.getLong('snag-id')
snag = ChannelSnag.getChannelSnag(snag_id)
source.appendChild(snag.toXml(doc, XmlTree("channel", XmlTree("supplyGeneration", XmlTree('supply').put("hhdcContract")))))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/channel-snag/channel/supply-generation/account/hhdc-contract/@name" />
                    &gt; Channel Snags &gt;
                    <xsl:value-of select="/source/channel-snag/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/113/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={/source/channel-snag/channel/supply-generation/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/channel-snag/channel/supply-generation/hhdc-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/37/output/?hhdc-contract-id={/source/channel-snag/channel/supply-generation/hhdc-contract/@id}&amp;hidden-days=5">
                        <xsl:value-of select="'Channel Snags'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/channel-snag/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplies/{/source/channel-snag/channel/supply-generation/supply/@id}/generations/{/source/channel-snag/channel/supply-generation/@id}/channels/{/source/channel-snag/channel/@id}/snags/{/source/channel-snag/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />

                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                        <tr>
                            <th>Date Created</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/channel-snag/date[@label='created']/@year, '-', /source/channel-snag/date[@label='created']/@month, '-', /source/channel-snag/date[@label='created']/@day, 'T', /source/channel-snag/date[@label='created']/@hour, ':', /source/channel-snag/date[@label='created']/@minute, 'Z')" />
                            </td>
                        </tr>
                        <tr>
                            <th>Ignored?</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/channel-snag/@is-ignored='true'">
                                        Ignored
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Not ignored
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                        <tr>
                            <th>Description</th>
                            <td>
                                <xsl:value-of
                                    select="/source/channel-snag/@description" />
                            </td>
                        </tr>
                        <tr>
                            <th>Channel</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when test="/source/channel-snag/channel/@is-import = 'true'">
                                        Import
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Export
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="/source/channel-snag/channel/@is-kwh = 'true'">
                                        kWh
                                    </xsl:when>
                                    <xsl:otherwise>
                                        kVArh
                                    </xsl:otherwise>
                                </xsl:choose>
                                channel of <a
                                    href="{/source/request/@context-path}/reports/7/output/?supply-id={/source/channel-snag/channel/supply-generation/supply/@id}">
                                    <xsl:value-of
                                        select="concat('supply ', /source/channel-snag/channel/supply-generation/supply/@name)" />
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <th>Start Date</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/channel-snag/hh-start-date[@label='start']/@year, '-', /source/channel-snag/hh-start-date[@label='start']/@month, '-', /source/channel-snag/hh-start-date[@label='start']/@day, 'T', /source/channel-snag/hh-start-date[@label='start']/@hour, ':', /source/channel-snag/hh-start-date[@label='start']/@minute, 'Z')" />
                            </td>
                        </tr>
                        <tr>
                            <th>Finish Date:</th>
                            <td>
                                <xsl:choose>
                                <xsl:when test="/source/channel-snag/hh-start-date[@label='finish']">
                                <xsl:value-of
                                    select="concat(/source/channel-snag/hh-start-date[@label='finish']/@year, '-', /source/channel-snag/hh-start-date[@label='finish']/@month, '-', /source/channel-snag/hh-start-date[@label='finish']/@day, 'T', /source/channel-snag/hh-start-date[@label='finish']/@hour, ':', /source/channel-snag/hh-start-date[@label='finish']/@minute, 'Z')" />
                                 </xsl:when>
                                 <xsl:otherwise>
                                     Ongoing
                                 </xsl:otherwise>
                                 </xsl:choose>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[119]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Site Group Snag]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.physical import SiteSnag

snag_id = inv.getLong('snag-id')
snag = SiteSnag.getSiteSnag(snag_id)
source.appendChild(snag.toXml(doc, XmlTree("site")))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Chellow &gt; Site Snags &gt;
                    <xsl:value-of select="/source/site-snag/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/20/output/">
                        <xsl:value-of select="'Site Snags'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/site-snag/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/site-snags/{/source/site-snag/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                        <tr>
                            <th>Chellow Id</th>
                            <td>
                                <xsl:value-of
                                    select="/source/site-snag/@id" />
                            </td>
                        </tr>
                        <tr>
                            <th>Date Created</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/site-snag/date[@label='created']/@year, '-', /source/site-snag/date[@label='created']/@month, '-', /source/site-snag/date[@label='created']/@day, 'T', /source/site-snag/date[@label='created']/@hour, ':', /source/site-snag/date[@label='created']/@minute, 'Z')" />
                            </td>
                        </tr>
                        <tr>
                            <th>Ignored?</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/site-snag/@is-ignored='true'">
                                        Ignored
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Not ignored
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                        <tr>
                            <th>Description</th>
                            <td>
                                <xsl:value-of
                                    select="/source/site-snag/@description" />
                            </td>
                        </tr>
                        <tr>
                            <th>Progress</th>
                            <td>
                                <xsl:value-of
                                    select="/source/site-snag/@progress" />
                            </td>
                        </tr>
                        <tr>
                            <th>Site</th>
                            <td>
                                <a
                                    href="{/source/request/@context-path}/reports/3/output/?site-id={/source/site-snag/site/@id}">
                                    <xsl:value-of
                                        select="/source/site-snag/site/@id" />
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <th>Start Date</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/site-snag/hh-start-date[@label='start']/@year, '-', /source/site-snag/hh-start-date[@label='start']/@month, '-', /source/site-snag/hh-start-date[@label='start']/@day, 'T', /source/site-snag/hh-start-date[@label='start']/@hour, ':', /source/site-snag/hh-start-date[@label='start']/@minute, 'Z')" />
                            </td>
                        </tr>
                        <tr>
                            <th>Finish Date:</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/site-snag/hh-start-date[@label='finish']/@year, '-', /source/site-snag/hh-start-date[@label='finish']/@month, '-', /source/site-snag/hh-start-date[@label='finish']/@day, 'T', /source/site-snag/hh-start-date[@label='finish']/@hour, ':', /source/site-snag/hh-start-date[@label='finish']/@minute, 'Z')" />
                            </td>
                        </tr>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[121]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Market Roles]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

roles_element = doc.createElement('roles')
source.appendChild(roles_element)
for role in Hiber.session().createQuery("from MarketRole role order by role.code").list():
    roles_element.appendChild(role.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Market Roles
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Market Roles'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/roles/market-role">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/123/output/?role-id={@id}">
                                       <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[123]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Market Role]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import MarketRole

role_id = inv.getLong('role-id')
role = MarketRole.getMarketRole(role_id)
role_element = role.toXml(doc)
source.appendChild(role_element)
for party in Hiber.session().createQuery("from Party party where party.role = :role order by party.participant.code").setEntity("role", role).list():
    role_element.appendChild(party.toXml(doc, XmlTree('participant')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Market Roles &gt;
                    <xsl:value-of
                        select="/source/market-role/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/121/output/">
                        <xsl:value-of select="'Market Roles'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/market-role/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/market-role/@code" />
                        </td>
                    </tr>
                    <tr>

                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/market-role/@description" />
                        </td>
                    </tr>
                </table>
                <br />
                <xsl:choose>
                    <xsl:when test="/source/market-role/@code='R'">
                        <table>
                            <caption>DNOs</caption>
                            <thead>
                                <tr>
                                    <th>Code</th>
                                    <th>Name</th>
                                </tr>
                            </thead>
                            <tbody>
                                <xsl:for-each
                                    select="/source/market-role/dno">
                                    <tr>
                                        <td>
                                            <a
                                                href="{/source/request/@context-path}/reports/139/output/?dno-id={@id}">
                                                <xsl:value-of
                                                select="@code" />
                                            </a>
                                        </td>
                                        <td>
                                            <xsl:value-of
                                                select="@name" />
                                        </td>
                                    </tr>
                                </xsl:for-each>
                            </tbody>
                        </table>
                    </xsl:when>
                    <xsl:otherwise>
                        <table>
                            <caption>Providers</caption>
                            <thead>
                                <tr>
                                    <th>Name</th>
                                </tr>
                            </thead>
                            <tbody>
                                <xsl:for-each
                                    select="/source/market-role/provider">
                                    <tr>
                                        <td>
                                            <a
                                                href="{/source/request/@context-path}/reports/47/output/?provider-id={@id}">
                                                <xsl:value-of
                                                select="@name" />
                                            </a>
                                        </td>
                                    </tr>
                                </xsl:for-each>
                            </tbody>
                        </table>

                    </xsl:otherwise>
                </xsl:choose>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[125]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[SSCs]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

sscs_element = doc.createElement('sscs')
source.appendChild(sscs_element)
for ssc in Hiber.session().createQuery("from Ssc ssc order by ssc.code").list():
    sscs_element.appendChild(ssc.toXml(doc, XmlTree("measurementRequirements", XmlTree("tpr"))))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    <xsl:value-of select="'Chellow'" />
                    &gt; SSCs
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt; SSCs
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                            <th>Imp/Exp</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Tprs</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/sscs/ssc">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/127/output/?ssc-id={@id}">
                                        <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@is-import='true'">
                                            Import
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Export
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(date[@label='from']/@year, '-', date[@label='from']/@month, '-', date[@label='from']/@day, ' ', date[@label='from']/@hour, ':', date[@label='from']/@minute)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="date[@label='to']">
                                            <xsl:value-of
                                                select="concat(date[@label='to']/@year, '-', date[@label='to']/@month, '-', date[@label='to']/@day, ' ', date[@label='to']/@hour, ':', date[@label='to']/@minute)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:for-each
                                        select="measurement-requirement">
                                        <a
                                            href="{/source/request/@context-path}/reports/97/output/?tpr-id={tpr/@id}">
                                            <xsl:value-of
                                                select="tpr/@code" />
                                        </a>
                                        <xsl:if
                                            test="position() != last()">
                                            <xsl:value-of select="', '" />
                                        </xsl:if>
                                    </xsl:for-each>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[127]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[SSC]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Ssc

ssc_id = inv.getLong('ssc-id')
ssc = Ssc.getSsc(ssc_id)
source.appendChild(ssc.toXml(doc, XmlTree("measurementRequirements", XmlTree("tpr"))))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; SSCs &gt;
                    <xsl:value-of select="/source/ssc/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/125/output/">
                        <xsl:value-of select="'SSCs'" />
                    </a>
                    &gt; 
                    <xsl:value-of select="/source/ssc/@code" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/ssc/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/ssc/@description" />
                        </td>
                    </tr>
                    <tr>
                        <th>Is Import?</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/ssc/@is-import='true'">
                                    Import
                                </xsl:when>
                                <xsl:otherwise>Export</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>From</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/ssc/date[@label='from']/@year, '-', /source/ssc/date[@label='from']/@month, '-', /source/ssc/date[@label='from']/@day, ' ', /source/ssc/date[@label='from']/@hour, ':', /source/ssc/date[@label='from']/@minute)" />
                        </td>
                    </tr>
                    <tr>
                        <th>To</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/ssc/date[@label='to']">
                                    <xsl:value-of
                                        select="concat(/source/ssc/date[@label='to']/@year, '-', /source/ssc/date[@label='to']/@month, '-', /source/ssc/date[@label='to']/@day, ' ', /source/ssc/date[@label='to']/@hour, ':', /source/ssc/date[@label='to']/@minute)" />
                                </xsl:when>
                                <xsl:otherwise>Ongoing</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                </table>

                <h4>TPRs</h4>

                <ul>
                    <xsl:for-each
                        select="/source/ssc/measurement-requirement/tpr">
                        <li>
                            <a
                                href="{/source/request/@context-path}/reports/97/output/?tpr-id={@id}">
                                <xsl:value-of select="@code" />
                            </a>
                            <!-- 
                            <xsl:if test="position() != last()">
                                <xsl:value-of select="', '" />
                            </xsl:if>
                            -->
                        </li>
                    </xsl:for-each>
                </ul>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[129]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Meter Types]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

types_element = doc.createElement('meter-types')
source.appendChild(types_element)
for type in Hiber.session().createQuery("from MeterType type order by type.code").list():
    types_element.appendChild(type.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    <xsl:value-of select="'Chellow'" />
                    &gt; Meter Types
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Meter Types'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/meter-types/meter-type">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/131/output/?type-id={@id}">
                                         <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[131]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Meter Type]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import MeterType

type_id = inv.getLong('type-id')
type = MeterType.getMeterType(type_id)
source.appendChild(type.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Meter Types &gt;
                    <xsl:value-of
                        select="/source/meter-type/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/129/output/">
                        <xsl:value-of select="'Meter Types'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/meter-type/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/meter-type/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/meter-type/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[133]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MTC Payment Types]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

types_element = doc.createElement('meter-payment-types')
source.appendChild(types_element)
for type in Hiber.session().createQuery("from MeterPaymentType type order by type.code").list():
    types_element.appendChild(type.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Meter Payment Types
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Meter Payment Types'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/meter-payment-types/meter-payment-type">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/135/output/?type-id={@id}">
                                        <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[135]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MTC Payment Type]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import MeterPaymentType

type_id = inv.getLong('type-id')
type = MeterPaymentType.getMeterPaymentType(type_id)
source.appendChild(type.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Meter Payment Types &gt;
                    <xsl:value-of
                        select="/source/meter-payment-type/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/133/output/">
                        <xsl:value-of select="'Meter Payment Types'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/meter-payment-type/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/meter-payment-type/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/meter-payment-type/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[137]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[DNOs]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

for dno in Hiber.session().createQuery(
                'from Dno dno order by dno.code').list():
    source.appendChild(dno.toXml(doc, XmlTree('participant').put('role')))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>Chellow &gt; DNOs</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt; DNOs
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <p>
                    This is a list of parties that have the
                    <a
                        href="{/source/request/@context-path}/reports/123/output/?role-id=22">
                        <xsl:value-of select="'distributor'" />
                    </a>
                    role.
                </p>
                <table>
                    <thead>
                        <th>Code</th>
                        <th>Name</th>
                        <th>Participant</th>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/dno">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/139/output/?dno-id={@id}">
                                       <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@name" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/73/output/?participant-id={participant/@id}">
                                        <xsl:value-of
                                            select="participant/@name" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[139]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[DNO]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import Dno

dno_id = inv.getLong('dno-id')
dno = Dno.getDno(dno_id)
dno_element = dno.toXml(doc, XmlTree('participant').put('role'))
source.appendChild(dno_element)
for contract in Hiber.session().createQuery("from DnoContract contract where contract.party = :dno order by contract.name").setEntity('dno', dno).list():
    contract_element = contract.toXml(doc)
    dno_element.appendChild(contract_element)
    start_rate_script = contract.getStartRateScript()
    start_rate_script.setLabel('start')
    contract_element.appendChild(start_rate_script.toXml(doc))
    finish_rate_script = contract.getFinishRateScript()
    finish_rate_script.setLabel('finish')
    contract_element.appendChild(finish_rate_script.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; DNOs &gt;
                    <xsl:value-of select="/source/dno/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/137/output/">
                        <xsl:value-of select="'DNOs'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/dno/@code" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Name</th>
                        <td>
                            <xsl:value-of select="/source/dno/@name" />
                        </td>
                    </tr>

                    <tr>
                        <th>Participant</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/73/output/?participant-id={/source/dno/participant/@id}">
                                <xsl:value-of
                                    select="/source/dno/participant/@name" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>Role</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/123/output/?role-id={/source/dno/market-role/@id}">
                                <xsl:value-of
                                    select="/source/dno/market-role/@description" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/dno/@code" />
                        </td>
                    </tr>
                </table>
                <br />
                <table><caption>Contracts [<a href="{/source/request/@context-path}/dnos/379/contracts/">edit</a>]</caption>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Start Date</th>
                            <th>Finish Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/dno/dno-contract">
                            <tr>
                                <td><a href="{/source/request/@context-path}/reports/67/output/?dno-contract-id={@id}">
                                    <xsl:value-of select="@name" /></a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(rate-script[@label='start']/hh-start-date[@label='start']/@year, '-', rate-script[@label='start']/hh-start-date[@label='start']/@month, '-', rate-script[@label='start']/hh-start-date[@label='start']/@day, ' ', rate-script[@label='start']/hh-start-date[@label='start']/@hour, ':', rate-script[@label='start']/hh-start-date[@label='start']/@minute)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="rate-script[@label='finish']/hh-start-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(rate-script[@label='finish']/hh-start-date[@label='finish']/@year, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@month, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@day, ' ', rate-script[@label='finish']/hh-start-date[@label='finish']/@hour, ':', rate-script[@label='finish']/hh-start-date[@label='finish']/@minute)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>

                <ul>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/49/output/?dno-id={/source/dno/@id}">
                            Line Loss Factors
                        </a>
                    </li>
                </ul>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[141]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Read Types]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

types_element = doc.createElement('read-types')
source.appendChild(types_element)
for type in Hiber.session().createQuery("from ReadType type order by type.code").list():
    types_element.appendChild(type.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Read Types
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Read Types'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/read-types/read-type">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/143/output/?type-id={@id}">
                                        <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[143]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Read Type]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import ReadType

type_id = inv.getLong('type-id')
type = ReadType.getReadType(type_id)
source.appendChild(type.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Read Types &gt;
                    <xsl:value-of
                        select="/source/read-type/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/141/output/">
                        <xsl:value-of select="'Read Types'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/read-type/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/read-type/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/read-type/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[145]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Sites HH Data Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/style/" />

                <title>Chellow &gt; CSV Sites HH Data</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Sites HH Data'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/183/output/">
                    <fieldset>
                        <legend>Download</legend>
<br/>
                        <xsl:value-of select="'For '"/>
                        <input name="months" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='months']">
                                <xsl:value-of select="/source/request/parameter[@name='months']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
<xsl:value-of select="' month(s) finishing at the end of '"/>
                        <input name="year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[147]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies Duration Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import HhStartDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())
finish_date.setLabel('finish')
source.appendChild(finish_date.toXml(doc))

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1)
start_date = HhStartDate(cal.getTime())
start_date.setLabel('start')
source.appendChild(start_date.toXml(doc))

source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))
source.appendChild(MonadDate.getHoursXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; CSV Supplies Duration</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Supplies Duration'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/149/output/">
                    <fieldset>
                        <legend>Download</legend>
<br/>
<p><xsl:value-of select="'From '"/>
<input name="start-year" value="{/source/hh-start-date[@label='start']/@year}" maxlength="4" size="4"/><xsl:value-of select="'-'"/>
                        <select name="start-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='start']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="'-'"/>
                        <select name="start-day">
                            <xsl:for-each select="/source/days/day">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='start']/@day">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="' '"/>
                        <select name="start-hour">
                            <xsl:for-each select="/source/hours/hour">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='start']/@hour">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="':00 to '"/>
<input name="finish-year" value="{/source/hh-start-date[@label='finish']/@year}" maxlength="4" size="4"/><xsl:value-of select="'-'"/>
                        <select name="finish-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="'-'"/>
                        <select name="finish-day">
                            <xsl:for-each select="/source/days/day">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@day">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="' '"/>
                        <select name="finish-hour">
                            <xsl:for-each select="/source/hours/hour">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/hh-start-date[@label='finish']/@hour">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select><xsl:value-of select="':30 '"/>
                    <input type="submit" value="Download"/>
</p>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[149]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies Duration]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date
from net.sf.chellow.physical import HhStartDate, Supply
from java.sql import Timestamp, ResultSet
from org.python.util import PythonInterpreter
from net.sf.chellow.billing import NonCoreContract
from java.lang import Long
from net.sf.chellow.monad.types import MonadDate

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()

computer = NonCoreContract.getNonCoreContract('computer')
comterp = PythonInterpreter()
comterp.exec(computer.getChargeScript())
forecast_date = HhStartDate.roundDown(Date(Long.MAX_VALUE))

def mpan_bit(query, kvarh_at_md_query, is_import, hh_count_query, num_hh, generation, comterp, forecast_date, start_date, finish_date):
    mpan = generation.getMpan(is_import)
    mpan_core_str = ''
    llfc_str = ''
    sc_str = ''
    supplier_contract_name = ''
    gsp_kwh = ''
    if mpan is not None:
        supplier_contract_name = mpan.getSupplierContract().getName()
        llfc = mpan.getLlfc()
        llfc_str = str(llfc)
        mpan_core_str = mpan.getCore().toString()
        sc_str = str(mpan.getAgreedSupplyCapacity())
        if llfc.getIsImport() and generation.getPc().getCode() == 0:
            gsp_kwh = 0
            # Do months
            mb_cal = MonadDate.getCalendar()
            mb_cal.setTime(start_date.getDate())
            mb_cal.set(Calendar.HOUR_OF_DAY, 0)
            mb_cal.set(Calendar.MINUTE, 0)

            me_cal = MonadDate.getCalendar()
            me_cal.setTime(start_date.getDate())
            me_cal.set(Calendar.HOUR_OF_DAY, 0)
            me_cal.set(Calendar.MINUTE, 0)
            me_cal.add(Calendar.MONTH, 1)
            me_cal.add(Calendar.MINUTE, -30)

            while not mb_cal.getTime().after(finish_date.getDate()):
                month_begin = HhStartDate(mb_cal.getTime())
                month_end = HhStartDate(me_cal.getTime())
                mb_cal.add(Calendar.MONTH, 1)
                me_cal.add(Calendar.MINUTE, 30)
                me_cal.add(Calendar.MONTH, 1)
                me_cal.add(Calendar.MINUTE, -30)
                supply_source = comterp.get('supply_source')(forecast_date, comterp, pw)
                if start_date.after(month_begin):
                    chunk_start = start_date
                else:
                    chunk_start = month_begin
                if finish_date.before(month_end):
                    chunk_finish = finish_date
                else:
                    chunk_finish = month_end
                supply_source.init_from_mpan(chunk_start, chunk_finish, mpan)
                #pw.println("sum gsp " + str(supply_source.summary['sum-gsp-kwh']) + " sum msp " + str(supply_source.summary['sum-msp-kwh']))
                gsp_kwh += supply_source.summary['sum-gsp-kwh']
            gsp_kwh = str(round(gsp_kwh))
    md = 0
    sum = 0
    non_actual = 0
    date_at_md = None
    kvarh_at_md = None
    num_na = 0
    hh_data = query.setBoolean('isImport', is_import).scroll()
    kva_at_md_query.setBoolean('isImport', is_import)
    while hh_data.next():
        hh_value = hh_data.get(0).doubleValue()
        hh_status = hh_data.get(1)
        if hh_value > md:
            md = hh_value
            date_at_md = hh_data.get(2)
            kvarh_at_md = kvarh_at_md_query.setTimestamp('mdDate', date_at_md.getDate()).uniqueResult()
        sum = sum + hh_value
        if hh_status != 'A':
            non_actual = non_actual + hh_value
            num_na = num_na + 1
    hh_data.close()
    kw_at_md = md * 2
    if kvarh_at_md is None:
        kva_at_md = 'None'
    else:
        kva_at_md = str(round(((kvarh_at_md.doubleValue() * 2)**2 + kw_at_md**2)**0.5))
    num_bad = str(num_hh - hh_count_query.setBoolean('isImport', is_import).uniqueResult() + num_na)
        
    return llfc_str + ',' + mpan_core_str + ',' + sc_str + ',' + supplier_contract_name + ',' + str(round(sum)) + ',' + str(round(non_actual)) + ',' + gsp_kwh + ',' + str(round(kw_at_md)) + ',' + str(date_at_md) + ',' + str(kva_at_md) + ',' + str(num_bad)
    
start_year = inv.getInteger("start-year")
start_month = inv.getInteger("start-month")
start_day = inv.getInteger("start-day")
start_hour = inv.getInteger("start-hour")

finish_year = inv.getInteger("finish-year")
finish_month = inv.getInteger("finish-month")
finish_day = inv.getInteger("finish-day")
finish_hour = inv.getInteger("finish-hour")

if not inv.isValid():
    raise UserException()

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)

cal.clear()
cal.set(Calendar.YEAR, start_year)
cal.set(Calendar.MONTH, start_month - 1)
cal.set(Calendar.DAY_OF_MONTH, start_day)
cal.set(Calendar.HOUR_OF_DAY, start_hour)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
start_date = HhStartDate(cal.getTime())

cal.clear()
cal.set(Calendar.YEAR, finish_year)
cal.set(Calendar.MONTH, finish_month - 1)
cal.set(Calendar.DAY_OF_MONTH, finish_day)
cal.set(Calendar.HOUR_OF_DAY, finish_hour)
cal.set(Calendar.MINUTE, 30)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
finish_date = HhStartDate(cal.getTime())

query = Hiber.session().createQuery("select datum.value, datum.status, datum.startDate from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isImport is :isImport and datum.channel.isKwh is true and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate").setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate())

kva_at_md_query = Hiber.session().createQuery("select datum.value from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isImport is :isImport and datum.channel.isKwh is false and datum.startDate.date = :mdDate")

hh_count_query = Hiber.session().createQuery("select count(*) from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isImport is :isImport and datum.channel.isKwh is true and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate").setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate())

pw.println("Supply Id, Supply Name, Source, Generator Type, Site Ids, Site Names, From, To, PC, MTC, CoP, SSC, Normal Reads,Type,Import LLFC, Import MPAN Core, Import Supply Capacity,Import Supplier,Import Total MSP kWh, Import Non-actual MSP kWh, Import Total GSP kWh,Import MD / kW, Import MD Date, Import MD / kVA, Import Bad HHs,Export LLFC, Export MPAN Core, Export Supply Capacity,Export Supplier,Export Total MSP kWh, Export Non-actual MSP kWh,Export GSP kWh, Export MD / kW, Export MD Date, Export MD / kVA, Export Bad HHs")

if inv.hasParameter('supply-id'):
    supply_id = inv.getLong('supply-id')
    supplies_query = Hiber.session().createQuery("select distinct generation.supply, generation.supply.id from SupplyGeneration generation where  generation.supply = :supply and (generation.finishDate.date is null or generation.finishDate.date >= :startDate) and generation.startDate.date <= :finishDate order by generation.supply.id").setEntity('supply', Supply.getSupply(supply_id))
else:
    supplies_query = Hiber.session().createQuery("select distinct generation.supply, generation.supply.id from SupplyGeneration generation where (generation.finishDate.date is null or generation.finishDate.date >= :startDate) and generation.startDate.date <= :finishDate order by generation.supply.id")

supplies = supplies_query.setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate()).scroll()

normal_previous_reads_query = Hiber.session().createQuery("from RegisterRead read where read.bill.supply = :supply and read.previousDate.date >= :startDate and read.previousDate.date <= :finishDate and read.previousType.code in ('C', 'N', 'N3')").setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate())

normal_present_reads_query = Hiber.session().createQuery("from RegisterRead read where read.bill.supply = :supply and read.presentDate.date >= :startDate and read.presentDate.date <= :finishDate and read.presentType.code in ('C', 'N', 'N3')").setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate())

bill_query = Hiber.session().createQuery("from Bill bill where bill.supply = :supply and bill.startDate.date <= :readDate and bill.finishDate.date >= :readDate order by bill.issueDate desc, bill.type.code").setMaxResults(1)

while supplies.next():
    supply = supplies.get(0)
    site_codes = ''
    site_names = ''
    generations = supply.getGenerations(start_date, finish_date)
    generation = generations[len(generations) - 1]
    for site_supply_generation in generation.getSiteSupplyGenerations():
        site = site_supply_generation.getSite();
        site_codes = site_codes + site.getCode() + ', '
        site_names = site_names + site.getName() + ', '
    site_codes = site_codes[:-2]
    site_names = site_names[:-2]
    query.setEntity('supply', supply)
    kva_at_md_query.setEntity('supply', supply)
    hh_count_query.setEntity('supply', supply)
    generator_type = supply.getGeneratorType()
    if generator_type is None:
        generator_type = ''
    else:
        generator_type = generator_type.getCode()

    ssc = generation.getSsc()
    if ssc is None:
        ssc_code = ''
    else:
        ssc_code = str(ssc)

    prime_reads = {}
    bill_query.setEntity('supply', supply)
    for read in normal_previous_reads_query.setEntity('supply', supply).list():
        prime_bill = bill_query.setTimestamp('readDate', read.getPreviousDate().getNext().getDate()).uniqueResult()
        if prime_bill is not None and read.getBill().getId() == prime_bill.getId():
            key = str(read.getPreviousDate()) + "_" + read.getMeterSerialNumber()
            if key not in prime_reads:
                if Hiber.session().createQuery("select count(*) from RegisterRead read where read.bill = :bill and read.previousDate.date = :readDate and read.meterSerialNumber = :msn and read.previousType.code not in ('C', 'N', 'N3')").setEntity('bill', prime_bill).setTimestamp('readDate', read.getPreviousDate().getDate()).setString('msn', read.getMeterSerialNumber()).uniqueResult() is not None:
                    prime_reads[key] = read
                
    for read in normal_present_reads_query.setEntity('supply', supply).list():
        prime_bill = bill_query.setTimestamp('readDate', read.getPresentDate().getDate()).uniqueResult()
        if prime_bill is not None and read.getBill().getId() == prime_bill.getId():
            key = str(read.getPresentDate()) + "_" + read.getMeterSerialNumber()
            if key not in prime_reads:
                if Hiber.session().createQuery("select count(*) from RegisterRead read where read.bill = :bill and read.presentDate.date = :readDate and read.meterSerialNumber = :msn and read.presentType.code not in ('C', 'N', 'N3')").setEntity('bill', prime_bill).setTimestamp('readDate', read.getPresentDate().getDate()).setString('msn', read.getMeterSerialNumber()).uniqueResult() is not None:
                    prime_reads[key] = read

    pc = generation.getPc()
    if pc.getCode() == 0:
        supply_type = 'hh'
    elif len(generation.getChannels()) > 0:
        supply_type = 'amr'
    elif generation.getMtc().getMeterType().getCode() == 'UM':
        supply_type = 'unmetered'
    else:
        supply_type = 'nhh'

    if generations[0].getStartDate().after(start_date):
        chunk_start = generations[0].getStartDate()
    else:
        chunk_start = start_date

    if finish_date.before(generation.getFinishDate()):
        chunk_finish = finish_date
    else:
        chunk_finish = generation.getFinishDate()

    num_hh = round((chunk_finish.getDate().getTime() - chunk_start.getPrevious().getDate().getTime()) / (30 * 60 * 1000))

    pw.print(','.join(('"' + str(value) + '"') for value in [supply.getId(), supply.getName(), supply.getSource().getCode(), generator_type, site_codes, site_names, start_date, finish_date, generation.getPc(), generation.getMtc(), generation.getCop(), ssc_code, len(prime_reads), supply_type]) + ',')
    pw.flush()
    pw.println(mpan_bit(query, kva_at_md_query, True, hh_count_query, num_hh, generation, comterp, forecast_date, start_date, finish_date) + "," + mpan_bit(query, kva_at_md_query, False, hh_count_query, num_hh, generation,comterp, forecast_date, start_date, finish_date))
    pw.flush()
    Hiber.session().clear()
supplies.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[151]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Admin: CSV Export Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; General Export
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt; General Export
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <br />
                <form action="{/source/request/@context-path}/reports/31/output/">
                <fieldset>
                        <legend>Download XML</legend>
                        <label>Core<input type="radio" name="is-core" value="true" checked="true"/></label>
                        <label>User<input type="radio" name="is-core" value="false"/></label>
                    <br/>
<br/>
<table>
  <tr>
    <td>DNO Contracts</td>
    <td><input type="checkbox" name="has-dno-contracts" value="true"/></td>
  </tr>
  <tr>
    <td>Non-core contracts</td>
    <td><input type="checkbox" name="has-non-core-contracts" value="true"/></td>
  </tr>
  <tr>
    <td>Reports</td>
    <td><input type="checkbox" name="has-reports" value="true" /></td>
  </tr>
  <tr>
    <td>Supplier Contracts</td>
    <td><input type="checkbox" name="has-supplier-contracts" value="true"/></td>
  </tr>
  <tr>
    <td>Supplier Batches</td>
    <td><input type="checkbox" name="has-supplier-batches" value="true"/></td>
  </tr>
  <tr>
    <td>HHDC Contracts</td>
    <td><input type="checkbox" name="has-hhdc-contracts" value="true"/></td>
  </tr>
  <tr>
    <td>MOP Contracts</td>
    <td><input type="checkbox" name="has-mop-contracts" value="true"/></td>
  </tr>
  <tr>
    <td>Sites</td>
    <td><input type="checkbox" name="has-sites" value="true" /></td>
  </tr>
  <tr>
    <td>Supplies</td>
    <td><input type="checkbox" name="has-supplies" value="true"/><xsl:value-of select="' '"/><label>MPAN Core<xsl:value-of select="' '"/><input name="mpan-core"/></label></td>
  </tr>
  <tr>
    <td>HH Data</td>
    <td><input type="checkbox" name="has-hh-data" value="true" /></td>
  </tr>
  <tr>
    <td>Users</td>
    <td><input type="checkbox" name="has-users" value="true" /></td>
  </tr>
  <tr>
    <td>Configuration</td>
    <td><input type="checkbox" name="has-configuration" value="true"/></td>
  </tr>
  <tr>
    <td>Channel Snag Ignores</td>
    <td><input type="checkbox" name="has-channel-snag-ignores" value="true"/></td>
  </tr>
  <tr>
    <td>Site Snag Ignores</td>
    <td><input type="checkbox" name="has-site-snag-ignores" value="true"/></td>
  </tr>
</table>
    <br/>
    <input type="submit" value="Download"/><xsl:value-of select="' '"/><input type="reset" value="Reset"/>
    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[153]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Bills Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
      href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; CSV Bills</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Bills'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/27/output/">
                    <fieldset>
                        <legend>Download</legend>
<br/>
                        <xsl:value-of select="'For '"/>
                        <input name="months" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='months']">
                                <xsl:value-of select="/source/request/parameter[@name='months']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
<xsl:value-of select="' month(s) finishing at the end of '"/>
                        <input name="end-year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[155]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies Monthly Duration Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; CSV Supplies Monthly Duration</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Supplies Monthly Duration'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/177/output/">
                    <fieldset>
                        <legend>Download</legend>
<br/>
<xsl:value-of select="'For '"/>
                        <input name="months" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='months']">
                                <xsl:value-of select="/source/request/parameter[@name='months']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
                        <xsl:value-of select="' month(s) finishing at the end of '"/>
<input name="end-year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                    <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[157]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies Snapshot Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; CSV Supplies Snapshot</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Supplies Snapshot'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/33/output/">
                    <fieldset>
                        <legend>Supply level information</legend>
<br/>
<fieldset><legend>For the end of</legend>
                        <input name="year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
</fieldset>
<br/>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[159]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Sites Monthly Duration Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; CSV Sites Monthly Duration</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Sites Monthly Duration'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/161/output/">
                    <fieldset>
                        <legend>Download</legend>
<br/>
<p><xsl:value-of select="'For '"/>
                        <input name="months" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='months']">
                                <xsl:value-of select="/source/request/parameter[@name='months']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
                        <xsl:value-of select="' month(s) finishing at the end of '"/>
<input name="end-year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                    </p>
                    <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[161]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Sites Monthly Duration]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate, MpanCore, Site
from java.text import SimpleDateFormat, DecimalFormat
from java.lang import Math, System
from net.sf.chellow.billing import SupplierContract, NonCoreContract
from org.python.util import PythonInterpreter

year = inv.getInteger("end-year")
month = inv.getInteger("end-month")
months = inv.getInteger("months")

if not inv.isValid():
    raise UserException()

if inv.hasParameter('site-code'):
    search_term = inv.getString('site-code')
    query = Hiber.session().createQuery("from Site site where site.code = :siteCode").setString('siteCode', search_term.strip())
else:
    query = Hiber.session().createQuery("from Site site order by site.code")

computer = NonCoreContract.getNonCoreContract('computer')

cal = MonadDate.getCalendar()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())
cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
start_date = HhStartDate(cal.getTime())

comterp = PythonInterpreter()
comterp.exec(computer.getChargeScript())

bill_query = Hiber.session().createQuery("from Bill bill where bill.supply = :supply and bill.startDate.date <= :finishDate and bill.finishDate.date >= :startDate")

def process_site(site, month_start, month_finish, forecast_date, pw):
    site_code = site.getCode()
    associates = []
    sources = []
    generator_types = []
    metering_type = 'no-supply'
    problem = ''
    month_data = {}

    for stream_name in ['import-net', 'export-net', 'import-gen', 'export-gen', 'import-3rd-party', 'export-3rd-party', 'msp', 'used', 'used-3rd-party']:
        month_data[stream_name + '-kwh'] = 0
        month_data[stream_name + '-gbp'] = 0

    has_3rd_party = False
    third_party_contracts = {}
    
    billed_gbp = 0
    billed_kwh = 0

    for group in site.groups(month_start, month_finish, False):
        for cand_site in group.getSites():
            cand_site_code = cand_site.getCode()
            if cand_site_code != site_code and cand_site_code not in associates:
                associates.append(cand_site_code)
        for cand_supply in group.getSupplies():
            for cand_gen in cand_supply.getGenerations(month_start, month_finish):
                imp_mpan = cand_gen.getImportMpan()
                if imp_mpan is not None and metering_type != 'hh':
                    if str(cand_gen.getPc()) == '00':
                        metering_type = 'hh'
                    elif metering_type != 'amr':
                        if cand_gen.getChannels().size() > 0:
                            metering_type = 'amr'
                        elif metering_type != 'nhh':
                            if cand_gen.getMtc().getMeterType().getCode() not in ['UM', 'PH']:
                                metering_type = 'nhh'
                            else:
                                metering_type = 'unmetered'

    for group in site.groups(month_start, month_finish, True):
        if group.getFrom().after(start_date):
            chunk_start = group.getFrom()
        else:
            chunk_start = start_date
        if group.getTo().after(finish_date):
            chunk_finish = finish_date
        else:
            chunk_finish = group.getTo()

        chunk_start_millis = chunk_start.getDate().getTime()
        chunk_finish_millis = chunk_finish.getDate().getTime()

        for supply in group.getSupplies():
            source_code = supply.getSource().getCode()
            if source_code not in sources:
                sources.append(source_code)

            if source_code in ['3rd-party', '3rd-party-reverse']:
                has_3rd_party = True

            if supply.getGeneratorType() is not None:
                gen_type = supply.getGeneratorType().getCode()
                if gen_type not in generator_types:
                    generator_types.append(gen_type)

            for supply_generation in Hiber.session().createQuery("from SupplyGeneration generation where generation.supply = :supply and generation.startDate.date <= :finishDate and (generation.finishDate is null or generation.finishDate.date >= :startDate)").setEntity('supply', supply).setTimestamp('startDate', chunk_start.getDate()).setTimestamp('finishDate', chunk_finish.getDate()).list():
                pw.print(' ')
                pw.flush()
                if has_3rd_party:
                    for mpan in supply_generation.getMpans():
                        contr = mpan.getSupplierContract()
                        third_party_contracts[contr.getName()] = contr
                import_mpan = supply_generation.getImportMpan()

                # GBP
                if import_mpan is None:
                    continue

                if supply_generation.getStartDate().after(chunk_start):
                    bill_start = supply_generation.getStartDate()
                else:
                    bill_start = chunk_start
                if HhStartDate.isAfter(supply_generation.getFinishDate(), chunk_finish):
                    bill_finish = chunk_finish
                else:
                    bill_finish = supply_generation.getFinishDate()

                supplier_contract = import_mpan.getSupplierContract()
                if source_code in ['net', 'gen-net']:
                    #pw.println("starting vbill, " + str(System.currentTimeMillis()))
                    supply_source = comterp.get('supply_source')(forecast_date, comterp, pw)

                    #pw.println("starting init from mpan, " + str(System.currentTimeMillis()))
                    supply_source.init_from_mpan(bill_start, bill_finish, import_mpan)
                    month_data['import-net-kwh'] += supply_source.summary['sum-msp-kwh']

                    #pw.println("finished init from mpan, " + str(System.currentTimeMillis()))
                    import_vb_function = comterp.get('contract_function')(supplier_contract, 'import_virtual_bill')
                    if import_vb_function is None:
                        problem += "Can't find the import_virtual_bill function in the supplier contract. "
                    else:
                        v_bill = import_vb_function(supply_source)
                        #pw.println("finishing vbill, " + str(System.currentTimeMillis()))
                        
                        if 'problem' in v_bill and len(v_bill['problem']) > 0:
                            problem += 'Supplier Problem: ' + v_bill['problem']

                        try:
                            month_data['import-net-gbp'] += v_bill['net-gbp']
                        except KeyError:
                            problem += 'For the supply ' + import_mpan.toString() + ' the virtual bill ' + str(v_bill) + ' from the contract ' + supplier_contract.getName() + ' does not contain the net-gbp key.'
                        problem += supply_source.summary['problem']

                    dc_contract = supply_generation.getHhdcContract()
                    if dc_contract is not None:
                        dc_bill = supply_source.contract_function(dc_contract, 'virtual_bill')(supply_source)
                        month_data['import-net-gbp'] += dc_bill['net-gbp']
                        if 'problem' in dc_bill and len(dc_bill['problem']) > 0:
                            problem += 'DC Problem: ' + dc_bill['problem']

                    mop_contract = supply_generation.getMopContract()
                    if mop_contract is not None:
                        mop_bill_function = supply_source.contract_function(mop_contract, 'virtual_bill')
                        if mop_bill_function is not None:
                            mop_bill = mop_bill_function(supply_source)
                            month_data['import-net-gbp'] += mop_bill['net-gbp']
                            if 'problem' in mop_bill and len(mop_bill['problem']) > 0:
                                problem += 'MOP Problem: ' + mop_bill['problem']

            for bill in bill_query.setEntity('supply', supply).setTimestamp('startDate', chunk_start.getDate()).setTimestamp('finishDate', chunk_finish.getDate()).list():
                bill_start = bill.getStartDate().getDate().getTime()
                bill_finish = bill.getFinishDate().getDate().getTime()
                bill_duration = bill_finish - bill_start + (30 * 60 * 1000)
                overlap_duration = min(bill_finish, chunk_finish_millis) + (30 * 60 * 1000) - max(bill_start, chunk_start_millis)
                overlap_proportion = float(overlap_duration) / bill_duration
                billed_gbp += overlap_proportion * bill.getNet().doubleValue()
                billed_kwh += overlap_proportion * bill.getKwh().doubleValue()

        #pw.println("getting site ds, " + str(System.currentTimeMillis()))
        site_ds = comterp.get('site_source')(site, chunk_start, chunk_finish, forecast_date, comterp, pw)
        displaced_mpan = comterp.get('displaced_mpan')(group, chunk_start, chunk_finish)
        if displaced_mpan != None:
            #pw.println("starting displaced, " + str(System.currentTimeMillis()))
            site_ds.init_from_mpan(displaced_mpan)
            #pw.println("done init from mpan, " + str(System.currentTimeMillis()))
            month_data['msp-gbp'] += comterp.get('contract_function')(displaced_mpan.getSupplierContract(), 'displaced_virtual_bill')(site_ds)['net-gbp']

            #pw.println("finishing displaced, " + str(System.currentTimeMillis()))
        elif has_3rd_party and site.getCode() == '12129':
            site_ds.init_from_site()
            keys = third_party_contracts.keys()
            keys.sort()
            third_gbp = comterp.get('contract_function')(third_party_contracts[keys[0]], 'third_party_bill')(site_ds)['net-gbp']
            month_data['used-3rd-party-gbp'] += third_gbp
        else:
            site_ds.init_from_site()

        #pw.println("finishing site ds " + str(System.currentTimeMillis()))

        month_data['used-gbp'] += month_data['import-net-gbp'] + month_data['msp-gbp'] + month_data['used-3rd-party-gbp']
        for stream_name in ['export-net', 'import-gen', 'export-gen', 'import-3rd-party', 'export-3rd-party', 'msp', 'used-3rd-party']:
            month_data[stream_name + '-kwh'] += site_ds.summary['sum-' + stream_name + '-kwh']
        month_data['used-kwh'] += month_data['msp-kwh'] + month_data['used-3rd-party-kwh'] + month_data['import-net-kwh']

    sources.sort()
    generator_types.sort()

    result = [site.getCode(), site.getName(), ','.join(associates), ','.join(sources), '.'.join(generator_types), month_format.format(Date(month_finish.getDate().getTime() - 1)), month_data['import-net-kwh'], month_data['msp-kwh'], month_data['export-net-kwh'], month_data['used-kwh'], month_data['export-gen-kwh'], month_data['import-gen-kwh'], month_data['import-3rd-party-kwh'], month_data['export-3rd-party-kwh'], month_data['import-net-gbp'], month_data['msp-gbp'], 0, month_data['used-gbp'], month_data['used-3rd-party-gbp'], billed_kwh, billed_gbp, metering_type, problem]
    #pw.println("Finished call method " + str(System.currentTimeMillis()))
    return result

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'attachment; filename="output.csv"')

pw = inv.getResponse().getWriter()
pw.print("Site Id,Site Name,Associated Site Ids,Sources,Generator Types,Month,Metered Imported kWh,Metered Displaced kWh,Metered Exported kWh,Metered Used kWh,Metered Parasitic kWh,Metered Generated kWh,Metered 3rd Party Import kWh,Metered 3rd Party Export kWh,Metered Imported GBP,Metered Displaced GBP,Metered Exported GBP,Metered Used GBP,Metered 3rd Party Import GBP,Billed Imported kWh,Billed Imported GBP,Metering Type,Problem")
pw.flush()

month_format = SimpleDateFormat("yyyy-MM-dd")
month_format.setCalendar(cal)

forecast_date = comterp.get('forecast_date')()

sites = query.scroll()
for i in range(months):
    sites.beforeFirst()
    while sites.next():
        #pw.println("starting site, " + str(System.currentTimeMillis()))
        site = sites.get(0)
        cal.setTime(start_date.getDate())
        cal.add(Calendar.MONTH, i)
        month_start = HhStartDate(cal.getTime())
        cal.add(Calendar.MONTH, 1)
        cal.add(Calendar.MINUTE, -30)
        month_finish = HhStartDate(cal.getTime())
        pw.print('\r\n' + ','.join('"' + str(value) + '"' for value in process_site(site, month_start, month_finish, forecast_date, pw)))
        pw.flush()
        #pw.println("finishing site, " + str(System.currentTimeMillis()))
        Hiber.session().clear()

sites.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[163]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Bills]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import Account

account_id = inv.getLong('account-id')
account = Account.getAccount(account_id)
bills_element = doc.createElement('bills')
source.appendChild(bills_element)
bills_element.appendChild(account.toXml(doc, XmlTree('contract')))
for bill in Hiber.session().createQuery("from Bill bill where bill.account = :account order by bill.startDate.date").setEntity('account', account).list():
    bills_element.appendChild(bill.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />

    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/bills/account/hhdc-contract/@name" />
                    &gt; Accounts &gt;
                    <xsl:value-of
                        select="/source/bills/account/@reference" />
                    &gt; Bills
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/113/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={/source/bills/account/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/bills/account/hhdc-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/109/output/?hhdc-contract-id={/source/bills/account/hhdc-contract/@id}">
                        <xsl:value-of select="'Accounts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/111/output/?account-id={/source/bills/account/@id}">
                        <xsl:value-of
                            select="/source/bills/account/@reference" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Bills'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>Bills</caption>
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Net</th>
                            <th>VAT</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/bills/bill">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/87/output/?bill-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(day-start-date/@year, '-', day-start-date/@month, '-', day-start-date/@day)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(day-finish-date/@year, '-', day-finish-date/@month, '-', day-finish-date/@day)" />
                                </td>
                                <td>
                                    <xsl:value-of select="@net" />
                                </td>
                                <td>
                                    <xsl:value-of select="@vat" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[165]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Admin: DB Consistency Check]]></value>
        <value><![CDATA[from net.sf.chellow.monad import UserException, Hiber
from net.sf.chellow.monad.types import MonadDate
from java.text import SimpleDateFormat
from java.util import Locale, Calendar, TimeZone, GregorianCalendar
from net.sf.chellow.physical import MpanCore, SiteGroup

inv.getResponse().setContentType('text/plain')
pw = inv.getResponse().getWriter()
pw.println("Checking for the 100 most recent bogus site snags...")
summary = []
for site_snag in Hiber.session().createQuery("from SiteSnag snag order by snag.finishDate.date desc").setMaxResults(100).list():
    pw.println("Checking site snag " + str(site_snag.getId()))
    site = site_snag.getSite()
    description = site_snag.getDescription()
    groups = site.groups(site_snag.getStartDate(), site_snag.getFinishDate(), False)
    for group in groups:
        pw.println('Checking group')
        hh_data = group.hhData()
        import_from_net = hh_data.get('import-net')
        export_to_net = hh_data.get('export-net')
        import_from_gen = hh_data.get('import-gen')
        export_to_gen = hh_data.get('export-gen')
        for i in range(len(import_from_net)):
            if description == SiteGroup.EXPORT_NET_GT_IMPORT_GEN:
                if export_to_net[i] <= import_from_gen[i]:
                    msg = "Bogus dude! Snag " + str(site_snag.getId()) + " num supplies " + str(group.getSupplies().size()) + " site " + str(site.getId()) + " " + site.getName() + " Export to net " + str(export_to_net[i]) + " is less than or equal to import from gen " + str(import_from_gen[i]) + " from " + site_snag.getStartDate().toString() + " to " + site_snag.getFinishDate().toString()
                    pw.println(msg)
                    summary.append(msg)
                else:
                    pw.println("Genuine")
            elif description == SiteGroup.EXPORT_GEN_GT_IMPORT:
                pass
            else:
                summary.append("Description not recognized.")
pw.println('')
pw.println('Summary')
for line in summary:
    pw.println(line)
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[167]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies HH Data Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = MonadDate.getCalendar()
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />

                <title>Chellow &gt; CSV Supplies HH Data</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Supplies HH Data'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/169/output/">
                    <fieldset>
                        <legend>Download HH Data</legend>
<br/>
<select name="measurement-class">
                        <option value="all">
                                    All
                        </option>
                        <option value="hh">
                                    HH
                        </option>
                        <option value="nhh">
                                    NHH
                        </option>
                        </select>

<xsl:value-of select="' '"/><select name="is-import">
                        <option value="true">
                                    Import
                        </option>
                        <option value="false">
                                    Export
                        </option>
                        </select>
<xsl:value-of select="' '"/><select name="is-kwh">
                        <option value="true">
                                    kWh
                        </option>
                        <option value="false">
                                    kVArh
                        </option>
                        </select>
                        <xsl:value-of select="' for '"/>
                        <input name="months" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='months']">
                                <xsl:value-of select="/source/request/parameter[@name='months']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
                        <xsl:value-of select="' month(s) finishing at the end of '"/>
<input name="end-year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                    <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[169]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies HH Data]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from java.util import Calendar, GregorianCalendar, TimeZone, Locale
from java.text import DateFormat
from java.util.zip import ZipOutputStream, ZipEntry
from java.io import OutputStreamWriter, PrintWriter
from org.hibernate import CacheMode, ScrollMode
from net.sf.chellow.physical import HhStartDate, MpanCore
from java.lang import System, Long
from net.sf.chellow.physical import Channel, Supply

end_year = inv.getInteger('end-year')
end_month = inv.getInteger('end-month')
months = inv.getInteger('months')
is_import = inv.getBoolean('is-import')
is_kwh = inv.getBoolean('is-kwh')

if not inv.isValid():
    raise UserException()

cal = MonadDate.getCalendar()
cal.clear()
cal.set(Calendar.YEAR, end_year)
cal.set(Calendar.MONTH, end_month - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finishDate = cal.getTime()

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
startDate = cal.getTime()

dateFormat = DateFormat.getDateInstance(DateFormat.LONG, Locale.UK)
dateFormat.applyLocalizedPattern("yyyy-MM-dd")
dateFormat.setCalendar(cal)

if inv.hasParameter('measurement-class'):
    measurement_class = inv.getString('measurement-class')
else:
    measurement_class = 'all'

if measurement_class == 'all':
    clause = ' '
elif measurement_class == 'hh':
    clause = " and generation.pc.code = 0"
elif measurement_class == 'nhh':
    clause = " and generation.pc.code != 0"
else:
    raise UserException("I don't recognize the measurement class.")

inv.getResponse().setContentType('application/zip')
inv.getResponse().setHeader('Content-Disposition', 'filename=output.zip;')
sout = inv.getResponse().getOutputStream()
zout = ZipOutputStream(sout)
pw = PrintWriter(OutputStreamWriter(zout, 'UTF-8'))

#inv.getResponse().setContentType('text/csv')
#inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="report.csv"')
#pw = inv.getResponse().getWriter()
#pw.println('hello')
#pw.flush()

if inv.hasParameter('supply-id'):
    supply_id = inv.getLong('supply-id')
    supplies = Hiber.session().createQuery("from Supply supply where supply = :supply").setEntity('supply', Supply.getSupply(supply_id)).scroll()
else:
    supplies = Hiber.session().createQuery("select distinct generation.supply from SupplyGeneration generation where (generation.finishDate.date is null or generation.finishDate.date >= :startDate) and generation.startDate.date <= :finishDate" + clause).setTimestamp("startDate", startDate).setTimestamp("finishDate", finishDate).scroll()
    
hh_data_query = Hiber.session().createQuery("select datum.value, datum.startDate.date from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate and datum.channel.isImport = :isImport and datum.channel.isKwh = :isKwh order by datum.startDate.date").setTimestamp("startDate", startDate).setTimestamp("finishDate", finishDate).setBoolean('isImport', is_import).setBoolean('isKwh', is_kwh)

while supplies.next():
    supply = supplies.get(0)
    generation = supply.getGeneration(HhStartDate(finishDate))
    if generation == None or generation.getImportMpan() == None:
        mpanCoreStr = "NA"
    else:
        mpanCoreStr = generation.getImportMpan().getCore().toString()
    zout.putNextEntry(ZipEntry(mpanCoreStr + '_' + str(supply.getId()) + '.csv'))
    pw.print("MPAN Core,Date,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48")
    currentDate = HhStartDate.roundUp(startDate)
    hhData = hh_data_query.setEntity("supply", supply).scroll()
    datumStartDate = None
    datumValue = None
    while not currentDate.getDate().after(finishDate):
        cal.setTime(currentDate.getDate())
        if cal.get(Calendar.HOUR_OF_DAY) == 0 and cal.get(Calendar.MINUTE) == 0:
            pw.print("\r\n" + mpanCoreStr + "," + dateFormat.format(currentDate.getDate()))
        pw.print(",")
        if (datumStartDate == None or datumStartDate.before(currentDate.getDate())) and hhData.next():
            datumValue = hhData.get(0).toString()
            datumStartDate = hhData.get(1)
        if datumStartDate is not None and datumStartDate.getTime() == currentDate.getDate().getTime():
            pw.print(datumValue)
        currentDate = currentDate.getNext()
    hhData.close()
    Hiber.session().clear()
    pw.flush()
supplies.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[171]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Admin: System]]></value>
        <value><![CDATA[from java.text import DecimalFormat
from java.lang import Runtime, System, Thread
from java.io import StringWriter, InputStreamReader
from net.sf.chellow.monad import Hiber, Monad
from java.lang.management import OperatingSystemMXBean, ManagementFactory
from com.jezhumble.javasysmon import JavaSysMon
from net.sf.chellow.ui import ContextListener

interrupt_id = None
if inv.getRequest().getMethod() == "POST":
    if inv.hasParameter('interrupt'):
        interrupt_id = inv.getLong('thread-id')

df = DecimalFormat("###,###,###,###,##0")
runtime = Runtime.getRuntime()
source.setAttribute("free-memory", df.format(runtime.freeMemory()))
source.setAttribute("max-memory", df.format(runtime.maxMemory()))
source.setAttribute("total-memory", df.format(runtime.totalMemory()))
source.setAttribute("available-processors", str(runtime.availableProcessors()))

source.setAttribute("system-load-average", str(ManagementFactory.getOperatingSystemMXBean().getSystemLoadAverage()))

mon = JavaSysMon()
source.setAttribute('cpu-frequency-in-hz', df.format(mon.cpuFrequencyInHz()))
source.setAttribute('current-pid', df.format(mon.currentPid()))
source.setAttribute('num-cpus', df.format(mon.numCpus()))
source.setAttribute('os-name', mon.osName())
source.setAttribute('uptime-in-seconds', df.format(mon.uptimeInSeconds()))
cpu = mon.cpuTimes()
source.setAttribute('idle-millis', df.format(cpu.getIdleMillis()))
source.setAttribute('system-millis', df.format(cpu.getSystemMillis()))
source.setAttribute('total-millis', df.format(cpu.getTotalMillis()))
source.setAttribute('user-millis', df.format(cpu.getUserMillis()))

props = doc.createElement('properties')
source.appendChild(props)
sw = StringWriter()
System.getProperties().store(sw, None)
props.setTextContent(sw.toString())

req_map = dict([[entry.getKey(), entry.getValue()] for entry in inv.getMonad().getServletConfig().getServletContext().getAttribute('net.sf.chellow.request_map').entrySet()])

for entry in Thread.getAllStackTraces().entrySet():
    thread_element = doc.createElement('thread')
    source.appendChild(thread_element)
    thread = entry.getKey()

    if thread.getId() == interrupt_id:
        thread.interrupt()

    trace = ''
    for trace_item in entry.getValue():
        trace = trace + trace_item.toString() + "\r"
    thread_element.setTextContent(trace)
    thread_element.setAttribute('id', str(thread.getId()))
    thread_element.setAttribute('name', thread.getName())
    thread_element.setAttribute('is-interrupted', str(thread.isInterrupted()))
    thread_element.setAttribute('status', thread.getState().toString())
    thread_element.setAttribute('request', req_map.get(thread.getId()))

con = Hiber.session().connection()
db_metadata = con.getMetaData()
source.setAttribute("db-product-name", db_metadata.getDatabaseProductName())
source.setAttribute("db-product-version", db_metadata.getDatabaseProductVersion())
source.setAttribute("db-driver-name", db_metadata.getDriverName())
source.setAttribute("db-driver-version", db_metadata.getDriverVersion())
istream = InputStreamReader(Monad.getContext().getResource("/WEB-INF/VERSION").openStream(), "UTF-8")
c = istream.read()
sr = StringWriter()
while c != -1:
    sr.write(c)
    c = istream.read()
source.setAttribute("chellow-version", sr.toString())

source.setAttribute('transaction-isolation', str(con.getTransactionIsolation()))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; System</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'System'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
<p><a href=".">Refresh</a></p>
<p>Chellow Version
                    <xsl:value-of
                        select="/source/@chellow-version" /></p>
                <table style="text-align: right">
                    <caption>JVM memory (bytes)</caption>
                    <tr>
                        <th>Max</th>
                        <td>
                            <xsl:value-of select="/source/@max-memory" />
                        </td>
                    </tr>
                    <tr>
                        <th>Total</th>
                        <td>
                            <xsl:value-of
                                select="/source/@total-memory" />
                        </td>
                    </tr>
                    <tr>
                        <th>Free</th>
                        <td>
                            <xsl:value-of select="/source/@free-memory" />
                        </td>
                    </tr>
                </table>
                <br/>
                <table>
                <tr>
                  <td>Available Processors</td>
                  <td><xsl:value-of select="/source/@available-processors"/></td>
                </tr>
                <tr>
                  <td>System Load Average</td>
                  <td><xsl:value-of select="/source/@system-load-average"/></td>
                </tr>
                </table>
<br/>
    <table><caption>JavaSysMon</caption>
      <tr>
          <td>CPU Frequency (Hz)</td>
          <td><xsl:value-of select="/source/@cpu-frequency-in-hz"/></td>
      </tr>
      <tr>
          <td>Current PID</td>
          <td><xsl:value-of select="/source/@current-pid"/></td>
      </tr>
      <tr>
          <td>Number Of CPU cores</td>
          <td><xsl:value-of select="/source/@num-cpus"/></td>
      </tr>
      <tr>
          <td>OS Name</td>
          <td><xsl:value-of select="/source/@os-name"/></td>
      </tr>
      <tr>
          <td>Uptime (s)</td>
          <td><xsl:value-of select="/source/@uptime-in-seconds"/></td>
      </tr>
      <tr>
          <td>Idle ms</td>
          <td><xsl:value-of select="/source/@idle-millis"/></td>
      </tr>
      <tr>
          <td>System ms</td>
          <td><xsl:value-of select="/source/@system-millis"/></td>
      </tr>
      <tr>
          <td>Total ms</td>
          <td><xsl:value-of select="/source/@total-millis"/></td>
      </tr>
      <tr>
          <td>User ms</td>
          <td><xsl:value-of select="/source/@user-millis"/></td>
      </tr>
    </table>

<br/>

<table><caption>All Live Threads</caption>
<tr><th>Id</th><th>Name</th><th>Interrupted?</th><th>Status</th><th>Request</th><th>Stack Trace</th>
</tr>
<xsl:for-each select="/source/thread">
<tr>
   <td><xsl:value-of select="@id"/></td>
   <td><xsl:value-of select="@name"/></td>
   <td><xsl:value-of select="@is-interrupted"/>
       <xsl:if test="@is-interrupted='False'">
       <form method="post" action=".">
           <input type="hidden" name="thread-id" value="{@id}" />
           <input type="submit" name="interrupt" value="Interrupt" />
       </form> 
       </xsl:if>
   </td>
   <td><xsl:value-of select="@status"/></td>
   <td><xsl:value-of select="@request"/></td>
   <td><pre><xsl:value-of select="."/></pre></td>
</tr>
</xsl:for-each>
</table>

<h4>Java System Properties</h4>

<pre><xsl:value-of select="/source/properties"/></pre>

<h4>DBMS Properties</h4>

<table>
<tr><th>Product Name</th><td><xsl:value-of select="/source/@db-product-name" /></td></tr>
<tr><th>Product Version</th><td><xsl:value-of select="/source/@db-product-version"/></td></tr>
<tr><th>Driver Name</th><td><xsl:value-of select="/source/@db-driver-name"/></td></tr>
<tr><th>Driver Version</th><td><xsl:value-of select="/source/@db-driver-version"/></td></tr>
<tr><th>Transaction Isolation (of current connection)</th><td><xsl:value-of select="/source/@transaction-isolation"/></td></tr>
</table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[173]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Contract Rate Script]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import RateScript

script_id = inv.getLong('rate-script-id')
script = RateScript.getRateScript(script_id)
source.appendChild(script.toXml(doc, XmlTree('contract', XmlTree('party'))))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/rate-script/hhdc-contract/@name" />
                    &gt; Rate Script
                    <xsl:value-of select="/source/rate-script/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/113/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={/source/rate-script/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/rate-script/hhdc-contract/@name" />
                    </a>
                    &gt; Rate Script
                    <xsl:value-of
                        select="concat(/source/rate-script/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/hhdc-contracts/{/source/rate-script/hhdc-contract/@id}/rate-scripts/{/source/rate-script/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Start Date</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/rate-script/hh-start-date[@label='start']/@year, '-', /source/rate-script/hh-start-date[@label='start']/@month, '-', /source/rate-script/hh-start-date[@label='start']/@day, ' ', /source/rate-script/hh-start-date[@label='start']/@hour, ':', /source/rate-script/hh-start-date[@label='start']/@minute)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Finish Date</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/rate-script/hh-start-date[@label='finish']">
                                    <xsl:value-of
                                        select="concat(/source/rate-script/hh-start-date[@label='finish']/@year, '-', /source/rate-script/hh-start-date[@label='finish']/@month, '-', /source/rate-script/hh-start-date[@label='finish']/@day, ' ', /source/rate-script/hh-start-date[@label='finish']/@hour, ':', /source/rate-script/hh-start-date[@label='finish']/@minute)" />
                                </xsl:when>
                                <xsl:otherwise>Ongoing</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                </table>

                <h2>Script</h2>

                <pre>
                    <xsl:value-of select="/source/rate-script/@script" />
                </pre>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[175]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies TRIAD Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
if cal.get(Calendar.MONTH) < Calendar.MARCH:
    cal.add(Calendar.YEAR, -1)
source.setAttribute('year', str(cal.get(Calendar.YEAR)))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/style/" />

                <title>Chellow &gt; CSV Supplies TRIAD</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Supplies TRIAD'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/41/output/">
                    <fieldset>
                        <legend>Download Supplies TRIAD CSV</legend>
                        <br/>
                        <xsl:value-of select="'For financial year ending March '"/>
                        <input name="year" value="{/source/@year}" size="4" maxlength="4"/>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                        <input type="reset" value="Reset"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[177]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies Monthly Duration]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.util import Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate, MpanCore, Site, Supply
from java.text import SimpleDateFormat, DecimalFormat
from java.lang import Math, System
from net.sf.chellow.billing import SupplierContract, NonCoreContract
from org.python.util import PythonInterpreter

year = inv.getInteger("end-year")
month = inv.getInteger("end-month")
months = inv.getInteger("months")

if not inv.isValid():
    raise UserException()

computer = NonCoreContract.getNonCoreContract('computer')

cal = MonadDate.getCalendar()
cal.clear()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())
cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
start_date = HhStartDate(cal.getTime())

comterp = computer.callFunction('create_comterp', [])

field_names = ['supply-name', 'source-code', 'generator-type', 'month', 'pc-code', 'msn', 'site-code', 'site-name', 'metering-type', 'import-mpan-core', 'metered-import-kwh', 'metered-import-net-gbp', 'metered-import-estimated-kwh', 'billed-import-apportioned-kwh', 'billed-import-apportioned-net-gbp', 'billed-import-raw-kwh', 'billed-import-raw-net-gbp', 'export-mpan-core', 'metered-export-kwh', 'metered-export-estimated-kwh', 'billed-export-apportioned-kwh', 'billed-export-apportioned-net-gbp', 'billed-export-raw-kwh', 'billed-export-raw-net-gbp', 'problem', 'timestamp']

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()
pw.println('supply-id,' + ','.join(field_names))
pw.flush()

month_format = SimpleDateFormat("yyyy-MM-dd")
month_format.setCalendar(cal)

if inv.hasParameter('supply-id'):
    supply_id = inv.getLong('supply-id')
    supplies_query = Hiber.session().createQuery("select distinct generation.supply from SupplyGeneration generation where generation.supply = :supply and generation.startDate.date <= :finishDate and (generation.finishDate is null or generation.finishDate.date >= :startDate)").setEntity('supply', Supply.getSupply(supply_id))
else:
    supplies_query = Hiber.session().createQuery("select distinct generation.supply from SupplyGeneration generation where generation.startDate.date <= :finishDate and (generation.finishDate is null or generation.finishDate.date >= :startDate)")

#kwh_query = Hiber.session().createQuery("select sum(cast(datum.value as double)) from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isKwh is true and datum.channel.isImport = :isImport and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate")


kwh_query = Hiber.session().createQuery("select datum.value from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isKwh is true and datum.channel.isImport = :isImport and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate")

est_kwh_query = Hiber.session().createQuery("select sum(cast(datum.value as double)) from HhDatum datum where datum.status = 'E' and datum.channel.supplyGeneration.supply = :supply and datum.channel.isKwh is true and datum.channel.isImport = :isImport and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate")

site_query = Hiber.session().createQuery("select ssgen.site from SiteSupplyGeneration ssgen where ssgen.supplyGeneration = :supplyGeneration and ssgen.isPhysical is true")

apportioned_bill_query = Hiber.session().createQuery("from Bill bill where bill.supply = :supply and bill.startDate.date <= :finishDate and bill.finishDate.date >= :startDate")

raw_bill_query = Hiber.session().createQuery("from Bill bill where bill.supply = :supply and bill.finishDate.date <= :finishDate and bill.finishDate.date >= :startDate")

forecast_date = comterp.get('forecast_date')()

for i in range(months):
    cal.setTime(start_date.getDate())
    cal.add(Calendar.MONTH, i)
    month_start = HhStartDate(cal.getTime())
    cal.add(Calendar.MONTH, 1)
    cal.add(Calendar.MINUTE, -30)
    month_finish = HhStartDate(cal.getTime())
    supplies = supplies_query.setTimestamp('startDate', month_start.getDate()).setTimestamp('finishDate', month_finish.getDate()).scroll()

    month_str = month_format.format(Date(month_finish.getDate().getTime() - 1))

    kwh_query.setTimestamp('startDate', month_start.getDate()).setTimestamp('finishDate', month_finish.getDate())
    est_kwh_query.setTimestamp('startDate', month_start.getDate()).setTimestamp('finishDate', month_finish.getDate())

    while supplies.next():
        supply = supplies.get(0)

        generator_type = supply.getGeneratorType()
        if generator_type is None:
            generator_type = ''
        else:
            generator_type = generator_type.getCode()

        source_code = supply.getSource().getCode()
        generations = supply.getGenerations(month_start, month_finish)
        generation = generations.get(len(generations) - 1)

        pc_code = str(generation.getPc())
        if pc_code == '00':
            metering_type = 'hh'
        elif generation.getChannels().size() > 0:
            metering_type = 'amr'
        elif generation.getMtc().getMeterType().getCode() in ['UM', 'PH']:
            metering_type = 'unmetered'
        else:
            metering_type = 'nhh'

        site = site_query.setEntity('supplyGeneration', generation).uniqueResult()
        kwh_query.setEntity('supply', supply)
        est_kwh_query.setEntity('supply', supply)

        values = {'supply-name': supply.getName(), 'source-code': source_code, 'generator-type': generator_type, 'month': month_str, 'pc-code': pc_code, 'msn': generation.getMeterSerialNumber(), 'site-code': site.getCode(), 'site-name': site.getName(), 'metering-type': metering_type, 'problem': ''}

        pw.print(str(supply.getId()) + ',')

        for polarity, pol_name in [(True, 'import'), (False, 'export')]:
            mpan = generation.getMpan(polarity)
            if mpan is None:
                mpan_core = None
            else:
                mpan_core = mpan.getCore()

            values[pol_name + '-mpan-core'] = mpan_core
            kwh = 0
            est_kwh = 0

            if metering_type in ['hh', 'amr']:
                est_kwh = est_kwh_query.setBoolean('isImport', polarity).uniqueResult()
                if est_kwh is None:
                    est_kwh = 0

            if not (polarity and source_code in ['net', 'gen-net']):
                kwh = 0
                kwhs = kwh_query.setBoolean('isImport', polarity).scroll()
                while kwhs.next():
                    kwh += kwhs.get(0).doubleValue()


            values['metered-' + pol_name + '-estimated-kwh'] = est_kwh
            values['metered-' + pol_name + '-kwh'] = kwh
            values['metered-' + pol_name + '-estimated-net-gbp'] = 0
            values['metered-' + pol_name + '-net-gbp'] = 0
            values['billed-' + pol_name + '-kwh'] = 0
            values['billed-' + pol_name + '-net-gbp'] = 0
            values['billed-' + pol_name + '-apportioned-kwh'] = 0
            values['billed-' + pol_name + '-apportioned-net-gbp'] = 0
            values['billed-' + pol_name + '-raw-kwh'] = 0
            values['billed-' + pol_name + '-raw-net-gbp'] = 0

        #p w.println('starting generations, ' + str(System.currentTimeMillis()))

        for bill in apportioned_bill_query.setEntity('supply', supply).setTimestamp('startDate', month_start.getDate()).setTimestamp('finishDate', month_finish.getDate()).list():
            bill_start = bill.getStartDate().getDate().getTime()
            bill_finish = bill.getFinishDate().getDate().getTime()
            bill_duration = bill_finish - bill_start + (30 * 60 * 1000)
            overlap_duration = min(bill_finish, month_finish.getDate().getTime()) + (30 * 60 * 1000) - max(bill_start, month_start.getDate().getTime())
            overlap_proportion = float(overlap_duration) / float(bill_duration)
            values['billed-import-apportioned-net-gbp'] += overlap_proportion * bill.getNet().doubleValue()
            values['billed-import-apportioned-kwh'] += overlap_proportion * bill.getKwh().doubleValue()

        for bill in raw_bill_query.setEntity('supply', supply).setTimestamp('startDate', month_start.getDate()).setTimestamp('finishDate', month_finish.getDate()).list():
            values['billed-import-raw-net-gbp'] += bill.getNet().doubleValue()
            values['billed-import-raw-kwh'] += bill.getKwh().doubleValue()

        for generation in generations:
            if generation.getStartDate().after(month_start):
                chunk_start = generation.getStartDate()
            else:
                chunk_start = month_start
            if HhStartDate.isAfter(generation.getFinishDate(), month_finish):
                chunk_finish = month_finish
            else:
                chunk_finish = generation.getFinishDate()

            import_mpan = generation.getImportMpan()
            if import_mpan is None:
                continue

            chunk_start_millis = chunk_start.getDate().getTime()
            chunk_finish_millis = chunk_finish.getDate().getTime()

            supplier_contract = import_mpan.getSupplierContract()


            if source_code in ['net', 'gen-net', '3rd-party']:
                #p w.println("starting vbill, " + str(System.currentTimeMillis()))
                supply_source = comterp.get('supply_source')(forecast_date, comterp, pw)

                #p w.println("starting init from mpan, " + str(System.currentTimeMillis()))
                supply_source.init_from_mpan(chunk_start, chunk_finish, import_mpan)
                #p w.println('sum msp kwh ' + str(supply_source.summary['sum-msp-kwh']))
                values['metered-import-kwh'] += supply_source.summary['sum-msp-kwh']

                #p w.println("finished init from mpan, " + str(System.currentTimeMillis()))
                import_vb_function = supply_source.contract_function(supplier_contract, 'import_virtual_bill')
                if import_vb_function is None:
                    values['problem'] += "Can't find the import_virtual_bill function in the supplier contract. "
                else:
                    v_bill = import_vb_function(supply_source)
                    #p w.println("finishing vbill, " + str(System.currentTimeMillis()))
                    if supply_source.pc_code != '00' and not supply_source.is_amr:
                        #month_data['used-kwh'] += supply_source.summary['sum-msp-kwh']
                        pass

                    if 'net-gbp' in v_bill:
                        values['metered-import-net-gbp'] += v_bill['net-gbp']
                    else:
                        values['problem'] += 'For the supply ' + import_mpan.toString() + ' the virtual bill ' + str(v_bill) + ' from the contract ' + supplier_contract.getName() + ' does not contain the net-gbp key.'
                    values['problem'] += supply_source.summary['problem']
                #p w.println("done virtual bill , " + str(System.currentTimeMillis()))

                hhdc_contract = generation.getHhdcContract()
                if hhdc_contract is not None:
                    hhdc_bill = supply_source.contract_function(hhdc_contract, 'virtual_bill')(supply_source)
                    values['metered-import-net-gbp'] += hhdc_bill['net-gbp']

                mop_contract = generation.getMopContract()
                if mop_contract is not None:
                    mop_func = supply_source.contract_function(mop_contract, 'virtual_bill')
                    if mop_func is None:
                        values['problem'] += " MOP virtual_bill function can't be found."
                    else:
                        mop_bill = mop_func(supply_source)
                        values['metered-import-net-gbp'] += mop_bill['net-gbp']
                        if 'problem' in mop_bill:
                            if len(mop_bill['problem']) > 0:
                                values['problem'] += " MOP virtual bill problem: " + mop_bill['problem']
                        else:
                            values['problem'] += " 'problem' field can't be found in MOP virtual bill."

            #pw.println("finishing generation , " + str(System.currentTimeMillis()))
        values['timestamp'] = System.currentTimeMillis()
        pw.println(','.join('"' + str(values[name]) + '"' for name in field_names))
        pw.flush()
        Hiber.session().clear()
        #pw.println("finishing supply " + str(supply.getId()) + ', ' + str(System.currentTimeMillis()))
    supplies.close()
    #pw.println("finishing site " + str(System.currentTimeMillis() - timing))
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[179]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Sites TRIAD Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
if cal.get(Calendar.MONTH) < Calendar.MARCH:
    cal.add(Calendar.YEAR, -1)
source.setAttribute('year', str(cal.get(Calendar.YEAR)))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/style/" />

                <title>Chellow &gt; CSV Sites TRIAD</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Sites TRIAD'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/181/output/">
                    <fieldset>
                        <legend>Download Sites TRIAD CSV</legend>
                        <br/>
                        <xsl:value-of select="'For financial year ending March '"/>
                        <input name="year" value="{/source/@year}" size="4" maxlength="4"/>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                        <input type="reset" value="Reset"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[181]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Sites TRIAD]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import HhStartDate, SupplyGeneration, Supply
from java.util import Calendar
from net.sf.chellow.billing import NonCoreContract, Dno

computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
year = inv.getInteger('year')
if not inv.isValid():
    raise UserException()

pw = inv.getResponse().getWriter()

cal = MonadDate.getCalendar()
cal.clear()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, Calendar.APRIL)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MINUTE, -30)
march_finish = HhStartDate(cal.getTime())

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1)
march_start = HhStartDate(cal.getTime())

triad_contract = NonCoreContract.getNonCoreContract('TRIAD')

pw.println("Site Code, Site Name, Displaced TRIAD 1 Date, Displaced TRIAD 1 MSP kW, Displaced TRIAD LAF, Displaced TRIAD 1 GSP kW, Displaced TRIAD 2 Date, Displaced TRIAD 2 MSP kW, Displaced TRIAD 2 LAF, Displaced TRIAD 2 GSP kW, Displaced TRIAD 3 Date, Displaced TRIAD 3 MSP kW, Displaced TRIAD 3 LAF, Displaced TRIAD 3 GSP kW, Displaced GSP kW, Displaced Rate GBP / kW, GBP")
pw.flush()

forecast_date = comterp.get('forecast_date')()

if inv.hasParameter('site-id'):
    site_id = inv.getLong('site-id')
    site_query = Hiber.session().createQuery("from Site site where site = :site").setEntity('site', Site.getSite(site_id))
else:
    site_query = Hiber.session().createQuery("select distinct ssgen.site from SiteSupplyGeneration ssgen where ssgen.supplyGeneration.supply.source.code in ('gen', 'gen-net') and ssgen.supplyGeneration.startDate.date <= :marchFinish and (ssgen.supplyGeneration.finishDate is null or ssgen.supplyGeneration.finishDate.date >= :marchStart) order by ssgen.site.code").setTimestamp('marchFinish', march_finish.getDate()).setTimestamp('marchStart', march_start.getDate())

sites = site_query.scroll()
while sites.next():
    site = sites.get(0)
    for site_group in site.groups(march_start, march_finish, True):
        if site_group.getFrom().after(march_start):
            chunk_start = site_group.getStartDate()
        else:
            chunk_start = march_start
        if not site_group.getTo().before(march_finish):
            chunk_finish = march_finish
        else:
            continue

        pw.print('"' + site.getCode() + '","' + site.getName() + '"')

        displaced_mpan = comterp.get('displaced_mpan')(site_group, chunk_start, chunk_finish)
        if displaced_mpan is None:
            continue

        site_ds = comterp.get('site_source')(site, chunk_start, chunk_finish, forecast_date, comterp, pw)
        site_ds.init_from_mpan(displaced_mpan)

        dno_contract = comterp.get('get_dno_contract')(site_ds.dno_code, chunk_finish, pw)
        bill = {}
        site_ds.contract_function(triad_contract, 'triad')(bill, dno_contract, chunk_start, chunk_finish, site_ds)
        values = []
        for i in range(3):
            triad_prefix = 'triad-actual-' + str(i)
            for suffix in ['-date', '-msp-kw', '-laf', '-gsp-kw']:
                values.append(bill[triad_prefix + suffix])

        values += [bill['triad-actual-' + suf] for suf in ['gsp-kw', 'rate', 'gbp']]

        for value in values:
            pw.print("," + str(value))
        pw.println('')
        pw.flush()
    Hiber().session().clear()
sites.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[183]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Sites HH Data]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.lang import System
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate
from java.util.zip import ZipOutputStream, ZipEntry
from java.io import OutputStreamWriter, PrintWriter
from java.text import SimpleDateFormat

year = inv.getInteger("year")
month = inv.getInteger("month")
months = inv.getInteger("months")

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
start_date = HhStartDate(cal.getTime())

inv.getResponse().setContentType('application/zip')
inv.getResponse().setHeader('Content-Disposition', 'filename=output.zip;')
sout = inv.getResponse().getOutputStream()
zout = ZipOutputStream(sout)
pw = PrintWriter(OutputStreamWriter(zout, 'UTF-8'))

#inv.getResponse().setContentType("text/csv")
#inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
#pw = inv.getResponse().getWriter()

date_format = SimpleDateFormat("yyyy-MM-dd")
date_format.setCalendar(cal)
title_format = SimpleDateFormat("yyyy-MM-dd'T'hhmm'Z'")
title_format.setCalendar(cal)

sites = Hiber.session().createQuery("from Site site order by site.code").scroll()
#sites.last()
#sites.previous()
while sites.next():
    site = sites.get(0)
    for group in site.groups(start_date, finish_date, True):
        hh_date = start_date
        zout.putNextEntry(ZipEntry(site.getCode() + '_' + title_format.format(group.getFrom().getDate()) + '.csv'))
        pw.print("Site Code, Site Name, Associated Site Codes, Sources, Generator Types, From, To, Type,Date,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48")
        pw.flush()
        associates = ''
        group_sites = group.getSites()
        for i in range(1, len(group_sites)):
            associates = associates + group_sites[i].getCode() + ' '

        sources = []
        gen_types = []
        for a_supply in group.getSupplies():
            source = a_supply.getSource().getCode()
            if source not in sources:
                sources.append(source)
            gen_type = a_supply.getGeneratorType()
            if gen_type is not None:
                gen_type = gen_type.getCode()
                if gen_type not in gen_types:
                    gen_types.append(gen_type)
        sources.sort()
        sources_str = ''
        for source in sources:
            sources_str = sources_str + source + ' '
        gen_types.sort()
        gen_types_str = ''
        for gen_type in gen_types:
            gen_types_str = gen_types_str + gen_type + ''
        
        map = group.hhData()
        import_from_net = map.get('import-net')
        export_to_net = map.get('export-net')
        import_from_gen = map.get('import-gen')
        export_to_gen = map.get('export-gen')
        for i in range(len(import_from_net)):
            cal.setTime(hh_date.getDate())
            if cal.get(Calendar.HOUR_OF_DAY) == 0 and cal.get(Calendar.MINUTE) == 0:
                pw.print("\r\n" + site.getCode() + ',' + site.getName() + ',' + associates + ',' + sources_str + ',' + gen_types_str + ',' + group.getFrom().toString() + ',' + group.getTo().toString() + ',used,' + date_format.format(hh_date.getDate()))
            exported_kwh = export_to_net[i]
            imported_kwh = import_from_net[i]
            generated_kwh = import_from_gen[i]
            parasitic_kwh = export_to_gen[i]
            displaced_kwh = generated_kwh - exported_kwh - parasitic_kwh
            used_kwh = imported_kwh + displaced_kwh
            pw.print(',' + str(round(used_kwh, 2)))
            hh_date = hh_date.getNext()
        pw.flush()
    Hiber.session().clear()
sites.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[185]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MOP Contracts]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

contracts_element = doc.createElement('contracts')
source.appendChild(contracts_element)
for contract in Hiber.session().createQuery("from MopContract contract order by contract.startRateScript.startDate.date").list():
    contract_element = contract.toXml(doc, XmlTree('party'))
    contracts_element.appendChild(contract_element)
    start_rate_script = contract.getStartRateScript()
    start_rate_script.setLabel('start')
    contract_element.appendChild(start_rate_script.toXml(doc))
    finish_rate_script = contract.getFinishRateScript()
    finish_rate_script.setLabel('finish')
    contract_element.appendChild(finish_rate_script.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; MOP Contracts
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'MOP Contracts ['" />
                    <a
                        href="{/source/request/@context-path}/mop-contracts/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Start Date</th>
                            <th>Finish Date</th>
                            <th>MOP</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/contracts/mop-contract">
                            <tr>
                                <td>
<a href="{/source/request/@context-path}/reports/107/output/?mop-contract-id={@id}">
                                    <xsl:value-of select="@name" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(rate-script[@label='start']/hh-start-date[@label='start']/@year, '-', rate-script[@label='start']/hh-start-date[@label='start']/@month, '-', rate-script[@label='start']/hh-start-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="rate-script[@label='finish']/hh-start-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(rate-script[@label='finish']/hh-start-date[@label='finish']/@year, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@month, '-', rate-script[@label='finish']/hh-start-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/47/output/?provider-id={provider/@id}">
                                        <xsl:value-of
                                            select="provider/@name" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[187]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies Patched HH Data]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from java.util import Calendar, GregorianCalendar, TimeZone, Locale
from java.text import DateFormat
from java.util.zip import ZipOutputStream, ZipEntry
from java.io import OutputStreamWriter, PrintWriter
from org.hibernate import CacheMode, ScrollMode
from net.sf.chellow.physical import HhStartDate
from java.lang import System, Long
from net.sf.chellow.physical import Channel

end_year = inv.getInteger('end-year')
end_month = inv.getInteger('end-month')
months = inv.getInteger('months')
measurement_class = inv.getString('measurement-class')
if not inv.isValid():
    raise UserException()
cal = MonadDate.getCalendar()
cal.clear()
cal.set(Calendar.YEAR, end_year)
cal.set(Calendar.MONTH, end_month - 1)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finishDate = cal.getTime()

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
startDate = cal.getTime()

dateFormat = DateFormat.getDateInstance(DateFormat.LONG, Locale.UK)
dateFormat.applyLocalizedPattern("yyyy-MM-dd")
dateFormat.setCalendar(cal)

if measurement_class == 'all':
    clause = ''
elif measurement_class == 'hh':
    clause = "and mpan.pc.code = 0"
elif measurement_class == 'nhh':
    clause = "and mpan.pc.code != 0"
else:
    raise UserException("I don't recognize the measurement class.")

inv.getResponse().setContentType('application/zip')
inv.getResponse().setHeader('Content-Disposition', 'filename=output.zip;')
sout = inv.getResponse().getOutputStream()
zout = ZipOutputStream(sout)
pw = PrintWriter(OutputStreamWriter(zout, 'UTF-8'))

#inv.getResponse().setContentType("text/csv")
#inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
#pw = inv.getResponse().getWriter()

summaries = []

supplies = Hiber.session().createQuery("select distinct generation.supply, generation.supply.id from SupplyGeneration generation join generation.mpans mpan where (generation.finishDate.date is null or generation.finishDate.date > :finishDate) " + clause + " order by generation.supply.id").setTimestamp("finishDate", finishDate).scroll()
#channels.last()
#channels.previous()
while supplies.next():
    supply = supplies.get(0)
    generation = supply.getGeneration(HhStartDate(finishDate))
    if generation == None or generation.getImportMpan() == None:
        mpanCoreStr = "NA"
    else:
        mpanCoreStr = generation.getImportMpan().getCore().toString()
    zout.putNextEntry(ZipEntry(mpanCoreStr + '_' + str(supply.getId()) + '.csv'))
    pw.print("MPAN Core,Date,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48")
    currentDate = HhStartDate.roundUp(startDate)
    hhData = Hiber.session().createQuery("select datum.value, datum.startDate.date from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.startDate.date >= :startDate and datum.startDate.date <= :finishDate and datum.channel.isImport is true and datum.channel.isKwh is true order by datum.startDate.date").setEntity("supply", supply).setTimestamp("startDate", startDate).setTimestamp("finishDate", finishDate).list()
    day_kwh = 0
    day_count = 0
    night_kwh = 0
    night_count = 0
    for row in hhData:
        datum_value = row[0].doubleValue()
        datum_end_date = row[1]
        cal.setTime(datum_end_date)
        decimal_hour = cal.get(Calendar.HOUR_OF_DAY) + cal.get(Calendar.MINUTE) / 60
        if decimal_hour > 0 and decimal_hour < 7.5:
            night_kwh = night_kwh + datum_value
            night_count = night_count + 1
        else:
            day_kwh = day_kwh + datum_value
            day_count = day_count + 1
    if day_count != 0:
        av_day_kwh = day_kwh / day_count
    else:
        av_day_kwh = 0
    if night_count != 0:
        av_night_kwh = night_kwh / night_count
    else:
        av_night_kwh = 0
    datumStartDate = None
    datumValue = None
    hh_data_count = 0
    total_kwh = 0
    while not currentDate.getDate().after(finishDate):
        cal.setTime(currentDate.getDate())
        if cal.get(Calendar.HOUR_OF_DAY) == 0 and cal.get(Calendar.MINUTE) == 30:
            pw.print("\r\n" + mpanCoreStr + "," + dateFormat.format(currentDate.getDate()))
        pw.print(",")
        if (datumStartDate == None or datumStartDate.before(currentDate.getDate())) and hh_data_count < len(hhData):
            row = hhData[hh_data_count]
            hh_data_count = hh_data_count + 1
            datumValue = row[0].doubleValue()
            datumStartDate = row[1]
        if datumStartDate is not None and datumStartDate.getTime() == currentDate.getDate().getTime():
            hh_val = datumValue
        else:
            decimal_hour = cal.get(Calendar.HOUR_OF_DAY) + cal.get(Calendar.MINUTE) / 60
            if decimal_hour > 0 and decimal_hour < 7.5:
                hh_val = av_night_kwh
            else:
                hh_val = av_day_kwh
        total_kwh = total_kwh + round(hh_val, 1)
        pw.print(str(round(hh_val, 1)))
        currentDate = currentDate.getNext()
    Hiber.session().clear()
    pw.flush()
    summaries.append(mpanCoreStr + ',' + str(round(total_kwh, 1)))
supplies.close()
zout.putNextEntry(ZipEntry('summary.csv'))
pw.println('MPAN Core,kWh')
for summary in summaries:
    pw.println(summary)
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[189]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Supplies Patched HH Data Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = MonadDate.getCalendar()
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; CSV Patched HH Data</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Patched HH Data'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/187/output/">
                    <fieldset>
                        <legend>Download HH Data</legend>
<br/>
<xsl:value-of select="'Measurement Class '"/><select name="measurement-class">
                        <option value="all">
                                    All
                        </option>
                        <option value="hh">
                                    HH
                        </option>
                        <option value="nhh">
                                    NHH
                        </option>
                        </select>
<br/>
<br/>
<p>
                        <xsl:value-of select="'For '"/>
                        <input name="months" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='months']">
                                <xsl:value-of select="/source/request/parameter[@name='months']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
                        <xsl:value-of select="' month(s) finishing at the end of '"/>
<input name="end-year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                    </p>
                    <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[191]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MOP Contract Batches]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import MopContract

contract_id = inv.getLong('mop-contract-id')
contract = MopContract.getMopContract(contract_id)
batches_element = doc.createElement('batches')
source.appendChild(batches_element)
batches_element.appendChild(contract.toXml(doc, XmlTree('party')))
source.appendChild(batches_element)
for batch in Hiber.session().createQuery("from Batch batch where batch.contract = :contract order by batch.reference").setEntity("contract", contract).list():
    batches_element.appendChild(batch.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; MOP Contracts &gt;
                    <xsl:value-of
                        select="/source/batches/mop-contract/@name" />
                    &gt; Batches
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/185/output/?mop-id={/source/batches/mop-contract/@id}">
                        <xsl:value-of select="'MOP Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/107/output/?mop-contract-id={/source/batches/mop-contract/@id}">
                        <xsl:value-of
                            select="/source/batches/mop-contract/@name" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Batches ['" />
                    <a
                        href="{/source/request/@context-path}/mop-contracts/{/source/batches/mop-contract/@id}/batches/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>Batches</caption>
                    <thead>
                        <tr>
                            <th>Reference</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/batches/batch">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/193/output/?batch-id={@id}">
                                        <xsl:value-of select="@reference" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[193]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MOP Contract Batch]]></value>
        <value><![CDATA[from java.io import StringReader
from java.util import Properties
from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import Batch
from net.sf.chellow.physical import Configuration
from net.sf.chellow.ui import Report

batch_id = inv.getLong('batch-id')
batch = Batch.getBatch(batch_id)
batch_element = batch.toXml(doc, XmlTree('contract', XmlTree('party')))
source.appendChild(batch_element)
bills = Hiber.session().createQuery("from Bill bill where bill.batch = :batch order by bill.reference, bill.startDate.date").setEntity("batch", batch).list()
for bill in bills:
    batch_element.appendChild(bill.toXml(doc, XmlTree("supply").put('type')))
source.setAttribute('bill-count', str(len(bills)))

config = Configuration.getConfiguration()
properties = Properties()
properties.load(StringReader(config.getProperties()))

for key in properties.propertyNames():
    if key.startswith('batch.report.'):
        batch_report_id = properties.get(key)
        if batch_report_id is not None:
            report = Report.getReport(int(batch_report_id))
            batch_element.appendChild(report.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; MOP Contracts &gt;
                    <xsl:value-of
                        select="/source/batch/mop-contract/@name" />
                    &gt; Batches &gt;
                    <xsl:value-of select="/source/batch/@reference" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/185/output/">
                        <xsl:value-of select="'MOP Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/107/output/?mop-contract-id={/source/batch/mop-contract/@id}">
                        <xsl:value-of
                            select="/source/batch/mop-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/191/output/?mop-contract-id={/source/batch/mop-contract/@id}">
                        <xsl:value-of select="'Batches'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/batch/@reference, ' [')" />
                    <a
                        href="{/source/request/@context-path}/mop-contracts/{/source/batch/mop-contract/@id}/batches/{/source/batch/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                  <tr>
                    <th>Reference</th>
                    <td><xsl:value-of select="/source/batch/@reference"/></td>
                  </tr>
                  <tr>
                    <th>Description</th>
                    <td><xsl:value-of select="/source/batch/@description"/></td>
                  </tr>
                  <tr>
                    <th>Number Of Bills</th>
                    <td><xsl:value-of select="/source/@bill-count"/></td>
                  </tr>
                  <xsl:if test="/source/batch/report">
                  <tr>
                    <th>Custom Reports</th>
                    <td>
                        <ul>
                        <xsl:for-each select="/source/batch/report">
                        <li><a
                        href="{/source/request/@context-path}/reports/{@id}/output/?batch-id={/source/batch/@id}">
<xsl:value-of select="@name"/></a></li>
                        </xsl:for-each>
                        </ul>
                    </td>
                  </tr>
                  </xsl:if>

                </table>
                <br/>
                <ul>
                    <li>[<a href="{/source/request/@context-path}/mop-contracts/{/source/batch/mop-contract/@id}/batches/{/source/batch/@id}/bill-imports/">Bill Imports</a>]</li>
                </ul>
                <table>
                    <caption>Bills [<a href="{/source/request/@context-path}/mop-contracts/{/source/batch/mop-contract/@id}/batches/{/source/batch/@id}/bills/">edit</a>]</caption>
                    <thead>
                        <tr>
                            <th>Edit</th>
                            <th>Reference</th>
                            <th>Supply</th>
                            <th>Account</th>
                            <th>Issue Date</th>
                            <th>From</th>
                            <th>To</th>
                            <th>kWh</th>
                            <th>Net</th>
                            <th>VAT</th>
                            <th>Gross</th>
                            <th>Type</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/batch/bill">
                            <tr>
                                <td>
                                [<a href="{/source/request/@context-path}/mop-contracts/{/source/batch/mop-contract/@id}/batches/{/source/batch/@id}/bills/{@id}/"><xsl:value-of select="'edit'" /></a>]
                                </td>
                                <td>
                                    <xsl:value-of select="@reference" />
                                </td>
                                <td>
                                <a href="{/source/request/@context-path}/reports/7/output/?supply-id={supply/@id}"><xsl:value-of select="'Supply'" /></a>
                                </td>
                                <td>
                                <xsl:value-of select="@account"/>
                                </td>
                                <td>
                                <xsl:value-of select="concat(date[@label='issue']/@year, '-', date[@label='issue']/@month, '-', date[@label='issue']/@day, ' ', date[@label='issue']/@hour, ':', date[@label='issue']/@minute)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day, ' ', hh-start-date[@label='start']/@hour, ':', hh-start-date[@label='start']/@minute)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day, ' ', hh-start-date[@label='finish']/@hour, ':', hh-start-date[@label='finish']/@minute)" />
                                </td>
                                <td>
                                    <xsl:value-of select="@kwh" />
                                </td>
                                <td>
                                    <xsl:value-of select="@net" />
                                </td>
                                <td>
                                    <xsl:value-of select="@vat" />
                                </td>
                                <td>
                                    <xsl:value-of select="@gross" />
                                </td>
                                <td>
                                  <a href="{/source/request/@context-path}/reports/201/output/?bill-type-id={bill-type/@id}" title="{bill-type/@description}">
                                  <xsl:value-of select="bill-type/@code" />
                                  </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[195]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[ECOES Comparison]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.lang import System, Integer, String
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date, Properties
from net.sf.chellow.physical import HhStartDate, Configuration, MpanCore
from net.sf.chellow.billing import Batch, NonCoreContract
from org.python.util import PythonInterpreter
from org.apache.http.protocol import HTTP
from org.apache.http.client.entity import UrlEncodedFormEntity
from org.apache.http.util import EntityUtils
from org.apache.http import HttpHost
from org.apache.http.conn.params import ConnRoutePNames
from org.apache.http.impl.client import DefaultHttpClient
from org.apache.http.message import BasicNameValuePair
from org.apache.http.client.methods import HttpGet, HttpPost
from java.io import StringReader
from java.net import URL, URLEncoder
from com.Ostermiller.util import CSVParser


inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()

config = Configuration.getConfiguration()
properties = Properties()
properties.load(StringReader(config.getProperties()))

ECOES_USER_NAME_KEY = 'ecoes.user.name'
user_name = properties.get(ECOES_USER_NAME_KEY)
if user_name is None:
    raise UserException("The property " + ECOES_USER_NAME_KEY + " cannot be found in the configuration properties.")

ECOES_PASSWORD_KEY = 'ecoes.password'
password = properties.get(ECOES_PASSWORD_KEY)
if password is None:
    raise UserException("The property " + ECOES_PASSWORD_KEY + " cannot be found in the configuration properties.")

PROXY_HOST_KEY = 'proxy.host'
PROXY_PORT_KEY = 'proxy.port'

proxy_host = properties.get(PROXY_HOST_KEY)

client = DefaultHttpClient()
if proxy_host is not None:
    proxy_port = properties.get(PROXY_PORT_KEY)
    if proxy_port is None:
        raise UserException("The property " + PROXY_HOST_KEY + " is set, but the property " + PROXY_PORT_KEY + " is not.")

    proxy = HttpHost(proxy_host, int(proxy_port), "http")
    client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy)

http_get = HttpGet('http://www.ecoes.co.uk/')
response = client.execute(http_get)
EntityUtils.consume(response.getEntity())

http_post = HttpPost("http://www.ecoes.co.uk/login.asp")
http_post.setEntity(UrlEncodedFormEntity([BasicNameValuePair("username", user_name), BasicNameValuePair("password", password), BasicNameValuePair('beenHereBefore', '1'), BasicNameValuePair('forceLogout', '1')], HTTP.UTF_8))
response = client.execute(http_post)
location_header = response.getFirstHeader('Location')
location = location_header.getValue()
EntityUtils.consume(response.getEntity())
guid = URLEncoder.encode(location[19:])

mpans = Hiber.session().createQuery("select mpan.core.dno.code || mpan.core.uniquePart || mpan.core.checkDigit from Mpan mpan where mpan.core.dno.code != '99' and mpan.supplyGeneration.finishDate is null and mpan.supplyGeneration.supply.source.code != '3rd-party' order by mpan.core.dno.code, mpan.core.uniquePart, mpan.core.checkDigit").list()

http_get = HttpGet('http://www.ecoes.co.uk/saveportfolioMpans.asp?guid=' + guid)

pw.print("MPAN Core,MPAN Core No Spaces,ECOES PC,Chellow PC,ECOES MTC,Chellow MTC,ECOES LLFC,Chellow LLFC,ECOES SSC,Chellow SSC,ECOES Supplier, Chellow Supplier,ECOES DC,Chellow DC,ECOES MOP,Chellow MOP,ECOES GSP Group,Chellow GSP Group,ECOES MSN, Chellow MSN,ECOES Meter Type,Chellow Meter Type,Problem")
pw.flush()

entity = client.execute(http_get).getEntity()
csv_is = entity.getContent()
parser = CSVParser(csv_is)
values = parser.getLine()
values = parser.getLine()

while values != None:
    problem = ''

    ecoes_titles = ['mpan-core', 'address-line-1', 'address-line-2', 'address-line-3', 'address-line-4', 'address-line-5', 'address-line-6', 'address-line-7', 'address-line-8', 'address-line-9', 'post-code', 'supplier', 'registration-from', 'mtc', 'mtc-date', 'llfc', 'llfc-from', 'pc', 'ssc', 'measurement-class', 'energisation-status', 'da', 'dc', 'mop', 'mop-appoint-date', 'gsp-group', 'gsp-effective-from', 'dno', 'msn', 'meter-install-date', 'meter-type', 'map-id']

    ecoes = dict(zip(ecoes_titles, [values[i] for i in range(len(ecoes_titles))]))

    mpan_spaces = ecoes['mpan-core'][:2] + ' ' + ecoes['mpan-core'][2:6] + ' ' + ecoes['mpan-core'][6:10] + ' ' + ecoes['mpan-core'][-3:]

    disconnected = len(ecoes['supplier']) == 0
    current_chell = ecoes['mpan-core'] in mpans

    if disconnected and current_chell:
        problem += "Disconnected in ECOES, but current in Chellow. "
    elif not disconnected and not current_chell:
        problem += "In ECOES (energized or de-energized), but not current in Chellow. "

    if current_chell:
        mpans.remove(ecoes['mpan-core'])
        mpan_core = MpanCore.getMpanCore(ecoes['mpan-core'])
        supply = mpan_core.getSupply()
        generation = supply.getGeneration(None)
        for cand_mpan in generation.getMpans():
            if cand_mpan.getCore().equals(mpan_core):
                mpan = cand_mpan
                break

        chellow_pc = generation.getPc().getCode()
        try:
            if int(ecoes['pc']) != int(chellow_pc):
                problem += "The PCs don't match. "
        except ValueError:
            problem += "Can't parse the PC. "

        chellow_mtc = generation.getMtc().getCode()
        try:
            if int(ecoes['mtc']) != int(chellow_mtc):
                problem += "The MTCs don't match. "
        except ValueError:
            problem += "Can't parse the MTC. "

        chellow_llfc = mpan.getLlfc().getCode()
        try:
            if int(ecoes['llfc']) != int(chellow_llfc):
                problem += "The LLFCs don't match. "
        except ValueError:
            problem += "Can't parse the LLFC. "

        chellow_ssc = generation.getSsc()
        if chellow_ssc is None:
            chellow_ssc = ''
            chellow_ssc_int = None
        else:
            chellow_ssc = chellow_ssc.getCode()
            chellow_ssc_int = int(chellow_ssc)

        if len(ecoes['ssc']) > 0:
            ecoes_ssc_int = int(ecoes['ssc'])
        else:
            ecoes_ssc_int = None

        if ecoes_ssc_int != chellow_ssc_int and not (ecoes_ssc_int is None and chellow_ssc_int is None):
            problem += "The SSCs don't match. "

        chellow_supplier = mpan.getSupplierContract().getParty().getParticipant().getCode()
        if chellow_supplier != ecoes['supplier']:
            problem += "The supplier codes don't match. "

        hhdc_contract = generation.getHhdcContract()
        if hhdc_contract is None:
            chellow_dc = ''
        else:
            chellow_dc = hhdc_contract.getParty().getParticipant().getCode()
        if chellow_dc != ecoes['dc']:
            problem += "The DC codes don't match. "

        mop_contract = generation.getMopContract()
        if mop_contract is None:
            chellow_mop = ''
        else:
            chellow_mop = mop_contract.getParty().getParticipant().getCode()

        if chellow_mop != ecoes['mop']:
            problem += "The MOP codes don't match. "

        chellow_gsp_group = supply.getGspGroup().getCode()
        if chellow_gsp_group != ecoes['gsp-group']:
            problem += "The GSP group codes don't match. "

        chellow_msn = generation.getMeterSerialNumber()
        if chellow_msn is None:
            chellow_msn = ''
        if chellow_msn != ecoes['msn']:
            problem += "The meter serial numbers don't match. "

        if chellow_pc == 0:
            chellow_meter_type = 'H'
        else:
            if len(generation.getChannels()) > 0:
                chellow_meter_type = 'RCAMR'
            else:
                chellow_meter_type = 'N'
        if chellow_meter_type != ecoes['meter-type']:
            problem += "The meter types don't match. See http://dtc.mrasco.com/DataItem.aspx?ItemCounter=0483 "        
    else:
        chellow_pc = ''
        chellow_mtc = ''
        chellow_llfc = ''
        chellow_ssc = ''
        chellow_supplier = ''
        chellow_dc = ''
        chellow_mop = ''
        chellow_gsp_group = ''
        chellow_msn = ''
        chellow_meter_type = ''

    if len(problem) > 0:
        pw.print('\n' + ','.join('"' + str(val) + '"' for val in [mpan_spaces, ecoes['mpan-core'], ecoes['pc'], chellow_pc, ecoes['mtc'], chellow_mtc, ecoes['llfc'], chellow_llfc, ecoes['ssc'], chellow_ssc, ecoes['supplier'], chellow_supplier, ecoes['dc'], chellow_dc, ecoes['mop'], chellow_mop, ecoes['gsp-group'], chellow_gsp_group, ecoes['msn'], chellow_msn, ecoes['meter-type'], chellow_meter_type, problem]))
    else:
        pw.print(' ')
    pw.flush()
    Hiber.session().clear()
    values = parser.getLine()

parser.close()
EntityUtils.consume(entity)

for mpan_core_str in mpans:
    mpan_core_spaces = mpan_core_str[:2] + ' ' + mpan_core_str[2:6] + ' ' + mpan_core_str[6:10] + ' ' + mpan_core_str[-3:]
    mpan_core = MpanCore.getMpanCore(mpan_core_str)
    supply = mpan_core.getSupply()
    generation = supply.getGeneration(None)
    for cand_mpan in generation.getMpans():
        if cand_mpan.getCore().equals(mpan_core):
            mpan = cand_mpan
            break

    ssc = generation.getSsc()
    if ssc is None:
        ssc = ''
    else:
        ssc = ssc.getCode()

    hhdc_contract = generation.getHhdcContract()
    if hhdc_contract is None:
        dc = ''
    else:
        dc = hhdc_contract.getParty().getParticipant().getCode()

    mop_contract = generation.getMopContract()
    if mop_contract is None:
        mop = ''
    else:
        mop = mop_contract.getParty().getParticipant().getCode()

    msn = generation.getMeterSerialNumber()
    if msn is None:
        msn = ''

    if generation.getPc().getCode() == '00':
        meter_type = 'H'
    else:
        if len(generation.getChannels()) > 0:
            meter_type = 'RCAMR'
        else:
            meter_type = 'N'

    pw.print('\n' + ','.join('"' + str(val) + '"' for val in [mpan_core_spaces, mpan_core_str, '', generation.getPc(), '', generation.getMtc(), '', mpan.getLlfc(),'', ssc, '', mpan.getSupplierContract().getParty().getParticipant().getCode(), '', dc, '', mop, '', supply.getGspGroup().getCode(), '', msn, '', meter_type, 'In Chellow, but not in ECOES.']))
    pw.flush()
    Hiber.session().clear()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[197]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CoP]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Cop

cop_id = inv.getLong('cop-id')
cop = Cop.getCop(cop_id)
source.appendChild(cop.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; CoPs &gt;
                    <xsl:value-of
                        select="/source/cop/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/85/output/">
                        <xsl:value-of select="'CoPs'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/cop/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/cop/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/cop/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[199]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Bill Types]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

types_element = doc.createElement('bill-types')
source.appendChild(types_element)
for type in Hiber.session().createQuery("from BillType type order by type.code").list():
    types_element.appendChild(type.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Bill Types
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Bill Types'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/bill-types/bill-type">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/201/output/?bill-type-id={@id}">
                                        <xsl:value-of select="@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[201]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Bill Type]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import BillType

bill_type_id = inv.getLong('bill-type-id')
bill_type = BillType.getBillType(bill_type_id)
source.appendChild(bill_type.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; Bill Types &gt;
                    <xsl:value-of
                        select="/source/bill-type/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/199/output/">
                        <xsl:value-of select="'Bill Types'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/bill-type/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/bill-type/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/bill-type/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[203]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Contract Batch]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import Batch
from net.sf.chellow.physical import Configuration
from java.util import Properties
from java.io import StringReader
from net.sf.chellow.ui import Report

batch_id = inv.getLong('batch-id')
batch = Batch.getBatch(batch_id)
batch_element = batch.toXml(doc, XmlTree('contract', XmlTree('party')))
source.appendChild(batch_element)
bills = Hiber.session().createQuery("from Bill bill where bill.batch = :batch order by bill.reference, bill.startDate.date").setEntity("batch", batch).list()
for bill in bills:
    batch_element.appendChild(bill.toXml(doc, XmlTree("supply").put('type')))
source.setAttribute('bill-count', str(len(bills)))

config = Configuration.getConfiguration()
properties = Properties()
properties.load(StringReader(config.getProperties()))

for key in properties.propertyNames():
    if key.startswith('batch.report.'):
        batch_report_id = properties.get(key)
        if batch_report_id is not None:
            report = Report.getReport(int(batch_report_id))
            batch_element.appendChild(report.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/batch/hhdc-contract/@name" />
                    &gt; Batches &gt;
                    <xsl:value-of select="/source/batch/@reference" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/113/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={/source/batch/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/batch/hhdc-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/93/output/?hhdc-contract-id={/source/batch/hhdc-contract/@id}">
                        <xsl:value-of select="'Batches'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/batch/@reference, ' [')" />
                    <a
                        href="{/source/request/@context-path}/hhdc-contracts/{/source/batch/hhdc-contract/@id}/batches/{/source/batch/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                  <tr>
                    <th>Reference</th>
                    <td><xsl:value-of select="/source/batch/@reference"/></td>
                  </tr>
                  <tr>
                    <th>Description</th>
                    <td><xsl:value-of select="/source/batch/@description"/></td>
                  </tr>
                  <tr>
                    <th>Number Of Bills</th>
                    <td><xsl:value-of select="/source/@bill-count"/></td>
                  </tr>
                  <xsl:if test="/source/batch/report">
                  <tr>
                    <th>Custom Reports</th>
                    <td>
                        <ul>
                        <xsl:for-each select="/source/batch/report">
                        <li><a
                        href="{/source/request/@context-path}/reports/{@id}/output/?batch-id={/source/batch/@id}">
<xsl:value-of select="@name"/></a></li>
                        </xsl:for-each>
                        </ul>
                    </td>
                  </tr>
                  </xsl:if>
                </table>
                <br/>
                <ul>
                    <li><a href="{/source/request/@context-path}/reports/111/output/?batch-id={/source/batch/@id}">Check Bills</a>
                    </li>
                            <li>
                                [<a
                                        href="{/source/request/@context-path}/hhdc-contracts/{/source/batch/hhdc-contract/@id}/batches/{/source/batch/@id}/bill-imports/">
                                    <xsl:value-of select="'bill imports'" />
 </a>]
                            </li>
                        </ul>
                <table>
                    <caption>Bills [<a href="{/source/request/@context-path}/hhdc-contracts/{/source/batch/hhdc-contract/@id}/batches/{/source/batch/@id}/bills/">edit</a>]</caption>
                    <thead>
                        <tr>
                            <th>Edit</th>
                            <th>Reference</th>
                            <th>Supply</th>
                            <th>Account</th>
                            <th>Issue Date</th>
                            <th>From</th>
                            <th>To</th>
                            <th>kWh</th>
                            <th>Net</th>
                            <th>VAT</th>
                            <th>Gross</th>
                            <th>Type</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/batch/bill">
                            <tr>
                                <td>
                                    [<a
                                        href="{/source/request/@context-path}/hhdc-contracts/{/source/batch/hhdc-contract/@id}/batches/{/source/batch/@id}/bills/{@id}/">
                                    <xsl:value-of select="'edit'" />
 </a>]
                                </td>
                                <td>
                                    <xsl:value-of select="@reference" />
                                </td>
                                <td>
<a
                                        href="{/source/request/@context-path}/reports/7/output/?supply-id={supply/@id}">
                                    <xsl:value-of select="'supply'" />
 </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@account" />
                                </td>
                                <td>
                                    <xsl:value-of select="concat(date[@label='issue']/@year, '-', date[@label='issue']/@month, '-', date[@label='issue']/@day, ' ', date[@label='issue']/@hour, ':', date[@label='issue']/@minute)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date[@label='start']/@year, '-', hh-start-date[@label='start']/@month, '-', hh-start-date[@label='start']/@day, ' ', hh-start-date[@label='start']/@hour, ':', hh-start-date[@label='start']/@minute)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-start-date[@label='finish']/@year, '-', hh-start-date[@label='finish']/@month, '-', hh-start-date[@label='finish']/@day, ' ', hh-start-date[@label='finish']/@hour, ':', hh-start-date[@label='finish']/@minute)" />
                                </td>
                                <td>
                                    <xsl:value-of select="@kwh" />
                                </td>
                                <td>
                                    <xsl:value-of select="@net" />
                                </td>
                                <td>
                                    <xsl:value-of select="@vat" />
                                </td>
                                <td>
                                    <xsl:value-of select="@gross" />
                                </td>
                                <td>
                                  <a href="{/source/request/@context-path}/reports/201/output/?bill-type-id={bill-type/@id}" title="{bill-type/@description}">
                                  <xsl:value-of select="bill-type/@code" />
                                  </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[205]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MOP Contract Rate Script]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import RateScript

script_id = inv.getLong('rate-script-id')
script = RateScript.getRateScript(script_id)
source.appendChild(script.toXml(doc, XmlTree('contract', XmlTree('party'))))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; MOP Contracts &gt;
                    <xsl:value-of
                        select="/source/rate-script/mop-contract/@name" />
                    &gt; Rate Script
                    <xsl:value-of select="/source/rate-script/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/185/output/">
                        <xsl:value-of select="'MOP Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/107/output/?mop-contract-id={/source/rate-script/mop-contract/@id}">
                        <xsl:value-of
                            select="/source/rate-script/mop-contract/@name" />
                    </a>
                    &gt; Rate Script
                    <xsl:value-of
                        select="concat(/source/rate-script/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/mop-contracts/{/source/rate-script/mop-contract/@id}/rate-scripts/{/source/rate-script/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Start Date</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/rate-script/hh-start-date[@label='start']/@year, '-', /source/rate-script/hh-start-date[@label='start']/@month, '-', /source/rate-script/hh-start-date[@label='start']/@day, ' ', /source/rate-script/hh-start-date[@label='start']/@hour, ':', /source/rate-script/hh-start-date[@label='start']/@minute)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Finish Date</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/rate-script/hh-start-date[@label='finish']">
                                    <xsl:value-of
                                        select="concat(/source/rate-script/hh-start-date[@label='finish']/@year, '-', /source/rate-script/hh-start-date[@label='finish']/@month, '-', /source/rate-script/hh-start-date[@label='finish']/@day, ' ', /source/rate-script/hh-start-date[@label='finish']/@hour, ':', /source/rate-script/hh-start-date[@label='finish']/@minute)" />
                                </xsl:when>
                                <xsl:otherwise>Ongoing</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                </table>

                <h2>Script</h2>

                <pre>
                    <xsl:value-of select="/source/rate-script/@script" />
                </pre>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[207]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV CRC]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.lang import System, Math
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate, Supply
from net.sf.chellow.billing import Batch, NonCoreContract, Bill
from org.python.util import PythonInterpreter

year = inv.getInteger('year')

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()

pw.println("MPAN Core,Site Id,Site Name,From,To,kWh,Breakdown,Normal Days,Is Normal?")
pw.flush()

cal = MonadDate.getCalendar()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, Calendar.APRIL)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)

year_start = HhStartDate(cal.getTime())
cal.add(Calendar.YEAR, 1)
cal.add(Calendar.MINUTE, -30)
year_finish = HhStartDate(cal.getTime())

if inv.hasParameter('supply-id'):
    supply_id = inv.getLong('supply-id')
    supplies = Hiber.session().createQuery("from Supply supply where supply = :supply").setEntity('supply', Supply.getSupply(supply_id)).scroll()
else:
    supplies = Hiber.session().createQuery("select distinct generation.supply from SupplyGeneration generation where generation.supply.source.code in ('net', 'gen-net') and generation.importMpan is not null and generation.startDate.date <= :finishDate and (generation.finishDate is null or generation.finishDate.date >= :startDate)").setTimestamp('startDate', year_start.getDate()).setTimestamp('finishDate', year_finish.getDate()).scroll()

cal.setTime(year_start.getDate())
cal.add(Calendar.YEAR, -1)
early_cutoff = HhStartDate(cal.getTime())

cal.setTime(year_finish.getDate())
cal.add(Calendar.YEAR, 1)
late_cutoff = HhStartDate(cal.getTime())

bill_query = Hiber.session().createQuery("select distinct read.bill, read.bill.issueDate, read.bill.type.code from RegisterRead read where read.bill.supply = :supply and read.bill.finishDate.date >= :readDate and read.bill.startDate <= :readDate order by read.bill.issueDate desc, read.bill.type.code").setMaxResults(1)

prior_present_read_query = Hiber.session().createQuery("select read, read.bill from RegisterRead read where read.units.int = 0 and read.presentType.code in ('N', 'N3', 'C') and read.bill.supply = :supply and read.presentDate.date <= :startDate and read.presentDate.date >= :earlyCutoff order by read.presentDate.date desc, read.bill.issueDate desc, read.bill.type.code").setTimestamp('earlyCutoff', early_cutoff.getDate()).setMaxResults(1)

prior_previous_read_query = Hiber.session().createQuery("select read, read.bill from RegisterRead read where read.units.int = 0 and read.previousType.code in ('N', 'N3', 'C') and read.bill.supply = :supply and read.previousDate.date <= :startDate and read.previousDate.date >= :earlyCutoff order by read.previousDate.date desc, read.bill.issueDate desc, read.bill.type.code").setTimestamp('earlyCutoff', early_cutoff.getDate()).setMaxResults(1)

present_reads_query = Hiber.session().createQuery("from RegisterRead read where read.units.int = 0 and read.bill = :bill and read.presentDate.date = :readDate and read.meterSerialNumber = :msn")

previous_reads_query = Hiber.session().createQuery("from RegisterRead read where read.units.int = 0 and read.bill = :bill and read.previousDate.date = :readDate and read.meterSerialNumber = :msn")

next_present_read_query = Hiber.session().createQuery("select read, read.bill from RegisterRead read where read.units.int = 0 and read.presentType.code in ('N', 'N3', 'C') and read.bill.supply = :supply and read.presentDate.date >= :finishDate and read.presentDate.date <= :lateCutoff order by read.presentDate.date, read.bill.issueDate desc, read.bill.type.code").setTimestamp('lateCutoff', late_cutoff.getDate()).setMaxResults(1)

next_previous_read_query = Hiber.session().createQuery("select read, read.bill from RegisterRead read where read.units.int = 0 and read.previousType.code in ('N', 'N3', 'C') and read.bill.supply = :supply and read.previousDate.date >= :finishDate and read.previousDate.date <= :lateCutoff order by read.previousDate.date, read.bill.issueDate desc, read.bill.type.code").setTimestamp('lateCutoff', late_cutoff.getDate()).setMaxResults(1)

while supplies.next():
    kwh = 0
    normal_days = 0
    breakdown = ''
    supply = supplies.get(0)
    generations = supply.getGenerations(year_start, year_finish)
    last_generation = generations[generations.size() - 1]

    first_generation_start = generations[0].getStartDate()
    if first_generation_start.after(year_start):
        period_start = first_generation_start
    else:
        period_start = year_start

    last_generation_finish = last_generation.getFinishDate()
    if last_generation_finish is None or last_generation_finish.after(year_finish):
        period_finish = year_finish
    else:
        period_finish = last_generation_finish

    mpan = last_generation.getImportMpan()
    mpan_core = mpan.getCore()
    site = Hiber.session().createQuery("select ssgen.site from SiteSupplyGeneration ssgen where ssgen.isPhysical is true and ssgen.supplyGeneration = :supplyGeneration").setEntity('supplyGeneration', last_generation).uniqueResult()

    pw.print(','.join('"' + str(val) + '"' for val in [mpan_core, site.getCode(), site.getName(), period_start, period_finish]))
    pw.flush()

    bill_query.setEntity('supply', supply)
    prior_present_read_query.setEntity('supply', supply)
    prior_previous_read_query.setEntity('supply', supply)
    next_present_read_query.setEntity('supply', supply)
    next_previous_read_query.setEntity('supply', supply)

    if last_generation.getPc().getCode() == 0:
        pass
    elif len(last_generation.getChannels()) > 0:
        pass
    else:
        search_date = period_start
        search_msn = ''
        read_0 = None
        read_1 = None
        read_2 = None
        read_3 = None

        read_dict = None

        tie = False
        while True:
            #s elf.pw.println('search date ' + str(search_date))
            present_read_prime = False
            previous_read_prime = False
            #s elf.pw.println('first loop, ' + str(supply.getId()))
            present_read = prior_present_read_query.setTimestamp('startDate', search_date.getDate()).uniqueResult()
            if present_read is not None:
                present_read = present_read[0]

            previous_read = prior_previous_read_query.setTimestamp('startDate', search_date.getDate()).uniqueResult()
            if previous_read is not None:
                previous_read = previous_read[0]

            #s elf.pw.println('prev read ' + str(previous_read) + ' pres read ' + str(present_read))
            if present_read is None and previous_read is None:
                break

            if previous_read is not None:
                #s elf.pw.println('prev read ' + str(previous_read.getId()) + ' bill id ' + str(previous_read.getBill().getId()))
                previous_bill = bill_query.setTimestamp('readDate', previous_read.getBill().getStartDate().getDate()).uniqueResult()[0]

                #s elf.pw.println('prev bill id ' + str(previous_bill.getId()))

                if  previous_bill.getId() == previous_read.getBill().getId():
                    previous_read_prime = True

            if present_read is not None:
                #s elf.pw.println('pres read ' + str(present_read.getId()) + ' bill id ' + str(present_read.getBill().getId()))

                present_bill = bill_query.setTimestamp('readDate', present_read.getBill().getStartDate().getDate()).uniqueResult()[0]
                #s elf.pw.println('pres bill ' + str(present_bill.getId()))
                if  present_bill.getId() == present_read.getBill().getId():
                    if previous_read_prime:
                        #s elf.pw.println('prev read pot prime, pres prime pres read date' + str(present_read.getPresentDate()) + ' prev read date ' + str(previous_read.getPreviousDate()))

                        if present_read.getPresentDate().after(previous_read.getPreviousDate()):
                            present_read_prime = True
                            previous_read_prime = False
                        elif previous_read.getPreviousDate().getDate().getTime() == present_read.getPresentDate().getDate().getTime() and previous_read.getMeterSerialNumber() != present_read.getMeterSerialNumber():
                            if tie:
                                tie = False
                                previous_read_prime = False
                                present_read_prime = True
                            else:
                                tie = True
            
                    else:
                        present_read_prime = True

            if present_read_prime:
                #s elf.pw.println('pres supply prime pres bill ' + str(present_bill.getId()))

                if not tie:
                    cal.setTime(present_read.getPresentDate().getDate())
                    cal.add(Calendar.MONTH, -3)
                    search_date = HhStartDate(cal.getTime())

                #s elf.pw.println('present read ' + str(present_read.getId()) + ' present read bill ' + str(present_read.getBill().getId()) + ' present bill ' + str(present_bill.getId()))
                reads = {}
                present_reads = present_reads_query.setEntity('bill', present_bill).setTimestamp('readDate', present_read.getPresentDate().getDate()).setString('msn', present_read.getMeterSerialNumber()).list()
                #s elf.pw.println('present reads ' + str(present_reads))
                for read in present_reads:
                    tpr = read.getTpr()
                    reads[tpr.getCode()] = {'tpr': read.getTpr(), 'value': read.getPresentValue().doubleValue() * read.getCoefficient().doubleValue(), 'msn': read.getMeterSerialNumber()}

                read_dict = {'date': present_read.getPresentDate(), 'reads': reads, 'msn': present_reads[0].getMeterSerialNumber()}

            if previous_read_prime:
                #s elf.pw.println('prev supply prime prev bill ' + str(previous_bill.getId()))
                if not tie:
                    cal.setTime(previous_read.getPreviousDate().getDate())
                    cal.add(Calendar.MONTH, -3)
                    search_date = HhStartDate(cal.getTime())
                reads = {}
                previous_reads = previous_reads_query.setEntity('bill', previous_bill).setTimestamp('readDate', previous_read.getPreviousDate().getDate()).setString('msn', previous_read.getMeterSerialNumber()).list()
                for read in previous_reads:
                    tpr = read.getTpr()
                    reads[tpr.getCode()] = {'tpr': read.getTpr(), 'value': read.getPreviousValue().doubleValue() * read.getCoefficient().doubleValue()}
                        
                read_dict = {'date': previous_read.getPreviousDate(), 'reads': reads, 'msn': previous_reads[0].getMeterSerialNumber()}

            if previous_read_prime or present_read_prime:
                if read_2 is None:
                    read_2 = read_dict
                elif read_1 is None:
                    read_1 = read_dict
                    if read_1['msn'] == read_2['msn']:
                        break
                else:
                    read_0 = read_dict
                    break
                        

            if not previous_read_prime and not present_read_prime:
                if previous_read is None:
                    search_date = present_read.getPresentDate().getPrevious()
                elif present_read is None:
                    search_date = previous_read.getPreviousDate().getPrevious()
                elif previous_read.getPreviousDate().before(present_read.getPresentDate()):
                    search_date = present_read.getPresentDate().getPrevious()
                else:
                    search_date = previous_read.getPreviousDate().getPrevious()

        #s elf.pw.println('initial read_0 ' + str(read_0) + ' read_1 ' + str(read_1) + ' read_2 ' + str(read_2))
                            

        search_date = period_start
        keep_going = True

        tie = False
        while keep_going:
            while True:
                present_read_prime = False
                previous_read_prime = False
                #s elf.pw.println('first loop, ' + str(supply.getId()))
                present_read = next_present_read_query.setTimestamp('finishDate', search_date.getDate()).uniqueResult()
                if present_read is not None:
                    present_read = present_read[0]
                previous_read = next_previous_read_query.setTimestamp('finishDate', search_date.getDate()).uniqueResult()
                if previous_read is not None:
                    previous_read = previous_read[0]

                if present_read is None and previous_read is None:
                    keep_going = False
                    break

                if present_read is not None:
                    present_bill = bill_query.setTimestamp('readDate', present_read.getPresentDate().getDate()).uniqueResult()[0]
                    #s elf.pw.println('bill id ' + str(bill.getId()))

                    if present_bill.getId() == present_read.getBill().getId():
                        present_read_prime = True

                if previous_read is not None:
                    #s elf.pw.println('previous read id ' + str(previous_read.getId()) + ' date ' + str(previous_read.getPreviousDate()) + ' prev bill id ' + str(previous_bill.getId()))
                    #s elf.pw.println('bill id ' + str(bill.getId()))

                    previous_bill = bill_query.setTimestamp('readDate', previous_read.getBill().getStartDate().getDate()).uniqueResult()[0]
                        #s elf.pw.println(' prev bill id ' + str(previous_bill.getId()))
                    if previous_bill.getId() == previous_read.getBill().getId():
                        if present_read_prime:
                            if previous_read.getPreviousDate().before(present_read.getPresentDate()):
                                previous_read_prime = True
                                present_read_prime = False
                            elif previous_read.getPreviousDate().getDate().getTime() == present_read.getPresentDate().getDate().getTime() and previous_read.getMeterSerialNumber() != present_read.getMeterSerialNumber():
                                #s elf.pw.println('it is a tie ' + str(tie) + ' search date ' + str(search_date))

                                if tie:
                                    tie = False
                                    previous_read_prime = True
                                    present_read_prime = False
                                else:
                                    tie = True
                        else:
                            previous_read_prime = True


                if present_read_prime:
                    if not tie:
                        if present_read.getPresentDate().after(period_finish):
                            cal.setTime(present_read.getPresentDate().getDate())
                            cal.add(Calendar.MONTH, 3)
                            search_date = HhStartDate(cal.getTime())
                        else:
                            search_date = present_read.getPresentDate().getNext()
                    #s elf.pw.println('present read ' + str(present_read.getId()) + ' present read bill ' + str(present_read.getBill().getId()) + ' present bill ' + str(present_bill.getId()))

                    reads = {}
                    present_reads = present_reads_query.setEntity('bill', present_bill).setTimestamp('readDate', present_read.getPresentDate().getDate()).setString('msn', present_read.getMeterSerialNumber()).list()
                    #s elf.pw.println('present readns next ' + str(present_reads))
                    for read in present_reads:
                        tpr = read.getTpr()
                        reads[tpr.getCode()] = {'tpr': tpr, 'value': read.getPresentValue().doubleValue() * read.getCoefficient().doubleValue()}

                    read_3 = {'date': present_read.getPresentDate(), 'reads': reads, 'msn': present_reads[0].getMeterSerialNumber()}
                    break
                    #s elf.pw.println('got 3 ')
                            
                if previous_read_prime:
                    if not tie:
                        if previous_read.getPreviousDate().after(period_finish):
                            cal.setTime(previous_read.getPreviousDate().getDate())
                            cal.add(Calendar.MONTH, 3)
                            search_date = HhStartDate(cal.getTime())
                        else:
                            search_date = previous_read.getPreviousDate().getNext()
                    reads = {}
                    previous_reads = previous_reads_query.setEntity('bill', previous_bill).setTimestamp('readDate', previous_read.getPreviousDate().getDate()).setString('msn', previous_read.getMeterSerialNumber()).list()
                    for read in previous_reads:
                        tpr = read.getTpr()
                        reads[tpr.getCode()] = {'tpr': tpr, 'value': read.getPreviousValue().doubleValue() * read.getCoefficient().doubleValue()}
                        
                    read_3 = {'date': previous_read.getPreviousDate(), 'reads': reads, 'msn': previous_reads[0].getMeterSerialNumber()}
                    break

                if not previous_read_prime and not present_read_prime:
                    if previous_read is None:
                        search_date = present_read.getPresentDate().getNext()
                    elif present_read is None:
                        search_date = previous_read.getPreviousDate().getNext()
                    elif previous_read.getPreviousDate().before(present_read.getPresentDate()):
                        search_date = previous_read.getPreviousDate().getNext()
                    else:
                        search_date = present_read.getPresentDate().getNext()


            #s elf.pw.println('read_0 ' + str(read_0) + ' read_1 ' + str(read_1) + ' read_2 ' + str(read_2) + ' read_3 ' + str(read_3))
                    

            passes = []
            if read_3 is None or (read_2 is not None and read_3['msn'] != read_2['msn']):
                if read_1 is not None and read_2 is not None and read_1['msn'] == read_2['msn']:
                    if read_1['msn'] == read_2['msn']:
                        aft_read = read_1
                        fore_read = read_2
                    else:
                        aft_read = read_0
                        fore_read = read_1

                    if period_start.before(read_2['date'].getNext()):
                        chunk_start = read_2['date'].getNext()
                    else:
                        chunk_start = period_start

                    if read_3 is None or read_3['date'].after(period_finish):
                        chunk_finish = period_finish
                    else:
                        chunk_finish = read_3['date']

                    passes.append({'aft-read': aft_read, 'fore-read': fore_read, 'chunk-finish': chunk_finish, 'chunk-start': chunk_start})
                elif read_0 is not None and read_1 is not None and read_0['msn'] == read_1['msn']:
                    if period_start.before(read_1['date']):
                        chunk_start = read_1['date'].getNext()
                    else:
                        chunk_start = period_start
                    passes.append({'aft-read': read_0, 'fore-read': read_1, 'chunk-finish': period_finish, 'chunk-start': chunk_start})
            elif read_2 is not None:
                if period_finish.before(read_3['date']):
                    chunk_finish = period_finish
                else:
                    chunk_finish = read_3['date']

                if period_start.after(read_2['date']):
                    chunk_start = period_start
                else:
                    chunk_start = read_2['date'].getNext()

                passes.append({'aft-read': read_2, 'fore-read': read_3, 'chunk-start': chunk_start, 'chunk-finish': chunk_finish})
                if read_1 is None and read_2['date'].after(period_start):
                    #s elf.pw.println('doing extra bit ')                             
                    if read_2['date'].after(period_finish):
                        chunk_finish = period_finish
                    else:
                        chunk_finish = read_2['date'].getPrevious()
                    passes.append({'aft-read': read_2, 'fore-read': read_3, 'chunk-finish': period_finish, 'chunk-start': period_start})
                                
            #s elf.pw.println('aft read ' + str(aft_read.getPresentDate()) + ' aft bill ' + str(aft_bill.getId()) + ' fore read ' + str(fore_read.getPresentDate()) + ' fore bill ' + str(fore_bill.getId()))
                            
            #s elf.pw.println('chunk start ' + str(chunk_start) + ' chunk finish ' + str(chunk_finish))
            #p w.println('passed ' + str(passes))
            
            for read_pass in passes:
                aft_read = read_pass['aft-read']
                fore_read = read_pass['fore-read']
                chunk_start = read_pass['chunk-start']
                chunk_finish = read_pass['chunk-finish']

                fore_aft_duration = float(fore_read['date'].getDate().getTime() - aft_read['date'].getDate().getTime())

                if not aft_read['date'].before(period_start) and not fore_read['date'].after(period_finish) and aft_read['date'].getNext().equals(chunk_start) and fore_read['date'].equals(chunk_finish):
                    ndays = fore_aft_duration / float(1000 * 60 * 60 * 24)
                else:
                    ndays = 0
                normal_days += ndays
                
                pass_kwh = 0
                for tpr_code, initial_read in aft_read['reads'].iteritems():
                    #s elf.pw.println('read ' + str(initial_read.getId()))
                            
                    tpr = initial_read['tpr']
                    if tpr_code in fore_read['reads']:
                        end_read = fore_read['reads'][tpr_code]
                    else:
                        continue

                    initial_val = initial_read['value']
                    end_val = end_read['value']
                    tpr_kwh =  end_val - initial_val
                    if tpr_kwh < 0:
                        digits = int(Math.log10(initial_val)) + 1
                        tpr_kwh = 10 ** digits - initial_val + end_val
                    kwh_rate = float(tpr_kwh) / fore_aft_duration
                    pass_kwh += kwh_rate * (chunk_finish.getDate().getTime() - chunk_start.getDate().getTime() + 30 * 60 * 1000)
                kwh += pass_kwh

                breakdown += "read-from: " + str(aft_read['date']) + " read-to: " + str(fore_read['date']) + " from: " + str(chunk_start) + " to: " + str(chunk_finish) + " kwh: " + str(pass_kwh) +  " normal-days: " + str(ndays) + ", "

            if read_3 is None:
                keep_going = False

            if keep_going and read_2 is not None and read_2['date'].after(period_finish):
                keep_going = False

            if keep_going and read_3['date'].after(period_finish) and not (read_2 is None and read_3['date'].after(period_start)):
                keep_going = False

            read_0 = read_1
            read_1 = read_2
            read_2 = read_3
            read_3 = None
            #s elf.pw.println('finished scond inner loop ' + str(prev_read.getPresentDate()) + ', ' + str(System.currentTimeMillis()))
        #s elf.pw.println('finished section, ' + str(System.currentTimeMillis()))
    
    pw.println(',' + ','.join('"' + str(val) + '"' for val in [kwh, breakdown, normal_days, normal_days >= 183]))
    pw.flush()
    Hiber.session().clear()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[209]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV CRC Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
if cal.get(Calendar.MONTH) < Calendar.MARCH:
    cal.add(Calendar.YEAR, -1)
source.setAttribute('year', str(cal.get(Calendar.YEAR)))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; CSV CRC</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV CRC'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/207/output/">
                    <fieldset>
                        <legend>Download CRC CSV</legend>
                        <br/>
                        <xsl:value-of select="'For financial year starting April '"/>
                        <input name="year" value="{/source/@year}" size="4" maxlength="4"/>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
                <br/>
                <form action="{/source/request/@context-path}/reports/215/output/">
                    <fieldset>
                        <legend>Download CRC Special Events CSV</legend>
                        <br/>
                        <xsl:value-of select="'For financial year starting April '"/>
                        <input name="year" value="{/source/@year}" size="4" maxlength="4"/>
<xsl:value-of select="' '"/>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[211]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Contract HH Data Imports]]></value>
        <value><![CDATA[from net.sf.chellow.monad import XmlTree
from net.sf.chellow.billing import NonCoreContract, HhdcContract
from net.sf.chellow.monad import HttpException, UserException
from java.lang import Long

debug = ''
processes =  inv.getMonad().getServletConfig().getServletContext().getAttribute('net.sf.chellow.hh_import_map')

hh_importer_contract = NonCoreContract.getNonCoreContract('hh-importer')

hhdc_contract_id = inv.getLong('hhdc-contract-id')
contract = HhdcContract.getHhdcContract(hhdc_contract_id)

def document():
    hh_data_imports_element = doc.createElement("hh-data-imports")
    source.appendChild(hh_data_imports_element)
    hh_data_imports_element.appendChild(contract.toXml(doc, XmlTree("party")))
    contract_processes = processes[contract.getId()]
    if contract_processes is not None:
        for process in contract_processes.values():
            hh_data_imports_element.appendChild(process.to_xml(doc))
    source.setAttribute('debug', debug)


if inv.getRequest().getMethod() == "POST":
    file_item = inv.getFileItem("import-file")
    if not inv.isValid():
        raise UserException(document())

    try:
        process_id = 0
        for k, v in processes.iteritems():
            for prid, proc in v.iteritems():
                process_id += 1

        hh_import_process = hh_importer_contract.callFunction('create_import_process_from_item', [Long(hhdc_contract_id), process_id, file_item])
        hh_import_process.start()
        debug += "started process"
        #raise UserException("stop")
        contract_processes = processes[contract.getId()]
        contract_processes[hh_import_process.process_id] = hh_import_process
        inv.sendSeeOther("/reports/65/output/?hhdc-contract-id=" + str(contract.getId()) + "&process-id=" + str(hh_import_process.process_id))
    except HttpException, e:
        e.setDocument(document())
        raise e
else:
    document()]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN" doctype-system="http://www.w3.org/TR/html4/strict.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />
                <title>
                    Chellow &gt; HHDC Contracts
                    <xsl:value-of select="/source/hh-data-imports/hhdc-contract/@id" />
                    &gt; HH Data Imports
                </title>
            </head>
            <body>
                <p>
                    <a href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a href="{/source/request/@context-path}/reports/113/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={/source/hh-data-imports/hhdc-contract/@id}">
                        <xsl:value-of select="/source/hh-data-imports/hhdc-contract/@name" />
                    </a>
                    &gt; HH Data Imports
                </p>
                <br />
                <xsl:if test="/source/@debug"><p><xsl:value-of select="/source/@debug"/></p></xsl:if>
                <xsl:if test="/source/hh-data-imports/hh-data-import">
                    <ul>
                        <xsl:for-each select="/source/hh-data-imports/hh-data-import">
                            <li>
                                <a href="{/source/request/@context-path}/reports/65/output/?hhdc-contract-id={/source/hh-data-imports/hhdc-contract/@id}&amp;process-id={@id}">
                                    <xsl:value-of select="@id" />
                                </a>
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <xsl:if test="//message[not(../../hh-data-import)]">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form enctype="multipart/form-data" method="post" action=".">
                    <fieldset>
                        <input type="hidden" name="hhdc-contract-id" value="{/source/hh-data-imports/hhdc-contract/@id}"/>
                        <legend>Import HH data</legend>
                        <br />
                        <input type="file" name="import-file" size="45"
                            value="{/source/request/parameter[@name = 'import-file']}" />
                        <input type="submit" value="Import" />
                    </fieldset>
                </form>
                <br />
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[213]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[HHDC Contract HH Importer]]></value>
        <value><![CDATA[from java.lang import Thread
from net.sf.chellow.billing import NonCoreContract, HhdcContract
from net.sf.chellow.monad import XmlTree, UserException, Monad, MonadMessage
from net.sf.chellow.monad.types import MonadUri

debug = ''
contract_id = inv.getLong('hhdc-contract-id')
if not inv.isValid():
    raise UserException()

contract = HhdcContract.getHhdcContract(contract_id)

computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])
contract_f = comterp.get('contract_function')

def get_uri():
    return MonadUri("/reports/213/output/?hhdc-contract-id=" + str(contract.getId()))

source = doc.getDocumentElement();
source.appendChild(contract.toXml(doc, XmlTree("party")))

hh_importer_contract = NonCoreContract.getNonCoreContract('hh-importer')
ctx = inv.getMonad().getServletConfig().getServletContext()

hh_importer = hh_importer_contract.callFunction('get_hh_importer_task', [ctx, contract])

if hh_importer is not None:
    debug += str(hh_importer.messages)
    importer_element = doc.createElement("hh-importer")
    source.appendChild(importer_element);
    importer_element.setAttribute('is-locked', str(hh_importer.is_locked()))
    importer_element.setAttribute('status', hh_importer.get_status())

    for message in hh_importer.messages:
        log_item_element = doc.createElement('log-item')
        importer_element.appendChild(log_item_element)
        log_item_element.setAttribute('message', message)

try:
    if inv.hasParameter('remove'):
        contract_f(hh_importer_contract, 'remove_hh_importer_task')(ctx, contract)
        inv.sendSeeOther(get_uri())
    elif inv.hasParameter('start'):
        contract_f(hh_importer_contract, 'start_hh_importer_task')(ctx, contract)
        inv.sendSeeOther(get_uri())
    elif inv.hasParameter('now'):
        Thread(hh_importer, "Import Now: " + str(contract.getId())).start()
        inv.sendSeeOther(get_uri())
except UserException, e:
    source.appendChild(MonadMessage(e.getMessage()).toXml(doc))

source.setAttribute('debug', debug)]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN" doctype-system="http://www.w3.org/TR/html4/strict.dtd"
        indent="yes" />

    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/hhdc-contract/@name" />
                    &gt; Automatic HH Data Downloader
                </title>

            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/113/output/?hhdc-id={/source/hhdc-contract/@id}">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/115/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/hhdc-contract/@name" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Automatic HH Data Downloader'" />
                </p>
                <br />
<xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>

<p><a href=".?hhdc-contract-id={/source/hhdc-contract/@id}">Refresh page</a></p>

                <xsl:choose>
                <xsl:when test="/source/hh-importer">
<table>
                    <tr>
                        <th>Is Locked?</th>
                        <td>
                            <xsl:value-of select="/source/hh-importer/@is-locked"/>
                        </td>
                    </tr>
                </table>
                <br/>
                <xsl:if test="/source/hh-importer/@is-locked='False'">
                <form action=".">
                            <fieldset>
                                <legend>Remove Importer</legend>
                       <input type="hidden" name="hhdc-contract-id" value="{/source/hhdc-contract/@id}"/>
                                <input type="submit" value="Remove" name="remove" />
                            </fieldset>
                        </form>
                        <br/>
<form action=".">
                            <fieldset>
                                <legend>Import Now</legend>
                       <input type="hidden" name="hhdc-contract-id" value="{/source/hhdc-contract/@id}"/>
                                <input type="submit" value="Import" name="now" />
                            </fieldset>
                        </form>
                 </xsl:if>
<h3>Log</h3>
                <p><xsl:value-of select="/source/hh-importer/@status"/></p>
                <ul>
                    <xsl:for-each select="/source/hh-importer/log-item">
                        <li>
                            <xsl:value-of select="@message" />
                        </li>
                    </xsl:for-each>
                </ul>
                </xsl:when>
                <xsl:otherwise>
                   <form action=".">
                            <fieldset>
                                <legend>Start Importer</legend>
                       <input type="hidden" name="hhdc-contract-id" value="{/source/hhdc-contract/@id}"/>
                                <input type="submit" value="Start" name="start" />
                            </fieldset>
                        </form>
                </xsl:otherwise>
                </xsl:choose>
<!--
                <table>
                    <tr>
                        <th>Status</th>
                        <td>
                            <xsl:value-of select="/source/hh-importer/@status"/>
                        </td>
                    </tr>
                    <tr>
                        <th>Status of this particular import</th>
                        <td>
                            <xsl:value-of select="/source/@thread-status" />
                        </td>
                    </tr>
                    <tr>
                        <th>Is this particular import locked?</th>
                        <td>
                            <xsl:value-of select="/source/@is-locked" />
                        </td>
                    </tr>

                    <tr>
                        <th>Stack trace of this particular import</th>
                        <td>
                            <xsl:value-of select="/source/stack-trace/text()" />
                        </td>
                    </tr>
                </table>
                <p>
                    <a href=".">Refresh page</a>
                </p>
                <xsl:choose>
                    <xsl:when
                        test="/source/@thread-status = 'null' or /source/@thread-status = 'dead'">
                        <form action="." method="post">
                            <fieldset>
                                <legend>Import Now</legend>
                                <input type="submit" value="Import" />
                            </fieldset>
                        </form>
                        <br />
                        <form action="." method="post">
                            <fieldset>
                                <legend>Restart Import Thread</legend>
                                <input type="submit" value="Restart" name="restart" />
                            </fieldset>
                        </form>

                    </xsl:when>
                    <xsl:when test="/source/@thread-status = 'alive'">
                        <form action="." method="post">
                            <fieldset>
                                <legend>Interrupt The Import</legend>
                                <input type="submit" name="interrupt" value="Interrupt" />
                            </fieldset>
                        </form>
                    </xsl:when>
                </xsl:choose>
                <br />
                -->
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[215]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV CRC Special Events]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.lang import System, Math
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate, Supply
from net.sf.chellow.billing import Batch, NonCoreContract, Bill
from org.python.util import PythonInterpreter

year = inv.getInteger('year')

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()

pw.print("MPAN Core,Site Id,Site Name,Date,Event,")
pw.flush()

cal = MonadDate.getCalendar()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, Calendar.APRIL)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)

year_start = HhStartDate(cal.getTime())
cal.add(Calendar.YEAR, 1)
cal.add(Calendar.MINUTE, -30)
year_finish = HhStartDate(cal.getTime())

if inv.hasParameter('supply-id'):
    supply_id = inv.getLong('supply-id')
    supplies = Hiber.session().createQuery("from Supply supply where supply = :supply").setEntity('supply', Supply.getSupply(supply_id)).scroll()
else:
    supplies = Hiber.session().createQuery("select distinct generation.supply from SupplyGeneration generation where generation.supply.source.code in ('net', 'gen-net', 'gen') and generation.startDate.date <= :finishDate and (generation.finishDate is null or generation.finishDate.date >= :startDate)").setTimestamp('startDate', year_start.getDate()).setTimestamp('finishDate', year_finish.getDate()).scroll()

generation_query = Hiber.session().createQuery("from SupplyGeneration generation where generation.supply = :supply and generation.startDate.date <= :finishDate and (generation.finishDate is null or generation.finishDate.date >= :startDate) order by generation.startDate.date").setTimestamp('startDate', year_start.getDate()).setTimestamp('finishDate', year_finish.getDate())

mpan_query = Hiber.session().createQuery("from Mpan mpan where mpan.supplyGeneration = :generation and mpan.llfc.isImport = :polarity")

events = []

def add_event(date, code, mpans):
    for mpan in mpans:
        events.append({'date': date, 'code': code, 'mpan-core': mpan.getCore()})

while supplies.next():
    supply = supplies.get(0)
    generations = [generation for generation in generation_query.setEntity('supply', supply).list()]
    global events
    events = []
    first_generation = generations[0]
    first_generation_start = first_generation.getStartDate()
    if first_generation_start.after(year_start):
        add_event(first_generation_start, "New Supply", first_generation.getMpans())

    last_generation = generations[-1]
    last_generation_finish = last_generation.getFinishDate()
    if HhStartDate.isBefore(last_generation_finish, year_finish):
        add_event(last_generation_finish, "Disconnection", last_generation.getMpans())
    
    prev_gen = first_generation
    for generation in generations[1:]:
        if generation.getMeterSerialNumber() != prev_gen.getMeterSerialNumber():
            add_event(generation.getStartDate(), "Meter Change", generation.getMpans())
        if generation.getPc().getCode() != prev_gen.getPc().getCode():
            add_event(generation.getStartDate(), "Change Of Profile Class", generation.getMpans())

        gen_mop_id = generation.getMopContract()
        if gen_mop_id is not None:
            gen_mop_id = gen_mop_id.getId()
        prev_mop_id = prev_gen.getMopContract()
        if prev_mop_id is not None:
            prev_mop_id = prev_mop_id.getId()
        if gen_mop_id != prev_mop_id:
            add_event(generation.getStartDate(), "Change Of MOP", generation.getMpans())

        gen_dc_id = generation.getHhdcContract()
        if gen_dc_id is not None:
            gen_dc_id = gen_dc_id.getId()
        prev_dc_id = prev_gen.getHhdcContract()
        if prev_dc_id is not None:
            prev_dc_id = prev_dc_id.getId()
        if gen_dc_id != prev_dc_id:
            add_event(generation.getStartDate(), "Change Of DC", generation.getMpans())

        for polarity in [True, False]:
            gen_mpan_sup_id = mpan_query.setEntity('generation', generation).setBoolean('polarity', polarity).uniqueResult()
            if gen_mpan_sup_id is not None:
                reporting_mpan = gen_mpan_sup_id
                gen_mpan_sup_id = gen_mpan_sup_id.getSupplierContract().getId()
            
            prev_mpan_sup_id = mpan_query.setEntity('generation', prev_gen).uniqueResult()
            if prev_mpan_sup_id is not None:
                reporting_mpan = prev_mpan_sup_id
                prev_mpan_sup_id = prev_mpan_sup_id.getSupplierContract().getId()
            
            if gen_mpan_sup_id is None and prev_mpan_sup_id is not None:
                add_event(generation.getStartDate(), "End of supply", [reporting_mpan])
            elif gen_mpan_sup_id is not None and prev_mpan_sup_id is None:
                add_event(generation.getStartDate(), "Start of supply", [reporting_mpan])
            elif gen_mpan_sup_id is not None and prev_mpan_sup_id is not None and gen_mpan_sup_id != prev_mpan_sup_id:
                add_event(generation.getStartDate(), "Change Of Supplier", [reporting_mpan])
        
        prev_gen = generation

    if len(events) > 0:
        site = Hiber.session().createQuery("select ssgen.site from SiteSupplyGeneration ssgen where ssgen.isPhysical is true and ssgen.supplyGeneration = :supplyGeneration").setEntity('supplyGeneration', last_generation).uniqueResult()
        for event in events:
            pw.println('')
            pw.print(','.join('"' + str(val) + '"' for val in [event['mpan-core'], site.getCode(), site.getName(), event['date'], event['code']]) + ',')
    else:
        pw.print(' ')
    pw.flush()
    Hiber.session().clear()
supplies.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[217]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Register Reads Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
      href="{/source/request/@context-path}/reports/19/output/" />

                <title>Chellow &gt; CSV Register Reads</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'CSV Register Reads'" />
                </p>
                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/219/output/">
                    <fieldset>
                        <legend>Download</legend>
<br/>
                        <xsl:value-of select="'For '"/>
                        <input name="months" maxlength="2" size="2">
                          <xsl:attribute name="value">
                            <xsl:choose>
                              <xsl:when test="/source/request/parameter[@name='months']">
                                <xsl:value-of select="/source/request/parameter[@name='months']/value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                        </input>
<xsl:value-of select="' month(s) finishing at the end of '"/>
                        <input name="end-year" value="{/source/date/@year}" maxlength="4" size="4"/><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[219]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[CSV Register Reads]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhStartDate, MpanCore, Site, Supply
from java.text import SimpleDateFormat, DecimalFormat
from java.lang import Math, System
from net.sf.chellow.billing import SupplierContract, NonCoreContract
from org.python.util import PythonInterpreter

year = inv.getInteger("end-year")
month = inv.getInteger("end-month")
months = inv.getInteger("months")

if not inv.isValid():
    raise UserException()

if inv.hasParameter('supply-id'):
    supply_id = inv.getLong('supply-id')
    query = Hiber.session().createQuery("select read, read.bill, read.bill.supply from RegisterRead read where read.bill.supply = :supply and (read.presentDate.date >= :startDate and read.presentDate.date <= :finishDate) or (read.previousDate.date >= :startDate and read.previousDate.date <= :finishDate) order by read.bill.supply.id").setEntity('supply', Supply.getSupply(supply_id))
else:
    query = Hiber.session().createQuery("select read, read.bill, read.bill.supply, read.bill.batch from RegisterRead read where (read.presentDate.date >= :startDate and read.presentDate.date <= :finishDate) or (read.previousDate.date >= :startDate and read.previousDate.date <= :finishDate) order by read.bill.supply.id")

cal = MonadDate.getCalendar()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())
cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, -1 * months)
start_date = HhStartDate(cal.getTime())

now_date = Date()
file_date_format = SimpleDateFormat("yyyyMMdd'T'HHmm")
file_date_format.setCalendar(cal)

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=reads_' + file_date_format.format(now_date) + '.csv;')
pw = inv.getResponse().getWriter()
pw.println("Duration Start,Duration Finish,Supply Id,Import MPAN Core,Export MPAN Core,Batch Reference,Bill Id,Bill Reference,Bill Issue Date,Bill Type,Register Read Id,TPR,Coefficient,Previous Read Date,Previous Read Value,Prevous Read Type,Present Read Date,Present Read Value,Present Read Type")
pw.flush()

issue_format = SimpleDateFormat("yyyy-MM-dd HH:mm")
issue_format.setCalendar(cal)

reads = query.setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate()).scroll()
while reads.next():
    read = reads.get(0)
    bill = reads.get(1)
    supply = reads.get(2)
    batch = reads.get(3)

    generation = supply.getGeneration(bill.getStartDate())
    import_mpan = generation.getImportMpan()
    if import_mpan is None:
        import_mpan_core = ''
    else:
        import_mpan_core = import_mpan.getCore()
    export_mpan = generation.getExportMpan()
    if export_mpan is None:
        export_mpan_core = ''
    else:
        export_mpan_core = export_mpan.getCore()

    pw.println(','.join('"' + str(value) + '"' for value in [start_date, finish_date, supply.getId(), import_mpan_core, export_mpan_core, batch.getReference(),bill.getId(), bill.getReference(), issue_format.format(bill.getIssueDate()), bill.getType().getCode(), read.getId(), read.getTpr(), read.getCoefficient(), read.getPreviousDate(), read.getPreviousValue(), read.getPreviousType(), read.getPresentDate(), read.getPresentValue(), read.getPresentType()]))
    pw.flush()
    Hiber.session().clear()

reads.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[221]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[System Price Importer]]></value>
        <value><![CDATA[from java.lang import Thread
from net.sf.chellow.billing import NonCoreContract, HhdcContract
from net.sf.chellow.monad import XmlTree, UserException, Monad, MonadMessage
from net.sf.chellow.monad.types import MonadUri

debug = ''

computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])
contract_f = comterp.get('contract_function')

REPORT_URI = MonadUri("/reports/221/output/")

source = doc.getDocumentElement()

system_price_contract = NonCoreContract.getNonCoreContract('system-price')
ctx = inv.getMonad().getServletConfig().getServletContext()

task = system_price_contract.callFunction('get_system_price_task', [ctx])

if task is not None:
    importer_element = doc.createElement("importer")
    source.appendChild(importer_element);
    importer_element.setAttribute('is-locked', str(task.is_locked()))

    for message in task.messages:
        log_item_element = doc.createElement('log-item')
        importer_element.appendChild(log_item_element)
        log_item_element.setAttribute('message', message)

try:
    if inv.hasParameter('remove'):
        contract_f(system_price_contract, 'remove_system_price_task')(ctx)
        inv.sendSeeOther(REPORT_URI)
    elif inv.hasParameter('start'):
        contract_f(system_price_contract, 'start_system_price_task')(ctx)
        inv.sendSeeOther(REPORT_URI)
    elif inv.hasParameter('now'):
        Thread(task, "System Price Now").start()
        inv.sendSeeOther(REPORT_URI)
except UserException, e:
    source.appendChild(MonadMessage(e.getMessage()).toXml(doc))

source.setAttribute('debug', debug)]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN" doctype-system="http://www.w3.org/TR/html4/strict.dtd"
        indent="yes" />

    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; System Price Importer
                </title>

            </head>
            <body>
                <p>
           <a href="{/source/request/@context-path}/reports/1/output/">
            <xsl:value-of select="'Chellow'" />
           </a>
                    &gt;
                    <xsl:value-of select="'System Price Importer'" />
                </p>
                <br />
<xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>

<p><a href=".">Refresh page</a><xsl:value-of select="/source/@debug"/></p>

                <xsl:choose>
                <xsl:when test="/source/importer">
<table>
                    <tr>
                        <th>Is Locked?</th>
                        <td>
                            <xsl:value-of select="/source/importer/@is-locked"/>
                        </td>
                    </tr>
                </table>
                <br/>
                <xsl:if test="/source/importer/@is-locked='False'">
                <form action=".">
                            <fieldset>
                                <legend>Remove Importer</legend>
                                <input type="submit" value="Remove" name="remove" />
                            </fieldset>
                        </form>
                        <br/>
<form action=".">
                            <fieldset>
                                <legend>Import Now</legend>
                                <input type="submit" value="Import" name="now" />
                            </fieldset>
                        </form>
                 </xsl:if>
<h3>Log</h3>
                <ul>
                    <xsl:for-each select="/source/importer/log-item">
                        <li>
                            <xsl:value-of select="@message" />
                        </li>
                    </xsl:for-each>
                </ul>
                </xsl:when>
                <xsl:otherwise>
                   <form action=".">
                            <fieldset>
                                <legend>Start Importer</legend>
                                <input type="submit" value="Start" name="start" />
                            </fieldset>
                        </form>
                </xsl:otherwise>
                </xsl:choose>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[223]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Transmission Loss Multiplier Importer]]></value>
        <value><![CDATA[from java.lang import Thread
from net.sf.chellow.billing import NonCoreContract, HhdcContract
from net.sf.chellow.monad import XmlTree, UserException, Monad, MonadMessage
from net.sf.chellow.monad.types import MonadUri

debug = ''

computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])
contract_f = comterp.get('contract_function')

REPORT_URI = MonadUri("/reports/223/output/")

source = doc.getDocumentElement()

tlm_contract = NonCoreContract.getNonCoreContract('tlms')
ctx = inv.getMonad().getServletConfig().getServletContext()

task = tlm_contract.callFunction('get_tlm_task', [ctx])

if task is not None:
    importer_element = doc.createElement("importer")
    source.appendChild(importer_element);
    importer_element.setAttribute('is-locked', str(task.is_locked()))

    for message in task.messages:
        log_item_element = doc.createElement('log-item')
        importer_element.appendChild(log_item_element)
        log_item_element.setAttribute('message', message)

try:
    if inv.hasParameter('remove'):
        contract_f(tlm_contract, 'remove_tlm_task')(ctx)
        inv.sendSeeOther(REPORT_URI)
    elif inv.hasParameter('start'):
        contract_f(tlm_contract, 'start_tlm_task')(ctx)
        inv.sendSeeOther(REPORT_URI)
    elif inv.hasParameter('now'):
        Thread(task, "TLM Import Now").start()
        inv.sendSeeOther(REPORT_URI)
except UserException, e:
    source.appendChild(MonadMessage(e.getMessage()).toXml(doc))

source.setAttribute('debug', debug)]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN" doctype-system="http://www.w3.org/TR/html4/strict.dtd"
        indent="yes" />

    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; TLM Importer
                </title>

            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'TLM Importer'" />
                </p>
                <br />
<xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>

<p><a href=".">Refresh page</a><xsl:value-of select="/source/@debug"/></p>

                <xsl:choose>
                <xsl:when test="/source/importer">
<table>
                    <tr>
                        <th>Is Locked?</th>
                        <td>
                            <xsl:value-of select="/source/importer/@is-locked"/>
                        </td>
                    </tr>
                </table>
                <br/>
                <xsl:if test="/source/importer/@is-locked='False'">
                <form action=".">
                            <fieldset>
                                <legend>Remove Importer</legend>
                                <input type="submit" value="Remove" name="remove" />
                            </fieldset>
                        </form>
                        <br/>
<form action=".">
                            <fieldset>
                                <legend>Import Now</legend>
                                <input type="submit" value="Import" name="now" />
                            </fieldset>
                        </form>
                 </xsl:if>
<h3>Log</h3>
                <ul>
                    <xsl:for-each select="/source/importer/log-item">
                        <li>
                            <xsl:value-of select="@message" />
                        </li>
                    </xsl:for-each>
                </ul>
                </xsl:when>
                <xsl:otherwise>
                   <form action=".">
                            <fieldset>
                                <legend>Start Importer</legend>
                                <input type="submit" value="Start" name="start" />
                            </fieldset>
                        </form>
                </xsl:otherwise>
                </xsl:choose>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[225]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[RCRC Importer]]></value>
        <value><![CDATA[from java.lang import Thread
from net.sf.chellow.billing import NonCoreContract, HhdcContract
from net.sf.chellow.monad import XmlTree, UserException, Monad, MonadMessage
from net.sf.chellow.monad.types import MonadUri

debug = ''

computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])
contract_f = comterp.get('contract_function')

REPORT_URI = MonadUri("/reports/225/output/")

source = doc.getDocumentElement()

rcrc_contract = NonCoreContract.getNonCoreContract('rcrc')
ctx = inv.getMonad().getServletConfig().getServletContext()

task = rcrc_contract.callFunction('get_rcrc_task', [ctx])

if task is not None:
    importer_element = doc.createElement("importer")
    source.appendChild(importer_element);
    importer_element.setAttribute('is-locked', str(task.is_locked()))

    for message in task.messages:
        log_item_element = doc.createElement('log-item')
        importer_element.appendChild(log_item_element)
        log_item_element.setAttribute('message', message)

try:
    if inv.hasParameter('remove'):
        contract_f(rcrc_contract, 'remove_rcrc_task')(ctx)
        inv.sendSeeOther(REPORT_URI)
    elif inv.hasParameter('start'):
        contract_f(rcrc_contract, 'start_rcrc_task')(ctx)
        inv.sendSeeOther(REPORT_URI)
    elif inv.hasParameter('now'):
        Thread(task, "RCRC Import Now").start()
        inv.sendSeeOther(REPORT_URI)
except UserException, e:
    source.appendChild(MonadMessage(e.getMessage()).toXml(doc))

source.setAttribute('debug', debug)]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN" doctype-system="http://www.w3.org/TR/html4/strict.dtd"
        indent="yes" />

    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; Admin &gt; RCRC
                </title>

            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'RCRC Importer'" />
                </p>
                <br />
<xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>

<p><a href=".">Refresh page</a><xsl:value-of select="/source/@debug"/></p>

                <xsl:choose>
                <xsl:when test="/source/importer">
<table>
                    <tr>
                        <th>Is Locked?</th>
                        <td>
                            <xsl:value-of select="/source/importer/@is-locked"/>
                        </td>
                    </tr>
                </table>
                <br/>
                <xsl:if test="/source/importer/@is-locked='False'">
                <form action=".">
                            <fieldset>
                                <legend>Remove Importer</legend>
                                <input type="submit" value="Remove" name="remove" />
                            </fieldset>
                        </form>
                        <br/>
<form action=".">
                            <fieldset>
                                <legend>Import Now</legend>
                                <input type="submit" value="Import" name="now" />
                            </fieldset>
                        </form>
                 </xsl:if>
<h3>Log</h3>
                <ul>
                    <xsl:for-each select="/source/importer/log-item">
                        <li>
                            <xsl:value-of select="@message" />
                        </li>
                    </xsl:for-each>
                </ul>
                </xsl:when>
                <xsl:otherwise>
                   <form action=".">
                            <fieldset>
                                <legend>Start Importer</legend>
                                <input type="submit" value="Start" name="start" />
                            </fieldset>
                        </form>
                </xsl:otherwise>
                </xsl:choose>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[227]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[Importer: BSUoS]]></value>
        <value><![CDATA[from java.lang import Thread
from net.sf.chellow.billing import NonCoreContract, HhdcContract
from net.sf.chellow.monad import XmlTree, UserException, Monad, MonadMessage
from net.sf.chellow.monad.types import MonadUri

debug = ''

computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])
contract_f = comterp.get('contract_function')

REPORT_URI = MonadUri("/reports/227/output/")

source = doc.getDocumentElement()

bsuos_contract = NonCoreContract.getNonCoreContract('bsuos')
ctx = inv.getMonad().getServletConfig().getServletContext()

task = bsuos_contract.callFunction('get_bsuos_task', [ctx])

if task is not None:
    importer_element = doc.createElement("importer")
    source.appendChild(importer_element);
    importer_element.setAttribute('is-locked', str(task.is_locked()))

    for message in task.messages:
        log_item_element = doc.createElement('log-item')
        importer_element.appendChild(log_item_element)
        log_item_element.setAttribute('message', message)

try:
    if inv.hasParameter('remove'):
        contract_f(bsuos_contract, 'remove_bsuos_task')(ctx)
        inv.sendSeeOther(REPORT_URI)
    elif inv.hasParameter('start'):
        contract_f(bsuos_contract, 'start_bsuos_task')(ctx)
        inv.sendSeeOther(REPORT_URI)
    elif inv.hasParameter('now'):
        Thread(task, "BSUoS Import Now").start()
        inv.sendSeeOther(REPORT_URI)
except UserException, e:
    source.appendChild(MonadMessage(e.getMessage()).toXml(doc))

source.setAttribute('debug', debug)]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN" doctype-system="http://www.w3.org/TR/html4/strict.dtd"
        indent="yes" />

    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; Admin &gt; BSUoS
                </title>

            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Chellow'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'BSUoS Importer'" />
                </p>
                <br />
<xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>

<p><a href=".">Refresh page</a><xsl:value-of select="/source/@debug"/></p>

                <xsl:choose>
                <xsl:when test="/source/importer">
<table>
                    <tr>
                        <th>Is Locked?</th>
                        <td>
                            <xsl:value-of select="/source/importer/@is-locked"/>
                        </td>
                    </tr>
                </table>
                <br/>
                <xsl:if test="/source/importer/@is-locked='False'">
                <form action=".">
                            <fieldset>
                                <legend>Remove Importer</legend>
                                <input type="submit" value="Remove" name="remove" />
                            </fieldset>
                        </form>
                        <br/>
<form action=".">
                            <fieldset>
                                <legend>Import Now</legend>
                                <input type="submit" value="Import" name="now" />
                            </fieldset>
                        </form>
                 </xsl:if>
<h3>Log</h3>
                <ul>
                    <xsl:for-each select="/source/importer/log-item">
                        <li>
                            <xsl:value-of select="@message" />
                        </li>
                    </xsl:for-each>
                </ul>
                </xsl:when>
                <xsl:otherwise>
                   <form action=".">
                            <fieldset>
                                <legend>Start Importer</legend>
                                <input type="submit" value="Start" name="start" />
                            </fieldset>
                        </form>
                </xsl:otherwise>
                </xsl:choose>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[229]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MOP Contract Virtual Bill Selector]]></value>
        <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.billing import MopContract

contract_id = inv.getLong('mop-contract-id')
if not inv.isValid():
    raise UserException()

contract = MopContract.getMopContract(contract_id)


cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.MONTH, -1)
source.appendChild(MonadDate(cal.getTime()).toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(contract.toXml(doc))]]></value>
        <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
<head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/19/output/" />

                <title>
                    Chellow &gt; MOP Contracts &gt;
                    <xsl:value-of select="/source/mop-contract/@name" /> &gt; Virtual Bills
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Chellow'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/185/output/">
                        <xsl:value-of select="'MOP Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/107/output/?mop-contract-id={/source/mop-contract/@id}">
                    <xsl:value-of
                        select="/source/mop-contract/@name" />
                    </a>
                    &gt;
                    Virtual Bills
                </p>

                  <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action="{/source/request/@context-path}/reports/231/output/">
                    <fieldset>
                        <legend>Download Virtual Bills</legend>
                        <input type="hidden" name="contract-id" value="{/source/mop-contract/@id}"/>
<br/>
<xsl:value-of select="'For '"/>
<input name="months" value="1" maxlength="2" size="2" />
<xsl:value-of select="' month(s) until the end of '"/>
                        <input name="end-year" value="{/source/date/@year}" maxlength="4" size="4" /><xsl:value-of select="' - '"/>
                        <select name="end-month">
                            <xsl:for-each select="/source/months/month">
                                <option value="{@number}">
                                    <xsl:if test="@number=/source/date/@month">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@number"/>
                                </option>
                            </xsl:for-each>
                        </select>
                        <input type="submit" value="Download"/>
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[231]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[MOP Contract Virtual Bills]]></value>
        <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.monad.types import MonadDate
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.physical import HhStartDate, Supply
from java.sql import Timestamp, ResultSet
from net.sf.chellow.billing import MopContract, NonCoreContract
    
inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()
end_year = inv.getInteger("end-year")
end_month = inv.getInteger("end-month")
months = inv.getInteger("months")
contract_id = inv.getLong('contract-id')
if not inv.isValid():
    raise UserException()

contract = MopContract.getMopContract(contract_id)

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.set(Calendar.YEAR, end_year)
cal.set(Calendar.MONTH, end_month - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finish_date = HhStartDate(cal.getTime())

cal.add(Calendar.MINUTE, 30)
cal.add(Calendar.MONTH, months * -1)
start_date = HhStartDate(cal.getTime())

computer = NonCoreContract.getNonCoreContract('computer')
comterp = computer.callFunction('create_comterp', [])

forecast_date = comterp.get('forecast_date')()

pw.print('Import MPAN Core, Export MPAN Core, Start Date, Finish Date')
bill_titles = comterp.get('contract_function')(contract, 'virtual_bill_titles')()
for title in bill_titles:
    pw.print(',' + title)
pw.println('')
pw.flush()

generations = Hiber.session().createQuery("select distinct generation from SupplyGeneration generation where (generation.finishDate.date is null or generation.finishDate.date >= :startDate) and generation.startDate.date <= :finishDate and generation.mopContract = :contract order by generation.supply.id").setEntity('contract', contract).setTimestamp('startDate', start_date.getDate()).setTimestamp('finishDate', finish_date.getDate()).scroll()
while generations.next():
    generation = generations.get(0)
    import_mpan = generation.getImportMpan()
    if import_mpan is None:
        import_mpan_core_str = ''
    else:
        mpan = import_mpan
        import_mpan_core_str = import_mpan.getCore().toString()

    export_mpan = generation.getExportMpan()
    if export_mpan is None:
        export_mpan_core_str = ''
    else:
        mpan = export_mpan
        export_mpan_core_str = export_mpan.getCore().toString()

    pw.print(import_mpan_core_str + ',' + export_mpan_core_str + ',' + str(start_date) + ',' + str(finish_date) + ',')
    supply_source = comterp.get('supply_source')(forecast_date, comterp, pw)
    supply_source.init_from_mpan(start_date, finish_date, mpan)
    bill = supply_source.contract_function(contract, 'virtual_bill')(supply_source)
    for title in bill_titles:
        pw.print('"' + str(bill.get(title, '')) + '",')
        if title in bill:
            del bill[title]
    keys = bill.keys()
    keys.sort()
    for k in keys:
        pw.print(',"' + k + '","' + str(bill[k]) + '"')
    pw.println('')
    pw.flush()
    Hiber.session().clear()
generations.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[report]]></value>
        <value><![CDATA[233]]></value>
        <value><![CDATA[true]]></value>
        <value><![CDATA[DC Channel Snags CSV]]></value>
        <value><![CDATA[from net.sf.chellow.monad import XmlTree, Hiber, UserException
from java.util import Date, Locale
from java.lang import System
from net.sf.chellow.billing import HhdcContract
from net.sf.chellow.physical import HhStartDate
from java.text import SimpleDateFormat

inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()
pw.println("Chellow Id,MPAN Core,Site Code,Site Name,Snag Description,Is Import?,Is kWh?,Start Date,Finish Date,Days Since Snag Finished,Duration Of Snag (Days),Is Ignored?")
pw.flush()

contract_id = inv.getLong('dc-contract-id')
if not inv.isValid():
    raise UserException()

formatter = SimpleDateFormat("yyyy/MM/dd HH:mm", Locale.UK)

contract = HhdcContract.getHhdcContract(contract_id)

snags = Hiber.session().createQuery("select snag, ss_gen.site, snag.channel, snag.channel.supplyGeneration from ChannelSnag snag join snag.channel.supplyGeneration.siteSupplyGenerations ss_gen where snag.channel.supplyGeneration.hhdcContract = :contract and ss_gen.isPhysical is true order by snag.isIgnored, snag.startDate.date, snag.id").setEntity('contract', contract).scroll()

MILLIS_IN_DAY = 1000 * 60 * 60 * 24

now = Date().getTime()

while snags.next():
    snag = snags.get(0)
    site = snags.get(1)
    channel = snags.get(2)
    generation = snags.get(3)
    mpan = generation.getMpans().iterator().next()
    
    snag_start = snag.getStartDate()
    snag_finish = snag.getFinishDate()
    snag_start_millis = snag_start.getDate().getTime()
    if snag_finish is None:
        snag_finish_str = ''
        duration = float(now - snag_start_millis) / MILLIS_IN_DAY
        age_of_snag = 0
    else:
        snag_finish_millis = snag_finish.getDate().getTime()
        snag_finish_str = formatter.format(snag_finish.getDate())
        duration = float(snag_finish_millis - snag_start_millis) / MILLIS_IN_DAY
        age_of_snag = (now - snag_finish_millis) / MILLIS_IN_DAY

    pw.println(','.join('"' + str(val) + '"' for val in [snag.getId(), mpan.getCore(), site.getCode(), site.getName(), snag.getDescription(), channel.getIsImport(), channel.getIsKwh(), formatter.format(snag_start.getDate()), snag_finish_str, age_of_snag, duration, snag.getIsIgnored()]))
    pw.flush()
    Hiber.session().clear()
snags.close()
pw.close()]]></value>
        <value><![CDATA[]]></value>
    </line>
</csv>