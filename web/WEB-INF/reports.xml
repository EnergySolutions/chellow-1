<?xml version="1.0"?>
<csv>
  <line>
    <value>action</value>
    <value>type</value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Home</value>
    <value><![CDATA[]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="html" encoding="US-ASCII"
      doctype-public="-//W3C//DTD HTML 4.01//EN"
      doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
  <xsl:template match="/">
    <html>
      <head>
        <link rel="stylesheet" type="text/css"
      href="{/source/request/@context-path}/orgs/{/source/org/@id}/reports/9/stream/output/" />
    <title>
      Home
    </title>
      </head>
      <body>
        <p>
          <xsl:value-of select="'Home ['" />
      <a href="{/source/request/@context-path}/">
      <xsl:value-of select="'edit'" />
      </a>
      <xsl:value-of select="']'" />
    </p>
        <xsl:if test="//message">
          <ul>
            <xsl:for-each select="//message">
              <li>
                <xsl:value-of select="@description" />
              </li>
        </xsl:for-each>
          </ul>
        </xsl:if>
        <ul>
          <li>
            <a href="{/source/request/@context-path}/reports/2/output/">Sites</a>
          </li>
          <li>
            <a href="{/source/request/@context-path}/reports/50/output/">
              Supplies
            </a>
          </li>
          <li>
            <a href="{/source/request/@context-path}/reports/57/output/">HHDC Contracts
            </a>
          </li>
          <li><a href="{/source/request/@context-path}/reports/38/output/">Supplier Contracts
          </a>
      </li>
        </ul>
        <h3>Bulk CSV downloads</h3>
        <ul>
          <li><a href="{/source/request/@context-path}/reports/17/output/">Electricity Supply Details
            </a>
          </li>
        </ul>
        <h3>Industry Info</h3>
        <ul>
          <li>
            <a href="{/source/request/@context-path}/reports/36/output/">
            Market Participants
            </a>
          </li>
          <li>
            <a href="{/source/request/@context-path}/reports/61/output/">
              Market Roles
            </a>
          </li>
          <li>
            <a href="{/source/request/@context-path}/reports/69/output/">DSOs
            </a>
          </li>
          <li><a href="{/source/request/@context-path}/reports/23/output/">
            Providers
            </a>
          </li>
          <li><a href="{/source/request/@context-path}/reports/27/output/">
            Profile Classes
            </a>
          </li>
          <li>
          <a
             href="{/source/request/@context-path}/reports/31/output/">
    Meter Timeswitch Classes
            </a>
                    </li>
                    <li>
                        <a
    href="{/source/request/@context-path}/reports/65/output/">
                            Meter Types
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/67/output/">
                            Meter Payment Types
                        </a>
                    </li>
                    <li>
                        <a
    href="{/source/request/@context-path}/reports/48/output/">
                            TPRs
                        </a>
                    </li>
                    <li>
<a href="{/source/request/@context-path}/reports/63/output/">
                            SSCs
                        </a>
                    </li>
                    <li>
                        <a
    href="{/source/request/@context-path}/reports/71/output/">
    Read Types
                        </a>
                    </li>
                    <li>
                        <a
    href="{/source/request/@context-path}/reports/22/output/">
    GSP Groups
                        </a>
                    </li>
                </ul>
      </body>
    </html>
  </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Sites</value>
    <value><![CDATA[
from net.sf.chellow.monad import Hiber

if inv.hasParameter('search-pattern'):
    search_pattern = inv.getString('search-pattern')
    for site in Hiber.session().createQuery("from Site site where lower(site.code || ' ' || site.name) like '%' || lower(:searchPattern) || '%' order by site.code").setString("searchPattern", search_pattern).setMaxResults(50).list():
        source.appendChild(site.toXml(doc))
]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:output method="html" encoding="US-ASCII"
		doctype-public="-//W3C//DTD HTML 4.01//EN"
		doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
	<xsl:template match="/">
		<html>
			<head>
				<link rel="stylesheet" type="text/css"
					href="{/source/request/@context-path}/reports/10/output/" />
				<title>
					Home &gt; Sites
				</title>
			</head>
			<body>
				<p>
					<a
						href="{/source/request/@context-path}/reports/1/output/">
						<xsl:value-of select="'Home'" />
					</a>
					&gt;
					<xsl:value-of select="'Sites ['" />
					<a
						href="{/source/request/@context-path}/sites/">
						<xsl:value-of select="'edit'" />
					</a>
					<xsl:value-of select="']'" />
				</p>
				<br />
				<xsl:if test="//message">
					<ul>
						<xsl:for-each select="//message">
							<li>
								<xsl:value-of select="@description" />
							</li>
						</xsl:for-each>
					</ul>
				</xsl:if>
				<form action=".">
					<fieldset>
						<input name="search-pattern"
							value="{/source/request/parameter[@name='search-pattern']/value}" />
						<xsl:value-of select="' '" />
						<input type="submit" value="Search" />
					</fieldset>
				</form>
				<xsl:choose>
					<xsl:when test="/source/site">
						<p>
							Only the first 50 sites of the search
							results are shown.
						</p>
						<ul>
							<xsl:for-each select="/source/site">
								<li>
									<a
										href="{/source/request/@context-path}/reports/3/output/?site-id={@id}">
										<xsl:value-of
											select="concat(@code, ' ', @name)" />
									</a>
								</li>
							</xsl:for-each>
						</ul>
					</xsl:when>
					<xsl:when
						test="/source/request/parameter[@name='search-pattern']">
						<p>No sites matched your search</p>
					</xsl:when>
				</xsl:choose>
			</body>
		</html>
	</xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Site</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.monad.types import MonadDate
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import Site

site_id = inv.getLong("site-id")
if not inv.isValid():
    raise UserException()
site = Site.getSite(site_id)
site_element = site.toXml(doc)
source.appendChild(site_element)
last_supply = None
last_supply_generation = None
supply_element = None
for supply_generation in Hiber.session().createQuery("select siteSupplyGeneration.supplyGeneration from SiteSupplyGeneration siteSupplyGeneration where siteSupplyGeneration.site = :site order by siteSupplyGeneration.supplyGeneration.supply.id, siteSupplyGeneration.supplyGeneration.finishDate.date desc").setEntity('site', site).list():
    supply = supply_generation.getSupply()
    if not supply.equals(last_supply) or not supply_generation.getFinishDate().getNext().equals(last_supply_generation.getStartDate()):
        supply_element = supply.toXml(doc, XmlTree('source'))
        site_element.appendChild(supply_element)
    supply_element.appendChild(supply_generation.toXml(doc, XmlTree("mpans", XmlTree("core").put('top', XmlTree('llfc')))))
    last_supply = supply
    last_supply_generation = supply_generation
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.add(Calendar.DAY_OF_MONTH, -1)
yesterday = MonadDate(cal.getTime())
yesterday.setLabel('yesterday')
source.appendChild(yesterday.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
  <xsl:template match="/">
    <html>
      <head>
        <link rel="stylesheet" type="text/css"  href="{/source/request/@context-path}/reports/10/output/" />
          <title>
            Home &gt; Sites &gt;
              <xsl:value-of select="/source/site/@name" />
          </title>
      </head>
      <body>
        <p>
          <a href="{/source/request/@context-path}/reports/1/output/"><xsl:value-of select="'Home'" /></a> &gt;
          <a href="{/source/request/@context-path}/reports/2/output/"><xsl:value-of select="'Sites'" /></a>
          &gt; <xsl:value-of select="concat(/source/site/@name, ' [')" />
          <a href="{/source/request/@context-path}/sites/{/source/site/@id}/">
          <xsl:value-of select="'edit'" /></a>
          <xsl:value-of select="']'" />
        </p>
    <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of select="/source/site/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/site/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Name</th>
                        <td>
                            <xsl:value-of select="/source/site/@name" />
                        </td>
                    </tr>
                </table>
                <table>
                    <caption>Supplies that power this site</caption>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Name</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Source</th>
                            <th>Import MPAN core</th>
                            <th>Export MPAN core</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/site/supply[not(supply-generation[1]/hh-end-date[@label='finish'])]">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/4/output/?supply-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@name" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(supply-generation[last()]/hh-end-date[@label='start']/@year, '-', supply-generation[last()]/hh-end-date[@label='start']/@month, '-', supply-generation[last()]/hh-end-date[@label='start']/@day)" />
                                </td>
                                <td>Ongoing</td>
                                <td>
                                    <xsl:value-of select="source/@code" />
                                </td>
                                <td>
                                    <xsl:if
                                        test="supply-generation/mpan[mpan-top/llfc/@is-import='true']">
                                        <xsl:value-of
                                            select="supply-generation/mpan[mpan-top/llfc/@is-import='true']/mpan-core/@core" />
                                    </xsl:if>
                                </td>
                                <td>
                                    <xsl:if
                                        test="supply-generation/mpan[mpan-top/llfc/@is-import='false']">
                                        <xsl:value-of
                                            select="supply-generation/mpan[mpan-top/llfc/@is-import='false']/mpan-core/@core" />
                                    </xsl:if>
                                </td>
                            </tr>
                        </xsl:for-each>
                        <xsl:if
                            test="/source/site/supply[supply-generation[1]/hh-end-date[@label='finish']]">
                            <xsl:for-each
                                select="/source/site/supply[supply-generation[1]/hh-end-date[@label='finish']]">
                                <tr>
                                    <td>
                                        <a
                                            href="{/source/request/@context-path}/reports/4/output/?supply-id={@id}">
                                            <xsl:value-of select="@id" />
                                        </a>
                                    </td>
                                    <td>
                                        <xsl:value-of select="@name" />
                                    </td>
                                    <td>
                                        <xsl:value-of
                                            select="concat(supply-generation[last()]/hh-end-date[@label='start']/@year, '-', supply-generation[last()]/hh-end-date[@label='start']/@month, '-', supply-generation[last()]/hh-end-date[@label='start']/@day)" />
                                    </td>
                                    <td>
                                        <xsl:value-of
                                            select="concat(supply-generation[1]/hh-end-date[@label='finish']/@year, '-', supply-generation[1]/hh-end-date[@label='finish']/@month, '-', supply-generation[1]/hh-end-date[@label='finish']/@day)" />
                                    </td>
                                    <td>
                                        <xsl:value-of
                                            select="source/@code" />
                                    </td>
                                    <td>
                                        <xsl:if
                                            test="supply-generation/mpan[@label='import']">
                                            <xsl:value-of
                                                select="supply-generation/mpan[@label='import']/mpan-core/@core" />
                                        </xsl:if>
                                    </td>
                                    <td>
                                        <xsl:if
                                            test="supply-generation/mpan[@label='export']">
                                            <xsl:value-of
                                                select="supply-generation/mpan[@label='export']/mpan-core/@core" />
                                        </xsl:if>
                                    </td>
                                </tr>
                            </xsl:for-each>
                        </xsl:if>
                    </tbody>
                </table>

      <ul>
        <li><a href="{/source/request/@context-path}/reports/5/output/?site-id={/source/site/@id}"><xsl:value-of select="'Graph of site usage'" /></a>
         </li>
         <li><a href="{/source/request/@context-path}/reports/6/output/?site-id={/source/site/@id}">
         <xsl:value-of select="'Generation Graphs'" />
                        </a>
          </li>
          <li><a href="{/source/request/@context-path}/reports/7/output/?site-id={/source/site/@id}">
<xsl:value-of select="'Table of site level monthly kWh, MD kWh etc.'" /></a>
          </li>
          <li>
        <a href="{/source/request/@context-path}/reports/13/output/?site-code={/source/site/@code}&amp;year={/source/date[@label = 'yesterday']/@year}&amp;month={/source/date[@label = 'yesterday']/@month}&amp;day={/source/date[@label='yesterday']/@day}">
                            <xsl:value-of select="'Table of hh data'" />
                        </a>
          </li>
          <li><a href="{/source/request/@context-path}/reports/14/output/?site-id={/source/site/@id}"><xsl:value-of select="'Bulk hh data download'" /></a>
          </li>
        </ul>
      </body>
    </html>
  </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supply</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException, XmlTree
from net.sf.chellow.monad.types import MonadDate

supply_id = inv.getLong("supply-id")
if not inv.isValid():
    raise UserException()
supply = Hiber.session().createQuery("select supply from Supply supply join supply.generations generation join generation.siteSupplyGenerations siteSupplyGeneration where supply.id = :supplyId").setLong("supplyId", supply_id).uniqueResult() 
source.appendChild(supply.toXml(doc, XmlTree("source").put("generations", XmlTree("mpans", XmlTree("core").put("top", XmlTree("mtc").put("pc").put("llfc", XmlTree("voltageLevel"))).put("supplierAccount", XmlTree('contract')).put('hhdcAccount', XmlTree("contract", XmlTree("party"))))).put("mpanCores")))
source.appendChild(MonadDate().toXml(doc))
]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
  <xsl:template match="/">
    <html>
      <head>
        <link rel="stylesheet" type="text/css" href="{/source/request/@context-path}/reports/10/output/" />
        <title>
          Home &gt; Supplies &gt; <xsl:value-of select="/source/supply/@id" />
        </title>
      </head>
      <body>
        <p>
          <a href="{/source/request/@context-path}/reports/1/output/">
    <xsl:value-of select="'Home'" /></a> &gt;
          <a href="{/source/request/@context-path}/reports/50/output/">
        <xsl:value-of select="'Supplies'" />
        </a> &gt;  <xsl:value-of select="concat(/source/supply/@id, ' [')" />
        <a href="{/source/request/@context-path}/supplies/{/source/supply/@id}/">
        <xsl:value-of select="'edit'" /></a>
    <xsl:value-of select="']'" />
        </p>
          <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <ul>
                    <li>
                        <xsl:value-of
                            select="concat('Name: ', /source/supply/@name)" />
                    </li>
                    <li>
                        <xsl:value-of
                            select="concat('Source: ', /source/supply/source/@code, ' - ', /source/supply/source/@name)" />
                    </li>
                </ul>

                <table>
                    <caption>Generations</caption>
                    <thead>
                        <tr>
                            <th rowspan="2">Id</th>
                            <th rowspan="2">From</th>
                            <th rowspan="2">To</th>
                            <th colspan="3">Import</th>
                            <th colspan="3">Export</th>
                        </tr>
                        <tr>
                            <th>MPAN</th>
                            <th>kVA</th>
                            <th>Supplier Account</th>
                            <th>MPAN</th>
                            <th>kVA</th>
                            <th>Supplier Account</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/supply/supply-generation">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/16/output/?supply-generation-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-end-date[@label='start']/@year, '-', hh-end-date[@label='start']/@month, '-', hh-end-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="hh-end-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(hh-end-date[@label='finish']/@year, '-', hh-end-date[@label='finish']/@month, '-', hh-end-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(mpan[mpan-top/llfc/@is-import='true']/mpan-top/pc/@code, ' ', mpan[mpan-top/llfc/@is-import='true']/mpan-top/mtc/@code, ' ', mpan[mpan-top/llfc/@is-import='true']/llfc/@code, ' ', mpan[mpan-top/llfc/@is-import='true']/mpan-core/@core)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="mpan[mpan-top/llfc/@is-import='true']/@agreed-supply-capacity" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/42/output/?account-id={mpan[mpan-top/llfc/@is-import='true']/account[supplier-contract]/@id}">
                                        <xsl:value-of
                                            select="mpan[mpan-top/llfc/@is-import='true']/account[supplier-contract]/@reference" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(mpan[mpan-top/llfc/@is-import='false']/pc/@code, ' ', mpan[mpan-top/llfc/@is-import='false']/mtc/@code, ' ', mpan[mpan-top/llfc/@is-import='false']/llfc/@code, ' ', mpan[mpan-top/llfc/@is-import='false']/mpan-core/@core)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="mpan[mpan-top/llfc/@is-import='false']/@agreed-supply-capacity" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/42/output/?account-id={mpan[mpan-top/llfc/@is-import='false']/account[supplier-contract]/@id}">
                                        <xsl:value-of
                                            select="mpan[mpan-top/llfc/@is-import='false']/account[supplier-contract]/@reference" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
                <ul>
                    <li>
                        kWh, kVA, MD etc. by month:
                        <a
                            href="{/source/request/@context-path}/reports/8/output/?supply-id={/source/supply/@id}&amp;is-import=true">
                            <xsl:value-of select="'Import'" />
                        </a>
                        <xsl:value-of select="' '" />
                        <a
                            href="{/source/request/@context-path}/reports/8/output/?supply-id={/source/supply/@id}&amp;is-import=false">
                            <xsl:value-of select="'Export'" />
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/9/output/?supply-id={/source/supply/@id}&amp;start-year={/source/date/@year}&amp;start-month={/source/date/@month}">
                            Raw HH data
                        </a>
                    </li>
                </ul>
            </body>
   </html>
  </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Site hh graph container</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import Site
from java.util import Calendar

site_id = inv.getLong("site-id")
site = Site.getSite(site_id)
source.appendChild(site.toXml(doc))
cal = MonadDate.getCalendar()

if inv.hasParameter("finish-date-year") and inv.hasParameter("finish-date-month"):
    year = inv.getInteger("finish-date-year")
    month = inv.getInteger("finish-date-month")
else:
    year = cal.get(Calendar.YEAR)
    month = cal.get(Calendar.MONTH) + 1
if inv.hasParameter("months"):
    months = inv.getInteger("months")
else:
    months = 1
for i in range(12):
    monthElement = doc.createElement("month")
    source.appendChild(monthElement)
    monthElement.setAttribute("value", str(i + 1))
source.setAttribute("finish-date-year", str(year))
source.setAttribute("finish-date-month", str(month))
source.setAttribute("months", str(months))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/style/" />
                <title>
                    Home &gt; Sites &gt;
                    <xsl:value-of select="/source/site/@name" />
                    HH graph of site use
                </title>
            </head>
            <body>
                <p>
                    <a href="{/source/request/@context-path}/reports/1/output/">Home</a> &gt;
                    <a href="{/source/request/@context-path}/reports/2/output/">
                        <xsl:value-of select="'Sites'" />
                    </a>
                    &gt; <a
                        href="{/source/request/@context-path}/reports/3/output/?site-id={/source/site/@id}">
                        <xsl:value-of select="/source/site/@name" />
                    </a>
                    &gt; HH graph of site use
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <p>
                    <img
                        src="{/source/request/@context-path}/reports/11/output/?site-id={/source/site/@id}&amp;finish-date-year={/source/@finish-date-year}&amp;finish-date-month={/source/@finish-date-month}&amp;months={/source/@months}" />
                </p>
                <form action=".">
                    <fieldset>
                        <legend>Show graph</legend>
                        <input type="hidden" name="site-id"
                            value="{/source/request/parameter[@name='site-id']/value}" />
                        <xsl:value-of select="'For '" />
                        <select name="months">
                            <xsl:for-each select="/source/month">
                                <option>
                                    <xsl:if
                                        test="/source/@months = @value">
                                        <xsl:attribute
   name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@value" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' months finishing in '" />
                        <input size="4" length="4"
                            name="finish-date-year" value="{/source/@finish-date-year}" />
                        <xsl:value-of select="' - '" />
                        <select name="finish-date-month">
                            <xsl:for-each select="/source/month">
                                <option>
                                    <xsl:if
                                        test="number(/source/@finish-date-month) = number(@value)">
                                        <xsl:attribute name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@value" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Show" />
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Site Generation Graph Container</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import Site
from java.util import Calendar

site_id = inv.getLong("site-id")
site = Site.getSite(site_id)
source.appendChild(site.toXml(doc))
cal = MonadDate.getCalendar()
if inv.hasParameter("finish-date-year"):
    year = inv.getInteger("finish-date-year")
else:
    year = cal.get(Calendar.YEAR)
source.setAttribute("finish-date-year", str(year))
if inv.hasParameter("finish-date-month"):
    month = inv.getInteger("finish-date-month")
else:
    month = cal.get(Calendar.MONTH)
if inv.hasParameter("months"):
    months = inv.getInteger("months")
else:
    months = 1
for i in range(12):
    monthElement = doc.createElement("month")
    source.appendChild(monthElement)
    monthElement.setAttribute("value", str(i + 1))
source.setAttribute("finish-date-year", str(year))
source.setAttribute("finish-date-month", str(month))
source.setAttribute("months", str(months))
source.appendChild(inv.requestXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml" encoding="US-ASCII"
    doctype-public="-//W3C//DTD XHTML 1.1//EN"
    doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
    indent="yes" />
  <xsl:template match="/">
    <html>
      <head>
        <link rel="stylesheet" type="text/css"
            href="{/source/request/@context-path}/style/" />
        <title>Home &gt; Sites &gt;
            <xsl:value-of select="/source/site/@name" />
        </title>
      </head>
      <body>
        <p>
          <a href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
          &gt;
          <a href="{/source/request/@context-path}/reports/2/output/">
            <xsl:value-of select="'Sites'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/3/output/?site-id={/source/site/@id}">
                        <xsl:value-of select="/source/site/@name" />
                    </a>
                    &gt; HH graph of generation
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>

                <p>
                    <img
                        src="{/source/request/@context-path}/reports/12/output/?site-id={/source/site/@id}&amp;finish-date-year={/source/@finish-date-year}&amp;finish-date-month={/source/@finish-date-month}&amp;months={/source/@months}" />
                </p>
                <form action=".">
                    <fieldset>
                        <legend>Show graph</legend>
                        <input type="hidden" name="site-id"
                            value="{/source/request/parameter[@name='site-id']/value}" />
                        <xsl:value-of select="'For '" />
                        <select name="months">
                            <xsl:for-each select="/source/month">
                                <option>
                                    <xsl:if
                                        test="/source/@months = @value">
                                        <xsl:attribute
                                            name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@value" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' months finishing in '" />
                        <input size="4" length="4"
                            name="finish-date-year" value="{/source/@finish-date-year}" />
                        <xsl:value-of select="' - '" />
                        <select name="finish-date-month">
                            <xsl:for-each select="/source/month">
                                <option>
                                    <xsl:if
                                        test="number(/source/@finish-date-month) = number(@value)">
                                        <xsl:attribute
                                            name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@value" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Show" />
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Site Monthly figures</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException, XmlTree
from java.lang import System
from net.sf.chellow.monad.types import MonadDate
import math
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhEndDate
from net.sf.chellow.physical import Site

siteId = inv.getLong("site-id")
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
if inv.hasParameter("finish-date-year"):
    year = inv.getInteger("finish-date-year")
    cal.set(Calendar.YEAR, year)
if inv.hasParameter("finish-date-month"):
    month = inv.getInteger("finish-date-month")
    cal.set(Calendar.MONTH, month)
for i in range(12):
    month_element = doc.createElement("month-in-year")
    source.appendChild(month_element)
    month_element.setAttribute('value', '%02d' % (i + 1))
#source.appendChild(inv.requestXml(doc))
if not inv.isValid():
    raise UserException()

cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
finishDate = HhEndDate(cal.getTime()).getDate()
cal.add(Calendar.MONTH, -1)
source.setAttribute("finish-date-year", str(cal.get(Calendar.YEAR)))
source.setAttribute("finish-date-month", str(cal.get(Calendar.MONTH) + 1))
cal.add(Calendar.MONTH, -11)
cal.add(Calendar.MINUTE, 30)
startDate = HhEndDate(cal.getTime()).getDate()
site = Site.getSite(siteId)
source.appendChild(site.toXml(doc))
supplies = Hiber.session().createQuery("select distinct supply from Supply supply join supply.generations supplyGeneration join supplyGeneration.siteSupplyGenerations siteSupplyGeneration where siteSupplyGeneration.site = :site and supply.source.code != 'sub'").setEntity('site', site).list()
suppliesSQL = ''
for supply in supplies:
    suppliesSQL = suppliesSQL + str(supply.getId()) + ','
con = Hiber.session().connection()
stmt = con.prepareStatement("select hh_datum.value, hh_datum.end_date, hh_datum.status, channel.is_import, supply.name, source.code from hh_datum, channel, supply, supply_generation, source where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = supply.id and supply.source_id = source.id and channel.is_kwh is true and hh_datum.end_date >= ? and hh_datum.end_date <= ? and supply.id in (" + suppliesSQL[:-1] + ") order by hh_datum.end_date desc", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
stmt.setTimestamp(1, Timestamp(startDate.getTime()))
stmt.setTimestamp(2, Timestamp(finishDate.getTime()))
stmt.setFetchSize(100)
rs = stmt.executeQuery()
hhDate = finishDate.getTime()
maxExportedKw = 0
maxExportedKwDate = None
maxExportedKwYear = 0
maxExportedKwYearDate = None
exportedKwhMonth = 0
exportedKwhYear = 0
exportedKwh = 0
maxImportedKw = 0
maxImportedKwDate = None
maxImportedKwYear = 0
maxImportedKwYearDate = None
importedKwhMonth = 0
importedKwhYear = 0
importedKwh = 0
maxGeneratedKw = 0
maxGeneratedKwDate = None
maxGeneratedKwYear = 0
maxGeneratedKwYearDate = None
generatedKwhMonth = 0
generatedKwhYear = 0
generatedKwh = 0
maxParasiticKw = 0
maxParasiticKwDate = None
maxParasiticKwYear = 0
maxParasiticKwYearDate = None
parasiticKwhMonth = 0
parasiticKwhYear = 0
parasiticKwh = 0
maxDisplacedKw = 0
maxDisplacedKwDate = None
maxDisplacedKwYear = 0
maxDisplacedKwYearDate = None
displacedKwhMonth = 0
displacedKwhYear = 0
displacedKwh = 0
maxUsedKw = 0
maxUsedKwDate = None
maxUsedKwYear = 0
maxUsedKwYearDate = None
usedKwhMonth = 0
usedKwhYear = 0
usedKwh = 0

siteSnagQuery = Hiber.session().createQuery("select count(*) from SiteSnag snag where snag.site = :site and snag.startDate.date <= :finishDate and snag.finishDate.date >= :startDate and (snag.dateResolved is null or (snag.dateResolved is not null and snag.isIgnored is true))").setEntity("site", site)

if rs.next():
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter("got to rs next")
    hhChannelKw = rs.getFloat("value") * 2
    hhChannelEndDate = rs.getTimestamp("end_date")
    isImport = rs.getBoolean("is_import")
    status = rs.getString("status")
    sourceCode = rs.getString("code")
    supplyName = rs.getString("name")
    finishDateMillis = finishDate.getTime()
    startDateMillis = startDate.getTime()
    cal.clear()
    cal.setTime(hhChannelEndDate)
    previousMonth = cal.get(Calendar.MONTH)
    #cal = net.sf.chellow.monad.vf.bo.MonadDate.getCalendar()
    while hhDate >= startDateMillis:
        exportedKw = 0
        importedKw = 0
        parasiticKw = 0
        generatedKw = 0
        while hhChannelEndDate != None and hhChannelEndDate.getTime() == hhDate:
            if not isImport and sourceCode == "net":
                exportedKw = exportedKw + hhChannelKw
            if isImport and sourceCode == "net":
                importedKw = importedKw + hhChannelKw
            if isImport and (sourceCode == "lm" or sourceCode == "chp" or sourceCode == "turb"):
                generatedKw = generatedKw + hhChannelKw
            if not isImport and (sourceCode == "lm" or sourceCode == "chp" or sourceCode == "turb"):
                parasiticKw = parasiticKw + hhChannelKw
            if rs.next():
                sourceCode = rs.getString("code")
                supplyName = rs.getString("name")
                hhChannelKw = rs.getFloat("value") * 2
                hhChannelEndDate = rs.getTimestamp("end_date")
                isImport = rs.getBoolean("is_import")
                status = rs.getString("status")
                cal.clear()
                cal.setTime(hhChannelEndDate)
                month = cal.get(Calendar.MONTH)
            else:
                hhChannelEndDate = None
        if exportedKw > maxExportedKw:
            maxExportedKw = exportedKw
            maxExportedKwDate = hhDate
        if importedKw > maxImportedKw:
            maxImportedKw = importedKw
            maxImportedKwDate = hhDate
        if generatedKw > maxGeneratedKw:
            maxGeneratedKw = generatedKw
            maxGeneratedKwDate = hhDate
        if parasiticKw > maxParasiticKw:
            maxParasiticKw = parasiticKw
            maxParasiticKwDate = hhDate
        displacedKw = generatedKw - parasiticKw - exportedKw
        if displacedKw > maxDisplacedKw:
            maxDisplacedKw = displacedKw
            maxDisplacedKwDate = hhDate
        usedKw = importedKw + displacedKw
        if usedKw > maxUsedKw:
            maxUsedKw = usedKw
            maxUsedKwDate = hhDate
        exportedKwhMonth = exportedKwhMonth + exportedKw / 2
        importedKwhMonth = importedKwhMonth + importedKw / 2
        generatedKwhMonth = generatedKwhMonth + generatedKw / 2
        parasiticKwhMonth = parasiticKwhMonth + parasiticKw / 2
        displacedKwhMonth = displacedKwhMonth + displacedKw / 2
        usedKwhMonth = usedKwhMonth + usedKw / 2
        cal.clear()
        cal.setTimeInMillis(hhDate)
        hhDate = HhEndDate.getPrevious(cal, hhDate)
        cal.clear()
        cal.setTimeInMillis(hhDate)
        if cal.get(Calendar.DAY_OF_MONTH) == 1 and cal.get(Calendar.HOUR_OF_DAY) == 0 and cal.get(Calendar.MINUTE) == 0:
            monthElement = doc.createElement("month")
            source.appendChild(monthElement)
            cal.add(Calendar.MINUTE, 30)
            monthStartDate = cal.getTime()
            cal.add(Calendar.MONTH, 1)
            cal.add(Calendar.MINUTE, -30)
            monthFinishDate = cal.getTime()
            if siteSnagQuery.setTimestamp("startDate", monthStartDate).setTimestamp("finishDate", monthFinishDate).uniqueResult() > 0:
                monthElement.setAttribute("has-site-snags", "true")
            monthStartMonadDate = HhEndDate(monthStartDate)
            monthStartMonadDate.setLabel("start")
            monthElement.appendChild(monthStartMonadDate.toXml(doc))
            monthFinishMonadDate = HhEndDate(monthFinishDate)
            monthFinishMonadDate.setLabel("finish")
            monthElement.appendChild(monthFinishMonadDate.toXml(doc))
            monthElement.setAttribute("max-exported-kw", str(int(round(maxExportedKw))))
            if maxExportedKwDate != None:
                monthElement.setAttribute("max-exported-kw-date", MonadDate(Date(maxExportedKwDate)).toString())
            monthElement.setAttribute("exported-kwh", str(int(round(exportedKwhMonth))))
            monthElement.setAttribute("max-imported-kw", str(int(round(maxImportedKw))))
            if maxImportedKwDate != None:
                monthElement.setAttribute("max-imported-kw-date", MonadDate(Date(maxImportedKwDate)).toString())
            monthElement.setAttribute("imported-kwh", str(int(round(importedKwhMonth))))
            monthElement.setAttribute("max-generated-kw", str(int(round(maxGeneratedKw))))
            if maxGeneratedKwDate != None:
                monthElement.setAttribute("max-generated-kw-date", MonadDate(Date(maxGeneratedKwDate)).toString())
            monthElement.setAttribute("generated-kwh", str(int(round(generatedKwhMonth))))
            monthElement.setAttribute("max-parasitic-kw", str(int(round(maxParasiticKw))))
            if maxParasiticKwDate != None:
                monthElement.setAttribute("max-parasitic-kw-date", MonadDate(Date(maxParasiticKwDate)).toString())
            monthElement.setAttribute("parasitic-kwh", str(int(round(parasiticKwhMonth))))
            monthElement.setAttribute("max-displaced-kw", str(int(round(maxDisplacedKw))))
            if maxDisplacedKwDate != None:
                monthElement.setAttribute("max-displaced-kw-date", MonadDate(Date(maxDisplacedKwDate)).toString())
            monthElement.setAttribute("displaced-kwh", str(int(round(displacedKwhMonth))))
            monthElement.setAttribute("max-used-kw", str(int(round(maxUsedKw))))
            if maxUsedKwDate != None:
                monthElement.setAttribute("max-used-kw-date", MonadDate(Date(maxUsedKwDate)).toString())
            monthElement.setAttribute("used-kwh", str(int(round(usedKwhMonth))))
            if maxExportedKw > maxExportedKwYear:
                maxExportedKwYear = maxExportedKw
                maxExportedKwYearDate = maxExportedKwDate
            maxExportedKw = 0
            maxExportedKwDate = None
            exportedKwhYear = exportedKwhYear + exportedKwhMonth
            exportedKwhMonth = 0
            if maxImportedKw > maxImportedKwYear:
                maxImportedKwYear = maxImportedKw
                maxImportedKwYearDate = maxImportedKwDate
            maxImportedKw = 0
            maxImportedKwDate = None
            importedKwhYear = importedKwhYear + importedKwhMonth
            importedKwhMonth = 0
            if maxGeneratedKw > maxGeneratedKwYear:
                maxGeneratedKwYear = maxGeneratedKw
                maxGeneratedKwYearDate = maxGeneratedKwDate
            maxGeneratedKw = 0
            maxGeneratedKwDate = None
            generatedKwhYear = generatedKwhYear + generatedKwhMonth
            generatedKwhMonth = 0
            if maxParasiticKw > maxParasiticKwYear:
                maxParasiticKwYear = maxParasiticKw
                maxParasiticKwYearDate = maxParasiticKwDate
            maxParasiticKw = 0
            maxParasiticKwDate = None
            parasiticKwhYear = parasiticKwhYear + parasiticKwhMonth
            parasiticKwhMonth = 0
            if maxDisplacedKw > maxDisplacedKwYear:
                maxDisplacedKwYear = maxDisplacedKw
                maxDisplacedKwYearDate = maxDisplacedKwDate
            maxDisplacedKw = 0
            maxDisplacedKwDate = None
            displacedKwhYear = displacedKwhYear + displacedKwhMonth
            displacedKwhMonth = 0
            if maxUsedKw > maxUsedKwYear:
                maxUsedKwYear = maxUsedKw
                maxUsedKwYearDate = maxUsedKwDate
            maxUsedKw = 0
            maxUsedKwDate = None
            usedKwhYear = usedKwhYear + usedKwhMonth
            usedKwhMonth = 0
    source.setAttribute("max-exported-kw", str(int(round(maxExportedKwYear))))
    if maxExportedKwYearDate != None:
        source.setAttribute("max-exported-kw-date", MonadDate(Date(maxExportedKwYearDate)).toString())
    source.setAttribute("exported-kwh", str(int(round(exportedKwhYear))))
    source.setAttribute("max-imported-kw", str(int(round(maxImportedKwYear))))
    if maxImportedKwYearDate != None:
        source.setAttribute("max-imported-kw-date", MonadDate(Date(maxImportedKwYearDate)).toString())
    source.setAttribute("imported-kwh", str(int(round(importedKwhYear))))
    source.setAttribute("max-generated-kw", str(int(round(maxGeneratedKwYear))))
    if maxGeneratedKwYearDate != None:
        source.setAttribute("max-generated-kw-date", MonadDate(Date(maxGeneratedKwYearDate)).toString())
    source.setAttribute("generated-kwh", str(int(round(generatedKwhYear))))
    source.setAttribute("max-parasitic-kw", str(int(round(maxParasiticKwYear))))
    if maxParasiticKwYearDate != None:
        source.setAttribute("max-parasitic-kw-date", MonadDate(Date(maxParasiticKwYearDate)).toString())
    source.setAttribute("parasitic-kwh", str(int(round(parasiticKwhYear))))
    source.setAttribute("max-displaced-kw", str(int(round(maxDisplacedKwYear))))
    if maxDisplacedKwYearDate != None:
        source.setAttribute("max-displaced-kw-date", MonadDate(Date(maxDisplacedKwYearDate)).toString())
    source.setAttribute("displaced-kwh", str(int(round(displacedKwhYear))))
    source.setAttribute("max-used-kw", str(int(round(maxUsedKwYear))))
    if maxUsedKwYearDate != None:
        source.setAttribute("max-used-kw-date", MonadDate(Date(maxUsedKwYearDate)).toString())
    source.setAttribute("used-kwh", str(int(round(usedKwhYear))))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
  <xsl:template match="/">
    <html>
      <head>
        <link rel="stylesheet" type="text/css"
            href="{/source/request/@context-path}/reports/10/output/" />
        <title>Home &gt; Sites &gt; <xsl:value-of
                        select="concat(/source/site/@code, ' ', /source/site/@name)" />
                    &gt; Monthly figures
        </title>
                <style>
                    &lt;![CDATA[
                colgroup.gray {
                    background: silver;
                }

                tr.error {
                    color: red;
                }
                ]]&gt;
                </style>
      </head>
      <body>
        <p><a href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/2/output/">
                        <xsl:value-of select="'Sites'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/3/output/?site-id={/source/site/@id}">
                        <xsl:value-of
                            select="concat(/source/site/@code, ' ', /source/site/@name)" />
                    </a>
                    &gt; Monthly figures
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action=".">
                    <fieldset>
                        <legend>Show table</legend>
                        <input type="hidden" name="site-id"
                            value="{/source/request/parameter[@name='site-id']/value}" />
                        <xsl:value-of
                            select="'For 12 months finishing at the end of '" />
                        <input size="4" length="4"
                            name="finish-date-year" value="{/source/@finish-date-year}" />
                        <xsl:value-of select="' - '" />
                        <select name="finish-date-month">
                            <xsl:for-each
                                select="/source/month-in-year">
                                <option>
                                    <xsl:if
                                        test="number(/source/@finish-date-month) = number(@value)">
                                        <xsl:attribute
                                            name="selected">selected</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="@value" />
                                </option>
                            </xsl:for-each>
                        </select>
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Show" />
                    </fieldset>
                </form>

                <table>
                    <caption>Months</caption>
                    <colgroup />
                    <colgroup class="gray" span="3" />
                    <colgroup span="3" />
                    <colgroup class="gray" span="3" />
                    <colgroup span="3" />
                    <colgroup class="gray" span="3" />
                    <colgroup span="3" />
                    <tfoot>
                        <tr>
                            <th>For all months</th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-imported-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-imported-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-imported-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@imported-kwh" />
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-used-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-used-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-used-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@used-kwh" />
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-displaced-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-displaced-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-displaced-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@displaced-kwh" />
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-generated-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-generated-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-generated-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@generated-kwh" />
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-exported-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-exported-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-exported-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@exported-kwh" />
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@max-parasitic-kw" />
                            </th>
                            <th>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/@max-parasitic-kw-date">
                                        <xsl:value-of
                                            select="/source/@max-parasitic-kw-date" />
                                    </xsl:when>
                                    <xsl:otherwise>NA</xsl:otherwise>
                                </xsl:choose>
                            </th>
                            <th>
                                <xsl:value-of
                                    select="/source/@parasitic-kwh" />
                            </th>
                        </tr>
                    </tfoot>
                    <thead>
                        <tr>
                            <th rowspan="2">Month</th>
                            <th colspan="3">Imported</th>
                            <th colspan="3">Used</th>
                            <th colspan="3">Displaced</th>
                            <th colspan="3">Generated</th>
                            <th colspan="3">Exported</th>
                            <th colspan="3">Parasitic</th>
                        </tr>
                        <tr>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>MD / kW</th>
                            <th>Date of MD</th>
                            <th>kWh</th>
                            <th>Data quality</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/month">
                            <tr>
                                <xsl:if test="@has-site-snags">
                                    <xsl:attribute name="class">
                                        <xsl:value-of select="'error'" />
                                    </xsl:attribute>
                                </xsl:if>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-end-date[@label='start']/@year, '-', hh-end-date[@label='start']/@month)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@max-imported-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-imported-kw-date">
                                            <xsl:value-of
                                                select="@max-imported-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@imported-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of select="@max-used-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-used-kw-date">
                                            <xsl:value-of
                                                select="@max-used-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of select="@used-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@max-displaced-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-displaced-kw-date">
                                            <xsl:value-of
                                                select="@max-displaced-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@displaced-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@max-generated-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-generated-kw-date">
                                            <xsl:value-of
                                                select="@max-generated-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@generated-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@max-exported-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-exported-kw-date">
                                            <xsl:value-of
                                                select="@max-exported-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@exported-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@max-parasitic-kw" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@max-parasitic-kw-date">
                                            <xsl:value-of
                                                select="@max-parasitic-kw-date" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@parasitic-kwh" />
                                </td>
                                <td>
                                    <xsl:if
                                        test="@has-site-snags = 'true'">
                                        See
                                        <a
                                            href="{/source/request/@context-path}/orgs/1/reports/5/screen/output/?site-id={/source/site/@id}&amp;months=1&amp;finish-date-year={hh-end-date[@label='start']/@year}&amp;finish-date-month={hh-end-date[@label='start']/@month}">
                                            generation graph
                                        </a>
                                        for errors.
                                    </xsl:if>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supply MPAN months</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from java.util import Calendar
import java.util
from net.sf.chellow.physical import HhEndDate, Supply

supply_id = inv.getLong("supply-id")
supply = Supply.getSupply(supply_id)
source.appendChild(supply.toXml(doc))
is_import = inv.getBoolean("is-import");
#kwhChannel = supply.getChannel(isImport, True) 
#kvarhChannel = supply.getChannel(isImport, False)
cal = java.util.GregorianCalendar(java.util.TimeZone.getTimeZone("GMT"), java.util.Locale.UK)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
monthFinish = HhEndDate(cal.getTime())
nextMonthFinish = None
for i in range(60):
    cal.add(Calendar.MONTH, -1)
    nextMonthFinish = HhEndDate(cal.getTime())
    monthStart = nextMonthFinish.getNext()
    
    monthElement = doc.createElement("month")
    source.appendChild(monthElement)
    generation = supply.getGeneration(monthFinish)
    if generation != None:
        mpan = generation.getMpan(is_import)
        if mpan != None:
            monthElement.setAttribute("mpan-core", mpan.getCore().toString())
            monthElement.setAttribute("agreed-supply-capacity", str(mpan.getAgreedSupplyCapacity()))
    kwhDatumAtMd = Hiber.session().createQuery("from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isKwh = true and datum.endDate.date >= :startDate and datum.endDate.date <= :finishDate and datum.value = (select max(datum.value) from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isKwh = true and datum.endDate.date >= :startDate and datum.endDate.date <= :finishDate) order by datum.endDate.date").setEntity("supply", supply).setTimestamp("startDate", monthStart.getDate()).setTimestamp("finishDate", monthFinish.getDate()).setMaxResults(1).uniqueResult()
    if kwhDatumAtMd != None:
        mdKwh = kwhDatumAtMd.getValue()
        monthElement.setAttribute("md-kw", str(round(mdKwh * 2)))
        kvarhDatumAtMd = Hiber.session().createQuery("from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isKwh = false and datum.endDate.date = :mdDate").setEntity("supply", supply).setTimestamp("mdDate", kwhDatumAtMd.getEndDate().getDate()).uniqueResult()
        if kvarhDatumAtMd != None:
            kvarhAtMd = kvarhDatumAtMd.getValue()
            kvahAtMd = (mdKwh ** 2 + kvarhAtMd ** 2) ** 0.5
            if kvahAtMd > 0:
                pf = mdKwh / kvahAtMd
                monthElement.setAttribute("pf", str(round(pf, 4)))
            monthElement.setAttribute("kva-at-md", str(round(kvahAtMd * 2)))
    totalKwh = Hiber.session().createQuery("select sum(datum.value) from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.channel.isKwh = true and datum.endDate.date >= :startDate and datum.endDate.date <= :finishDate").setEntity("supply", supply).setTimestamp("startDate", monthStart.getDate()).setTimestamp("finishDate", monthFinish.getDate()).uniqueResult()
    if totalKwh != None:
        monthElement.setAttribute("total-kwh", str(round(totalKwh)))
    monthElement.setAttribute("date", monthStart.toString())
    monthFinish = nextMonthFinish]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/orgs/{/source/org/@id}/reports/9/stream/output/" />
                <title>
                    Home &gt; Supplies &gt;
                    <xsl:value-of select="/source/supply/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/orgs/{/source/org/@id}/reports/49/screen/output/">
                        <xsl:value-of select="'Supplies'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/4/output/?supply-id={/source/supply/@id}">
                        <xsl:value-of select="/source/supply/@id" />
                    </a>
                    &gt;
                    <xsl:choose>
                        <xsl:when
                            test="/source/request/parameter[@name='is-import']/value = 'true'">
                            Import
                        </xsl:when>
                        <xsl:otherwise>Export</xsl:otherwise>
                    </xsl:choose>
                    data by month
                </p>

                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>Months</caption>
                    <thead>
                        <tr>
                            <th>Month Starting</th>
                            <th>MPAN Core</th>
                            <th>MD / kW</th>
                            <th>Power Factor</th>
                            <th>MD / kVA</th>
                            <th>Agreed Supply Capacity (kVA)</th>
                            <th>kWh</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/month">
                            <tr>
                                <td>
                                    <xsl:value-of select="@date" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@mpan-core">
                                            <xsl:value-of
                                                select="@mpan-core" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@md-kw">
                                            <xsl:value-of
                                                select="round(@md-kw)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@pf">
                                            <xsl:value-of select="@pf" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@kva-at-md">
                                            <xsl:value-of
                                                select="round(@kva-at-md)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@agreed-supply-capacity">
                                            <xsl:value-of
                                                select="@agreed-supply-capacity" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@total-kwh">
                                            <xsl:value-of
                                                select="round(@total-kwh)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NA
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>

]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supply Raw HH Data</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException, XmlTree
from java.util import Calendar, GregorianCalendar, TimeZone, Locale, Date
from net.sf.chellow.monad.types import MonadDate
from java.sql import Timestamp, ResultSet
from java.text import SimpleDateFormat
from net.sf.chellow.physical import HhEndDate, HhDatum, Supply

cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
supply_id = inv.getLong("supply-id")
startDateYear = inv.getInteger("start-year")
startDateMonth = inv.getInteger("start-month")
if not inv.isValid():
    raise UserException()

cal.clear()
cal.set(Calendar.YEAR, startDateYear)
cal.set(Calendar.MONTH, startDateMonth - 1)
cal.set(Calendar.DAY_OF_MONTH, 1)
startDate = cal.getTime()
cal.add(Calendar.MONTH, 1)
finishDate = cal.getTime()
dateFormat = SimpleDateFormat("yyyy-MM-dd' 'HH:mm'Z'")
dateFormat.setCalendar(cal)
supply = Supply.getSupply(supply_id)
supplyElement = supply.toXml(doc, XmlTree("generationLast", XmlTree("mpans", XmlTree("core"))).put("source"))
source.appendChild(supplyElement)
source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))
con = Hiber.session().connection()
stmt = con.prepareStatement("select hh_datum.value, hh_datum.end_date, hh_datum.status, channel.is_import, channel.is_kwh from hh_datum, channel, supply_generation where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = ? and hh_datum.end_date > ? and hh_datum.end_date <= ? order by hh_datum.end_date", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
stmt.setInt(1, supply.getId())
stmt.setTimestamp(2, Timestamp(startDate.getTime()))
stmt.setTimestamp(3, Timestamp(finishDate.getTime()))
stmt.setFetchSize(100)
rs = stmt.executeQuery()
hhDate = HhEndDate(startDate).getNext().getDate().getTime()
actualStatus = HhDatum.ACTUAL
if rs.next():
    value = rs.getFloat("value")
    hhChannelEndDate = rs.getTimestamp("end_date")
    isImport = rs.getBoolean("is_import")
    isKwh = rs.getBoolean("is_kwh")
    status = rs.getString("status")
    finishDateMillis = finishDate.getTime()
    cal = MonadDate.getCalendar()
    while hhDate <= finishDateMillis:
        datumElement = doc.createElement("datum")
        supplyElement.appendChild(datumElement)
        datumElement.setAttribute("timestamp", dateFormat.format(Date(hhDate)))
        while hhChannelEndDate != None and hhChannelEndDate.getTime() == hhDate:
            if isImport:
                if isKwh:
                    datumElement.setAttribute("import-kwh-value", str(round(value, 2)))
                    datumElement.setAttribute("import-kwh-status", status)
                else:
                    datumElement.setAttribute("import-kvarh-value", str(round(value, 2)))
                    datumElement.setAttribute("import-kvarh-status", status)
            else:
                if isKwh:
                    datumElement.setAttribute("export-kwh-value", str(round(value, 2)))
                    datumElement.setAttribute("export-kwh-status", status)
                else:
                    datumElement.setAttribute("export-kvarh-value", str(round(value, 2)))
                    datumElement.setAttribute("export-kvarh-status", status)
            if rs.next():
                value = rs.getFloat("value")
                hhChannelEndDate = rs.getTimestamp("end_date")
                isImport = rs.getBoolean("is_import")
                isKwh = rs.getBoolean("is_kwh")
                status = rs.getString("status")
            else:
                hhChannelEndDate = None

        hhDate = HhEndDate.getNext(cal, hhDate)
rs.close()]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />

    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />

                <title>
                    Home &gt; Supplies &gt;
                    <xsl:value-of select="/source/supply/@name" />
                    &gt; Hh data
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/50/output/">
                        <xsl:value-of select="'Supplies'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/4/output/?supply-id={/source/supply/@id}">
                        <xsl:value-of select="/source/supply/@name" />
                    </a>
                    &gt; HH Data
                </p>

                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>

                <h3>Supply details</h3>

                <ul>
                    <li>
                        Name:
                        <xsl:value-of select="/source/supply/@name" />
                    </li>
                    <li>
                        Import MPAN core:
                        <xsl:value-of
                            select="/source/supply/supply-generation/mpan[@label='import']/mpan-core/@core" />
                    </li>
                    <li>
                        Export MPAN core:
                        <xsl:value-of
                            select="/source/supply/supply-generation/mpan[@label='export']/mpan-core/@core" />
                    </li>
                    <li>
                        Source Code:
                        <xsl:value-of
                            select="/source/supply/source/@code" />
                    </li>
                </ul>

                <form action=".">
                    <fieldset>
                        <legend>Show hh data</legend>
                        <input type="hidden" name="supply-id"
                            value="{/source/supply/@id}" />
                        <br />
                        <fieldset>
                            <legend>Month</legend>
                            <input name="start-year"
                                value="{/source/request/parameter[@name='start-year']/value}"
                                size="4" maxlength="4" />
                            <xsl:value-of select="' - '" />
                            <select name="start-month">
                                <xsl:for-each
                                    select="/source/months/month">
                                    <option value="{@number}">
                                        <xsl:if
                                            test="@number=/source/request/parameter[@name='start-month']/value">
                                            <xsl:attribute
                                                name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                        </fieldset>
                        <br />
                        <input type="submit" value="Show" />
                    </fieldset>
                </form>
                <table>
                    <caption>Hh Data</caption>
                    <thead>
                        <tr>
                            <th rowspan="3">Timestamp</th>
                            <th colspan="4">Import</th>
                            <th colspan="4">Export</th>
                        </tr>
                        <tr>
                            <th colspan="2">kWh</th>
                            <th colspan="2">kVArh</th>
                            <th colspan="2">kWh</th>
                            <th colspan="2">kVArh</th>
                        </tr>
                        <tr>
                            <th>Value</th>
                            <th>Status</th>
                            <th>Value</th>
                            <th>Status</th>
                            <th>Value</th>
                            <th>Status</th>
                            <th>Value</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/supply/datum">
                            <tr>
                                <td>
                                    <xsl:value-of select="@timestamp" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@import-kwh-value" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@import-kwh-status" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@import-kvarh-value" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@import-kvarh-status" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@export-kwh-value" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@export-kwh-status" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@export-kvarh-value" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@export-kvarh-status" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Style Sheet</value>
    <value><![CDATA[inv.getResponse().setContentType("text/css")
pw = inv.getResponse().getWriter()
pw.println("table {                         ")
pw.println("    border: thin solid gray;    ")
pw.println("    border-collapse: collapse;  ")
pw.println("}                               ")
pw.println("td {                            ")
pw.println("    border: thin solid gray;    ")
pw.println("}                               ")
pw.println("th {                            ")
pw.println("    border: thin solid gray;    ")
pw.println("}                               ")
pw.println("#title {                        ")
pw.println("    font-size: xx-large         ")
pw.println("}                               ")
pw.println(".logo {                         ")
pw.println("    color: green;               ")
pw.println("}                               ")
pw.println("                                ")
pw.println("                                ")
pw.println("                                ")
pw.println("                                ")
pw.println("                                ")
pw.println("                                ")
pw.println("                                ")
pw.close()]]></value>
    <value><![CDATA[]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Site HH Graph</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.lang import System
from net.sf.chellow.monad.types import MonadDate 
from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date
from java.awt.image import BufferedImage
from javax.imageio import ImageIO
from java.awt import Font, Color
import math
from java.sql import ResultSet, Timestamp
from java.text import DateFormat
from net.sf.chellow.physical import HhEndDate, HhDatum, Site

start = System.currentTimeMillis()
inv.getResponse().setContentType("image/png")
site_id = inv.getLong("site-id")
finishDateYear = inv.getInteger("finish-date-year")
finishDateMonth = inv.getInteger("finish-date-month")
months = inv.getInteger("months")
if not inv.isValid():
    raise UserException.newInvalidParameter()
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.clear()
cal.set(Calendar.YEAR, finishDateYear)
cal.set(Calendar.MONTH, finishDateMonth)
cal.set(Calendar.DAY_OF_MONTH, 1)
finishDate = cal.getTime()
cal.add(Calendar.MONTH, -1 * months)
startDate = cal.getTime()
cal.setTime(finishDate)
cal.add(Calendar.DAY_OF_MONTH, -1)

site = Site.getSite(site_id)
supplies = Hiber.session().createQuery("select distinct supply from Supply supply join supply.generations supplyGeneration join supplyGeneration.siteSupplyGenerations siteSupplyGeneration where siteSupplyGeneration.site = :site and supply.source.code != 'sub'").setEntity('site', site).list()
suppliesSQL = ''
for supply in supplies:
    suppliesSQL = suppliesSQL + str(supply.getId()) + ','
con = Hiber.session().connection()
stmt = con.prepareStatement("select hh_datum.value, hh_datum.end_date, hh_datum.status, channel.is_import from hh_datum, channel, supply_generation, supply where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = supply.id and channel.is_kwh is true and hh_datum.end_date >= ? and hh_datum.end_date <= ? and supply.id in (" + suppliesSQL[:-1] + ") order by hh_datum.end_date", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
stmt.setTimestamp(1, Timestamp(startDate.getTime()))
stmt.setTimestamp(2, Timestamp(finishDate.getTime()))
stmt.setFetchSize(100)
rs = stmt.executeQuery()
hhDate = HhEndDate(startDate).getDate().getTime()
maxScale = 0
minScale = 0
resultData = []
actualStatus = HhDatum.ACTUAL
if rs.next():
    hhChannelValue = rs.getFloat("value")
    hhChannelEndDate = rs.getTimestamp("end_date")
    isImport = rs.getBoolean("is_import")
    status = rs.getString("status")
    finishDateMillis = finishDate.getTime()
    cal = MonadDate.getCalendar()
    while hhDate <= finishDateMillis:
        complete = "blank"
        hhValue = 0
        while hhChannelEndDate != None and hhChannelEndDate.getTime() == hhDate:
            if isImport:
                hhValue = hhValue + hhChannelValue
            else:
                hhValue = hhValue - hhChannelValue
            if status == actualStatus:
                if complete == "blank":
                    complete = "actual"
            else:
                complete = "not-actual"
            if rs.next():
                hhChannelValue = rs.getFloat("value")
                hhChannelEndDate = rs.getTimestamp("end_date")
                isImport = rs.getBoolean("is_import")
                status = rs.getString("status")
            else:
                hhChannelEndDate = None
        hhDate = HhEndDate.getNext(cal, hhDate)
        resultData.append([hhValue, hhDate, complete == "actual"])
        maxScale = max(maxScale, hhValue)
        minScale = min(minScale, hhValue)
    System.err.println('ooostep is max scale' + str(maxScale) + ' min scale ' + str(minScale))
    if maxScale > 0 and maxScale < 10:
        maxScale = 10
    if minScale < 0 and minScale > -10:
        minScale = -10
    if minScale == 0 and maxScale == 0:
        minScale = 10
        maxScale = 10
    System.err.println('pppstep is max scale' + str(maxScale) + ' min scale ' + str(minScale))
    step = 10**int(math.floor(math.log10(maxScale - minScale)))
    System.err.println('kkstep is ' + str(step) + ' max scale' + str(maxScale) + ' min scale ' + str(minScale))
    if step > (maxScale - minScale) / 2:
        step = int(float(step) / 4)
if len(resultData) > 0:
    graphLeft = 100
    image = BufferedImage(graphLeft + len(resultData) + 100, 400, BufferedImage.TYPE_4BYTE_ABGR)
    graphics = image.createGraphics()
    defaultFont = graphics.getFont()
    smallFont = Font(defaultFont.getName(), defaultFont.getStyle(), 10)
    maxHeight = 300
    scaleFactor = float(maxHeight) / (maxScale - minScale)
    graphTop = 50
    xAxis = int(graphTop + maxScale * scaleFactor)
    monthDateFormat = DateFormat.getDateInstance(DateFormat.LONG, Locale.UK)
    monthDateFormat.applyLocalizedPattern("MMMMMM")
    yearDateFormat = DateFormat.getDateInstance(DateFormat.LONG, Locale.UK)
    yearDateFormat.applyLocalizedPattern("yyyy")
    monthPoints = []
    for i in range(len(resultData)):
        dataHh = resultData[i]
        value = dataHh[0]
        date = dataHh[1]
        cal.setTimeInMillis(date)
        hour = cal.get(Calendar.HOUR_OF_DAY)
        minute = cal.get(Calendar.MINUTE)
        height = int(value * scaleFactor)
        if dataHh[2]:
            graphics.setColor(Color.BLUE)
        else:
            graphics.setColor(Color.GRAY)
            graphics.fillRect(graphLeft + i, graphTop, 1, maxHeight)
            graphics.setColor(Color.BLACK)
        if height > 0:
            graphics.fillRect(graphLeft + i, xAxis - height, 1, height)
        else:
            graphics.fillRect(graphLeft + i, xAxis, 1, abs(height))
        if hour == 0 and minute == 30:
            day = cal.get(Calendar.DAY_OF_MONTH)
            dayOfWeek = cal.get(Calendar.DAY_OF_WEEK)
            if dayOfWeek == 7 or dayOfWeek == 1:
                graphics.setColor(Color.RED)
            else:
                graphics.setColor(Color.BLACK)
            graphics.drawString(str(day), graphLeft + i + 16, graphTop + maxHeight + 20)
            graphics.setColor(Color.BLACK)
            graphics.fillRect(graphLeft + i, graphTop + maxHeight, 1, 5)
            if day == 15:
                graphics.drawString(monthDateFormat.format(cal.getTime()), graphLeft + i + 16, graphTop + maxHeight + 45)
                monthPoints.append(i)
    graphics.setColor(Color.BLACK)
    graphics.fillRect(graphLeft, graphTop, 1, maxHeight)
    scalePoints = []
    System.err.println('step is ' + str(step) + ' max scale' + str(maxScale) + ' min scale ' + str(maxScale))
    for i in range(0, int(maxScale), step):
        scalePoints.append(i)
    for i in range(0, int(minScale), step * -1):
        scalePoints.append(i)
    graphics.setColor(Color.BLACK)
    for point in scalePoints:
        graphics.fillRect(graphLeft - 5, int(xAxis - point * scaleFactor), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxis - point * scaleFactor + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxis - point * scaleFactor - 2))
    graphics.drawString("kW", graphLeft - 90, 100)
    title = "Electricity use at site " + site.getCode().toString() + " " + site.getName() + " for " + str(months) + " month"
    if months > 1:
        title = title + "s"
    title = title + " ending " + monthDateFormat.format(Date(finishDate.getTime() - 1)) + " " + yearDateFormat.format(Date(finishDate.getTime() - 1))
    graphics.drawString(title, 30, 30)
    graphics.setFont(smallFont)
    graphics.drawString("Poor data is denoted by a grey background and black foreground.", 30, 395)
else:
    image = BufferedImage(400, 400, BufferedImage.TYPE_4BYTE_ABGR)
    graphics = image.createGraphics()
    graphics.setColor(Color.BLACK)
    graphics.drawString("No data available for this period.", 30, 10)

os = inv.getResponse().getOutputStream()
graphics.setColor(Color.BLACK)
#graphics.drawString("report took..." + str(java.lang.System.currentTimeMillis() - start) + "ms", 10, 390)
ImageIO.write(image, "png", os)
os.close()]]></value>
    <value><![CDATA[]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Generation Graph</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from net.sf.chellow.physical import HhEndDate, HhDatum, Site
from net.sf.chellow.monad.types import MonadDate
from java.awt.image import BufferedImage
from javax.imageio import ImageIO
from java.awt import Color, Font
import math
from java.sql import Timestamp, ResultSet
from java.text import DateFormat
from java.lang import System
from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date

colour_list = [Color.BLUE, Color.GREEN, Color.RED, Color.YELLOW, Color.MAGENTA, Color.CYAN, Color.PINK]

def set_colour(graphics, supplies, id, name, source_code):
    if not id in supplies:
        supplies[id] = [len(supplies), name, source_code]
    graphics.setColor(colour_list[supplies[id][0]])

def paint_legend(supplies, graph_top):
    i = 0
    for supply in supplies.values():
        graphics.setColor(colour_list[supply[0]])
        graphics.fillRect(12, int(graph_top + 15 + (10 * i)), 8, 8)
        graphics.setColor(Color.BLACK)
        graphics.drawString(supply[2] + ' ' + supply[1], 25, int(graph_top + 22 + (10 * i)))
        i = i + 1        

def minimum_scale(min_scale, max_scale):
    if min_scale == 0 and max_scale == 0:
        min_scale = 0
        max_scale = 10
    if min_scale < 0 and min_scale > -10:
        min_scale = -10
    if max_scale > 0 and max_scale < 10:
        max_scale = 10
    return min_scale, max_scale

start = System.currentTimeMillis()
inv.getResponse().setContentType("image/png")
site_id = inv.getLong("site-id")
finishDateYear = inv.getInteger("finish-date-year")
finishDateMonth = inv.getInteger("finish-date-month")
months = inv.getInteger("months")
if not inv.isValid():
    raise UserException.newInvalidParameter()
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.clear()
cal.set(Calendar.YEAR, finishDateYear)
cal.set(Calendar.MONTH, finishDateMonth)
cal.set(Calendar.DAY_OF_MONTH, 1)
finishDate = cal.getTime()
cal.add(Calendar.MONTH, -1 * months)
startDate = cal.getTime()
cal.setTime(finishDate)
cal.add(Calendar.DAY_OF_MONTH, -1)

site = Site.getSite(site_id)
supplies = Hiber.session().createQuery("select distinct supply from Supply supply join supply.generations supplyGeneration join supplyGeneration.siteSupplyGenerations siteSupplyGeneration where siteSupplyGeneration.site = :site and supply.source.code != 'sub'").setEntity('site', site).list()
suppliesSQL = ''
for supply in supplies:
    suppliesSQL = suppliesSQL + str(supply.getId()) + ','
con = Hiber.session().connection()
stmt = con.prepareStatement("select hh_datum.value, hh_datum.end_date, hh_datum.status, channel.is_import, supply.name, source.code, supply.id from hh_datum, channel, supply_generation, supply, source where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = supply.id and supply.source_id = source.id and channel.is_kwh is true and hh_datum.end_date >= ? and hh_datum.end_date <= ? and supply.id in (" + suppliesSQL[:-1] + ") order by hh_datum.end_date, supply.id", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
stmt.setTimestamp(1, Timestamp(startDate.getTime()))
stmt.setTimestamp(2, Timestamp(finishDate.getTime()))
stmt.setFetchSize(100)
rs = stmt.executeQuery()
hhDate = HhEndDate(startDate).getDate().getTime()
maxHeight = 80
pxStep = 10
maxOverallScale = 0
minOverallScale = 0
maxExportedScale = 0
minExportedScale = 0
maxImportedScale = 0
minImportedScale = 0
maxGeneratedScale = 0
maxParasiticScale = 0
maxDisplacedScale = 0
minDisplacedScale = 0
maxUsedScale = 0
minUsedScale = 0
resultData = []
actualStatus = HhDatum.ACTUAL
if rs.next():
    hhChannelValue = rs.getFloat("value")
    hhChannelEndDate = rs.getTimestamp("end_date")
    isImport = rs.getBoolean("is_import")
    status = rs.getString("status")
    sourceCode = rs.getString("code")
    supplyName = rs.getString("name")
    supply_id = rs.getLong('id')
    finishDateMillis = finishDate.getTime()
    cal = MonadDate.getCalendar()
    while hhDate <= finishDateMillis:
        complete = "blank"
        exportedValue = 0
        importedValue = 0
        parasiticValue = 0
        generatedValue = 0
        supplyList = []
        while hhChannelEndDate != None and hhChannelEndDate.getTime() == hhDate:
            if not isImport and sourceCode == "net":
                exportedValue = exportedValue + hhChannelValue
            if isImport and sourceCode == "net":
                importedValue = importedValue + hhChannelValue
            if isImport and (sourceCode == "lm" or sourceCode == "chp" or sourceCode == "turb"):
                generatedValue = generatedValue + hhChannelValue
            if not isImport and (sourceCode == "lm" or sourceCode == "chp" or sourceCode == "turb"):
                parasiticValue = parasiticValue + hhChannelValue
            supplyList.append([supplyName, sourceCode, isImport, hhChannelValue, supply_id])
            if rs.next():
                sourceCode = rs.getString("code")
                supplyName = rs.getString("name")
                hhChannelValue = rs.getFloat("value")
                hhChannelEndDate = rs.getTimestamp("end_date")
                isImport = rs.getBoolean("is_import")
                status = rs.getString("status")
                supply_id = rs.getLong('id')
            else:
                hhChannelEndDate = None
        maxExportedScale = max(maxExportedScale, exportedValue)
        minExportedScale = min(minExportedScale, exportedValue)
        maxImportedScale = max(maxImportedScale, importedValue)
        minImportedScale = min(minImportedScale, importedValue)
        maxGeneratedScale = max(maxGeneratedScale, generatedValue)
        maxParasiticScale = max(maxParasiticScale, parasiticValue)
        displacedValue = generatedValue - parasiticValue - exportedValue
        maxDisplacedScale = max(maxDisplacedScale, displacedValue)
        minDisplacedScale = min(minDisplacedScale, displacedValue)
        usedValue = importedValue + displacedValue
        maxUsedScale = max(maxUsedScale, usedValue)
        minUsedScale = min(minUsedScale, usedValue)
        resultData.append([hhDate, supplyList, usedValue, displacedValue])
        hhDate = HhEndDate.getNext(cal, hhDate)
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter("ResultData: " + str(resultData)) 
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter("Overall: " + str(maxOverallScale) + " " + str(minOverallScale) + " Exported: " + str(maxExportedScale) + " " + str(minExportedScale) + " Imported: " + str(maxImportedScale) + " " + str(minImportedScale) + " Generated: " + str(maxGeneratedScale) + " Parasitic: " + str(maxParasiticScale) + " Displaced: " + str(maxDisplacedScale) + " " + str(minDisplacedScale) + " Used: " + str(maxUsedScale) + " " + str(minUsedScale))
    minimized_scale = minimum_scale(minExportedScale, maxExportedScale)
    minExportedScale = minimized_scale[0]
    maxExportedScale = minimized_scale[1]
    minimized_scale = minimum_scale(minImportedScale, maxImportedScale)
    minImportedScale = minimized_scale[0]
    maxImportedScale = minimized_scale[1]
    if maxGeneratedScale == 0 and maxParasiticScale == 0:
        maxGeneratedScale = 10
        maxParasiticScale = 10
    minimized_scale = minimum_scale(minUsedScale, maxUsedScale)
    minUsedScale = minimized_scale[0]
    maxUsedScale = minimized_scale[1]
    minimized_scale = minimum_scale(minDisplacedScale, maxDisplacedScale)
    minDisplacedScale = minimized_scale[0]
    maxDisplacedScale = minimized_scale[1]
    maxOverallScale = max(maxExportedScale, maxImportedScale, maxGeneratedScale, maxDisplacedScale, maxUsedScale)
    minOverallScale = min(minExportedScale, minImportedScale, minDisplacedScale, minUsedScale)
    rawStepOverall = (maxOverallScale * 2) / (maxHeight / pxStep)
    factorOverall = 10**int(math.floor(math.log10(rawStepOverall)))
    endOverall = rawStepOverall / factorOverall
    newEndOverall = 1
    if endOverall >= 2:
        newEndOverall = 2
    if endOverall >= 5:
        newEndOverall = 5
    stepOverall = newEndOverall * factorOverall
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter("Overall Step: " + str(stepOverall))
if len(resultData) > 0:
    graphLeft = 180
    scaleFactorOverall = float(maxHeight) / maxOverallScale
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter(str(scaleFactorExported) + " " + str(scaleFactorUsed) + " " + str(scaleFactorDisplaced) + " " + str(scaleFactorImported) + " " + str(scaleFactorGenerated))
    graphOrderExported = 5
    graphOrderImported = 4
    graphOrderGenerated = 3
    graphOrderUsed = 1
    graphOrderDisplaced = 2
    minUsed = 0
    minDisplaced = 0
    minParasitic = 0
    for i in range(0, int(minUsedScale), stepOverall * -1):
        minUsed = min(minUsed, i)
    for i in range(0, int(minDisplacedScale), stepOverall * -1):
        minDisplaced = min(minDisplaced, i)
    for i in range(0, int(maxParasiticScale), stepOverall):
        minParasitic = max(minParasitic, i)
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter(str(int((abs(minParasitic)) * scaleFactorOverall)))
    minUsed = int(abs(minUsed) * scaleFactorOverall)
    minDisplaced = int(abs(minDisplaced) * scaleFactorOverall)
    minParasitic = int(abs(minParasitic) * scaleFactorOverall)
    graphTopExported = ((graphOrderExported - 1) * (maxHeight + 22)) + 30 + minUsed + minDisplaced + minParasitic
    graphTopImported = ((graphOrderImported - 1) * (maxHeight + 22)) + 30 + minUsed + minDisplaced + minParasitic
    graphTopGenerated = ((graphOrderGenerated - 1) * (maxHeight + 22)) + 30 + minUsed + minDisplaced
    graphTopUsed = ((graphOrderUsed - 1) * (maxHeight + 22)) + 30
    graphTopDisplaced = ((graphOrderDisplaced - 1) * (maxHeight + 22)) + 30 + minUsed
    image = BufferedImage(graphLeft + len(resultData) + 100, ((maxHeight + 22) * 5) + 60 + minUsed + minDisplaced + minParasitic, BufferedImage.TYPE_4BYTE_ABGR)
    graphics = image.createGraphics()
    defaultFont = graphics.getFont()
    smallFont = Font(defaultFont.getName(), defaultFont.getStyle(), 10)
    keyFont = Font(defaultFont.getName(), defaultFont.getStyle(), 9)
    #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter(str(graphTopExported) + " " + str(graphTopImported) + " " + str(graphTopUsed) + " " + str(graphTopDisplaced))
    xAxisExported = int(graphTopExported + maxOverallScale * scaleFactorOverall)
    xAxisImported = int(graphTopImported + maxOverallScale * scaleFactorOverall)
    xAxisGenerated = int(graphTopGenerated + maxOverallScale * scaleFactorOverall)
    xAxisUsed = int(graphTopUsed + maxOverallScale * scaleFactorOverall)
    xAxisDisplaced = int(graphTopDisplaced + maxOverallScale * scaleFactorOverall)
    monthDateFormat = DateFormat.getDateInstance(DateFormat.LONG, Locale.UK)
    monthDateFormat.applyLocalizedPattern("MMMMMM")
    yearDateFormat = DateFormat.getDateInstance(DateFormat.LONG, Locale.UK)
    yearDateFormat.applyLocalizedPattern("yyyy")
    generated_supplies = {}
    imported_supplies = {}
    exported_supplies = {}
    monthPoints = []
    for i in range(len(resultData)):
        dataHh = resultData[i]
        date = dataHh[0]
        usedValue = dataHh[2]
        displacedValue = dataHh[3]
        dataHhSupplyList = dataHh[1]
        cal.setTimeInMillis(date)
        hour = cal.get(Calendar.HOUR_OF_DAY)
        minute = cal.get(Calendar.MINUTE)
        graphics.setColor(Color.BLUE)
        usedHeight = int(usedValue * scaleFactorOverall)
        if usedHeight < 0:
            graphics.fillRect(graphLeft + i, xAxisUsed, 1, abs(usedHeight))
        else:
            graphics.fillRect(graphLeft + i, xAxisUsed - usedHeight, 1, usedHeight)
        displacedHeight = int(displacedValue * scaleFactorOverall)
        if displacedHeight < 0:
            graphics.fillRect(graphLeft + i, xAxisDisplaced, 1, abs(displacedHeight))
        else:
            graphics.fillRect(graphLeft + i, xAxisDisplaced - displacedHeight, 1, displacedHeight)
        generatedTotal = 0
        parasiticTotal = 0
        importedTotal = 0
        exportedTotal = 0
        for j in dataHhSupplyList:
            name = j[0]
            source = j[1]
            isImport = j[2]
            value = j[3]
            id = j[4]
            height = int(value * scaleFactorOverall)
            if  source == "net" and not isImport:
                set_colour(graphics, exported_supplies, id, name, source)
                exportedTotal = exportedTotal + height
                graphics.fillRect(graphLeft + i, xAxisExported - exportedTotal, 1, height)
            if  source == "net" and isImport:
                set_colour(graphics, imported_supplies, id, name, source)
                importedTotal = importedTotal + height
                graphics.fillRect(graphLeft + i, xAxisImported - importedTotal, 1, height)
            if isImport and (source == "lm"):
                set_colour(graphics, generated_supplies, id, name, source)
                generatedTotal = generatedTotal + height
                graphics.fillRect(graphLeft + i, xAxisGenerated - generatedTotal, 1, height)
            if isImport and (source == "chp"):
                set_colour(graphics, generated_supplies, id, name, source)
                generatedTotal = generatedTotal + height
                graphics.fillRect(graphLeft + i, xAxisGenerated -  generatedTotal, 1, height)
            if isImport and (source == "turb"):
                set_colour(graphics, generated_supplies, id, name, source)
                generatedTotal = generatedTotal + height
                graphics.fillRect(graphLeft + i, xAxisGenerated - generatedTotal, 1, height)
            if not isImport and (source == "lm"):
                set_colour(graphics, generated_supplies, id, name, source)
                parasiticTotal = parasiticTotal + height
                graphics.fillRect(graphLeft + i, xAxisGenerated, 1, height)
            if not isImport and (source == "chp"):
                set_colour(graphics, generated_supplies, id, name, source)
                parasiticTotal = parasiticTotal + height
                graphics.fillRect(graphLeft + i, xAxisGenerated, 1, height)
            if not isImport and (source == "turb"):
                set_colour(graphics, generated_supplies, id, name, source)
                parasiticTotal = parasiticTotal + height
                graphics.fillRect(graphLeft + i, xAxisGenerated, 1, height) 
        if hour == 0 and minute == 30:
            day = cal.get(Calendar.DAY_OF_MONTH)
            dayOfWeek = cal.get(Calendar.DAY_OF_WEEK)
            if dayOfWeek == 7 or dayOfWeek == 1:
                graphics.setColor(Color.RED)
            else:
                graphics.setColor(Color.BLACK)
            graphics.drawString(str(day), graphLeft + i + 16, ((maxHeight + 22) * 5) + 30 + minUsed + minDisplaced + minParasitic)
            graphics.setColor(Color.BLACK)
            graphics.fillRect(graphLeft + i, graphTopExported + maxHeight, 1, 5)
            graphics.fillRect(graphLeft + i, graphTopImported + maxHeight, 1, 5)
            graphics.fillRect(graphLeft + i, graphTopGenerated + maxHeight, 1, 5)
            graphics.fillRect(graphLeft + i, graphTopUsed + maxHeight, 1, 5)
            graphics.fillRect(graphLeft + i, graphTopDisplaced + maxHeight, 1, 5)
            if day == 15:
                graphics.drawString(monthDateFormat.format(cal.getTime()), graphLeft + i + 16, ((maxHeight + 22) * 5) + 50 + minUsed + minDisplaced + minParasitic)
                monthPoints.append(i)
    graphics.setColor(Color.BLACK)
    graphics.fillRect(graphLeft, graphTopExported, 1, maxHeight)
    graphics.fillRect(graphLeft, graphTopImported, 1, maxHeight)
    graphics.fillRect(graphLeft, graphTopGenerated, 1, maxHeight + minParasitic)
    graphics.fillRect(graphLeft, graphTopUsed, 1, maxHeight + minUsed)
    graphics.fillRect(graphLeft, graphTopDisplaced, 1, maxHeight + minDisplaced)
    scalePointsExported = []
    for i in range(0, int(maxOverallScale), stepOverall):
        scalePointsExported.append(i)
    #for i in range(0, int(minExportedScale), stepOverall * -1):
        #scalePointsExported.append(i)
    graphics.setColor(Color.BLACK)
    for point in scalePointsExported:
        graphics.fillRect(graphLeft - 5, int(xAxisExported - point * scaleFactorOverall), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisExported - point * scaleFactorOverall + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisExported - point * scaleFactorOverall - 2))
    scalePointsImported = []
    for i in range(0, int(maxOverallScale), stepOverall):
        scalePointsImported.append(i)
    #for i in range(0, int(minOverallScale), stepOverall * -1):
        #scalePointsImported.append(i)
    graphics.setColor(Color.BLACK)
    for point in scalePointsImported:
        graphics.fillRect(graphLeft - 5, int(xAxisImported - point * scaleFactorOverall), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisImported - point * scaleFactorOverall + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisImported - point * scaleFactorOverall - 2))
    scalePointsGenerated = []
    for i in range(0, int(maxOverallScale), stepOverall):
        scalePointsGenerated.append(i)
    for i in range(0, int(maxParasiticScale), stepOverall):
        scalePointsGenerated.append(i * -1)
    graphics.setColor(Color.BLACK)
    for point in scalePointsGenerated:
        graphics.fillRect(graphLeft - 5, int(xAxisGenerated - point * scaleFactorOverall), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisGenerated - point * scaleFactorOverall + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisGenerated - point * scaleFactorOverall - 2))
    scalePointsUsed = []
    for i in range(0, int(maxOverallScale), stepOverall):
        scalePointsUsed.append(i)
    for i in range(0, int(minUsedScale), stepOverall * -1):
        scalePointsUsed.append(i)
    for point in scalePointsUsed:
        graphics.fillRect(graphLeft - 5, int(xAxisUsed - point * scaleFactorOverall), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisUsed - point * scaleFactorOverall + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisUsed - point * scaleFactorOverall - 2))
    scalePointsDisplaced = []
    for i in range(0, int(maxOverallScale), stepOverall):
        scalePointsDisplaced.append(i)
    for i in range(0, int(minDisplacedScale), stepOverall * -1):
        scalePointsDisplaced.append(i)
    for point in scalePointsDisplaced:
        graphics.fillRect(graphLeft - 5, int(xAxisDisplaced - point * scaleFactorOverall), len(resultData) + 5, 1)
        graphics.drawString(str(point * 2), graphLeft - 40, int(xAxisDisplaced - point * scaleFactorOverall + 5))
        for monthPoint in monthPoints:
            graphics.drawString(str(point * 2), graphLeft + monthPoint + 16, int(xAxisDisplaced - point * scaleFactorOverall - 2))
    graphics.drawString("kW", graphLeft - 90, graphTopExported + 10)
    graphics.drawString("kW", graphLeft - 90, graphTopImported + 10)
    graphics.drawString("kW", graphLeft - 90, graphTopGenerated + 10)
    graphics.drawString("kW", graphLeft - 90, graphTopUsed + 10)
    graphics.drawString("kW", graphLeft - 90, graphTopDisplaced + 10)
    title = "Electricity generation at site " + site.getCode().toString() + " " + site.getName() + " for " + str(months) + " month"
    if months > 1:
        title = title + "s"
    title = title + " ending " + monthDateFormat.format(Date(finishDate.getTime() - 1)) + " " + yearDateFormat.format(Date(finishDate.getTime() - 1))
    graphics.drawString(title, 30, 20)
    graphics.drawString("Imported", 10, graphTopImported + 10)
    graphics.drawString("Exported", 10, graphTopExported + 10)
    graphics.drawString("Generated", 10, graphTopGenerated + 10)
    graphics.drawString("Used", 10, graphTopUsed + 10)
    graphics.drawString("Displaced", 10, graphTopDisplaced + 10)
    graphics.setFont(smallFont)
    graphics.drawString("Poor data is denoted by a grey background and black foreground.", 30, ((maxHeight + 22) * 5) + 50 + minUsed + minDisplaced + minParasitic)
    graphics.setFont(keyFont)
    paint_legend(exported_supplies, graphTopExported)
    paint_legend(imported_supplies, graphTopImported)
    paint_legend(generated_supplies, graphTopGenerated)
else:
    image = BufferedImage(400, 400, BufferedImage.TYPE_4BYTE_ABGR)
    graphics = image.createGraphics()
    graphics.setColor(Color.BLACK)
    graphics.drawString("No data available for this period.", 30, 10)

os = inv.getResponse().getOutputStream()
graphics.setColor(Color.BLACK)
#graphics.drawString("report took..." + str(java.lang.System.currentTimeMillis() - start) + "ms", 10, 390)
ImageIO.write(image, "png", os)
os.close()]]></value>
    <value><![CDATA[]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Site HH figures</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException, XmlTree
from java.lang import System
from net.sf.chellow.monad.types import MonadDate
import math
from java.sql import Timestamp, ResultSet
from java.util import GregorianCalendar, Calendar, TimeZone, Locale, Date
from net.sf.chellow.physical import HhEndDate, Site

start = System.currentTimeMillis()
siteCode = inv.getString("site-code")
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
year = inv.getInteger("year")
month = inv.getInteger("month")
day = inv.getInteger("day")
if not inv.isValid():
  raise UserException.newInvalidParameter()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
cal.set(Calendar.DAY_OF_MONTH, day)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.MINUTE, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MILLISECOND, 0)
cal.add(Calendar.MINUTE, 30)
startDate = HhEndDate(cal.getTime()).getDate()
source.appendChild(HhEndDate(startDate).toXml(doc))
#raise UserException.newInvalidParameter("date " + str(startDate))
cal.add(Calendar.DAY_OF_MONTH, 1)
cal.add(Calendar.MINUTE, -30)
finishDate = HhEndDate(cal.getTime()).getDate()
site = Site.getSite(siteCode)
source.appendChild(site.toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))
con = Hiber.session().connection()
stmt = con.prepareStatement("select hh_datum.value, hh_datum.end_date, hh_datum.status, channel.is_import, supply.name, source.code from hh_datum, channel, supply, supply_generation, source where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = supply.id and supply.source_id = source.id and channel.is_kwh is true and hh_datum.end_date >= ? and hh_datum.end_date <= ? and supply.id in (select distinct supply.id from supply, supply_generation, site_supply_generation, site, source where supply.id = supply_generation.supply_id and supply_generation.id = site_supply_generation.supply_generation_id and site_supply_generation.site_id = ? and supply.source_id = source.id and source.code != 'sub') order by hh_datum.end_date", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
stmt.setTimestamp(1, Timestamp(startDate.getTime()))
stmt.setTimestamp(2, Timestamp(finishDate.getTime()))
stmt.setLong(3, site.getId())
stmt.setFetchSize(100)
rs = stmt.executeQuery()
hhDate = startDate.getTime()
siteSnagQuery = Hiber.session().createQuery("select count(*) from SiteSnag snag where snag.site = :site and snag.startDate.date <= :finishDate and snag.finishDate.date >= :startDate and (snag.dateResolved is null or (snag.dateResolved is not null and snag.isIgnored is true))").setEntity("site", site)
if rs.next():
    hhChannelKwh = rs.getFloat("value")
    hhChannelEndDate = rs.getTimestamp("end_date")
    isImport = rs.getBoolean("is_import")
    status = rs.getString("status")
    sourceCode = rs.getString("code")
    supplyName = rs.getString("name")
    finishDateMillis = finishDate.getTime()
    startDateMillis = startDate.getTime()
    cal.clear()
    cal.setTime(hhChannelEndDate)
    previousMonth = cal.get(Calendar.MONTH)
    while hhDate <= finishDateMillis:
        exportedKwh = 0
        importedKwh = 0
        parasiticKwh = 0
        generatedKwh = 0
        displacedKwh = 0
        while hhChannelEndDate != None and hhChannelEndDate.getTime() == hhDate:
            if not isImport and sourceCode == "net":
                exportedKwh = exportedKwh + hhChannelKwh
            if isImport and sourceCode == "net":
                importedKwh = importedKwh + hhChannelKwh
            if isImport and (sourceCode == "lm" or sourceCode == "chp" or sourceCode == "turb"):
                generatedKwh = generatedKwh + hhChannelKwh
            if not isImport and (sourceCode == "lm" or sourceCode == "chp" or sourceCode == "turb"):
                parasiticKwh = parasiticKwh + hhChannelKwh
            if rs.next():
                sourceCode = rs.getString("code")
                supplyName = rs.getString("name")
                hhChannelKwh = rs.getFloat("value")
                hhChannelEndDate = rs.getTimestamp("end_date")
                isImport = rs.getBoolean("is_import")
                status = rs.getString("status")
                cal.clear()
                cal.setTime(hhChannelEndDate)
                month = cal.get(Calendar.MONTH)
            else:
                hhChannelEndDate = None
        displacedKwh = generatedKwh - exportedKwh - parasiticKwh
        usedKwh = importedKwh + displacedKwh
        hhElement = doc.createElement("hh")
        source.appendChild(hhElement)
        '''
        if siteSnagQuery.setTimestamp("startDate", startDate).setTimestamp("finishDate", monthFinishDate).uniqueResult() > 0:
            monthElement.setAttribute("has-site-snags", "true")
        '''
        hhElement.appendChild(HhEndDate(Date(hhDate)).toXml(doc))
        hhElement.setAttribute("exported-kwh", str(round(exportedKwh, 1)))
        hhElement.setAttribute("imported-kwh", str(round(importedKwh, 1)))
        hhElement.setAttribute("generated-kwh", str(round(generatedKwh, 1)))
        hhElement.setAttribute("parasitic-kwh", str(round(parasiticKwh, 1)))
        hhElement.setAttribute("displaced-kwh", str(round(displacedKwh, 1)))
        hhElement.setAttribute("used-kwh", str(round(usedKwh, 1)))
        hhDate = HhEndDate.getNext(cal, hhDate)]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Sites &gt;
                    <xsl:value-of
                        select="concat(/source/site/@code, ' ', /source/site/@name)" />
                    &gt; HH data
                </title>
                <style>
                    &lt;![CDATA[
                colgroup.gray {
                    background: silver;
                }

                tr.error {
                    color: red;
                }
                ]]&gt;
                </style>
            </head>

            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/2/output/">
                        <xsl:value-of select="'Sites'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/3/output/?site-id={/source/site/@id}">
                        <xsl:value-of
                            select="concat(/source/site/@code, ' ', /source/site/@name)" />
                    </a>
                    &gt; HH data
                </p>

                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action=".">
                    <fieldset>
                        <legend>Show data</legend>
                        <br />
                        <label>
                            <xsl:value-of select="'Site Code '" />
                            <input name="site-code"
                                value="{/source/request/parameter[@name='site-code']/value}" />
                        </label>
                        <br />
                        <br />
                        <fieldset>
                            <legend>Date</legend>
                            <br />
                            <input size="4" length="4" name="year"
                                value="{/source/hh-end-date/@year}" />
                            <xsl:value-of select="' - '" />
                            <select name="month">
                                <xsl:for-each
                                    select="/source/months/month">
                                    <option>
                                        <xsl:if
                                            test="number(/source/hh-end-date/@month) = number(@number)">
                                            <xsl:attribute
                                                name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                            <xsl:value-of select="' - '" />
                            <select name="day">
                                <xsl:for-each
                                    select="/source/days/day">
                                    <option>
                                        <xsl:if
                                            test="number(/source/hh-end-date/@day) = number(@number)">
                                            <xsl:attribute
                                                name="selected">selected</xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="@number" />
                                    </option>
                                </xsl:for-each>
                            </select>
                        </fieldset>
                        <br />
                        <input type="submit" value="Show" />
                    </fieldset>
                </form>
                <table>
                    <caption>HH Data</caption>
                    <colgroup />
                    <colgroup class="gray" />
                    <colgroup />
                    <colgroup class="gray" />
                    <colgroup />
                    <colgroup class="gray" />
                    <thead>
                        <tr>
                            <th>Timestamp</th>
                            <th>Imported</th>
                            <th>Used</th>
                            <th>Displaced</th>
                            <th>Generated</th>
                            <th>Exported</th>
                            <th>Parasitic</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/hh">
                            <tr>
                                <xsl:if test="@has-site-snags">
                                    <xsl:attribute name="class">
                                        <xsl:value-of select="'error'" />
                                    </xsl:attribute>
                                </xsl:if>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-end-date/@year, '-', hh-end-date/@month, '-', hh-end-date/@day, ' ', hh-end-date/@hour, ':', hh-end-date/@minute, 'Z')" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@imported-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of select="@used-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@displaced-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@generated-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@exported-kwh" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@parasitic-kwh" />
                                </td>
                                <!--
                                    <td>
                                    <xsl:if
                                    test="@has-site-snags = 'true'">
                                    See
                                    <a
                                    href="{/source/request/@context-path}/orgs/1/reports/5/screen/output/?site-id={/source/site/@id}&amp;months=1&amp;finish-date-year={hh-end-date[@label='start']/@year}&amp;finish-date-month={hh-end-date[@label='start']/@month}">
                                    generation graph
                                    </a>
                                    for errors.
                                    </xsl:if>
                                    </td>
                                -->
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>

]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Site HH bulk figures selector</value>
    <value><![CDATA[from net.sf.chellow.monad import UserException, XmlTree
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import Site

site_id = inv.getLong("site-id")
if not inv.isValid():
  raise UserException()
site = Site.getSite(site_id)
source.appendChild(site.toXml(doc))
source.appendChild(MonadDate.getMonthsXml(doc))
source.appendChild(MonadDate.getDaysXml(doc))
source.appendChild(MonadDate().toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Sites &gt;
                    <xsl:value-of
                        select="concat(/source/site/@code, ' ', /source/site/@name)" />
                    &gt; HH data selector
                </title>
                <style>
                    &lt;![CDATA[
                colgroup.gray {
                    background: silver;
                }

                tr.error {
                    color: red;
                }
                ]]&gt;
                </style>
            </head>

            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/2/output/">
                        <xsl:value-of select="'Sites'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/3/output/?site-id={/source/site/@id}">
                        <xsl:value-of
                            select="concat(/source/site/@code, ' ', /source/site/@name)" />
                    </a>
                    &gt; HH data selector
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form
                    action="{/source/request/@context-path}/reports/15/output/">
                    <fieldset>
                        <legend>Download HH data</legend>
                        <input type="hidden" name="site-id"
                            value="{/source/site/@id}" />
                        <br />
                        <label>
                            <xsl:value-of select="'Type '" />
                            <select name="type">
                                <option value="used">Used</option>
                                <option value="imported">
                                    Imported
                                </option>
                                <option value="exported">
                                    Exported
                                </option>
                                <option value="generated">
                                    Generated
                                </option>
                                <option value="displaced">
                                    Displaced
                                </option>
                                <option value="parasitic">
                                    Parasitic
                                </option>
                            </select>
                        </label>
                        <br />
                        <br />
                        <label>
                            <xsl:value-of select="'Year '" />
                            <input size="4" length="4" name="year"
                                value="{/source/date/@year}" />
                        </label>
                        <br />
                        <br />
                        <input type="submit" value="Download" />
                    </fieldset>
                </form>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Site HH bulk figures</value>
    <value><![CDATA[from java.util import GregorianCalendar, TimeZone, Locale, Calendar, Date
from net.sf.chellow.monad import Hiber, UserException
from org.hibernate import CacheMode, ScrollMode
from java.text import DateFormat
from net.sf.chellow.physical import HhEndDate, Site
from java.sql import ResultSet, Timestamp

TYPES = ['used', 'generated', 'exported', 'displaced', 'parasitic', 'imported']
site_id = inv.getLong("site-id")
year = inv.getInteger("year")
type = inv.getString("type")
if not inv.isValid():
    raise UserException()
if not type in TYPES:
    raise UserException('The type must be one of ' + str(TYPES))
site = Site.getSite(site_id)
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal.set(Calendar.MILLISECOND, 0)
cal.set(Calendar.SECOND, 0)
cal.set(Calendar.MINUTE, 30)
cal.set(Calendar.HOUR_OF_DAY, 0)
cal.set(Calendar.DAY_OF_MONTH, 1)
cal.set(Calendar.MONTH, Calendar.JANUARY)
cal.set(Calendar.YEAR, year)
startDate = cal.getTime()
cal.add(Calendar.MINUTE, -30)
cal.add(Calendar.YEAR, 1)
finishDate = cal.getTime()
inv.getResponse().setContentType("text/csv")
inv.getResponse().setHeader('Content-Disposition', 'filename=output.csv;')
pw = inv.getResponse().getWriter()
pw.print("Site Code,Type,Date,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48")
dateFormat = DateFormat.getDateInstance(DateFormat.LONG, Locale.UK)
dateFormat.applyLocalizedPattern("yyyy-MM-dd")

con = Hiber.session().connection()
supplies = Hiber.session().createQuery("select distinct supply from Supply supply join supply.generations supplyGeneration join supplyGeneration.siteSupplyGenerations siteSupplyGeneration where siteSupplyGeneration.site = :site and supply.source.code != 'sub'").setEntity('site', site).list()
suppliesSQL = ''
for supply in supplies:
    suppliesSQL = suppliesSQL + str(supply.getId()) + ','
stmt = con.prepareStatement("select hh_datum.value, hh_datum.end_date, hh_datum.status, channel.is_import, supply.name, source.code from hh_datum, channel, supply_generation, supply, source where hh_datum.channel_id = channel.id and channel.supply_generation_id = supply_generation.id and supply_generation.supply_id = supply.id and supply.source_id = source.id and channel.is_kwh is true and hh_datum.end_date >= ? and hh_datum.end_date <= ? and supply.id in (" + suppliesSQL[:-1] + ") order by hh_datum.end_date", ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.CLOSE_CURSORS_AT_COMMIT)
stmt.setTimestamp(1, Timestamp(startDate.getTime()))
stmt.setTimestamp(2, Timestamp(finishDate.getTime()))
stmt.setFetchSize(100)
rs = stmt.executeQuery()
hhDate = startDate.getTime()
siteSnagQuery = Hiber.session().createQuery("select count(*) from SiteSnag snag where snag.site = :site and snag.startDate.date <= :finishDate and snag.finishDate.date >= :startDate and (snag.dateResolved is null or (snag.dateResolved is not null and snag.isIgnored is true))").setEntity("site", site)
if rs.next():
    hhChannelKwh = rs.getFloat("value")
    hhChannelEndDate = rs.getTimestamp("end_date")
    isImport = rs.getBoolean("is_import")
    status = rs.getString("status")
    sourceCode = rs.getString("code")
    supplyName = rs.getString("name")
    finishDateMillis = finishDate.getTime()
    startDateMillis = startDate.getTime()
    while hhDate <= finishDateMillis:
        exportedKwh = 0
        importedKwh = 0
        parasiticKwh = 0
        generatedKwh = 0
        displacedKwh = 0
        while hhChannelEndDate != None and hhChannelEndDate.getTime() == hhDate:
            if not isImport and sourceCode == "net":
                exportedKwh = exportedKwh + hhChannelKwh
            if isImport and sourceCode == "net":
                importedKwh = importedKwh + hhChannelKwh
            if isImport and (sourceCode == "lm" or sourceCode == "chp" or sourceCode == "turb"):
                generatedKwh = generatedKwh + hhChannelKwh
            if not isImport and (sourceCode == "lm" or sourceCode == "chp" or sourceCode == "turb"):
                parasiticKwh = parasiticKwh + hhChannelKwh
            if rs.next():
                sourceCode = rs.getString("code")
                supplyName = rs.getString("name")
                hhChannelKwh = rs.getFloat("value")
                hhChannelEndDate = rs.getTimestamp("end_date")
                isImport = rs.getBoolean("is_import")
                status = rs.getString("status")
            else:
                hhChannelEndDate = None
        displacedKwh = generatedKwh - exportedKwh - parasiticKwh
        usedKwh = importedKwh + displacedKwh
        '''
        if siteSnagQuery.setTimestamp("startDate", startDate).setTimestamp("finishDate", monthFinishDate).uniqueResult() > 0:
            monthElement.setAttribute("has-site-snags", "true")
        '''
        cal.clear()
        cal.setTimeInMillis(hhDate)
        if cal.get(Calendar.HOUR_OF_DAY) == 0 and cal.get(Calendar.MINUTE) == 30:
            pw.print('\r\n' + site.getCode().toString() + ',' + type + ',' + dateFormat.format(Date(hhDate)))
            pw.flush()
        pw.print(",")
        if type == 'used':
            hh_value = usedKwh
        elif type == 'imported':
            hh_value = importedKwh
        elif type == 'exported':
            hh_value = exportedKwh
        elif type == 'parasitic':
            hh_value = parasiticKwh
        elif type == 'displaced':
            hh_value = displacedKwh
        pw.print(str(round(hh_value, 1)))
        hhDate = HhEndDate.getNext(cal, hhDate)
        Hiber.session().clear()
pw.close()]]></value>
    <value><![CDATA[]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supply Generation</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException, XmlTree
from net.sf.chellow.monad.types import MonadDate
from net.sf.chellow.physical import SupplyGeneration

supply_generation_id = inv.getLong("supply-generation-id")
if not inv.isValid():
    raise UserException()
supply_generation = SupplyGeneration.getSupplyGeneration(supply_generation_id)
source.appendChild(supply_generation.toXml(doc, XmlTree("mpans", XmlTree("core").put('top', XmlTree("mtc").put('llfc', XmlTree('voltageLevel')).put('pc').put('ssc').put('gspGroup')).put('hhdcAccount', XmlTree('contract', XmlTree('party'))).put('supplierAccount', XmlTree('contract', XmlTree('party')))).put('supply', XmlTree('source')).put('siteSupplyGenerations', XmlTree('site'))))
source.appendChild(MonadDate().toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Sites &gt; Supply:
                    <xsl:value-of
                        select="/source/supply-generation/supply/@name" />
                    &gt; Generation:
                    <xsl:value-of
                        select="/source/supply-generation/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/50/output/">
                        <xsl:value-of select="'Supplies'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/4/output/?supply-id={/source/supply-generation/supply/@id}">
                        <xsl:value-of
                            select="/source/supply-generation/supply/@id" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat('Generation: ', /source/supply-generation/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplies/{/source/supply-generation/supply/@id}/generations/{/source/supply-generation/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>
                        Sites powered by this supply generation
                    </caption>
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Name</th>
                            <xsl:if
                                test="count(/source/supply-generation/site-supply-generation) &gt; 1">
                                <th></th>
                            </xsl:if>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/supply-generation/site-supply-generation">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/3/output/?site-id={site/@id}">
                                        <xsl:value-of
                                            select="site/@code" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="site/@name" />
                                </td>
                                <xsl:if
                                    test="count(/source/supply-generation/site-supply-generation) &gt; 1">
                                    <td>
                                        <xsl:if
                                            test="@is-physical='true'">
                                            Located here
                                        </xsl:if>
                                    </td>
                                </xsl:if>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
                <h3>Supply</h3>
                <ul>
                    <li>
                        <xsl:value-of select="'Supply Name: '" />
                        <a
                            href="{/source/request/@context-path}/reports/4/output/?supply-id={/source/supply-generation/supply/@id}">
                            <xsl:value-of
                                select="/source/supply-generation/supply/@name" />
                        </a>
                    </li>
                    <li>
                        <xsl:value-of
                            select="concat('Source: ', /source/supply-generation/supply/source/@code, ' - ', /source/supply-generation/supply/source/@name)" />
                    </li>
                </ul>
                <h3>Generation</h3>

                <ul>
                    <li>
                        From:
                        <xsl:value-of
                            select="concat(/source/supply-generation/hh-end-date[@label='start']/@year, '-', /source/supply-generation/hh-end-date[@label='start']/@month, '-', /source/supply-generation/hh-end-date[@label='start']/@day)" />
                    </li>
                    <li>
                        To:
                        <xsl:choose>
                            <xsl:when
                                test="/source/supply-generation/hh-end-date[@label='finish']">
                                <xsl:value-of
                                    select="concat(/source/supply-generation/hh-end-date[@label='finish']/@year, '-', /source/supply-generation/hh-end-date[@label='finish']/@month, '-', /source/supply-generation/hh-end-date[@label='finish']/@day)" />
                            </xsl:when>
                            <xsl:otherwise>Ongoing</xsl:otherwise>
                        </xsl:choose>
                    </li>
                </ul>

                <table>
                    <caption>MPANs</caption>
                    <thead>
                        <tr>
                            <th></th>
                            <th>Import</th>
                            <th>Export</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th>Profile Class</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/mpan-top/pc/@code, ' - ', /source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/mpan-top/pc/@description)" />
                            </td>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/mpan-top/pc/@code, ' - ', /source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/mpan-top/pc/@description)" />
                            </td>
                        </tr>
                        <tr>
                            <th>Meter Timeswitch Class</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/mpan-top/mtc/@code, ' - ', /source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/mpan-top/mtc/@description)" />
                            </td>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/mpan-top/mtc/@code, ' - ', /source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/mpan-top/mtc/@description)" />
                            </td>
                        </tr>
                        <tr>
                            <th>Line Loss Factor Class</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/mpan-top/llfc/@code, ' - ', /source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/mpan-top/llfc/@description)" />
                            </td>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/mpan-top/llfc/@code, ' - ', /source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/mpan-top/llfc/@description)" />
                            </td>
                        </tr>
                        <tr>
                            <th>MPAN Core</th>
                            <td>
                                <xsl:value-of
                                    select="/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/mpan-core/@core" />
                            </td>
                            <td>
                                <xsl:value-of
                                    select="/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/mpan-core/@core" />
                            </td>
                        </tr>
                        <tr>
                            <th>SSC</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/mpan-top/ssc/@code, ' - ', /source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/mpan-top/ssc/@description)" />
                            </td>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/mpan-top/ssc/@code, ' - ', /source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/mpan-top/ssc/@description)" />
                            </td>
                        </tr>
                        <tr>
                            <th>GSP Group</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/mpan-top/gsp-group/@code, ' - ', /source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/mpan-top/gsp-group/@description)" />
                            </td>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/mpan-top/gsp-group/@code, ' - ', /source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/mpan-top/gsp-group/@description)" />
                            </td>
                        </tr>
                        <tr>
                            <th>Agreed Supply Capacity</th>
                            <td>
                                <xsl:value-of
                                    select="/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/@agreed-supply-capacity" />
                            </td>
                            <td>
                                <xsl:value-of
                                    select="/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/@agreed-supply-capacity" />
                            </td>
                        </tr>
                        <tr>
                            <th>Channels</th>
                            <td>
                                <ul>
                                    <xsl:if
                                        test="/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/@has-import-kwh='true'">
                                        <li>Import kWh</li>
                                    </xsl:if>
                                    <xsl:if
                                        test="/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/@has-import-kvarh='true'">
                                        <li>Import kVArh</li>
                                    </xsl:if>
                                    <xsl:if
                                        test="/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/@has-export-kwh='true'">
                                        <li>Export kWh</li>
                                    </xsl:if>
                                    <xsl:if
                                        test="/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/@has-export-kvarh='true'">
                                        <li>Export kVArh</li>
                                    </xsl:if>
                                </ul>
                            </td>
                            <td>
                                <ul>
                                    <xsl:if
                                        test="/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/@has-import-kwh='true'">
                                        <li>Import kWh</li>
                                    </xsl:if>
                                    <xsl:if
                                        test="/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/@has-import-kvarh='true'">
                                        <li>Import kVArh</li>
                                    </xsl:if>
                                    <xsl:if
                                        test="/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/@has-export-kwh='true'">
                                        <li>Export kWh</li>
                                    </xsl:if>
                                    <xsl:if
                                        test="/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/@has-export-kvarh='true'">
                                        <li>Export kVArh</li>
                                    </xsl:if>
                                </ul>
                            </td>
                        </tr>
                        <tr>
                            <th>HHDC Account</th>
                            <td>
                                <a
                                    href="{/source/request/@context-path}/reports/56/output/?account-id={/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/account[hhdc-contract]/@id}">
                                    <xsl:value-of
                                        select="/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/account[hhdc-contract]/@reference" />
                                </a>
                                <xsl:value-of select="' &gt; '" />
                                <a
                                    href="{/source/request/@context-path}/reports/58/output/?hhdc-contract-id={/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/account/hhdc-contract/@id}">
                                    <xsl:value-of
                                        select="/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/account/hhdc-contract/@name" />
                                </a>
                            </td>
                            <td>
                                <a
                                    href="{/source/request/@context-path}/reports/56/output/?account-id={/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/account[hhdc-contract]/@id}">
                                    <xsl:value-of
                                        select="/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/account[hhdc-contract]/@reference" />
                                </a>
                                <xsl:value-of select="' &gt; '" />
                                <a
                                    href="{/source/request/@context-path}/reports/58/output/?hhdc-contract-id={/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/account/hhdc-contract/@id}">
                                    <xsl:value-of
                                        select="/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/account/hhdc-contract/@name" />
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <th>Supplier Account</th>
                            <td>
                                <a
                                    href="{/source/request/@context-path}/reports/42/output/?account-id={/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/account[supplier-contract]/@id}">
                                    <xsl:value-of
                                        select="/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/account[supplier-contract]/@reference" />
                                </a>
                                <xsl:value-of select="' &gt; '" />
                                <a
                                    href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/account/supplier-contract/@id}">
                                    <xsl:value-of
                                        select="/source/supply-generation/mpan[mpan-top/llfc/@is-import='true']/account/supplier-contract/@name" />
                                </a>
                            </td>
                            <td>
                                <a
                                    href="{/source/request/@context-path}/reports/42/output/?account-id={/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/account[supplier-contract]/@id}">
                                    <xsl:value-of
                                        select="/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/account[supplier-contract]/@reference" />
                                </a>
                                <xsl:value-of select="' &gt; '" />
                                <a
                                    href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/account/supplier-contract/@id}">
                                    <xsl:value-of
                                        select="/source/supply-generation/mpan[mpan-top/llfc/@is-import='false']/account/supplier-contract/@name" />
                                </a>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supplies Moment</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber
from net.sf.chellow.physical import ReadType

def mpan_fields(mpan):
    NON_ESTIMATE_READ_TYPES = [ReadType.TYPE_CHANGE_OF_SUPPLIER, ReadType.TYPE_CUSTOMER, ReadType.TYPE_FINAL, ReadType.TYPE_INITIAL, ReadType.TYPE_DC_MANUAL, ReadType.TYPE_ROUTINE, ReadType.TYPE_SPECIAL, ReadType.TYPE_CHANGE_OF_TENANCY]
    fields = {}
    if mpan == None:
        fields['mpan_core'] = ' '
        fields['agreed_sc'] = ' '
        fields['llfc_code'] = ' '
        fields['llfc_description'] = ' '
        fields['last_read_date'] = ' '
    else:
        fields['mpan_core'] = mpan.getCore().toString()
        fields['agreed_sc'] = str(mpan.getAgreedSupplyCapacity())
        mpan_top = mpan.getTop()
        llfc = mpan_top.getLlfc()
        fields['llfc_code'] = llfc.codeAsString()
        fields['llfc_description'] = llfc.getDescription()
        i = 0
        found = False
        reads = Hiber.session().createQuery("from RegisterRead read where read.mpan = :mpan order by read.presentDate.date").setEntity('mpan', mpan).list()
        while found is not True and i < len(reads):
            read = reads[i]
            associated_reads = Hiber.session().createQuery("from RegisterRead read where read.invoice = :invoice and read.presentDate.date = :presentDate").setEntity('invoice', read.getInvoice()).setTimestamp('presentDate', read.getPresentDate().getDate()).list()
            found = True
            for associated_read in associated_reads:
                if read.presentType not in NON_ESTIMATE_READ_TYPES:
                    found = False
                    break
            i = i + 1
        fields['last_read_date'] = 'None'
        if found:
            fields['last_read_date'] = read.getPresentDate().toString()
    return fields

inv.getResponse().setContentType('text/csv')
inv.getResponse().addHeader('Content-Disposition', 'attachment; filename="report.csv"')
pw = inv.getResponse().getWriter()

pw.println("Physical Site Id, Physical Site Name, Other Site Ids, Other Site Names, Supply Id, Source, DNO Name, Voltage Level, Import MPAN core, Import Agreed Supply Capacity (kVA), Import LLFC Code, Import LLFC Description,  Import Last Read, Export MPAN core, Export Agreed Supply Capacity (kVA), Export LLFC Code, Export LLFC Description,  Export Last Read")
for supply_generation in Hiber.session().createQuery("from SupplyGeneration generation where generation.finishDate.date is null order by generation.supply.id").list():
    site_codes = ''
    site_names = ''
    for site_supply_generation in supply_generation.getSiteSupplyGenerations():
        if site_supply_generation.getIsPhysical():
            physical_site = site_supply_generation.getSite()
        else:
            site = site_supply_generation.getSite();
            site_codes = site_codes + site.getCode() + ', '
            site_names = site_names + site.getName() + ', '
    site_codes = site_codes[:-2]
    site_names = site_names[:-2]
    supply = supply_generation.getSupply()
    mpan = supply_generation.getMpans()[0]
    import_fields = mpan_fields(supply_generation.getImportMpan())
    export_fields = mpan_fields(supply_generation.getExportMpan())
    pw.print('"' + physical_site.getCode() + '","' + physical_site.getName() + '","' + site_codes + '","' + site_names + '",' + str(supply.getId()) + ',' + supply.getSource().getCode() + ',"' + mpan.getCore().getDso().getName() + '",' + mpan.getTop().getLlfc().getVoltageLevel().getCode())
    pw.print(',' + import_fields['mpan_core'] + ",")
    pw.print(import_fields['agreed_sc'])
    pw.print("," + import_fields['llfc_code'])
    pw.print("," + import_fields['llfc_description'] + "," + import_fields['last_read_date'] + ',')
    pw.println(export_fields['mpan_core'] + "," + export_fields['agreed_sc'] + "," + export_fields['llfc_code'] + "," + export_fields['llfc_description'] + "," + export_fields['last_read_date'])
    pw.flush()
pw.close()]]></value>
    <value><![CDATA[]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 GSP Group</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import GspGroup

group_id = inv.getLong('gsp-group-id')
group = GspGroup.getGspGroup(group_id)
source.appendChild(group.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; GSP Groups &gt;
                    <xsl:value-of
                        select="/source/gsp-group/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/22/output/">
                        <xsl:value-of select="'GSP Groups'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/gsp-group/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of
                                select="/source/gsp-group/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/gsp-group/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/gsp-group/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 HHDC Channel Snags</value>
    <value><![CDATA[from net.sf.chellow.monad import XmlTree, Hiber
from java.util import Date
from java.lang import System
from net.sf.chellow.billing import HhdcContract

contract_id = inv.getLong('hhdc-contract-id')
if not inv.isValid():
    raise UserException()
contract = HhdcContract.getHhdcContract(contract_id)
snags_element = doc.createElement('channel-snags')
source.appendChild(snags_element)
snags_element.appendChild(contract.toXml(doc, XmlTree('party'))) 
snags = Hiber.session().createQuery("select distinct snag, siteSupplyGeneration.site.code, snag.startDate.date, snag.channel.id from ChannelSnag snag join snag.channel.supplyGeneration.siteSupplyGenerations siteSupplyGeneration where snag.dateResolved is null and snag.contract = :contract and snag.startDate.date < :activeDate order by siteSupplyGeneration.site.code, snag.startDate.date, snag.channel.id").setEntity('contract', contract).setTimestamp("activeDate",Date(System.currentTimeMillis()-(5*24*60*60*1000))).list()
for snag_row in snags:
    snags_element.appendChild(snag_row[0].toXml(doc, XmlTree('channel', XmlTree('supplyGeneration', XmlTree('supply').put('siteSupplyGenerations', XmlTree('site')).put("mpans", XmlTree("core", XmlTree("dso")))))))
activeSites = Hiber.session().createQuery("select count(distinct siteSupplyGeneration.site) from ChannelSnag snag join snag.channel.supplyGeneration.siteSupplyGenerations siteSupplyGeneration where snag.dateResolved is null and snag.contract = :contract and snag.startDate.date < :activeDate").setEntity('contract', contract).setTimestamp("activeDate",Date(System.currentTimeMillis()-(5*24*60*60*1000))).uniqueResult()
totalSites = Hiber.session().createQuery("select count(distinct siteSupplyGeneration.site) from ChannelSnag snag join snag.channel.supplyGeneration.siteSupplyGenerations siteSupplyGeneration where snag.dateResolved is null and snag.contract = :contract").setEntity('contract', contract).uniqueResult()

snags_element.setAttribute("snag-count", str(len(snags)))
snags_element.setAttribute("site-count", str(activeSites))
snags_element.setAttribute("pending-site-count", str(totalSites - activeSites))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/channel-snags/hhdc-contract/@name" />
                    &gt; Channel Snags
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/57/output/?hhdc-contract-id={/source/channel-snags/hhdc-contract/@id}">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/58/output/?hhdc-contract-id={/source/channel-snags/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/channel-snags/hhdc-contract/@name" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Channel Snags ['" />
                    <a
                        href="{/source/request/@context-path}/hhdc-contracts/{/source/channel-snags/hhdc-contract/@id}/channel-snags/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>

                <p>
                    <xsl:value-of
                        select="source/channel-snags/@snag-count" />
                    Snag(s) (older then 5 days) Total over
                    <xsl:value-of
                        select="source/channel-snags/@site-count" />
                    Site(s)
                </p>
                <p>
                    A further
                    <xsl:value-of
                        select="source/channel-snags/@pending-site-count" />
                    site(s) have snags not yet older then 5 days
                </p>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>MPAN</th>
                            <th>Sites</th>
                            <th>Snag Description</th>
                            <th>Supply</th>
                            <th>Units</th>
                            <th>Duration</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/channel-snags/channel-snag">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/59/output/?snag-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                    <xsl:value-of select="' ['" />
                                    <a
                                        href="{/source/request/@context-path}/hhdc-contracts/{/source/channel-snags/hhdc-contract/@id}/channel-snags/{@id}/">
                                        <xsl:value-of select="'edit'" />
                                    </a>
                                    <xsl:value-of select="']'" />
                                </td>

                                <td>
                                    <xsl:apply-templates
                                        select="channel/supply-generation/mpan" />
                                </td>
                                <td>
                                    <ul>
                                        <xsl:for-each
                                            select="channel/supply-generation/site-supply-generation">
                                            <li>
                                                <xsl:value-of
                                                    select="concat(site/@code, ' ', site/@name)" />
                                            </li>
                                        </xsl:for-each>
                                    </ul>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>

                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="channel/@is-import='true'">
                                            Import
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Export
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>

                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="channel/@is-kwh='true'">
                                            kWh
                                        </xsl:when>
                                        <xsl:otherwise>
                                            kVAr
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>

                                <td>
                                    Start
                                    <xsl:apply-templates
                                        select="hh-end-date[@label='start']" />
                                    <br />
                                    Finish
                                    <xsl:apply-templates
                                        select="hh-end-date[@label='finish']" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>

            </body>
        </html>
    </xsl:template>

    <xsl:template match="mpan">
        <xsl:value-of select="mpan-core/dso/@code" />
        <xsl:value-of select="mpan-core/@uniquePart" />
        <xsl:value-of select="mpan-core/@checkDigit" />
        <br />
    </xsl:template>

    <xsl:template match="hh-end-date">
        <xsl:value-of select="@year" />
        -
        <xsl:value-of select="@month" />
        -
        <xsl:value-of select="@day" />
        <xsl:text></xsl:text>
        <xsl:value-of select="@hour" />
        :
        <xsl:value-of select="@minute" />
        <xsl:text>Z</xsl:text>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 HHDC Contract Site Group Snags</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import HhdcContract

contract_id = inv.getLong('hhdc-contract-id')
contract = HhdcContract.getHhdcContract(contract_id)
snags = Hiber.session().createQuery("select snag, snag.site from SiteSnag snag where snag.dateResolved is null and snag.contract = :contract order by snag.site.code, snag.startDate.date").setEntity('contract', contract).list()
snags_element = doc.createElement('site-snags')
source.appendChild(snags_element)
snags_element.appendChild(contract.toXml(doc, XmlTree('party')))
for snag_row in snags:
    snag_element = snag_row[0].toXml(doc)
    snags_element.appendChild(snag_element)
    site_element = snag_row[1].toXml(doc)
    snag_element.appendChild(site_element)
sites = Hiber.session().createQuery("select count(distinct snag.site) from SiteSnag snag where snag.contract = :contract and snag.dateResolved is null").setEntity('contract', contract).uniqueResult()
snags_element.setAttribute("snag-count", str(len(snags)))
snags_element.setAttribute("site-count", str(sites))
]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="US-ASCII"
        doctype-public="-//W3C//DTD XHTML 1.1//EN"
        doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"
        indent="yes" />

    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/site-snags/hhdc-contract/@name" />
                    &gt; Site Snags
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/57/output/?hhdc-contract-id={/source/site-snags/hhdc-contract/@id}">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/58/output/?hhdc-contract-id={/source/site-snags/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/site-snags/hhdc-contract/@name" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Site Snags ['" />
                    <a
                        href="{/source/request/@context-path}/hhdc-contracts/{/source/site-snags/hhdc-contract/@id}/site-snags/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <p>
                    <xsl:value-of
                        select="source/site-snags/@snag-count" />
                    Snag(s) (older then 5 days) Total over
                    <xsl:value-of
                        select="source/site-snags/@site-count" />
                    Site(s)
                    <br />
                </p>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Site ID</th>
                            <th>Site Name</th>
                            <th>Snag Description</th>
                            <th>Duration</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/site-snags/site-snag">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/60/output/?snag-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                    <xsl:value-of select="' ['" />
                                    <a
                                        href="{/source/request/@context-path}/hhdc-contracts/{/source/site-snags/hhdc-contract/@id}/site-snags/{@id}/">
                                        <xsl:value-of select="'edit'" />
                                    </a>
                                    <xsl:value-of select="']'" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/3/output/?site-id={site/@id}">
                                        <xsl:value-of
                                            select="site/@code" />
                                    </a>
                                </td>

                                <td>
                                    <xsl:value-of select="site/@name" />
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>

                                <td>
                                    Start
                                    <xsl:apply-templates
                                        select="hh-end-date[@label='start']" />
                                    <br />
                                    Finish
                                    <xsl:apply-templates
                                        select="hh-end-date[@label='finish']" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
    <xsl:template match="hh-end-date">
        <xsl:value-of select="@year" />
        -
        <xsl:value-of select="@month" />
        -
        <xsl:value-of select="@day" />
        <xsl:text></xsl:text>
        <xsl:value-of select="@hour" />
        :
        <xsl:value-of select="@minute" />
        <xsl:text>Z</xsl:text>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 TRIAD report</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, UserException
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.physical import HhEndDate
from java.text import DateFormat

year = inv.getInteger("year")
month = inv.getInteger("month")
if not inv.isValid():
    raise UserException.newInvalidParameter()
cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
cal_ct = GregorianCalendar(TimeZone.getTimeZone("BST"), Locale.UK)
cal.clear()
cal.set(Calendar.YEAR, year)
cal.set(Calendar.MONTH, month - 1)
startDate = HhEndDate(cal.getTime()).getNext()
cal.add(Calendar.MONTH, 1)
finishDate = HhEndDate(cal.getTime())
inv.getResponse().setContentType("text/plain")
pw = inv.getResponse().getWriter()
pw.print("Site Code,Site Name,Associated Sites,TRIAD kW\n")
dateFormat = DateFormat.getDateInstance(DateFormat.LONG, Locale.UK)
dateFormat.applyLocalizedPattern("yyyy-MM-dd")
for site in Hiber.session().createQuery("select distinct site from Site site join site.siteSupplyGenerations siteSupplyGeneration where siteSupplyGeneration.supplyGeneration.supply.source.code.string in ('lm','chp','turb') and site.organization = :organization and siteSupplyGeneration.supplyGeneration.startDate.date <= :finishDate and (siteSupplyGeneration.supplyGeneration.finishDate.date = null or siteSupplyGeneration.supplyGeneration.finishDate.date >= :startDate) order by site.code.string").setEntity('organization', organization).setTimestamp('startDate', startDate.getDate()).setTimestamp('finishDate', finishDate.getDate()).list():
    pw.print('main site ' + site.getCode().toString())
    pw.flush()
    for group in organization.getSite(site.getId()).groups(startDate, finishDate):
        sites = group.getSites()
        pw.print(' sites ')
        for sitee in sites:
            pw.print(sitee.getCode().toString())
        pw.print(' endsites')
        pw.flush()
        '''
        site_code = sites[0].getCode().toString()
        site_name = sites[0].getName()
        has_triad_est = False
        associate_string = ''
        for i in range(1, len(sites) - 1):
            associate_string = associate_string + sites[i].getCode().toString() + ' '
        supplies = group.getSupplies()
        primary_supply = None
        for supply in supplies:
            source_code = supply.getSource().getCode().toString()
            if source_code == 'lm' or source_code == 'turb':
                has_triad_est = True
            pw.print('site ' + site_code + ' source_code ' + source_code + ' supply id ' + str(supply.getId()))
            pw.print('supply name ' + supply.getName().toString())
            if primary_supply == None and source_code == 'net':
                primary_supply = supply
        pw.print(' primary supply ' + str(primary_supply.getId()) + ' date ' + startDate.toString())
        primary_supply_generation = primary_supply.getGeneration(startDate)
        #pw.print('primary supp generation ' + str(primary_supply_generation.getId()))
        for mpan in primary_supply_generation.getMpans():
            if int(mpan.getMpanCore().getDso().getCode().toString()) < 24:
                #pw.print('found primary mpan')
                primary_mpan = mpan
                break
        is_substation = primary_mpan.getLineLossFactor().getIsSubstation().getBoolean()
        dso = primary_mpan.getMpanCore().getDso()
        dso_service = dso.getService('main')
        voltage_level = primary_mpan.getLineLossFactor().getVoltageLevel().getCode().toString()
        llf_calculator = dso_service.callFunction('llf_calculator', [voltage_level, is_substation])
        hh_date = group.getFrom()
        num_triad_kwh = 0
        triad_kwh = 0
        stream_map = group.hhData()
        i = 0
        import_from_net = stream_map['import-from-net']
        export_to_net = stream_map['export-to-net']
        import_from_gen = stream_map['import-from-gen']
        export_to_gen = stream_map['export-to-gen']
        while not hh_date.getDate().after(group.getTo().getDate()):
            displaced_hh = import_from_gen[i] - export_to_gen[i] - export_to_net[i]
            used_hh = displaced_hh + import_from_net[i]
            cal.setTime(hh_date.getDate())
            year = cal.get(Calendar.YEAR)
            month = cal.get(Calendar.MONTH)
            day = cal.get(Calendar.DAY_OF_MONTH)
            day_of_week = cal.get(Calendar.DAY_OF_WEEK)
            hour = cal.get(Calendar.HOUR_OF_DAY)
            minute = cal.get(Calendar.MINUTE)
            decimal_hour = hour + minute / 60
            cal_ct.setTime(hh_date.getDate())
            year_ct = cal_ct.get(Calendar.YEAR)
            month_ct = cal_ct.get(Calendar.MONTH)
            day_ct = cal_ct.get(Calendar.DAY_OF_MONTH)
            day_of_week_ct = cal_ct.get(Calendar.DAY_OF_WEEK)
            hour_ct = cal_ct.get(Calendar.HOUR_OF_DAY)
            minute_ct = cal_ct.get(Calendar.MINUTE)
            decimal_hour_ct = hour_ct + minute_ct / 60            
            if decimal_hour >= 16 and decimal_hour <= 19 and (month > 9 or month < 2) and day_of_week > 1 and day_of_week < 7:
                num_triad_kwh = num_triad_kwh + 1
                triad_kwh = triad_kwh + used_hh * llf_calculator.llf(hh_date, year, month, day, day_of_week, hour, minute, decimal_hour, year_ct, month_ct, day_ct, day_of_week_ct, hour_ct, minute_ct, decimal_hour_ct)
                i = i + 1
            hh_date = hh_date.getNext()
        if has_triad_est:
            est_triad_kw = triad_kwh / 4 / num_triad_kwh * 2
        else:
            est_triad_kw = 0
        pw.print('"' + site_code + '","' + site_name + '","' + associate_string + '",' + str(round(est_triad_kw, 1)) + '\n')
        pw.flush()
        '''
    Hiber.session().clear()
pw.close()]]></value>
    <value><![CDATA[]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 GSP Groups</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

groups_element = doc.createElement('gsp-groups')
source.appendChild(groups_element)
for group in Hiber.session().createQuery("from GspGroup group order by group.code").list():
    groups_element.appendChild(group.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    <xsl:value-of select="'Home'" />
                    &gt; GSP Groups
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'GSP Groups'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/gsp-groups/gsp-group">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/18/output/?gsp-group-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@code" />
                                </td>

                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Providers</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

for provider in Hiber.session().createQuery("from Provider provider order by provider.participant.code, provider.role.code").list():
    source.appendChild(provider.toXml(doc, XmlTree('participant').put('role')))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>Chellow &gt; Providers</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt; Providers
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <th>Chellow Id</th>
                        <th>Name</th>
                        <th>Participant</th>
                        <th>Market Role</th>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/provider">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/24/output/?provider-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@name" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/36/output/?participant-id={participant/@id}">
                                        <xsl:value-of
                                            select="participant/@name" />
                                    </a>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/61/output/?role-id={market-role/@id}">
                                        <xsl:value-of
                                            select="market-role/@description" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Provider</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import Provider
from net.sf.chellow.physical import MarketRole

provider_id = inv.getLong('provider-id')
provider = Provider.getProvider(provider_id)
provider_element = provider.toXml(doc, XmlTree('participant').put('role'))
source.appendChild(provider_element)
provider_role_code = provider.getRole().getCode()
query = None
if provider_role_code == MarketRole.HHDC:
    query = Hiber.session().createQuery("from HhdcContract contract where contract.party = :party order by contract.party.name").setEntity('party', provider)
elif provider_role_code == MarketRole.SUPPLIER:
    query = Hiber.session().createQuery("from SupplierContract contract where contract.party = :party order by contract.party.name").setEntity('party', provider)
elif provider_role_code == MarketRole.NON_CORE_ROLE:
    query = Hiber.session().createQuery("from NonCoreContract contract where contract.party = :party order by contract.party.name").setEntity('party', provider)
if query != None:
    for contract in query.list():
        provider_element.appendChild(contract.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Providers &gt;
                    <xsl:value-of select="/source/provider/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/23/output/">
                        <xsl:value-of select="'Providers'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/provider/@name" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of select="/source/provider/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Name</th>
                        <td>
                            <xsl:value-of
                                select="/source/provider/@name" />
                        </td>
                    </tr>

                    <tr>
                        <th>Participant</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/37/output/?participant-id={/source/provider/participant/@id}">
                                <xsl:value-of
                                    select="/source/provider/participant/@name" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>Role</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/61/output/?role-id={/source/provider/market-role/@id}">
                                <xsl:value-of
                                    select="/source/provider/market-role/@description" />
                            </a>
                        </td>
                    </tr>
                    <xsl:if
                        test="/source/provider/market-role/@code='R'">
                        <tr>
                            <th>DSO Code</th>
                            <td>
                                <xsl:value-of
                                    select="/source/provider/@dso-code" />
                            </td>
                        </tr>
                    </xsl:if>
                </table>
                <br />
                <table>
                    <caption>
                        <xsl:choose>
                            <xsl:when
                                test="/source/provider/market-role/@code = 'R'">
                                Services
                            </xsl:when>
                            <xsl:otherwise>Contracts</xsl:otherwise>
                        </xsl:choose>
                    </caption>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Name</th>
                            <th>Start Date</th>
                            <th>Finish Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/provider/hhdc-contract | /source/provider/supplier-contract | /source/provider/mop-contract">
                            <tr>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="/source/provider/market-role/@code = 'C'">
                                            <a
                                                href="{/source/request/@context-path}/reports/57/output/?contract-id={@id}">
                                                <xsl:value-of
                                                    select="@id" />
                                            </a>
                                        </xsl:when>
                                        <xsl:when
                                            test="/source/provider/market-role/@code = 'R'">
                                            <a
                                                href="{/source/request/@context-path}/reports/57/output/?contract-id={@id}">
                                                <xsl:value-of
                                                    select="@id" />
                                            </a>
                                        </xsl:when>
                                        <xsl:when
                                            test="/source/provider/market-role/@code = 'X'">
                                            <a
                                                href="{/source/request/@context-path}/reports/38/output/?contract-id={@id}">
                                                <xsl:value-of
                                                    select="@id" />
                                            </a>
                                        </xsl:when>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of select="@name" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(rate-script[@label='start']/hh-end-date[@label='start']/@year, '-', rate-script[@label='start']/hh-end-date[@label='start']/@month, '-', rate-script[@label='start']/hh-end-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="rate-script[@label='finish']/hh-end-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(rate-script[@label='finish']/hh-end-date[@label='finish']/@year, '-', rate-script[@label='finish']/hh-end-date[@label='finish']/@month, '-', rate-script[@label='finish']/hh-end-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
          </body>
        </html>
    </xsl:template>
</xsl:stylesheet>

]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 DSO LLFCs</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import Dso

dso_id = inv.getLong('dso-id')
dso = Dso.getDso(dso_id)
llfcs_element = doc.createElement('llfcs')
source.appendChild(llfcs_element)
for llfc in Hiber.session().createQuery("from Llfc llfc where llfc.dso = :dso order by llfc.code").setEntity("dso", dso).list():
    llfcs_element.appendChild(llfc.toXml(doc, XmlTree("voltageLevel")))
llfcs_element.appendChild(dso.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; DSOs &gt;
                    <xsl:value-of
                        select="/source/llfcs/dso/@code" />
                    &gt; LLFCs
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/69/output/">
                        <xsl:value-of select="'DSOs'"/>
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/69/output/?dso-id={/source/llfcs/dso/@id}">
                        <xsl:value-of
                            select="/source/llfcs/dso/@code" />
                    </a>
                    &gt; LLFCs
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Code</th>
                            <th>Description</th>
                            <th>Voltage Level</th>
                            <th>Is Substation?</th>
                            <th>Is Import?</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/llfcs/llfc">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/26/output/?llfc-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@code" />
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(voltage-level/@code, ' - ', voltage-level/@name)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@is-substation='true'">
                                            Has Substation
                                        </xsl:when>
                                        <xsl:otherwise>
                                            No Substation
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@is-import='true'">
                                            Import
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Export
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 DSO LLFC</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Llfc

llfc_id = inv.getLong('llfc-id')
llfc = Llfc.getLlfc(llfc_id)
source.appendChild(llfc.toXml(doc, XmlTree('dso').put('voltageLevel')))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; DSOs &gt;
                    <xsl:value-of
                        select="/source/llfc/dso/@code" />
                    &gt; LLFCs &gt;
                    <xsl:value-of select="/source/llfc/@code" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/69/output/">
                        <xsl:value-of select="'DSOs'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/70/output/?dso-id={/source/llfc/dso/@id}">
                        <xsl:value-of
                            select="/source/llfc/dso/@code" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/25/output/?dso-id={/source/llfc/dso/@id}">
                        <xsl:value-of select="'LLFCs'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/llfc/@code" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of select="/source/llfc/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/llfc/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/llfc/@description" />
                        </td>

                    </tr>
                    <tr>
                        <th>Voltage Level</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/llfc/voltage-level/@code, ' - ', /source/llfc/voltage-level/@name)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Is Substation?</th>
                        <td>
                            <xsl:value-of
                                select="/source/llfc/@is-substation" />
                        </td>
                    </tr>
                    <tr>
                        <th>Is Import?</th>
                        <td>
                            <xsl:value-of
                                select="/source/llfc/@is-import" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Profile Classes</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

pcs_element = doc.createElement('pcs')
source.appendChild(pcs_element)
for pc in Hiber.session().createQuery("from Pc pc order by pc.code").list():
    pcs_element.appendChild(pc.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>Home &gt; Profile Classes</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt; Profile Classes
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/pcs/pc">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/28/output/?pc-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@code" />
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Profile Class</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Pc

pc_id = inv.getLong('pc-id')
pc = Pc.getPc(pc_id)
source.appendChild(pc.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />

                <title>
                    Home &gt; Profile Classes &gt;
                    <xsl:value-of select="/source/pc/@code" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/27/output/">
                        <xsl:value-of select="'Profile Classes'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/pc/@code" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of select="/source/pc/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/pc/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/pc/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 DSO MPAN tops</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import Dso

dso_id = inv.getLong('dso-id')
dso = Dso.getDso(dso_id)
mpan_tops_element = doc.createElement('mpan-tops')
source.appendChild(mpan_tops_element)
for mpan_top in Hiber.session().createQuery("from MpanTop mpanTop where mpanTop.llfc.dso = :dso order by mpanTop.pc.code, mpanTop.llfc.code, mpanTop.mtc.code").setEntity("dso", dso).list():
    mpan_tops_element.appendChild(mpan_top.toXml(doc, XmlTree("pc").put("llfc").put("mtc").put("ssc").put('gspGroup')))
mpan_tops_element.appendChild(dso.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; DSOs &gt;
                    <xsl:value-of
                        select="/source/mpan-tops/dso/@code" />
                    &gt; MPAN top-lines
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/69/output/">
                        <xsl:value-of select="'DSOs'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/70/output/?dso-id={/source/mpan-tops/dso/@id}">
                        <xsl:value-of
                            select="/source/mpan-tops/dso/@code" />
                    </a>
                    &gt; MPAN top-lines
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>PC</th>
                            <th>MTC</th>
                            <th>LLFC</th>
                            <th>SSC</th>
                            <th>GSP Group</th>
                            <th>Valid From</th>
                            <th>Valid To</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/mpan-tops/mpan-top">
                            <tr>
                                <td>
                                    <a href="{/source/request/@context-path}/reports/30/output/?mpan-top-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/28/output/?pc-id={pc/@id}">
                                        <xsl:value-of select="pc/@code" />
                                    </a>
                                    <xsl:value-of
                                        select="concat(' ', pc/@description)" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/32/output/?mtc-id={mtc/@id}">
                                        <xsl:value-of
                                            select="mtc/@code" />
                                    </a>
                                    <xsl:value-of
                                        select="concat(' ', mtc/@description)" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/26/output/?llfc-id={llfc/@id}">
                                        <xsl:value-of
                                            select="llfc/@code" />
                                    </a>
                                    <xsl:value-of
                                        select="concat(' ', llfc/@description)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="ssc">
                                            <a
                                                href="{/source/request/@context-path}/reports/64/output/?ssc-id={ssc/@id}">
                                                <xsl:value-of
                                                    select="ssc/@code" />
                                            </a>
                                            <xsl:value-of
                                                select="concat(' ', ssc/@description)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            N/A
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/18/output/?gsp-group-id={gsp-group/@id}">
                                        <xsl:value-of
                                            select="gsp-group/@code" />
                                    </a>
                                    <xsl:value-of
                                        select="concat(' ', gsp-group/@description)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(date[@label='from']/@year, '-', date[@label='from']/@month, '-', date[@label='from']/@day, ' ', date[@label='from']/@hour, ':', date[@label='from']/@minute, ' Z')" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="date[@label='to']">
                                            <xsl:value-of
                                                select="concat(date[@label='to']/@year, '-', date[@label='to']/@month, '-', date[@label='to']/@day, ' ', date[@label='to']/@hour, ':', date[@label='to']/@minute, ' Z')" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 DSO MPAN top</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import MpanTop

mpan_top_id = inv.getLong('mpan-top-id')
mpan_top = MpanTop.getMpanTop(mpan_top_id)
source.appendChild(mpan_top.toXml(doc, XmlTree('pc').put('llfc', XmlTree('dso')).put('mtc')))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; DSOs &gt;
                    <xsl:value-of
                        select="/source/mpan-top/llfc/dso/@code" />
                    &gt; MPAN tops &gt;
                    <xsl:value-of select="/source/mpan-top/llfc/@code" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/23/output/">
                        <xsl:value-of select="'DSOs'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/70/output/?dso-id={/source/mpan-top/llfc/dso/@id}">
                        <xsl:value-of
                            select="/source/mpan-top/llfc/dso/@code" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/29/output/?dso-id={/source/mpan-top/llfc/dso/@id}">
                        <xsl:value-of select="'MPAN tops'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/mpan-top/@id" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>MPAN top line properties</caption>
                    <thead>
                        <tr>
                            <th>Property</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Profile Class</td>
                            <td>
                                <a
                                    href="{/source/request/@context-path}/reports/28/output/?pc-id={/source/mpan-top/pc/@id}">
                                    <xsl:value-of
                                        select="concat(/source/mpan-top/pc/@code, ' - ', /source/mpan-top/pc/@description)" />
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <td>Meter Timeswitch Class</td>
                            <td>
                                <a
                                    href="{/source/request/@context-path}/reports/32/output/?mtc-id={/source/mpan-top/mtc/@id}">
                                    <xsl:value-of
                                        select="concat(/source/mpan-top/mtc/@code, ' - ', /source/mpan-top/mtc/@description)" />
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <td>Line Loss Factor</td>
                            <td>
                                <a
                                    href="{/source/request/@context-path}/reports/26/output/?llfc-id={/source/mpan-top/llfc/@id}">
                                    <xsl:value-of
                                        select="concat(/source/mpan-top/llfc/@code, ' - ', /source/mpan-top/llfc/@description)" />
                                </a>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <h3>SSCs</h3>

                <ul>
                    <xsl:for-each select="/source/mpan-top/ssc">
                        <li>
                            <a
                                href="{/source/request/@context-path}/sscs/{@id}/">
                                <xsl:value-of select="@code" />
                            </a>
                        </li>
                    </xsl:for-each>
                </ul>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 MTCs</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

mtcs_element = doc.createElement('mtcs')
source.appendChild(mtcs_element)
for mt in Hiber.session().createQuery("select mtc from Mtc mtc left outer join mtc.dso dso order by mtc.code, dso.code").list():
    mtcs_element.appendChild(mt.toXml(doc, XmlTree('dso')))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>Home &gt; MTCs</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'"/>
                    </a>
                    &gt; MTCs
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Code</th>
                            <th>Dso</th>
                            <th>Description</th>
                            <th>Is Unmetered?</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/mtcs/mtc">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/32/output/?mtc-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@code" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="dso">
                                            <a
                                                href="{/source/request/@context-path}/reports/24/output/?provider-id={provider/@id}">
                                                <xsl:value-of
                                                    select="dso/@code" />
                                            </a>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            All
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@is-unmetered = 'true'">
                                            Unmetered
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Metered
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 MTC</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Mtc

mtc_id = inv.getLong('mtc-id')
mtc = Mtc.getMtc(mtc_id)
source.appendChild(mtc.toXml(doc, XmlTree('meterType').put('paymentType').put('dso')))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; MTCs &gt;
                    <xsl:value-of select="/source/mtc/@code" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/31/output/">
                        <xsl:value-of select="'MTCs'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/mtc/@code" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of select="/source/mtc/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/mtc/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Dso</th>
                        <td>
                            <xsl:choose>
                                <xsl:when test="/source/mtc/dso">
                                    <a
                                        href="{/source/request/@context-path}/providers/{/source/mtc/provider/@id}/">
                                        <xsl:value-of
                                            select="/source/mtc/dso/@code" />
                                    </a>
                                </xsl:when>
                                <xsl:otherwise>All</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/mtc/@description" />
                        </td>
                    </tr>
                    <tr>
                        <th>Has Related Metering?</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/mtc/@has-related-metering = 'true'">
                                    Yes
                                </xsl:when>
                                <xsl:otherwise>No</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Has Comms?</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/mtc/@has-comms">
                                    <xsl:choose>
                                        <xsl:when
                                            test="/source/mtc/@has-comms='true'">
                                            Yes
                                        </xsl:when>
                                        <xsl:otherwise>
                                            No
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:when>
                                <xsl:otherwise>Unknown</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Measurement Class</th>
                        <td>
                            <xsl:choose>
                                <xsl:when test="/source/mtc/@is-hh">
                                    <xsl:choose>
                                        <xsl:when
                                            test="/source/mtc/@is-hh='true'">
                                            HH
                                        </xsl:when>
                                        <xsl:otherwise>
                                            NHH
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:when>
                                <xsl:otherwise>Unknown</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Meter Type</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/65/output/?type-id={/source/mtc/meter-type/@id}">
                                <xsl:value-of
                                    select="/source/mtc/meter-type/@description" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>Payment Type</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/68/output/?type-id={/source/mtc/meter-payment-type/@id}">
                                <xsl:value-of
                                    select="/source/mtc/meter-payment-type/@description" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>TPR Count</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/mtc/@tpr-count">
                                    <xsl:value-of
                                        select="/source/mtc/@tpr-count" />
                                </xsl:when>
                                <xsl:otherwise>N/A</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Valid From</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/mtc/date[@label='from']/@year, '-', /source/mtc/date[@label='from']/@month, '-', /source/mtc/date[@label='from']/@day, ' ', /source/mtc/date[@label='from']/@hour, ':', /source/mtc/date[@label='from']/@minute, ' Z')" />
                        </td>
                    </tr>
                    <tr>
                        <th>Valid To</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/mtc/date[@label='to']">
                                    <xsl:value-of
                                        select="concat(/source/mtc/date[@label='to']/@year, '-', /source/mtc/date[@label='to']/@month, '-', /source/mtc/date[@label='to']/@day, ' ', /source/mtc/date[@label='to']/@hour, ':', /source/mtc/date[@label='to']/@minute, ' Z')" />
                                </xsl:when>
                                <xsl:otherwise>Ongoing</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 DSO Contracts</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import Dso

dso_id = inv.getLong('dso-id')
dso = Dso.getDso(dso_id)
contracts_element = doc.createElement('dso-contracts')
source.appendChild(contracts_element)
for contract in Hiber.session().createQuery("from DsoContract contract where contract.party = :dso order by contract.startRateScript.startDate.date").setEntity("dso", dso).list():
    contract_element = contract.toXml(doc)
    contracts_element.appendChild(contract_element)
    start_rate_script = contract.getStartRateScript()
    start_rate_script.setLabel('start')
    contract_element.appendChild(start_rate_script.toXml(doc))
    finish_rate_script = contract.getFinishRateScript()
    finish_rate_script.setLabel('finish')
    contract_element.appendChild(finish_rate_script.toXml(doc))
contracts_element.appendChild(dso.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; DSOs &gt;
                    <xsl:value-of select="/source/dso-contract/dso/@code" />
                    &gt; Contracts
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/69/output/">
                        <xsl:value-of select="'DSOs'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/70/output/?dso-id={/source/dso-contracts/dso/@id}">
                        <xsl:value-of
                            select="/source/dso-contracts/dso/@code" />
                    </a>
                    &gt; DSO Contracts
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Name</th>
                            <th>Start Date</th>
                            <th>Finish Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/dso-contracts/dso-contract">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/34/output/?dso-contract-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@name" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(rate-script[@label='start']/hh-end-date[@label='start']/@year, '-', rate-script[@label='start']/hh-end-date[@label='start']/@month, '-', rate-script[@label='start']/hh-end-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="rate-script[@label='finish']/hh-end-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(rate-script[@label='finish']/hh-end-date[@label='finish']/@year, '-', rate-script[@label='finish']/hh-end-date[@label='finish']/@month, '-', rate-script[@label='finish']/hh-end-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 DSO Contract</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import DsoContract

contract_id = inv.getLong('dso-contract-id')
contract = DsoContract.getDsoContract(contract_id)
contract_element = contract.toXml(doc, XmlTree('party'))
source.appendChild(contract_element)
for rate_script in contract.getRateScripts():
    contract_element.appendChild(rate_script.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; DSOs &gt;
                    <xsl:value-of
                        select="/source/dso-contract/dso/@code" />
                    &gt; Contracts &gt;
                    <xsl:value-of select="/source/dso-contract/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/69/output/">
                        <xsl:value-of select="'DSOs'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/70/output/?dso-id={/source/dso-contract/dso/@id}">
                        <xsl:value-of
                            select="/source/dso-contract/dso/@code" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/33/output/?dso-id={/source/dso-contract/dso/@id}">
                        <xsl:value-of select="'Contracts'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/dso-contract/@name" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>Properties</caption>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Id</td>
                            <td>
                                <xsl:value-of
                                    select="/source/dso-contract/@id" />
                            </td>
                        </tr>
                        <tr>
                            <td>Name</td>
                            <td>
                                <xsl:value-of
                                    select="/source/dso-contract/@name" />
                            </td>
                        </tr>
                        <tr>
                            <td>Start Date</td>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/dso-contract/rate-script[position()=1]/hh-end-date[@label='start']/@year, '-', /source/dso-contract/rate-script[position()=1]/hh-end-date[@label='start']/@month, '-', /source/dso-contract/rate-script[position()=1]/hh-end-date[@label='start']/@day)" />
                            </td>
                        </tr>
                        <tr>
                            <td>Finish Date</td>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/dso-contract/rate-script[position()=last()]/hh-end-date[@label='finish']">
                                        <xsl:value-of
                                            select="concat(/source/dso-contract/rate-script[position()=last()]/hh-end-date[@label='finish']/@year, '-', /source/dso-contract/rate-script[position()=last()]/hh-end-date[@label='finish']/@month, '-', /source/dso-contract/rate-script[position()=last()]/hh-end-date[@label='finish']/@day)" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Ongoing
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <h2>Script</h2>
                <pre>
                    <xsl:value-of
                        select="/source/dso-contract/rate-script/@script" />
                </pre>

                <h2>Rate Scripts</h2>

                <table>
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>From</th>
                            <th>To</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/dso-contract/rate-script">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/35/output/?dso-rate-script-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-end-date[@label='start']/@year, '-', hh-end-date[@label='start']/@month, '-', hh-end-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="hh-end-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(hh-end-date[@label='finish']/@year, '-', hh-end-date[@label='finish']/@month, '-', hh-end-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 DSO Contract Rate Script</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import RateScript

script_id = inv.getLong('dso-rate-script-id')
script = RateScript.getRateScript(script_id)
source.appendChild(script.toXml(doc, XmlTree('contract', XmlTree('party'))))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; DSOs &gt;
                    <xsl:value-of
                        select="/source/rate-script/dso-contract/dso/@code" />
                    &gt; Contracts &gt;
                    <xsl:value-of
                        select="/source/rate-script/dso-contract/@name" />
                    &gt; Rate Script
                    <xsl:value-of select="/source/rate-script/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/69/output/">
                        <xsl:value-of select="'DSOs'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/70/output/?dso-id={/source/rate-script/dso-contract/dso/@id}">
                        <xsl:value-of
                            select="/source/rate-script/dso-contract/dso/@code" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/33/output/?dso-id={/source/rate-script/dso-contract/dso/@id}">
                        <xsl:value-of select="'Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/34/output/?dso-contract-id={/source/rate-script/dso-contract/@id}">
                        <xsl:value-of
                            select="/source/rate-script/dso-contract/@name" />
                    </a>
                    &gt; Rate Script
                    <xsl:value-of select="/source/rate-script/@id" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>Properties</caption>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Id</td>
                            <td>
                                <xsl:value-of
                                    select="/source/rate-script/@id" />
                            </td>
                        </tr>
                        <tr>
                            <td>Start Date</td>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/rate-script/hh-end-date[@label='start']/@year, '-', /source/rate-script/hh-end-date[@label='start']/@month, '-', /source/rate-script/hh-end-date[@label='start']/@day)" />
                            </td>
                        </tr>
                        <tr>
                            <td>Finish Date</td>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/rate-script/hh-end-date[@label='finish']">
                                        <xsl:value-of
                                            select="concat(/source/rate-script/hh-end-date[@label='finish']/@year, '-', /source/rate-script/hh-end-date[@label='finish']/@month, '-', /source/rate-script/hh-end-date[@label='finish']/@day)" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Ongoing
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <h2>Script</h2>

                <pre>
                    <xsl:value-of select="/source/rate-script/@script" />
                </pre>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Participants</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber

for participant in Hiber.session().createQuery('from Participant participant order by participant.code').list():
    source.appendChild(participant.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Participants
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Participants'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Code</th>
                            <th>Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/participant">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/37/output/?participant-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@code" />
                                </td>
                                <td>
                                    <xsl:value-of select="@name" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Participant</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Participant

participant_id = inv.getLong('participant-id')
participant = Participant.getParticipant(participant_id)
participant_element = participant.toXml(doc)
source.appendChild(participant_element);
for party in Hiber.session().createQuery("from Party party where party.participant = :participant order by party.role.code").setEntity('participant', participant).list():
    participant_element.appendChild(party.toXml(doc, XmlTree('role')))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Market Participants &gt;
                    <xsl:value-of select="/source/participant/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/36/output/">
                        <xsl:value-of select="'Market Participants'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/participant/@name" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                        <tr>
                            <th>Chellow Id</th>
                            <td>
                                <xsl:value-of
                                    select="/source/participant/@id" />
                            </td>
                        </tr>
                        <tr>
                            <th>Code</th>
                            <td>
                                <xsl:value-of
                                    select="/source/participant/@code" />
                            </td>
                        </tr>
                        <tr>
                            <th>Name</th>
                            <td>
                                <xsl:value-of
                                    select="/source/participant/@name" />
                            </td>
                        </tr>
                    </tbody>
                </table>

                <table>
                    <caption>Parties</caption>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Name</th>
                            <th>Market Role</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/participant[provider or dso]/*">
                            <tr>
                                <td>
                                  <xsl:choose>
                                    <xsl:when test="provider">
                                      <a
                                          href="{/source/request/@context-path}/reports/24/output/?provider-id={@id}">
                                          <xsl:value-of select="@id" />
                                      </a>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <a
                                          href="{/source/request/@context-path}/reports/70/output/?dso-id={@id}">
                                          <xsl:value-of select="@id" />
                                      </a>
                                    </xsl:otherwise>
                                   </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of select="@name" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/62/output/?role-id={market-role/@id}">
                                        <xsl:value-of
                                            select="market-role/@description" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supplier Contracts</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

contracts_element = doc.createElement('contracts')
source.appendChild(contracts_element)
for contract in Hiber.session().createQuery("from SupplierContract contract order by contract.startRateScript.startDate.date").list():
    contract_element = contract.toXml(doc, XmlTree('party'))
    contracts_element.appendChild(contract_element)
    start_rate_script = contract.getStartRateScript()
    start_rate_script.setLabel('start')
    contract_element.appendChild(start_rate_script.toXml(doc))
    finish_rate_script = contract.getFinishRateScript()
    finish_rate_script.setLabel('finish')
    contract_element.appendChild(finish_rate_script.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Supplier Contracts
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Supplier Contracts ['" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Name</th>
                            <th>Start Date</th>
                            <th>Finish Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/contracts/supplier-contract">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@name" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(rate-script[@label='start']/hh-end-date[@label='start']/@year, '-', rate-script[@label='start']/hh-end-date[@label='start']/@month, '-', rate-script[@label='start']/hh-end-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="rate-script[@label='finish']/hh-end-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(rate-script[@label='finish']/hh-end-date[@label='finish']/@year, '-', rate-script[@label='finish']/hh-end-date[@label='finish']/@month, '-', rate-script[@label='finish']/hh-end-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/24/output/?provider-id={provider/@id}">
                                        <xsl:value-of
                                            select="provider/@name" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supplier Contract</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import SupplierContract

contract_id = inv.getLong('supplier-contract-id')
contract = SupplierContract.getSupplierContract(contract_id)
contract_element = contract.toXml(doc, XmlTree('party'))
source.appendChild(contract_element)
for rate_script in contract.getRateScripts():
    contract_element.appendChild(rate_script.toXml(doc))
for account in Hiber.session().createQuery("from Account account where account.contract = :contract order by account.reference").setEntity('contract', contract).list():
    contract_element.appendChild(account.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/supplier-contract/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/38/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/supplier-contract/@name, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/supplier-contract/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                        <tr>
                            <th>Chellow Id</th>
                            <td>
                                <xsl:value-of
                                    select="/source/supplier-contract/@id" />
                            </td>
                        </tr>
                        <tr>
                            <th>Name</th>
                            <td>
                                <xsl:value-of
                                    select="/source/supplier-contract/@name" />
                            </td>
                        </tr>
                        <tr>
                            <th>Supplier</th>
                            <td>
                                <a
                                    href="{/source/request/@context-path}/reports/24/output/?provider-id={/source/supplier-contract/provider/@id}">
                                    <xsl:value-of
                                        select="/source/supplier-contract/provider/@name" />
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <th>Start Date</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/supplier-contract/rate-script[position()=1]/hh-end-date[@label='start']/@year, '-', /source/supplier-contract/rate-script[position()=1]/hh-end-date[@label='start']/@month, '-', /source/supplier-contract/rate-script[position()=1]/hh-end-date[@label='start']/@day)" />
                            </td>
                        </tr>
                        <tr>
                            <th>Finish Date</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/supplier-contract/rate-script[position()=last()]/hh-end-date[@label='finish']">
                                        <xsl:value-of
                                            select="concat(/source/supplier-contract/rate-script[position()=last()]/hh-end-date[@label='finish']/@year, '-', /source/supplier-contract/rate-script[position()=last()]/hh-end-date[@label='finish']/@month, '-', /source/supplier-contract/rate-script[position()=last()]/hh-end-date[@label='finish']/@day)" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Ongoing
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <br />
                <table>
                    <caption>Rate Scripts</caption>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>From</th>
                            <th>To</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/supplier-contract/rate-script">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/40/output/?rate-script-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-end-date[@label='start']/@year, '-', hh-end-date[@label='start']/@month, '-', hh-end-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="hh-end-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(hh-end-date[@label='finish']/@year, '-', hh-end-date[@label='finish']/@month, '-', hh-end-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>

                <ul>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/45/output/?supplier-contract-id={/source/supplier-contract/@id}">
                            Batches
                        </a>
                    </li>
                                        <li>
                        <a
                            href="{/source/request/@context-path}/reports/41/output/?supplier-contract-id={/source/supplier-contract/@id}">
                            Accounts
                        </a>
                    </li>
                    
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/51/output/?supplier-contract-id={/source/supplier-contract/@id}">
                            Account Snags
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/53/output/?supplier-contract-id={/source/supplier-contract/@id}">
                            Bill Snags
                        </a>
                    </li>
                </ul>
                <h2>Script</h2>
                <pre>
                    <xsl:value-of
                        select="/source/supplier-contract/@charge-script" />
                </pre>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supplier Contract Rate Script</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import RateScript

script_id = inv.getLong('rate-script-id')
script = RateScript.getRateScript(script_id)
source.appendChild(script.toXml(doc, XmlTree('contract', XmlTree('party'))))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/rate-script/supplier-contract/@name" />
                    &gt; Rate Script
                    <xsl:value-of select="/source/rate-script/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/38/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={/source/rate-script/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/rate-script/supplier-contract/@name" />
                    </a>
                    &gt; Rate Script
                    <xsl:value-of
                        select="concat(/source/rate-script/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/rate-script/supplier-contract/@id}/rate-scripts/{/source/rate-script/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of
                                select="/source/rate-script/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Start Date</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/rate-script/hh-end-date[@label='start']/@year, '-', /source/rate-script/hh-end-date[@label='start']/@month, '-', /source/rate-script/hh-end-date[@label='start']/@day)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Finish Date</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/rate-script/hh-end-date[@label='finish']">
                                    <xsl:value-of
                                        select="concat(/source/rate-script/hh-end-date[@label='finish']/@year, '-', /source/rate-script/hh-end-date[@label='finish']/@month, '-', /source/rate-script/hh-end-date[@label='finish']/@day)" />
                                </xsl:when>
                                <xsl:otherwise>Ongoing</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                </table>

                <h2>Script</h2>

                <pre>
                    <xsl:value-of select="/source/rate-script/@script" />
                </pre>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>

]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supplier Accounts</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import SupplierContract

id = inv.getLong('supplier-contract-id')
contract = SupplierContract.getSupplierContract(id)
accounts_element = doc.createElement('accounts')
source.appendChild(accounts_element)
accounts_element.appendChild(contract.toXml(doc))
for account in Hiber.session().createQuery("from Account account where account.contract = :contract order by account.reference").setEntity('contract', contract).list():
    account_element = account.toXml(doc)
    accounts_element.appendChild(account_element)]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/accounts/supplier-contract/@name" />
                    &gt; Accounts
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/38/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={/source/accounts/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/accounts/supplier-contract/@name" />
                    </a>
                    &gt; Accounts
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/accounts/account">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/42/output/?account-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@reference" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supplier Account</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import Account

def create_item_element(doc, mpan, finish_generation):
    item_element = doc.createElement('item')
    account_element.appendChild(item_element)
    item_element.appendChild(mpan.getCore().toXml(doc))
    start_generation = mpan.getSupplyGeneration()
    start_generation.setLabel('start')
    item_element.appendChild(start_generation.toXml(doc))
    finish_generation.setLabel('finish')
    item_element.appendChild(finish_generation.toXml(doc))
    return item_element

account_id = inv.getLong('account-id')
account = Account.getAccount(account_id)
if account.getContract().getParty().getRole().getCode() != 'X':
    raise UserException("This account isn't attached to a supplier contract.")
account_element = account.toXml(doc, XmlTree('contract'))
source.appendChild(account_element)

mpans = Hiber.session().createQuery("from Mpan mpan where mpan.supplierAccount = :account order by mpan.core, mpan.supplyGeneration.startDate.date").setEntity('account', account).list()
if len(mpans) > 0:
    current_mpan = mpans[0]
    finish_generation = current_mpan.getSupplyGeneration()
    for i in range(1, len(mpans)):
        mpan = mpans[i]
        if current_mpan.getCore().equals(mpan.getCore()) and finish_generation.getFinishDate().getNext().getDate().equals(mpan.getSupplyGeneration().getStartDate().getDate()):
            finish_generation = mpan.getSupplyGeneration()
        else:
            account_element.appendChild(create_item_element(doc, current_mpan, finish_generation))
            current_mpan = mpan
            finish_generation = current_mpan.getSupplyGeneration()
    account_element.appendChild(create_item_element(doc, current_mpan, finish_generation))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />

                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/account/supplier-contract/@name" />
                    &gt; Account: 
                    <xsl:value-of select="/source/account/@reference" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/38/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={/source/account/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/account/supplier-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/41/output/?supplier-contract-id={/source/account/supplier-contract/@id}">
                        <xsl:value-of
                            select="'Accounts'" />
                    </a>
&gt;                    
                    <xsl:value-of
                        select="concat(/source/account/@reference , ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/account/supplier-contract/@id}/accounts/{/source/account/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                        <tr>
                            <th>Chellow Id</th>
                            <td>
                                <xsl:value-of
                                    select="/source/account/@id" />
                            </td>
                        </tr>
                        <tr>
                            <th>Reference</th>
                            <td>
                                <xsl:value-of
                                    select="/source/account/@reference" />
                            </td>
                        </tr>
                    </tbody>
                </table>

                <ul>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/43/output/?account-id={/source/account/@id}">
                            Bills
                        </a>
                    </li>
                </ul>

                <table>
                    <caption>MPANs</caption>
                    <thead>
                        <tr>
                            <th rowspan="2">MPAN Core</th>
                            <th colspan="2">Supply Generations</th>
                        </tr>
                        <tr>
                            <th>From</th>
                            <th>To</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/account/item">
                            <tr>
                                <td>
                                    <xsl:value-of
                                        select="mpan-core/@core" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/16/output/?supply-generation-id={supply-generation[@label='start']/@id}">
                                        <xsl:value-of
                                            select="'Supply Generation'" />
                                    </a>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/16/output/?supply-generation-id={supply-generation[@label='finish']/@id}">
                                        <xsl:value-of
                                            select="'Supply Generation'" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supplier Bills</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import Account

account_id = inv.getLong('account-id')
account = Account.getAccount(account_id)
bills_element = doc.createElement('bills')
source.appendChild(bills_element)
bills_element.appendChild(account.toXml(doc, XmlTree('contract')))
for bill in Hiber.session().createQuery("from Bill bill where bill.account = :account order by bill.startDate.date").setEntity('account', account).list():
    bills_element.appendChild(bill.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />

    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/bills/account/supplier-contract/@name" />
                    &gt; Accounts &gt;
                    <xsl:value-of
                        select="/source/bills/account/@reference" />
                    &gt; Bills
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/38/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={/source/bills/account/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/bills/account/supplier-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/41/output/?supplier-contract-id={/source/bills/account/supplier-contract/@id}">
                        <xsl:value-of select="'Accounts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/42/output/?account-id={/source/bills/account/@id}">
                        <xsl:value-of
                            select="/source/bills/account/@reference" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Bills'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>Bills</caption>
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Net</th>
                            <th>VAT</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/bills/bill">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/44/output/?bill-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(day-start-date/@year, '-', day-start-date/@month, '-', day-start-date/@day)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(day-finish-date/@year, '-', day-finish-date/@month, '-', day-finish-date/@day)" />
                                </td>
                                <td>
                                    <xsl:value-of select="@net" />
                                </td>
                                <td>
                                    <xsl:value-of select="@vat" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supplier Bill</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import Bill

bill_id = inv.getLong('bill-id')
bill = Bill.getBill(bill_id)
bill_element = bill.toXml(doc, XmlTree('account', XmlTree('contract', XmlTree('party'))))
source.appendChild(bill_element)
for invoice in Hiber.session().createQuery("from Invoice invoice where invoice.bill = :bill order by invoice.startDate.date").setEntity('bill', bill).list():
    bill_element.appendChild(invoice.toXml(doc, XmlTree('batch', XmlTree('contract'))))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/bill/account/supplier-contract/@name" />
                    &gt; Accounts &gt;
                    <xsl:value-of
                        select="/source/bill/account/@reference" />
                    &gt; Bills &gt;
                    <xsl:value-of select="/source/bill/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/38/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={/source/bill/account/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/bill/account/supplier-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/41/output/?supplier-contract-id={/source/bill/account/supplier-contract/@id}">
                        <xsl:value-of select="'Accounts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/42/output/?account-id={/source/bill/account/@id}">
                        <xsl:value-of
                            select="/source/bill/account/@reference" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/43/output/?account-id={/source/bill/account/@id}">
                        <xsl:value-of select="'Bills'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/bill/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/bill/account/supplier-contract/@id}/accounts/{/source/bill/account/@id}/bills/{/source/bill/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <ul>
                    <li>
                        <xsl:value-of
                            select="concat('From ', /source/bill/day-start-date/@year, '-', /source/bill/day-start-date/@month, '-', /source/bill/day-start-date/@day)" />
                    </li>
                    <li>
                        <xsl:value-of
                            select="concat('To ', /source/bill/day-finish-date/@year, '-', /source/bill/day-finish-date/@month, '-', /source/bill/day-finish-date/@day)" />
                    </li>
                    <li>
                        <xsl:value-of
                            select="concat('Net ', /source/bill/@net)" />
                    </li>
                    <li>
                        <xsl:value-of
                            select="concat('VAT ', /source/bill/@vat)" />
                    </li>
                </ul>

                <table>
                    <caption>Invoices</caption>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Reference</th>
                            <th>Batch</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Net</th>
                            <th>VAT</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/bill/invoice">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/47/output/?invoice-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@reference" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/46/output/?batch-id={batch/@id}">
                                        <xsl:value-of
                                            select="batch/@reference" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(day-start-date/@year, '-', day-start-date/@month, '-', day-start-date/@day)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(day-finish-date/@year, '-', day-finish-date/@month, '-', day-finish-date/@day)" />
                                </td>
                                <td>
                                    <xsl:value-of select="@net" />
                                </td>
                                <td>
                                    <xsl:value-of select="@vat" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@status='0'">
                                            Pending
                                        </xsl:when>
                                        <xsl:when test="@status='1'">
                                            Paid
                                        </xsl:when>
                                        <xsl:when test="@status='2'">
                                            Rejected
                                        </xsl:when>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supplier Contract Batches</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import SupplierContract

contract_id = inv.getLong('supplier-contract-id')
contract = SupplierContract.getSupplierContract(contract_id)
batches_element = doc.createElement('batches')
source.appendChild(batches_element)
batches_element.appendChild(contract.toXml(doc, XmlTree('party')))
source.appendChild(batches_element)
for batch in Hiber.session().createQuery("from Batch batch where batch.contract = :contract order by batch.reference").setEntity("contract", contract).list():
    batches_element.appendChild(batch.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/batches/supplier-contract/@name" />
                    &gt; Batches
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/38/output/?supplier-id={/source/batches/supplier-contract/@id}">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={/source/batches/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/batches/supplier-contract/@name" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Batches ['" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/batches/supplier-contract/@id}/batches/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>Batches</caption>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Reference</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/batches/batch">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/46/output/?batch-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@reference" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supplier Contract Batch</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import Batch

batch_id = inv.getLong('batch-id')
batch = Batch.getBatch(batch_id)
batch_element = batch.toXml(doc, XmlTree('contract', XmlTree('party')))
source.appendChild(batch_element)
for invoice in Hiber.session().createQuery("from Invoice invoice where invoice.batch = :batch order by invoice.bill.account.reference").setEntity("batch", batch).list():
    batch_element.appendChild(invoice.toXml(doc, XmlTree("bill", XmlTree("account"))))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />

                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/batch/supplier-contract/@name" />
                    &gt; Batches &gt;
                    <xsl:value-of select="/source/batch/@reference" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/38/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={/source/batch/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/batch/supplier-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/45/output/?supplier-contract-id={/source/batch/supplier-contract/@id}">
                        <xsl:value-of select="'Batches'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/batch/@reference, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/batch/supplier-contract/@id}/batches/{/source/batch/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <caption>Invoices</caption>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Reference</th>
                            <th>Bill</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Net</th>
                            <th>VAT</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/batch/invoice">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/47/output/?invoice-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@reference" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/44/output/?bill-id={bill/@id}">
                                        <xsl:value-of select="bill/@id" />
                                    </a>
                                    <xsl:value-of select="' &gt; '" />
                                    <a
                                        href="{/source/request/@context-path}/reports/42/output/?account-id={bill/account/@id}">
                                        <xsl:value-of
                                            select="bill/account/@reference" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(day-start-date/@year, '-', day-start-date/@month, '-', day-start-date/@day)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(day-finish-date/@year, '-', day-finish-date/@month, '-', day-finish-date/@day)" />
                                </td>
                                <td>
                                    <xsl:value-of select="@net" />
                                </td>
                                <td>
                                    <xsl:value-of select="@vat" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when test="@status='0'">
                                            Pending
                                        </xsl:when>
                                        <xsl:when test="@status='1'">
                                            Paid
                                        </xsl:when>
                                        <xsl:when test="@status='2'">
                                            Rejected
                                        </xsl:when>
                                    </xsl:choose>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supplier Contract Bill Invoice</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import Invoice

invoice_id = inv.getLong('invoice-id')
invoice = Invoice.getInvoice(invoice_id)
invoice_element = invoice.toXml(doc, XmlTree('batch', XmlTree('contract', XmlTree('party'))).put('bill', XmlTree('account')))
source.appendChild(invoice_element)
for register_read in Hiber.session().createQuery("from RegisterRead read where read.invoice = :invoice order by read.units.int, read.tpr.code").setEntity('invoice', invoice).list():
    invoice_element.appendChild(register_read.toXml(doc, XmlTree('mpan', XmlTree('supplyGeneration').put('core')).put('tpr')))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/invoice/batch/supplier-contract/@name" />
                    &gt; Batches &gt;
                    <xsl:value-of
                        select="/source/invoice/batch/@reference" />
                    &gt; Invoice:
                    <xsl:value-of select="/source/invoice/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/38/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={/source/invoice/batch/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/invoice/batch/supplier-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/45/output/?supplier-contract-id={/source/invoice/batch/supplier-contract/@id}">
                        <xsl:value-of select="'Batches'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/46/output/?batch-id={/source/invoice/batch/@id}">
                        <xsl:value-of
                            select="/source/invoice/batch/@reference" />
                    </a>
                    &gt; Invoice:
                    <xsl:value-of
                        select="concat(/source/invoice/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/invoice/batch/supplier-contract/@id}/batches/{/source/invoice/batch/@id}/invoices/{/source/invoice/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of select="/source/invoice/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Reference</th>
                        <td>
                            <xsl:value-of
                                select="/source/invoice/@reference" />
                        </td>
                    </tr>
                    <tr>
                        <th>Bill</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/44/output/?bill-id={/source/invoice/bill/@id}">
                                <xsl:value-of select="/source/invoice/bill/@id" />
                            </a>
                            <xsl:value-of select="' &lt; '" />
                            <a
                                href="{/source/request/@context-path}/reports/43/output/?account-id={/source/invoice/bill/account/@id}">
                                <xsl:value-of select="'Bills'" />
                            </a>
                            &lt;
                            <a
                                href="{/source/request/@context-path}/reports/42/output/?account-id={/source/invoice/bill/account/@id}">
                                <xsl:value-of select="/source/invoice/bill/account/@reference" />
                            </a>
                            &lt;
                            <a
                                href="{/source/request/@context-path}/reports/41/output/?supplier-contract-id={/source/invoice/batch/supplier-contract/@id}">
                                <xsl:value-of select="'Accounts'" />
                            </a>
                            &lt;
                            <a
                                href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={/source/invoice/batch/supplier-contract/@id}">
                                <xsl:value-of
                                    select="/source/invoice/batch/supplier-contract/@name" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>Issue Date</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/invoice/day-start-date[@label='issue']/@year, '-', /source/invoice/day-start-date[@label='issue']/@month, '-', /source/invoice/day-start-date[@label='issue']/@day)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Start Date</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/invoice/day-start-date/@year, '-', /source/invoice/day-start-date/@month, '-', /source/invoice/day-start-date/@day)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Finish Date</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/invoice/day-finish-date/@year, '-', /source/invoice/day-finish-date/@month, '-', /source/invoice/day-finish-date/@day)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Net</th>
                        <td>
                            <xsl:value-of select="/source/invoice/@net" />
                        </td>
                    </tr>
                    <tr>
                        <th>VAT</th>
                        <td>
                            <xsl:value-of select="/source/invoice/@vat" />
                        </td>
                    </tr>
                    <tr>
                        <th>Status</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/invoice/@status = 0">
                                    <xsl:value-of select="'Pending'" />
                                </xsl:when>
                                <xsl:when
                                    test="/source/invoice/@status = 1">
                                    <xsl:value-of select="'Paid'" />
                                </xsl:when>
                                <xsl:when
                                    test="/source/invoice/@status = 2">
                                    <xsl:value-of select="'Rejected'" />
                                </xsl:when>
                            </xsl:choose>
                        </td>
                    </tr>
                </table>
                <br />
                <table>
                    <caption>Register Reads</caption>
                    <thead>
                        <tr>
                            <th>MPAN</th>
                            <th>Coefficient</th>
                            <th>Units</th>
                            <th>TPR</th>
                            <th>Previous Date</th>
                            <th>Previous Value</th>
                            <th>Previous Type</th>
                            <th>Present Date</th>
                            <th>Present Value</th>
                            <th>Present Type</th>
                        </tr>
                    </thead>
                    <xsl:for-each
                        select="/source/invoice/register-read">
                        <tr>
                            <td>
                                <a
                                    href="{/source/request/@context-path}/reports/16/output/?supply-generation-id={mpan/supply-generation/@id}">
                                    <xsl:value-of
                                        select="mpan/mpan-core/@core" />
                                </a>
                            </td>
                            <td>
                                <xsl:value-of select="@coefficient" />
                            </td>
                            <td>
                                <xsl:value-of select="@units" />
                            </td>
                            <td>
                                <a
                                    href="{/source/request/@context-path}/reports/49/output/?tpr-id={tpr/@id}">
                                    <xsl:value-of select="tpr/@code" />
                                </a>
                            </td>
                            <td>
                                <xsl:value-of
                                    select="concat(day-finish-date[@label='previous']/@year, '-', day-finish-date[@label='previous']/@month, '-', day-finish-date[@label='previous']/@day)" />
                            </td>
                            <td>
                                <xsl:value-of select="@previous-value" />
                            </td>
                            <td>
                                <xsl:value-of
                                    select="read-type[@label='previous']/@code" />
                            </td>
                            <td>
                                <xsl:value-of
                                    select="concat(day-finish-date[@label='present']/@year, '-', day-finish-date[@label='present']/@month, '-', day-finish-date[@label='present']/@day)" />
                            </td>
                            <td>
                                <xsl:value-of select="@present-value" />
                            </td>
                            <td>
                                <xsl:value-of
                                    select="read-type[@label='present']/@code" />
                            </td>
                        </tr>
                    </xsl:for-each>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 TPRs</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

tprs_element = doc.createElement('tprs')
source.appendChild(tprs_element)
for tpr in Hiber.session().createQuery("from Tpr tpr order by tpr.code").list():
    tprs_element.appendChild(tpr.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>Chellow &gt; TPRs</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt; TPRs
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <ul>
                    <xsl:for-each select="/source/tprs/tpr">
                        <li>
                            <a
                                href="{/source/request/@context-path}/reports/49/output/?tpr-id={@id}">
                                <xsl:value-of select="@code" />
                            </a>
                        </li>
                    </xsl:for-each>
                </ul>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 TPR</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Tpr

tpr_id = inv.getLong('tpr-id')
tpr = Tpr.getTpr(tpr_id)
source.appendChild(tpr.toXml(doc, XmlTree("measurementRequirements", XmlTree("ssc")).put("clockIntervals")))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; TPRs &gt;
                    <xsl:value-of select="/source/tpr/@code" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/48/output/">
                        <xsl:value-of select="'TPRs'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/tpr/@code" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of select="/source/tpr/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/tpr/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Teleswitch or Clock</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/tpr/@is-teleswitch='true'">
                                    Teleswitch
                                </xsl:when>
                                <xsl:otherwise>Clock</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>GMT or Clock Time</th>
                        <td>
                            <xsl:choose>
                                <xsl:when test="@is-gmt='true'">
                                    GMT
                                </xsl:when>
                                <xsl:otherwise>
                                    Clock Time
                                </xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                </table>
                <br />
                <table>
                    <caption>Clock Intervals</caption>
                    <thead>
                        <th>Day Of Week</th>
                        <th>Start Day</th>
                        <th>Start Month</th>
                        <th>End Day</th>
                        <th>End Month</th>
                        <th>Start Hour</th>
                        <th>Start Minute</th>
                        <th>End Hour</th>
                        <th>End Minute</th>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/tpr/clock-interval">
                            <tr>
                                <td>
                                    <xsl:value-of select="@day-of-week" />
                                </td>
                                <td>
                                    <xsl:value-of select="@start-day" />
                                </td>
                                <td>
                                    <xsl:value-of select="@start-month" />
                                </td>
                                <td>
                                    <xsl:value-of select="@end-day" />
                                </td>
                                <td>
                                    <xsl:value-of select="@end-month" />
                                </td>
                                <td>
                                    <xsl:value-of select="@start-hour" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="@start-minute" />
                                </td>
                                <td>
                                    <xsl:value-of select="@end-hour" />
                                </td>
                                <td>
                                    <xsl:value-of select="@end-minute" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>

                <h3>SSCs</h3>

                <ul>
                    <xsl:for-each
                        select="/source/tpr/measurement-requirement/ssc">
                        <li>
                            <a
                                href="{/source/request/@context-path}/reports/64/output/?ssc-id={@id}">
                                <xsl:value-of select="@code"></xsl:value-of>
                            </a>
                        </li>
                    </xsl:for-each>
                </ul>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supplies</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

if inv.hasParameter("search-pattern"):
    pattern = inv.getString("search-pattern")
    pattern = pattern.replace(" ", "")
    for result in Hiber.session().createQuery("select distinct mpanCore, mpanCore.dso.code, mpanCore.uniquePart, mpanCore.checkDigit from MpanCore mpanCore where lower(mpanCore.dso.code || mpanCore.uniquePart || mpanCore.checkDigit) like lower(:term) order by mpanCore.dso.code, mpanCore.uniquePart, mpanCore.checkDigit").setString("term", "%" + pattern + "%").setMaxResults(50).list():
        source.appendChild(result[0].toXml(doc, XmlTree("supply").put("dso")))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />

                <title>
                    Home &gt; Supplies
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Supplies ['" />
                    <a
                        href="{/source/request/@context-path}/supplies/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>


                        <xsl:for-each select="//message">

                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <form action=".">
                    <fieldset><legend>Search by MPAN core</legend>
                        <input name="search-pattern"
                            value="{/source/request/parameter[@name='search-pattern']/value}" />
                        <xsl:value-of select="' '" />
                        <input type="submit" value="Search" />
                    </fieldset>
                </form>
                <xsl:choose>
                    <xsl:when test="/source/mpan-core">
                        <p>
                            Only the first 50 supplies of the search
                            results are shown.
                        </p>
                        <table>
                            <caption>
                                Supplies
                            </caption>
                            <tr>
                                <th>MPAN Core</th>
                                <th>Supply</th>
                            </tr>
                            <xsl:for-each
                                select="/source/mpan-core">
                                <tr>
                                    <td>
                                        <code>
                                            <xsl:value-of
                                                select="@core" />
                                        </code>
                                    </td>
                                    <td>
                                        <a
                                            href="{/source/request/@context-path}/reports/4/output/?supply-id={supply/@id}">
                                            <xsl:value-of
                                                select="supply/@id" />
                                        </a>
                                    </td>
                                </tr>
                            </xsl:for-each>
                        </table>
                    </xsl:when>
                    <xsl:when
                        test="/source/request/parameter[@name='search-pattern']">
                        <p>No supplies matched your search</p>
                    </xsl:when>
                </xsl:choose>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supplier Contract Account Snags</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import SupplierContract

contract_id = inv.getLong('supplier-contract-id')
contract = SupplierContract.getSupplierContract(contract_id)
account_snags_element = doc.createElement('account-snags')
source.appendChild(account_snags_element)
account_snags_element.appendChild(contract.toXml(doc, XmlTree('party')))
source.appendChild(account_snags_element)
for account_snag in Hiber.session().createQuery("from AccountSnag snag where snag.dateResolved is null and snag.contract = :contract order by snag.account.reference, snag.description, snag.startDate.date").setEntity('contract', contract).list():
    account_snags_element.appendChild(account_snag.toXml(doc, XmlTree('account')))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />

                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/account-snags/supplier-contract/@name" />
                    &gt; Account Snags
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/38/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={/source/account-snags/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/account-snags/supplier-contract/@name" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Account Snags ['" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/account-snags/supplier-contract/@id}/account-snags/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Account</th>
                            <th>Start Date</th>
                            <th>Finish Date</th>
                            <th>Date Created</th>
                            <th>Date Resolved</th>
                            <th>Is Ignored?</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/account-snags/account-snag">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/52/output/?snag-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/42/output/?account-id={account/@id}">
                                        <xsl:value-of
                                            select="account/@reference" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-end-date[@label='start']/@year, '-', hh-end-date[@label='start']/@month, '-', hh-end-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(hh-end-date[@label='finish']/@year, '-', hh-end-date[@label='finish']/@month, '-', hh-end-date[@label='finish']/@day)" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(date[@label='created']/@year, '-', date[@label='created']/@month, '-', date[@label='created']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="hh-end-date[@label='resolved']">
                                            <xsl:value-of
                                                select="concat(hh-end-date[@label='resolved']/@year, '-', hh-end-date[@label='resolved']/@month, '-', hh-end-date[@label='resolved']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Unresolved
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@is-ignored = 'true'">
                                            Yes
                                        </xsl:when>
                                        <xsl:otherwise>
                                            No
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supplier Contract Account Snag</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import AccountSnag

snag_id = inv.getLong('snag-id')
snag = AccountSnag.getAccountSnag(snag_id)
source.appendChild(snag.toXml(doc, XmlTree('contract', XmlTree('party')).put('account')))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/account-snag/supplier-contract/@name" />
                    &gt; Account Snags &gt;
                    <xsl:value-of select="/source/account-snag/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/38/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={/source/account-snag/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/account-snag/supplier-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/45/output/?supplier-contract-id={/source/account-snag/supplier-contract/@id}">
                        <xsl:value-of select="'Account Snags'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/account-snag/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/account-snag/supplier-contract/@id}/account-snags/{/source/account-snag/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of
                                select="/source/account-snag/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Account</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/42/output/?account-id={/source/account-snag/account/@id}">
                                <xsl:value-of
                                    select="/source/account-snag/account/@reference" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>Start Date</th>
                        <td>
                            <xsl:value-of
                                select="concat(' ', /source/account-snag/hh-end-date[@label='start']/@year, '-', /source/account-snag/hh-end-date[@label='start']/@month, '-', /source/account-snag/hh-end-date[@label='start']/@day)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Finish Date</th>
                        <td>
                            <xsl:value-of
                                select="concat(' ', /source/account-snag/hh-end-date[@label='finish']/@year, '-', /source/account-snag/hh-end-date[@label='finish']/@month, '-', /source/account-snag/hh-end-date[@label='finish']/@day)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Date Created</th>
                        <td>
                            <xsl:value-of
                                select="concat(' ', /source/account-snag/date[@label='created']/@year, '-', /source/account-snag/date[@label='created']/@month, '-', /source/account-snag/date[@label='created']/@day)" />
                        </td>
                    </tr>
                    <tr>
                        <th>Date Resolved</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/account-snag/hh-end-date[@label='resolved']">
                                    <xsl:value-of
                                        select="concat(/source/account-snag/hh-end-date[@label='resolved']/@year, '-', /source/account-snag/hh-end-date[@label='resolved']/@month, '-', /source/account-snag/hh-end-date[@label='resolved']/@day)" />
                                </xsl:when>
                                <xsl:otherwise>
                                    Unresolved
                                </xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Is Ignored?</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/account-snag/@is-ignored = 'true'">
                                    Yes
                                </xsl:when>
                                <xsl:otherwise>No</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/account-snag/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supplier Contract Bill Snags</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import SupplierContract

contract_id = inv.getLong('supplier-contract-id')
contract = SupplierContract.getSupplierContract(contract_id)
bill_snags_element = doc.createElement('bill-snags')
source.appendChild(bill_snags_element)
bill_snags_element.appendChild(contract.toXml(doc, XmlTree('party')))
source.appendChild(bill_snags_element)
for bill_snag in Hiber.session().createQuery("from BillSnag snag where snag.dateResolved is null and snag.contract = :contract order by snag.bill.id, snag.description").setEntity('contract', contract).list():
    bill_snags_element.appendChild(bill_snag.toXml(doc, XmlTree('bill')))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/bill-snags/supplier-contract/@name" />
                    &gt; Bill Snags
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/38/output/">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={/source/bill-snags/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/bill-snags/supplier-contract/@name" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Bill Snags ['" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/bill-snags/supplier-contract/@id}/bill-snags/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Bill</th>
                            <th>Date Created</th>
                            <th>Date Resolved</th>
                            <th>Is Ignored?</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/bill-snags/bill-snag">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/54/output/?snag-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/44/output/?bill-id={bill/@id}">
                                        <xsl:value-of select="bill/@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(date[@label='created']/@year, '-', date[@label='created']/@month, '-', date[@label='created']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="hh-end-date[@label='resolved']">
                                            <xsl:value-of
                                                select="concat(hh-end-date[@label='resolved']/@year, '-', hh-end-date[@label='resolved']/@month, '-', hh-end-date[@label='resolved']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Unresolved
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@is-ignored = 'true'">
                                            Yes
                                        </xsl:when>
                                        <xsl:otherwise>
                                            No
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Supplier Contract Bill Snag</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import BillSnag

snag_id = inv.getLong('snag-id')
snag = BillSnag.getBillSnag(snag_id)
source.appendChild(snag.toXml(doc, XmlTree('contract', XmlTree('party')).put('bill', XmlTree('account'))))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Supplier Contracts &gt;
                    <xsl:value-of
                        select="/source/bill-snag/supplier-contract/@name" />
                    &gt; Bill Snags &gt;
                    <xsl:value-of select="/source/bill-snag/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/38/output/?supplier-id={/source/bill-snag/supplier-contract/@id}">
                        <xsl:value-of select="'Supplier Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/39/output/?supplier-contract-id={/source/bill-snag/supplier-contract/@id}">
                        <xsl:value-of
                            select="/source/bill-snag/supplier-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/45/output/?supplier-contract-id={/source/bill-snag/supplier-contract/@id}">
                        <xsl:value-of select="'Bill Snags'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/bill-snag/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/supplier-contracts/{/source/bill-snag/supplier-contract/@id}/bill-snags/{/source/bill-snag/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of
                                select="/source/bill-snag/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Bill</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/44/output/?bill-id={/source/bill-snag/bill/@id}">
                                <xsl:value-of
                                    select="/source/bill-snag/bill/@id" />
                            </a>
                        </td>

                    </tr>
                    <tr>
                        <th>Date Created</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/bill-snag/date[@label='created']/@year, '-', /source/bill-snag/date[@label='created']/@month, '-', /source/bill-snag/date[@label='created']/@day)" />
                        </td>

                    </tr>
                    <tr>
                        <th>Date Resolved</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/bill-snag/date[@label='resolved']">
                                    <xsl:value-of
                                        select="concat(/source/bill-snag/date[@label='resolved']/@year, '-', /source/bill-snag/date[@label='resolved']/@month, '-', /source/bill-snag/date[@label='resolved']/@day)" />
                                </xsl:when>
                                <xsl:otherwise>
                                    Unresolved
                                </xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Is Ignored?</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/bill-snag/@is-ignored = 'true'">
                                    Yes
                                </xsl:when>
                                <xsl:otherwise>No</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/bill-snag/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 HHDC Contract Accounts</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import HhdcContract

id = inv.getLong('hhdc-contract-id')
contract = HhdcContract.getHhdcContract(id)
accounts_element = doc.createElement('accounts')
source.appendChild(accounts_element)
accounts_element.appendChild(contract.toXml(doc))
for account in Hiber.session().createQuery("from Account account where account.contract = :contract order by account.reference").setEntity('contract', contract).list():
    account_element = account.toXml(doc)
    accounts_element.appendChild(account_element)]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/accounts/hhdc-contract/@name" />
                    &gt; Accounts
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/57/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/58/output/?hhdc-contract-id={/source/accounts/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/accounts/hhdc-contract/@name" />
                    </a>
                    &gt; Accounts
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/accounts/account">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/56/output/?account-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@reference" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 HHDC Contract Account</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import Account

def create_item_element(doc, mpan, finish_generation):
    item_element = doc.createElement('item')
    account_element.appendChild(item_element)
    item_element.appendChild(mpan.getCore().toXml(doc))
    start_generation = mpan.getSupplyGeneration()
    start_generation.setLabel('start')
    item_element.appendChild(start_generation.toXml(doc))
    finish_generation.setLabel('finish')
    item_element.appendChild(finish_generation.toXml(doc))
    return item_element

account_id = inv.getLong('account-id')
account = Account.getAccount(account_id)
account_element = account.toXml(doc, XmlTree('contract'))
source.appendChild(account_element)

mpans = Hiber.session().createQuery("from Mpan mpan where mpan.hhdcAccount = :account order by mpan.core, mpan.supplyGeneration.startDate.date").setEntity('account', account).list()
if len(mpans) > 0:
    current_mpan = mpans[0]
    finish_generation = current_mpan.getSupplyGeneration()
    for i in range(1, len(mpans)):
        mpan = mpans[i]
        if current_mpan.getCore().equals(mpan.getCore()) and finish_generation.getFinishDate().getNext().getDate().equals(mpan.getSupplyGeneration().getStartDate().getDate()):
            finish_generation = mpan.getSupplyGeneration()
        else:
            account_element.appendChild(create_item_element(doc, current_mpan, finish_generation))
            current_mpan = mpan
            finish_generation = current_mpan.getSupplyGeneration()
    account_element.appendChild(create_item_element(doc, current_mpan, finish_generation))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/account/hhdc-contract/@name" />
                    &gt; Account:
                    <xsl:value-of select="/source/account/@reference" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/57/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/58/output/?hhdc-contract-id={/source/account/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/account/hhdc-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/55/output/?hhdc-contract-id={/source/account/hhdc-contract/@id}">
                        <xsl:value-of select="'Accounts'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/account/@reference , ' [')" />
                    <a
                        href="{/source/request/@context-path}/hhdc-contracts/{/source/account/hhdc-contract/@id}/accounts/{/source/account/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                        <tr>
                            <th>Chellow Id</th>
                            <td>
                                <xsl:value-of
                                    select="/source/account/@id" />
                            </td>
                        </tr>
                        <tr>
                            <th>Reference</th>
                            <td>
                                <xsl:value-of
                                    select="/source/account/@reference" />
                            </td>
                        </tr>
                    </tbody>
                </table>

                <ul>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/43/output/?account-id={/source/account/@id}">
                            Bills
                        </a>
                    </li>
                </ul>

                <table>
                    <caption>MPANs</caption>
                    <thead>
                        <tr>
                            <th rowspan="2">MPAN Core</th>
                            <th colspan="2">Supply Generations</th>
                        </tr>
                        <tr>
                            <th>From</th>
                            <th>To</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/account/item">
                            <tr>
                                <td>
                                    <xsl:value-of
                                        select="mpan-core/@core" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/16/output/?supply-generation-id={supply-generation[@label='start']/@id}">
                                        <xsl:value-of
                                            select="'Supply Generation'" />
                                    </a>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/16/output/?supply-generation-id={supply-generation[@label='finish']/@id}">
                                        <xsl:value-of
                                            select="'Supply Generation'" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 HHDC Contracts</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

contracts_element = doc.createElement('contracts')
source.appendChild(contracts_element)
for contract in Hiber.session().createQuery("from HhdcContract contract order by contract.startRateScript.startDate.date").list():
    contract_element = contract.toXml(doc, XmlTree('party'))
    contracts_element.appendChild(contract_element)
    start_rate_script = contract.getStartRateScript()
    start_rate_script.setLabel('start')
    contract_element.appendChild(start_rate_script.toXml(doc))
    finish_rate_script = contract.getFinishRateScript()
    finish_rate_script.setLabel('finish')
    contract_element.appendChild(finish_rate_script.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; HHDC Contracts
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'HHDC Contracts ['" />
                    <a
                        href="{/source/request/@context-path}/hhdc-contracts/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Name</th>
                            <th>Start Date</th>
                            <th>Finish Date</th>
                            <th>HHDC</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/contracts/hhdc-contract">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/58/output/?hhdc-contract-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@name" />
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(rate-script[@label='start']/hh-end-date[@label='start']/@year, '-', rate-script[@label='start']/hh-end-date[@label='start']/@month, '-', rate-script[@label='start']/hh-end-date[@label='start']/@day)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="rate-script[@label='finish']/hh-end-date[@label='finish']">
                                            <xsl:value-of
                                                select="concat(rate-script[@label='finish']/hh-end-date[@label='finish']/@year, '-', rate-script[@label='finish']/hh-end-date[@label='finish']/@month, '-', rate-script[@label='finish']/hh-end-date[@label='finish']/@day)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/24/output/?provider-id={provider/@id}">
                                        <xsl:value-of
                                            select="provider/@name" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 HHDC Contract</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.billing import HhdcContract

contract_id = inv.getLong('hhdc-contract-id')
contract = HhdcContract.getHhdcContract(contract_id)
source.appendChild(contract.toXml(doc, XmlTree('party', XmlTree('participant')).put('rateScripts')))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />

                <title>
                    Home &gt; HHDC Contracts &gt;
                    <xsl:value-of select="/source/hhdc-contract/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/57/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/hhdc-contract/@name, ' [')" />
                    <a
                        href="{/source/request/@context-path}/hhdc-contracts/{/source/hhdc-contract/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                        <tr>
                            <th>Chellow Id</th>
                            <td>
                                <xsl:value-of
                                    select="/source/hhdc-contract/@id" />
                            </td>
                            <tr>
                                <th>Provider</th>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/24/output/?provider-id={/source/hhdc-contract/provider/@id}">
                                        <xsl:value-of
                                            select="/source/hhdc-contract/provider/@name" />
                                    </a>
                                </td>
                            </tr>
                        </tr>
                        <tr>
                            <th>Name</th>
                            <td>
                                <xsl:value-of
                                    select="/source/hhdc-contract/@name" />
                            </td>
                        </tr>
                        <tr>
                            <th>
                                Frequency with which the data arrives
                            </th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/hhdc-contract/@frequency = '0'">
                                        <xsl:value-of select="'Daily'" />
                                    </xsl:when>
                                    <xsl:when
                                        test="/source/hhdc-contract/@frequency = '1'">
                                        <xsl:value-of
                                            select="'Monthly'" />
                                    </xsl:when>
                                </xsl:choose>
                            </td>
                        </tr>
                        <tr>
                            <th>
                                Lag (number of days behind that the data
                                is delivered)
                            </th>
                            <td>
                                <xsl:value-of
                                    select="/source/hhdc-contract/@lag" />
                            </td>
                        </tr>
                        <tr>
                            <th>Start Date</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/hhdc-contract/rate-script[position()=1]/hh-end-date[@label='start']/@year, '-', /source/hhdc-contract/rate-script[position()=1]/hh-end-date[@label='start']/@month, '-', /source/hhdc-contract/rate-script[position()=1]/hh-end-date[@label='start']/@day)" />
                            </td>
                        </tr>
                        <tr>
                            <th>Finish Date</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/hhdc-contract/rate-script[position()=last()]/hh-end-date[@label='finish']">
                                        <xsl:value-of
                                            select="concat(/source/hhdc-contract/rate-script[position()=last()]/hh-end-date[@label='finish']/@year, '-', /source/hhdc-contract/rate-script[position()=last()]/hh-end-date[@label='finish']/@month, '-', /source/hhdc-contract/rate-script[position()=last()]/hh-end-date[@label='finish']/@day)" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Ongoing
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <br />
                <!--
                    <table>
                    <caption>Rate Scripts</caption>
                    <thead>
                    <tr>
                    <th>Chellow Id</th>
                    <th>From</th>
                    <th>To</th>
                    </tr>
                    </thead>
                    <tbody>
                    <xsl:for-each
                    select="/source/hhdc-contract/rate-script">
                    <tr>
                    <td>
                    <a
                    href="{/source/request/@context-path}/reports/40/output/?hhdc-rate-script-id={@id}">
                    <xsl:value-of select="@id" />
                    </a>
                    </td>
                    <td>
                    <xsl:value-of
                    select="concat(hh-end-date[@label='start']/@year, '-', hh-end-date[@label='start']/@month, '-', hh-end-date[@label='start']/@day)" />
                    </td>
                    <td>
                    <xsl:choose>
                    <xsl:when
                    test="hh-end-date[@label='finish']">
                    <xsl:value-of
                    select="concat(hh-end-date[@label='finish']/@year, '-', hh-end-date[@label='finish']/@month, '-', hh-end-date[@label='finish']/@day)" />
                    </xsl:when>
                    <xsl:otherwise>
                    Ongoing
                    </xsl:otherwise>
                    </xsl:choose>
                    </td>
                    </tr>
                    </xsl:for-each>
                    </tbody>
                    </table>
                -->
                <ul>
                    <!--
                        <li>
                        <a
                        href="{/source/request/@context-path}/orgs/{/source/org/@id}/reports/44/screen/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                        Batches
                        </a>
                        </li>
                        <li>
                        <a
                        href="{/source/request/@context-path}/orgs/{/source/org/@id}/reports/50/screen/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                        Account Snags
                        </a>
                        </li>
                        <li>
                        <a
                        href="{/source/request/@context-path}/orgs/{/source/org/@id}/reports/52/screen/output/?service-id={/source/hhdc-contract/@id}">
                        Bill Snags
                        </a>
                        </li>
                    -->
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/55/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                            Accounts
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/19/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                            Channel Snags
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/20/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                            Site Group Snags
                        </a>
                    </li>
                    <xsl:if
                        test="/source/hhdc-contract/@has-stark-automatic-hh-data-importer='true'">
                        <li>
                            <a
                                href="{/source/request/@context-path}/reports/62/output/?hhdc-contract-id={/source/hhdc-contract/@id}">
                                Stark Automatic HH Data Importer
                            </a>
                        </li>
                    </xsl:if>
                </ul>
                <!--
                    <h2>Script</h2>
                    <pre>
                    <xsl:value-of
                    select="/source/hhdc-contract/@charge-script" />
                    </pre>
                -->
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>

    <value>0 HHDC Contract Channel Snag</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.physical import ChannelSnag

snag_id = inv.getLong('snag-id')
snag = ChannelSnag.getChannelSnag(snag_id)
source.appendChild(snag.toXml(doc, XmlTree("contract").put("channel", XmlTree("supplyGeneration", XmlTree('supply')))))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/channel-snag/hhdc-contract/@name" />
                    &gt; Channel Snags &gt;
                    <xsl:value-of select="/source/channel-snag/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/57/output/">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/58/output/?hhdc-contract-id={/source/channel-snag/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/channel-snag/hhdc-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/19/output/?hhdc-contract-id={/source/channel-snag/hhdc-contract/@id}">
                        <xsl:value-of select="'Channel Snags'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/channel-snag/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/hhdc-contracts/{/source/channel-snag/hhdc-contract/@id}/channel-snags/{/source/channel-snag/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />

                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                        <tr>
                            <th>Chellow Id</th>
                            <td>
                                <xsl:value-of
                                    select="/source/channel-snag/@id" />
                            </td>
                        </tr>
                        <tr>
                            <th>Date Created</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/channel-snag/date[@label='created']/@year, '-', /source/channel-snag/date[@label='created']/@month, '-', /source/channel-snag/date[@label='created']/@day, 'T', /source/channel-snag/date[@label='created']/@hour, ':', /source/channel-snag/date[@label='created']/@minute, 'Z')" />
                            </td>
                        </tr>
                        <tr>
                            <th>Date Resolved</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/channel-snag/date[@label='resolved']">
                                        <xsl:value-of
                                            select="concat(/source/channel-snag/date[@label='resolved']/@year, '-', /source/channel-snag/date[@label='resolved']/@month, '-', /source/channel-snag/date[@label='resolved']/@day, 'T', /source/channel-snag/date[@label='resolved']/@hour, ':', /source/channel-snag/date[@label='resolved']/@minute, 'Z')" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Unresolved
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                        <tr>
                            <th>Ignored?</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/channel-snag/@is-ignored='true'">
                                        Ignored
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Not ignored
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                        <tr>
                            <th>Description</th>
                            <td>
                                <xsl:value-of
                                    select="/source/channel-snag/@description" />
                            </td>
                        </tr>
                        <tr>
                            <th>Progress</th>
                            <td>
                                <xsl:value-of
                                    select="/source/channel-snag/@progress" />
                            </td>
                        </tr>
                        <tr>
                            <th>Channel</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when test="/source/channel-snag/channel/@is-import = 'true'">
                                        Import
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Export
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="/source/channel-snag/channel/@is-kwh = 'true'">
                                        kWh
                                    </xsl:when>
                                    <xsl:otherwise>
                                        kVArh
                                    </xsl:otherwise>
                                </xsl:choose>
                                channel of <a
                                    href="{/source/request/@context-path}/reports/16/output/?supply-generation-id={/source/channel-snag/channel/supply-generation/@id}">
                                    <xsl:value-of
                                        select="concat('generation', /source/channel-snag/channel/supply-generation/@id)" />
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <th>Start Date</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/channel-snag/hh-end-date[@label='start']/@year, '-', /source/channel-snag/hh-end-date[@label='start']/@month, '-', /source/channel-snag/hh-end-date[@label='start']/@day, 'T', /source/channel-snag/hh-end-date[@label='start']/@hour, ':', /source/channel-snag/hh-end-date[@label='start']/@minute, 'Z')" />
                            </td>
                        </tr>
                        <tr>
                            <th>Finish Date:</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/channel-snag/hh-end-date[@label='finish']/@year, '-', /source/channel-snag/hh-end-date[@label='finish']/@month, '-', /source/channel-snag/hh-end-date[@label='finish']/@day, 'T', /source/channel-snag/hh-end-date[@label='finish']/@hour, ':', /source/channel-snag/hh-end-date[@label='finish']/@minute, 'Z')" />
                            </td>
                        </tr>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 HHDC Contract Site Group Snag</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree, UserException
from net.sf.chellow.physical import SiteSnag

snag_id = inv.getLong('snag-id')
snag = SiteSnag.getSiteSnag(snag_id)
source.appendChild(snag.toXml(doc, XmlTree("contract", XmlTree(
                        "party")).put("site")))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; HHDC Contracts &gt;
                    <xsl:value-of
                        select="/source/site-snag/hhdc-contract/@name" />
                    &gt; Site Snags &gt;
                    <xsl:value-of select="/source/site-snag/@id" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of
                            select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/57/output/?hhdc-contract-id={/source/site-snag/hhdc-contract/@id}">
                        <xsl:value-of select="'HHDC Contracts'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/58/output/?hhdc-contract-id={/source/site-snag/hhdc-contract/@id}">
                        <xsl:value-of
                            select="/source/site-snag/hhdc-contract/@name" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/20/output/?hhdc-contract-id={/source/site-snag/hhdc-contract/@id}">
                        <xsl:value-of select="'Site Snags'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="concat(/source/site-snag/@id, ' [')" />
                    <a
                        href="{/source/request/@context-path}/hhdc-contracts/{/source/site-snag/hhdc-contract/@id}/site-snags/{/source/site-snag/@id}/">
                        <xsl:value-of select="'edit'" />
                    </a>
                    <xsl:value-of select="']'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tbody>
                        <tr>
                            <th>Chellow Id</th>
                            <td>
                                <xsl:value-of
                                    select="/source/site-snag/@id" />
                            </td>
                        </tr>
                        <tr>
                            <th>Date Created</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/site-snag/date[@label='created']/@year, '-', /source/site-snag/date[@label='created']/@month, '-', /source/site-snag/date[@label='created']/@day, 'T', /source/site-snag/date[@label='created']/@hour, ':', /source/site-snag/date[@label='created']/@minute, 'Z')" />
                            </td>
                        </tr>
                        <tr>
                            <th>Date Resolved</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/site-snag/date[@label='resolved']">
                                        <xsl:value-of
                                            select="concat(/source/site-snag/date[@label='resolved']/@year, '-', /source/site-snag/date[@label='resolved']/@month, '-', /source/site-snag/date[@label='resolved']/@day, 'T', /source/site-snag/date[@label='resolved']/@hour, ':', /source/site-snag/date[@label='resolved']/@minute, 'Z')" />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Unresolved
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                        <tr>
                            <th>Ignored?</th>
                            <td>
                                <xsl:choose>
                                    <xsl:when
                                        test="/source/site-snag/@is-ignored='true'">
                                        Ignored
                                    </xsl:when>
                                    <xsl:otherwise>
                                        Not ignored
                                    </xsl:otherwise>
                                </xsl:choose>
                            </td>
                        </tr>
                        <tr>
                            <th>Description</th>
                            <td>
                                <xsl:value-of
                                    select="/source/site-snag/@description" />
                            </td>
                        </tr>
                        <tr>
                            <th>Progress</th>
                            <td>
                                <xsl:value-of
                                    select="/source/site-snag/@progress" />
                            </td>
                        </tr>
                        <tr>
                            <th>Site</th>
                            <td>
                                <a
                                    href="{/source/request/@context-path}/orgs/{/source/site-snag/hhdc-contract/org/@id}/reports/2/screen/output/?site-id={/source/site-snag/site/@id}">
                                    <xsl:value-of
                                        select="/source/site-snag/site/@id" />
                                </a>
                            </td>
                        </tr>
                        <tr>
                            <th>Start Date</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/site-snag/hh-end-date[@label='start']/@year, '-', /source/site-snag/hh-end-date[@label='start']/@month, '-', /source/site-snag/hh-end-date[@label='start']/@day, 'T', /source/site-snag/hh-end-date[@label='start']/@hour, ':', /source/site-snag/hh-end-date[@label='start']/@minute, 'Z')" />
                            </td>
                        </tr>
                        <tr>
                            <th>Finish Date:</th>
                            <td>
                                <xsl:value-of
                                    select="concat(/source/site-snag/hh-end-date[@label='finish']/@year, '-', /source/site-snag/hh-end-date[@label='finish']/@month, '-', /source/site-snag/hh-end-date[@label='finish']/@day, 'T', /source/site-snag/hh-end-date[@label='finish']/@hour, ':', /source/site-snag/hh-end-date[@label='finish']/@minute, 'Z')" />
                            </td>
                        </tr>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Market Roles</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

roles_element = doc.createElement('roles')
source.appendChild(roles_element)
for role in Hiber.session().createQuery("from MarketRole role order by role.code").list():
    roles_element.appendChild(role.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Market Roles
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Market Roles'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each
                            select="/source/roles/market-role">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/62/output/?role-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@code" />
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Market Role</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import MarketRole

role_id = inv.getLong('role-id')
role = MarketRole.getMarketRole(role_id)
role_element = role.toXml(doc)
source.appendChild(role_element)
for party in Hiber.session().createQuery("from Party party where party.role = :role order by party.participant.code").setEntity("role", role).list():
    role_element.appendChild(party.toXml(doc, XmlTree('participant')))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Market Roles &gt;
                    <xsl:value-of
                        select="/source/market-role/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/61/output/">
                        <xsl:value-of select="'Market Roles'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/market-role/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of
                                select="/source/market-role/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/market-role/@code" />
                        </td>
                    </tr>
                    <tr>

                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/market-role/@description" />
                        </td>
                    </tr>
                </table>
                <br />
                <xsl:choose>
                    <xsl:when test="/source/market-role/@code='R'">
                        <table>
                            <caption>DSOs</caption>
                            <thead>
                                <tr>
                                    <th>Chellow Id</th>
                                    <th>Code</th>
                                    <th>Name</th>
                                </tr>
                            </thead>
                            <tbody>
                                <xsl:for-each
                                    select="/source/market-role/dso">
                                    <tr>
                                        <td>
                                            <a
                                                href="{/source/request/@context-path}/reports/70/output/?dso-id={@id}">
                                                <xsl:value-of
                                                    select="@id" />
                                            </a>
                                        </td>
                                        <td>
                                            <xsl:value-of
                                                select="@code" />
                                        </td>
                                        <td>
                                            <xsl:value-of
                                                select="@name" />
                                        </td>
                                    </tr>
                                </xsl:for-each>
                            </tbody>
                        </table>
                    </xsl:when>
                    <xsl:otherwise>
                        <table>
                            <caption>Providers</caption>
                            <thead>
                                <tr>
                                    <th>Chellow Id</th>
                                    <th>Name</th>
                                </tr>
                            </thead>
                            <tbody>
                                <xsl:for-each
                                    select="/source/market-role/provider">
                                    <tr>
                                        <td>
                                            <a
                                                href="{/source/request/@context-path}/reports/24/output/?provider-id={@id}">
                                                <xsl:value-of
                                                    select="@id" />
                                            </a>
                                        </td>
                                        <td>
                                            <xsl:value-of
                                                select="@name" />
                                        </td>
                                    </tr>
                                </xsl:for-each>
                            </tbody>
                        </table>

                    </xsl:otherwise>
                </xsl:choose>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 SSCs</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

sscs_element = doc.createElement('sscs')
source.appendChild(sscs_element)
for ssc in Hiber.session().createQuery("from Ssc ssc order by ssc.code").list():
    sscs_element.appendChild(ssc.toXml(doc, XmlTree("measurementRequirements", XmlTree("tpr"))))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    <xsl:value-of select="'Home'" />
                    &gt; SSCs
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'SSCs'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Code</th>
                            <th>Description</th>
                            <th>Imp/Exp</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Tprs</th>
                        </tr>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/sscs/ssc">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/64/output/?ssc-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@code" />
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="@is-import='true'">
                                            Import
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Export
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:value-of
                                        select="concat(date[@label='from']/@year, '-', date[@label='from']/@month, '-', date[@label='from']/@day, ' ', date[@label='from']/@hour, ':', date[@label='from']/@minute)" />
                                </td>
                                <td>
                                    <xsl:choose>
                                        <xsl:when
                                            test="date[@label='to']">
                                            <xsl:value-of
                                                select="concat(date[@label='to']/@year, '-', date[@label='to']/@month, '-', date[@label='to']/@day, ' ', date[@label='to']/@hour, ':', date[@label='to']/@minute)" />
                                        </xsl:when>
                                        <xsl:otherwise>
                                            Ongoing
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </td>
                                <td>
                                    <xsl:for-each
                                        select="measurement-requirement">
                                        <a
                                            href="{/source/request/@context-path}/reports/49/output/?tpr-id={tpr/@id}">
                                            <xsl:value-of
                                                select="tpr/@code" />
                                        </a>
                                        <xsl:if
                                            test="position() != last()">
                                            <xsl:value-of select="', '" />
                                        </xsl:if>
                                    </xsl:for-each>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 SSC</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import Ssc

ssc_id = inv.getLong('ssc-id')
ssc = Ssc.getSsc(ssc_id)
source.appendChild(ssc.toXml(doc, XmlTree("measurementRequirements", XmlTree("tpr"))))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; SSCs &gt;
                    <xsl:value-of select="/source/ssc/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/63/output/">
                        <xsl:value-of select="'SSCs'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/ssc/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of select="/source/ssc/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/ssc/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/ssc/@description" />
                        </td>
                    </tr>
                    <tr>
                        <th>Is Import?</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/ssc/@is-import='true'">
                                    Import
                                </xsl:when>
                                <xsl:otherwise>Export</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                    <tr>
                        <th>From</th>
                        <td>
                            <xsl:value-of
                                select="concat(/source/ssc/date[@label='from']/@year, '-', /source/ssc/date[@label='from']/@month, '-', /source/ssc/date[@label='from']/@day, ' ', /source/ssc/date[@label='from']/@hour, ':', /source/ssc/date[@label='from']/@minute)" />
                        </td>
                    </tr>
                    <tr>
                        <th>To</th>
                        <td>
                            <xsl:choose>
                                <xsl:when
                                    test="/source/ssc/date[@label='to']">
                                    <xsl:value-of
                                        select="concat(/source/ssc/date[@label='to']/@year, '-', /source/ssc/date[@label='to']/@month, '-', /source/ssc/date[@label='to']/@day, ' ', /source/ssc/date[@label='to']/@hour, ':', /source/ssc/date[@label='to']/@minute)" />
                                </xsl:when>
                                <xsl:otherwise>Ongoing</xsl:otherwise>
                            </xsl:choose>
                        </td>
                    </tr>
                </table>

                <h4>TPRs</h4>

                <ul>
                    <xsl:for-each
                        select="/source/ssc/measurement-requirement/tpr">
                        <li>
                            <a
                                href="{/source/request/@context-path}/reports/49/output/?tpr-id={@id}">
                                <xsl:value-of select="@code" />
                            </a>
                            <!-- 
                            <xsl:if test="position() != last()">
                                <xsl:value-of select="', '" />
                            </xsl:if>
                            -->
                        </li>
                    </xsl:for-each>
                </ul>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Meter Types</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

types_element = doc.createElement('meter-types')
source.appendChild(types_element)
for type in Hiber.session().createQuery("from MeterType type order by type.code").list():
    types_element.appendChild(type.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    <xsl:value-of select="'Home'" />
                    &gt; Meter Types
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Meter Types'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/meter-types/meter-type">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/66/output/?type-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@code" />
                                </td>

                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Meter Type</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import MeterType

type_id = inv.getLong('type-id')
type = MeterType.getMeterType(type_id)
source.appendChild(type.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Meter Types &gt;
                    <xsl:value-of
                        select="/source/meter-type/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/65/output/">
                        <xsl:value-of select="'Meter Types'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/meter-type/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of
                                select="/source/meter-type/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/meter-type/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/meter-type/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 MTC Payment Types</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

types_element = doc.createElement('meter-payment-types')
source.appendChild(types_element)
for type in Hiber.session().createQuery("from MeterPaymentType type order by type.code").list():
    types_element.appendChild(type.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Meter Payment Types
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Meter Payment Types'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/meter-payment-types/meter-payment-type">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/68/output/?type-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@code" />
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 MTC Payment Type</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import MeterPaymentType

type_id = inv.getLong('type-id')
type = MeterPaymentType.getMeterPaymentType(type_id)
source.appendChild(type.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Meter Payment Types &gt;
                    <xsl:value-of
                        select="/source/meter-payment-type/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/67/output/">
                        <xsl:value-of select="'Meter Payment Types'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/meter-payment-type/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of
                                select="/source/meter-payment-type/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/meter-payment-type/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/meter-payment-type/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 DSOs</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

for dso in Hiber.session().createQuery(
                'from Dso dso order by dso.code').list():
    source.appendChild(dso.toXml(doc, XmlTree('participant').put('role')))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>Home &gt; DSOs</title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt; DSOs
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <p>
                    This is a list of parties that have the
                    <a
                        href="{/source/request/@context-path}/reports/62/output/?role-id=22">
                        <xsl:value-of select="'distributor'" />
                    </a>
                    role.
                </p>
                <table>
                    <thead>
                        <th>Chellow Id</th>
                        <th>Code</th>
                        <th>Name</th>
                        <th>Participant</th>
                    </thead>
                    <tbody>
                        <xsl:for-each select="/source/dso">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/70/output/?dso-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@code" />
                                </td>
                                <td>
                                    <xsl:value-of select="@name" />
                                </td>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/37/output/?participant-id={participant/@id}">
                                        <xsl:value-of
                                            select="participant/@name" />
                                    </a>
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 DSO</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.billing import Dso

dso_id = inv.getLong('dso-id')
dso = Dso.getDso(dso_id)
dso_element = dso.toXml(doc, XmlTree('participant').put('role'))
source.appendChild(dso_element)
for contract in Hiber.session().createQuery("from DsoContract contract where contract.party = :dso order by contract.name").setEntity('dso', dso).list():
    dso_element.appendChild(contract.toXml(doc, XmlTree('rateScripts')))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; DSOs &gt;
                    <xsl:value-of select="/source/dso/@name" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/69/output/">
                        <xsl:value-of select="'DSOs'" />
                    </a>
                    &gt;
                    <xsl:value-of select="/source/dso/@code" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of select="/source/dso/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Name</th>
                        <td>
                            <xsl:value-of select="/source/dso/@name" />
                        </td>
                    </tr>

                    <tr>
                        <th>Participant</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/37/output/?participant-id={/source/dso/participant/@id}">
                                <xsl:value-of
                                    select="/source/dso/participant/@name" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>Role</th>
                        <td>
                            <a
                                href="{/source/request/@context-path}/reports/62/output/?role-id={/source/dso/market-role/@id}">
                                <xsl:value-of
                                    select="/source/dso/market-role/@description" />
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of select="/source/dso/@code" />
                        </td>
                    </tr>
                </table>
                <br />
                <ul>
                                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/33/output/?dso-id={/source/dso/@id}">
                            Contracts
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/25/output/?dso-id={/source/dso/@id}">
                            Line Loss Factors
                        </a>
                    </li>
                    <li>
                        <a
                            href="{/source/request/@context-path}/reports/29/output/?dso-id={/source/dso/@id}">
                            MPAN top lines
                        </a>
                    </li>
                </ul>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Read Types</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree

types_element = doc.createElement('read-types')
source.appendChild(types_element)
for type in Hiber.session().createQuery("from ReadType type order by type.code").list():
    types_element.appendChild(type.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Read Types
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <xsl:value-of select="'Read Types'" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <thead>
                        <tr>
                            <th>Chellow Id</th>
                            <th>Code</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <xsl:for-each
                            select="/source/read-types/read-type">
                            <tr>
                                <td>
                                    <a
                                        href="{/source/request/@context-path}/reports/72/output/?type-id={@id}">
                                        <xsl:value-of select="@id" />
                                    </a>
                                </td>
                                <td>
                                    <xsl:value-of select="@code" />
                                </td>
                                <td>
                                    <xsl:value-of select="@description" />
                                </td>
                            </tr>
                        </xsl:for-each>
                    </tbody>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
  <line>
    <value>insert</value>
    <value>report</value>
    <value>0 Read Type</value>
    <value><![CDATA[from net.sf.chellow.monad import Hiber, XmlTree
from net.sf.chellow.physical import ReadType

type_id = inv.getLong('type-id')
type = ReadType.getReadType(type_id)
source.appendChild(type.toXml(doc))]]></value>
    <value><![CDATA[<?xml version="1.0" encoding="us-ascii"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="html" encoding="US-ASCII"
        doctype-public="-//W3C//DTD HTML 4.01//EN"
        doctype-system="http://www.w3.org/TR/html4/strict.dtd" indent="yes" />
    <xsl:template match="/">
        <html>
            <head>
                <link rel="stylesheet" type="text/css"
                    href="{/source/request/@context-path}/reports/10/output/" />
                <title>
                    Home &gt; Read Types &gt;
                    <xsl:value-of
                        select="/source/read-type/@description" />
                </title>
            </head>
            <body>
                <p>
                    <a
                        href="{/source/request/@context-path}/reports/1/output/">
                        <xsl:value-of select="'Home'" />
                    </a>
                    &gt;
                    <a
                        href="{/source/request/@context-path}/reports/71/output/">
                        <xsl:value-of select="'Read Types'" />
                    </a>
                    &gt;
                    <xsl:value-of
                        select="/source/read-type/@description" />
                </p>
                <br />
                <xsl:if test="//message">
                    <ul>
                        <xsl:for-each select="//message">
                            <li>
                                <xsl:value-of select="@description" />
                            </li>
                        </xsl:for-each>
                    </ul>
                </xsl:if>
                <table>
                    <tr>
                        <th>Chellow Id</th>
                        <td>
                            <xsl:value-of
                                select="/source/read-type/@id" />
                        </td>
                    </tr>
                    <tr>
                        <th>Code</th>
                        <td>
                            <xsl:value-of
                                select="/source/read-type/@code" />
                        </td>
                    </tr>
                    <tr>
                        <th>Description</th>
                        <td>
                            <xsl:value-of
                                select="/source/read-type/@description" />
                        </td>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>]]></value>
  </line>
</csv>
