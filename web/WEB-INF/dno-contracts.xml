<?xml version="1.0"?>
<csv>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[10]]></value>
        <value><![CDATA[1]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
        <value><![CDATA[1]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[11]]></value>
        <value><![CDATA[3]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
        <value><![CDATA[3]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[12]]></value>
        <value><![CDATA[5]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
        <value><![CDATA[5]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[13]]></value>
        <value><![CDATA[7]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
        <value><![CDATA[7]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[14]]></value>
        <value><![CDATA[9]]></value>
        <value><![CDATA[main 2000-04-01]]></value>
        <value><![CDATA[2000-01-01T00:00Z]]></value>
        <value><![CDATA[2010-03-31T23:30Z]]></value>
        <value><![CDATA[from net.sf.chellow.billing import NonCoreContract
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.physical import HhStartDate


def get_rate_script(date):
    return contract.rateScripts(date, date)[0]


def month(bill, whole_data, data_source):
    bill.setdefault('duos-standing-gbp', 0)

    llfc_code = data_source.llfc_code
    availability = data_source.availability
    summary = whole_data['summary']

    rate_script = contract.rateScript(summary['finish-date'])
    tariff = data_source.rate(rate_script, 'tariffs')[llfc_code]
    reactive_rate = tariff['reactive-gbp-per-kvarh']
    bill['duos-reactive-rate'] = reactive_rate
    bill['duos-reactive-gbp'] = max(0, summary['sum-imp-msp-kvarh'] - summary['sum-msp-kwh'] / 3) * reactive_rate
    if not data_source.is_displaced:
        bill.setdefault('duos-availability-gbp', 0)

        availability_rate = tariff['availability-gbp-per-kva-per-day']
        bill['duos-availability-rate'] = availability_rate
        md_kva = max((datum['msp-kw'] ** 2 + (datum['imp-msp-kvar'] + datum['exp-msp-kvar'])** 2) ** 0.5 for datum in whole_data['data'])

        billed_avail = max(availability, md_kva)
        bill['duos-availability-gbp'] += availability_rate * billed_avail
        bill['duos-availability-agreed-kva'] = data_source.availability
        bill['duos-availability-billed-kva'] = billed_avail

    bill['duos-standing-gbp'] += tariff['fixed-gbp-per-day'] * data_source.summary['days']


def hh(summary, hh_list, data_source):
    bill = summary['dno-bill']

    for title in ['duos-night-kwh', 'duos-night-gbp', 'duos-day-kwh', 'duos-day-gbp']:
        bill.setdefault(title, 0)

    llfc_code = data_source.llfc_code
    voltage_level_code_lower = data_source.voltage_level_code.lower()
    is_substation = data_source.is_substation

    for hh in hh_list:
        tariffs = data_source.hh_rate(contract, hh['start-date'], 'tariffs')[llfc_code]
        if 0 < hh['ct-decimal-hour'] <= 7:
            bill['duos-night-kwh'] += hh['msp-kwh']
            bill['duos-night-gbp'] += hh['msp-kwh'] * tariffs['night-gbp-per-kwh']
        else:
            bill['duos-day-kwh'] += hh['msp-kwh']
            bill['duos-day-gbp'] += hh['msp-kwh'] * tariffs['day-gbp-per-kwh']

        if 0 < hh['ct-decimal-hour'] <= 7:
            slot = 'night'
        elif 7 > hh['ct-day-of-week'] > 1 and hh['ct-decimal-hour'] > 15.5 and hh['ct-decimal-hour'] < 19 and (hh['ct-month'] > 10 or hh['ct-month'] < 3):
            slot = 'winter-weekday-peak'
        elif 7 > hh['ct-day-of-week'] > 1 and (7 <= hh['ct-decimal-hour'] < 16 or 18 < hh['ct-decimal-hour'] < 20) and (hh['ct-month'] > 10 or hh['ct-month'] < 3):
            slot = 'winter-weekday-day'
        else:
            slot = 'other'

        hh['laf'] = data_source.hh_rate(contract, hh['start-date'], 'lafs')[voltage_level_code_lower][slot]
        hh['gsp-kwh'] = hh['msp-kwh'] * hh['laf']
        hh['gsp-kw'] = hh['gsp-kwh'] * 2]]></value>
        <value><![CDATA[9]]></value>
        <value><![CDATA[def triad():
    return 19.147817

def tariffs():
    return {
        '121': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '124': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '127': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '132': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '365': {
            'fixed-gbp-per-day': 4.29,
            'availability-gbp-per-kva-per-day': 0.0417,
            'excess-availability-gbp-per-kva-per-day': 0.0417,
            'day-gbp-per-kwh': 0.0012,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh': 0.0013}}

def lafs():
    return {
        'lv': {
            'night': 1.042,
            'winter-weekday-peak': 1.104,
            'winter-weekday-day': 1.095,
            'other': 1.070},
        'hv': {
            'night': 1.012,
            'winter-weekday-peak': 1.037,
            'winter-weekday-day': 1.032,
            'other': 1.029}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract-rate-script]]></value>
        <value><![CDATA[14]]></value>
        <value><![CDATA[main 2000-04-01]]></value>
        <value><![CDATA[11]]></value>
        <value><![CDATA[2007-04-01T00:00Z]]></value>
        <value><![CDATA[def triad():
    return 19.147817

def tariffs():
    return {
        '121': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '124': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '127': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '132': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '365': {
            'fixed-gbp-per-day': 4.29,
            'availability-gbp-per-kva-per-day': 0.0417,
            'excess-availability-gbp-per-kva-per-day': 0.0417,
            'day-gbp-per-kwh': 0.0012,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh': 0.0013}}

def lafs():
    return {
        'lv': {
            'night': 1.042,
            'winter-weekday-peak': 1.104,
            'winter-weekday-day': 1.095,
            'other': 1.070},
        'hv': {
            'night': 1.012,
            'winter-weekday-peak': 1.037,
            'winter-weekday-day': 1.032,
            'other': 1.029}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract-rate-script]]></value>
        <value><![CDATA[14]]></value>
        <value><![CDATA[main 2000-04-01]]></value>
        <value><![CDATA[13]]></value>
        <value><![CDATA[2008-04-01T00:00Z]]></value>
        <value><![CDATA[def triad():
    return 19.147817

def tariffs():
    return {
        '121': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '124': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '127': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '132': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '365': {
            'fixed-gbp-per-day': 4.29,
            'availability-gbp-per-kva-per-day': 0.0417,
            'excess-availability-gbp-per-kva-per-day': 0.0417,
            'day-gbp-per-kwh': 0.0012,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh': 0.0013}}

def lafs():
    return {
        'lv': {
            'night': 1.042,
            'winter-weekday-peak': 1.104,
            'winter-weekday-day': 1.095,
            'other': 1.070},
        'hv': {
            'night': 1.012,
            'winter-weekday-peak': 1.037,
            'winter-weekday-day': 1.032,
            'other': 1.029}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract-rate-script]]></value>
        <value><![CDATA[14]]></value>
        <value><![CDATA[main 2000-04-01]]></value>
        <value><![CDATA[15]]></value>
        <value><![CDATA[2009-04-01T00:00Z]]></value>
        <value><![CDATA[def night_hv():
    return 1.012

def night_lv():
    return 1.042

def peak_hv():
    return 1.037

def peak_lv():
    return 1.104

def winter_weekday_hv():
    return 1.032

def winter_weekday_lv():
    return 1.095

def other_hv():
    return 1.029

def other_lv():
    return 1.070

def duos_day_hv_gbp_per_kwh():
    return 0.0008

def duos_night_hv_gbp_per_kwh():
    return 0.0004

def standing_hv_gbp_per_month():
    return 137.1792

def availability_hv_gbp_per_kva_per_month():
    return 1.3900

def reactive_hv_gbp_per_kvarh():
    return 0.0012

def duos_day_lv_gbp_per_kwh():
    return 0.0014

def duos_night_lv_gbp_per_kwh():
    return 0.0006

def standing_lv_gbp_per_month():
    return 51.4042

def availability_lv_gbp_per_kva_per_month():
    return 1.7307

def reactive_lv_gbp_per_kvarh():
    return 0.0024

def tariffs():
    return {
        '121': {
            'fixed-gbp-per-day': 1.6900,
            'availability-gbp-per-kva-per-day': 0.0569,
            'excess-availability-gbp-per-kva-per-day': 0.0569,
            'day-gbp-per-kwh': 0.0014,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh':  0.0024},
        '124': {
            'fixed-gbp-per-day': 1.6900,
            'availability-gbp-per-kva-per-day': 0.0569,
            'excess-availability-gbp-per-kva-per-day': 0.0569,
            'day-gbp-per-kwh': 0.0014,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh':  0.0024},
        '127': {
            'fixed-gbp-per-day': 1.6900,
            'availability-gbp-per-kva-per-day': 0.0569,
            'excess-availability-gbp-per-kva-per-day': 0.0569,
            'day-gbp-per-kwh': 0.0014,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh':  0.0024},
        '132': {
            'fixed-gbp-per-day': 1.6900,
            'availability-gbp-per-kva-per-day': 0.0569,
            'excess-availability-gbp-per-kva-per-day': 0.0569,
            'day-gbp-per-kwh': 0.0014,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh': 0.0024},
        '365': {
            'fixed-gbp-per-day': 4.5100,
            'availability-gbp-per-kva-per-day': 0.0457,
            'excess-availability-gbp-per-kva-per-day': 0.0457,
            'day-gbp-per-kwh': 0.0008,
            'night-gbp-per-kwh': 0.0004,
            'reactive-gbp-per-kvarh': 0.0012}}


def lafs():
    return {
        'lv': {
            'night': 1.042,
            'winter-weekday-peak': 1.104,
            'winter-weekday-day': 1.095,
            'other': 1.070},
        'hv': {
            'night': 1.012,
            'winter-weekday-peak': 1.037,
            'winter-weekday-day': 1.032,
            'other': 1.029}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[14]]></value>
        <value><![CDATA[11]]></value>
        <value><![CDATA[main 2010-04-01]]></value>
        <value><![CDATA[2010-04-01T00:00Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[from net.sf.chellow.billing import NonCoreContract
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad import UserException
from net.sf.chellow.physical import HhStartDate
from java.lang import System

WINTER_MONTHS = [Calendar.NOVEMBER, Calendar.DECEMBER, Calendar.JANUARY, Calendar.FEBRUARY]

WEEKEND_DAYS = [Calendar.SATURDAY, Calendar.SUNDAY]

BANDS = ['red', 'amber', 'green']

KEYS = dict((band, {'kwh': 'duos-' + band + '-kwh', 'tariff-rate': band + '-gbp-per-kwh', 'bill-rate': 'duos-' + band + '-rate', 'gbp': 'duos-' + band + '-gbp'}) for band in BANDS)

def hh(summary, hh_list, data_source):
    #timing = System.currentTimeMillis()
    #data_source.pw.println("22 hh: start" + str(System.currentTimeMillis() - timing))

    bill = summary['dno-bill']

    voltage_level_code = data_source.voltage_level_code
    is_substation = data_source.is_substation
    llfc_code = data_source.llfc_code

    rate_script = contract.rateScript(summary['start-date'])
    tariff = data_source.rate(rate_script, 'tariffs')[llfc_code]
    lafs = data_source.rate(rate_script, 'lafs')[voltage_level_code.lower()]

    if data_source.is_import:
        for band in BANDS:
            bill[KEYS[band]['kwh']] = 0

        for hh in hh_list:
            band = 'green'
            if hh['ct-day-of-week'] not in WEEKEND_DAYS:
                if 16 <= hh['ct-decimal-hour'] < 19:
                    band = 'red'
                elif 7 < hh['ct-decimal-hour'] < 21:
                    band = 'amber'

            bill[KEYS[band]['kwh']] += hh['msp-kwh']
            
        for band in BANDS:
            bill[KEYS[band]['bill-rate']] = tariff[KEYS[band]['tariff-rate']]
            bill[KEYS[band]['gbp']] = bill[KEYS[band]['bill-rate']] * bill[KEYS[band]['kwh']]


    for hh in hh_list:
        slot_name = 'other'
        if 0 < hh['ct-decimal-hour'] <= 7:
            slot_name = 'night'
        elif hh['ct-day-of-week'] not in WEEKEND_DAYS and hh['ct-month'] in WINTER_MONTHS:
            if 16 <= hh['ct-decimal-hour'] < 19:
                slot_name = 'winter-weekday-peak'
            elif 7 < hh['ct-decimal-hour'] < 20:
                slot_name = 'winter-weekday-day'

        hh['laf'] = lafs[slot_name]
        hh['gsp-kwh'] = hh['laf'] * hh['msp-kwh']
        hh['gsp-kw'] = hh['gsp-kwh'] * 2

    #pw.println('hh-start-date,"' + hh['start-date'].toString() + '",msp,"' + str(hh['msp-kwh']) + '",laf,"' + str(hh['laf']) + '",gsp,"' + str(hh['gsp-kwh']) + '",slot name,"' + slot_name + '",ct decimal hour,"' + str(hh['ct-decimal-hour']) + '"')
    #data_source.pw.println("22 hh: finish " + str(System.currentTimeMillis() - timing))


def month(bill, whole_data, data_source):
    summary = whole_data['summary']
    timing = System.currentTimeMillis()

    rate_script = contract.rateScript(summary['finish-date'])
    tariff = data_source.rate(rate_script, 'tariffs')[data_source.llfc_code]

    if not data_source.is_displaced:
        md_kva = 0
        for datum in whole_data['data']:
            if datum['msp-kw'] > 0 and datum['anti-msp-kw'] == 0:
                hh_kva = (datum['msp-kw'] ** 2 + max(datum['imp-msp-kvar'], datum['exp-msp-kvar']) ** 2) ** 0.5
            else:
                hh_kva = datum['msp-kw']
            md_kva = max(md_kva, hh_kva)

        billed_avail = max(md_kva, data_source.availability)
        bill['duos-availability-agreed-kva'] = data_source.availability
        bill['duos-availability-billed-kva'] = billed_avail
        availability_rate = tariff['gbp-per-kva-per-day']
        bill['duos-availability-rate'] = availability_rate
        bill['duos-availability-gbp'] = availability_rate * billed_avail * summary['days']

        bill['duos-fixed-days'] = summary['days']
        bill['duos-fixed-rate'] = tariff['gbp-per-mpan-per-day']
        bill['duos-fixed-gbp'] = bill['duos-fixed-days'] * bill['duos-fixed-rate']

        reactive_rate = tariff['gbp-per-kvarh']
        bill['duos-reactive-rate'] = reactive_rate
        bill['duos-reactive-kvarh'] = sum(max(max(datum['imp-msp-kvarh'], datum['exp-msp-kvarh']) - (0.95 ** -2 -1) ** 0.5 * datum['msp-kwh'], 0) for datum in whole_data['data'] if datum['msp-kwh'] > 0)
        bill['duos-reactive-gbp'] = bill['duos-reactive-rate'] * bill['duos-reactive-kvarh']]]></value>
        <value><![CDATA[17]]></value>
        <value><![CDATA[def lafs():
    return {
        'lv': {
            'night': 1.051,
            'winter-weekday-peak': 1.075,
            'winter-weekday-day': 1.065,
            'other': 1.087},
        'hv': {
            'night': 1.017,
            'winter-weekday-peak': 1.025,
            'winter-weekday-day': 1.022,
            'other': 1.030}}

def tariffs():
    return {
        '127': {
            'description': 'LV',
            'gbp-per-mpan-per-day': 0.0706,
            'gbp-per-kva-per-day': 0.0273,
            'excess-gbp-per-kva-per-day': 0.0273,
            'red-gbp-per-kwh': 0.05749,
            'amber-gbp-per-kwh': 0.00672,
            'green-gbp-per-kwh': 0.00048,
            'gbp-per-kvarh': 0.00294},
        '128': {
            'description': 'LV Sub',
            'gbp-per-mpan-per-day': 0.0706,
            'gbp-per-kva-per-day': 0.0382,
            'excess-gbp-per-kva-per-day': 0.0382,
            'red-gbp-per-kwh': 0.03782,
            'amber-gbp-per-kwh': 0.00383,
            'green-gbp-per-kwh': 0.00033,
            'gbp-per-kvarh': 0.00230},
        '365': {
            'description': 'HV',
            'gbp-per-mpan-per-day': 0.7096,
            'gbp-per-kva-per-day': 0.0451,
            'excess-gbp-per-kva-per-day': 0.0451,
            'red-gbp-per-kwh': 0.02907,
            'amber-gbp-per-kwh': 0.00234,
            'green-gbp-per-kwh': 0.00025,
            'gbp-per-kvarh': 0.00132},
        '366': {
            'description': 'HV Sub',
            'gbp-per-mpan-per-day': 0.7096,
            'gbp-per-kva-per-day': 0.0403,
            'excess-gbp-per-kva-per-day': 0.0403,
            'red-gbp-per-kwh': 0.03299,
            'amber-gbp-per-kwh': 0.00266,
            'green-gbp-per-kwh': 0.00031,
            'gbp-per-kvarh': 0.00168}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract-rate-script]]></value>
        <value><![CDATA[14]]></value>
        <value><![CDATA[main 2010-04-01]]></value>
        <value><![CDATA[243]]></value>
        <value><![CDATA[2011-04-01T00:00Z]]></value>
        <value><![CDATA[def lafs():
    return {
        'lv': {
            'night': 1.051,
            'winter-weekday-peak': 1.075,
            'winter-weekday-day': 1.065,
            'other': 1.087},
        'hv': {
            'night': 1.017,
            'winter-weekday-peak': 1.025,
            'winter-weekday-day': 1.022,
            'other': 1.030}}

def tariffs():
    return {
        '127': {
            'description': 'LV',
            'gbp-per-mpan-per-day': 0.0757,
            'gbp-per-kva-per-day': 0.0264,
            'excess-gbp-per-kva-per-day': 0.0264,
            'red-gbp-per-kwh': 0.06891,
            'amber-gbp-per-kwh': 0.00709,
            'green-gbp-per-kwh': 0.00046,
            'gbp-per-kvarh': 0.00319},
        '128': {
            'description': 'LV Sub',
            'gbp-per-mpan-per-day': 0.0757,
            'gbp-per-kva-per-day': 0.036,
            'excess-gbp-per-kva-per-day': 0.036,
            'red-gbp-per-kwh': 0.04495,
            'amber-gbp-per-kwh': 0.00395,
            'green-gbp-per-kwh': 0.00030,
            'gbp-per-kvarh': 0.00260},
        '365': {
            'description': 'HV',
            'gbp-per-mpan-per-day': 0.7610,
            'gbp-per-kva-per-day': 0.0422,
            'excess-gbp-per-kva-per-day': 0.0422,
            'red-gbp-per-kwh': 0.03916,
            'amber-gbp-per-kwh': 0.00275,
            'green-gbp-per-kwh': 0.00023,
            'gbp-per-kvarh': 0.00161},
        '366': {
            'description': 'HV Sub',
            'gbp-per-mpan-per-day': 0.7610,
            'gbp-per-kva-per-day': 0.0367,
            'excess-gbp-per-kva-per-day': 0.0367,
            'red-gbp-per-kwh': 0.04029,
            'amber-gbp-per-kwh': 0.00288,
            'green-gbp-per-kwh': 0.00028,
            'gbp-per-kvarh': 0.00193}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[15]]></value>
        <value><![CDATA[13]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
        <value><![CDATA[19]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[16]]></value>
        <value><![CDATA[15]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
        <value><![CDATA[21]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[17]]></value>
        <value><![CDATA[17]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
        <value><![CDATA[23]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[18]]></value>
        <value><![CDATA[19]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
        <value><![CDATA[25]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[19]]></value>
        <value><![CDATA[21]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
        <value><![CDATA[27]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[20]]></value>
        <value><![CDATA[23]]></value>
        <value><![CDATA[main 2000-04-01]]></value>
        <value><![CDATA[2000-01-01T00:00Z]]></value>
        <value><![CDATA[2010-03-31T23:30Z]]></value>
        <value><![CDATA[from net.sf.chellow.billing import NonCoreContract
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad import UserException, Hiber
from net.sf.chellow.physical import HhStartDate, MpanCore
from net.sf.chellow.monad.types import MonadDate
from java.lang import System


def year_md_095(data_source, finish):
    if data_source.site_id is None:
        if not data_source.is_new:
            return year_md_095_supply(MpanCore.getMpanCore(data_source.id).getSupply(), finish)
    else:
        return year_md_095_site(data_source, finish)


def year_md_095_supply(supply, finish):
    md_kva = 0
    cal = MonadDate.getCalendar()
    cal.setTime(finish)
    cal.add(Calendar.MONTH, -11)
    month_finish = cal.getTime()
    month_kwh_query = Hiber.session().createQuery("select sum(datum.value), max(datum.value) from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.startDate.date >= :start and datum.startDate.date <= :finish and datum.channel.isKwh is true and datum.channel.isImport is true").setEntity("supply", supply)

    month_kvarh_query = Hiber.session().createQuery("select sum(datum.value) from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.startDate.date >= :start and datum.startDate.date <= :finish and datum.channel.isKwh is false and datum.channel.isImport is true").setEntity("supply", supply)
    while not month_finish.after(finish):
        cal.setTime(month_finish)
        cal.add(Calendar.MONTH, -1)
        cal.add(Calendar.MINUTE, 30)
        month_start = cal.getTime()        
        month_kwh_result = month_kwh_query.setTimestamp("start", month_start).setTimestamp("finish", month_finish).uniqueResult()

        if month_kwh_result[0] is not None:
            month_md_kw = month_kwh_result[1].doubleValue() * 2
            month_kwh = month_kwh_result[0].doubleValue()
            month_kvarh = month_kvarh_query.setTimestamp("start", month_start).setTimestamp("finish", month_finish).uniqueResult()
            if month_kvarh is None:
                pf = 0.95
            else:
                month_kvarh = month_kvarh.doubleValue()
                if month_kwh == 0 and month_kvarh == 0:
                    pf = 1
                else:
                    pf = month_kwh / (month_kwh ** 2 + month_kvarh ** 2) ** 0.5
            month_kva = month_md_kw / pf
            md_kva = max(md_kva, month_kva)
        cal.setTime(month_finish)
        cal.add(Calendar.MONTH, 1)
        month_finish = cal.getTime()
    return md_kva


def year_md_095_site(data_source, finish, pw):
    timing = System.currentTimeMillis()
    #pw.println("starting 095 " + str(System.currentTimeMillis() - timing))    
    md_kva = 0
    cal = MonadDate.getCalendar()
    cal.setTime(finish)
    cal.add(Calendar.MONTH, -12)
    month_finish = cal.getTime()


    while not month_finish.after(finish):
        cal.setTime(month_finish)
        cal.add(Calendar.MONTH, -1)
        cal.add(Calendar.MINUTE, 30)
        month_start = cal.getTime()
        month_data = {'start': HhStartDate(month_start), 'finish': HhStartDate(month_finish)}
        data_source.sum_md(month_data, pw)
        if month_data['sum-kwh'] is None:
            month_md_kw = 0
            month_kwh = 0
        else:
            month_md_kw = month_data['md-kw']
            month_kwh = month_data['sum-kwh']

        data_source.sum_md(month_data, pw, False)
        if month_data['sum-kvarh'] is not None:
            month_kvarh = month_data['sum-kvarh']

        if month_kvarh == 0:
            month_kva = month_md_kw / 0.95
        else:
            if month_kwh == 0 and month_kvarh == 0:
                pf = 1
            else:
                pf = month_kwh / (month_kwh ** 2 + month_kvarh ** 2) ** 0.5
            month_kva = month_md_kw / pf
        md_kva = max(md_kva, month_kva)
        cal.setTime(month_finish)
        cal.add(Calendar.MONTH, 1)
        month_finish = cal.getTime()
    return md_kva, ''


def get_rate_script(date):
    return contract.rateScripts(date, date)[0]


def hh(summary, hh_list, data_source):
    #data_source.pw.println('doing hh ' + str(summary['start-date']))

    llfc_code = data_source.llfc_code
    voltage_level_code = data_source.voltage_level_code
    pc_code = data_source.pc_code
    bill = summary['dno-bill']
    rate_script = contract.rateScript(summary['start-date'])
    llfc_groups = data_source.rate(rate_script, 'llfc_groups')
    if llfc_code in llfc_groups:
        llfc_group = llfc_groups[llfc_code]
    else:
        llfc_group = llfc_code

    if pc_code in ('05', '06', '07', '08'):
        pc_group = '05-08'
    else:
        pc_group = pc_code

    tariff = data_source.rate(rate_script, 'duos_tariffs')['llfc(' + llfc_group + ')-pc(' + pc_group + ')']

    if tariff is None:
        raise UserException('The tariff for the llfc ' + llfc_code + ' cannot be found.')

    lafs = data_source.rate(rate_script, 'lafs')[voltage_level_code.lower()]
    
    bill['duos-day-kwh'] = 0
    bill['duos-day-gbp'] = 0
    day_rate = tariff['day-gbp-per-kwh']

    if 'night-gbp-per-kwh' in tariff:
        night_rate = tariff['night-gbp-per-kwh']
        bill['duos-night-kwh'] = 0
        bill['duos-night-gbp'] = 0
        for hh in hh_list:
            if 0 < hh['ct-decimal-hour'] <= 7:
                bill['duos-night-kwh'] += hh['msp-kwh']
                bill['duos-night-gbp'] += hh['msp-kwh'] * night_rate
            else:
                bill['duos-day-kwh'] += hh['msp-kwh']
                bill['duos-day-gbp'] += hh['msp-kwh'] * day_rate
    else:
        for hh in hh_list:
            bill['duos-day-kwh'] += hh['msp-kwh']
            bill['duos-day-gbp'] += hh['msp-kwh'] * day_rate

    for hh in hh_list:
        if 0 < hh['ct-decimal-hour'] <= 7:
            slot_name = 'night'
        elif Calendar.SATURDAY > hh['ct-day-of-week'] > Calendar.SUNDAY and 16 < hh['ct-decimal-hour'] <= 19 and (hh['ct-month'] > Calendar.OCTOBER or hh['ct-month'] < Calendar.MARCH):
            slot_name = 'peak'
        elif 7 > hh['ct-day-of-week'] > 1 and (7 < hh['ct-decimal-hour'] < 15 or 18.5 < hh['ct-decimal-hour'] < 19) and (hh['ct-month'] > 10 or hh['ct-month'] < 3):
            slot_name = 'winter-weekday'
        else:
            slot_name = 'other'
        hh['laf'] = lafs[slot_name]
        hh['gsp-kwh'] = hh['laf'] * hh['msp-kwh']
        hh['gsp-kw'] = hh['gsp-kwh'] * 2

        #pw.println('hh-end-date,"' + hh['end-date'].toString() + '",msp,"' + str(hh['msp-kwh']) + '",laf,"' + str(hh['laf']) + '",gsp,"' + str(hh['gsp-kwh']) + '",slot name,"' + slot_name + '",ct decimal hour,"' + str(hh['ct-decimal-hour']) + '"')


def month(bill, whole_data, data_source):
    bill.setdefault('duos-reactive-gbp', 0)
    
    llfc_code = data_source.llfc_code
    summary = whole_data['summary']
    rate_script = get_rate_script(summary['finish-date'])
    llfc_groups = data_source.rate(rate_script, 'llfc_groups')
    if llfc_code in llfc_groups:
        llfc_group = llfc_groups[llfc_code]
    else:
        llfc_group = llfc_code

    tariff = data_source.rate(rate_script, 'duos_tariffs')['llfc(' + llfc_group + ')-pc(00)']
    if tariff is None:
        raise UserException('The tariff for the llfc ' + llfc_code + ' cannot be found.')
    if not data_source.is_displaced:
        year_md_kva_095 = year_md_095(data_source, summary['finish-date'].getDate())

        billed_avail = max(data_source.availability, year_md_kva_095)
        bill.setdefault('duos-availability-gbp', 0)
        bill['duos-availability-agreed-kva'] = data_source.availability

        for threshold, block in [(15, 15), (100, 5), (250, 10), (500, 25), (1000, 50), (None, 100)]:
            if threshold is None or billed_avail < threshold:
                if billed_avail % block > 0:
                    billed_avail = (int(billed_avail / block) + 1) * block
                break
        bill['duos-availability-billed-kva'] = billed_avail
        le_200_avail_rate = tariff['capacity-<=200-gbp-per-kva-per-month']

        bill['duos-availability-gbp'] += min(200, billed_avail) * le_200_avail_rate

        if billed_avail > 200:
            gt_200_avail_rate = tariff['capacity->200-gbp-per-kva-per-month']
            bill['duos-availability-gbp'] += (billed_avail - 200) * gt_200_avail_rate

    bill.setdefault('duos-standing-gbp', 0)
    if 'fixed-gbp-per-month' in tariff:
        bill['duos-standing-gbp'] += tariff['fixed-gbp-per-month']
    else:
        utc_cal = MonadDate.getCalendar()
        utc_cal.setTime(summary['finish_date'].getPrevious().getDate())
        days_in_month = utc_cal.get(Calendar.DAY_OF_MONTH)
        bill['duos-standing-gbp'] += tariff['fixed-gbp-per-day'] * days_in_month]]></value>
        <value><![CDATA[29]]></value>
        <value><![CDATA[def llfc_groups():
    return {}

def duos_tariffs():
    return {
'llfc(450)-pc(00)': {
    'fixed-gbp-per-month': 14.91,
    'day-gbp-per-kwh': 0.00508,
    'capacity-<=200-gbp-per-kva-per-month': 1.06,
    'capacity->200-gbp-per-kva-per-month': 0.93,
    'excess-capacity-gbp-per-kva-per-month': 0.42},
'llfc(453)-pc(00)': {
    'fixed-gbp-per-month': 14.91,
    'day-gbp-per-kwh': 0.00606,
    'night-gbp-per-kwh': 0.00118,
    'capacity-<=200-gbp-per-kva-per-month': 1.06,
    'capacity->200-gbp-per-kva-per-month': 0.93,
    'excess-capacity-gbp-per-kva-per-month': 0.42},
'llfc(520)-pc(00)': {
    'fixed-gbp-per-month': 51.50,
    'day-gbp-per-kwh':  0.01157},
'llfc(655)-pc(00)': {
    'fixed-gbp-per-month': 98.23,
    'day-gbp-per-kwh':   0.00379,
    'capacity-<=200-gbp-per-kva-per-month': 0.86,
    'capacity->200-gbp-per-kva-per-month': 0.86,
    'excess-capacity-gbp-per-kva-per-month': 0.40},
'llfc(658)-pc(00)': {
    'fixed-gbp-per-month': 98.23,
    'day-gbp-per-kwh': 0.00433,
    'night-gbp-per-kwh': 0.00108,
    'capacity-<=200-gbp-per-kva-per-month': 0.86,
    'capacity->200-gbp-per-kva-per-month': 0.86,
    'excess-capacity-gbp-per-kva-per-month': 0.40}}

def lafs():
    return {
        'hv': {
            'peak': 1.047,
            'winter-weekday': 1.044,
            'other': 1.037,
            'night': 1.032},
        'lv': {
            'peak': 1.096,
            'winter-weekday': 1.089,
            'other': 1.080,
            'night': 1.075}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract-rate-script]]></value>
        <value><![CDATA[20]]></value>
        <value><![CDATA[main 2000-04-01]]></value>
        <value><![CDATA[31]]></value>
        <value><![CDATA[2007-04-01T00:00Z]]></value>
        <value><![CDATA[def llfc_groups():
    return {}

def duos_tariffs():
    return {
'llfc(450)-pc(00)': {
    'fixed-gbp-per-month': 14.91,
    'day-gbp-per-kwh': 0.00508,
    'capacity-<=200-gbp-per-kva-per-month': 1.06,
    'capacity->200-gbp-per-kva-per-month': 0.93,
    'excess-capacity-gbp-per-kva-per-month': 0.42},
'llfc(453)-pc(00)': {
    'fixed-gbp-per-month': 14.91,
    'day-gbp-per-kwh': 0.00606,
    'night-gbp-per-kwh': 0.00118,
    'capacity-<=200-gbp-per-kva-per-month': 1.06,
    'capacity->200-gbp-per-kva-per-month': 0.93,
    'excess-capacity-gbp-per-kva-per-month': 0.42},
'llfc(520)-pc(00)': {
    'fixed-gbp-per-month': 51.50,
    'day-gbp-per-kwh':  0.01157},
'llfc(655)-pc(00)': {
    'fixed-gbp-per-month': 98.23,
    'day-gbp-per-kwh':   0.00379,
    'capacity-<=200-gbp-per-kva-per-month': 0.86,
    'capacity->200-gbp-per-kva-per-month': 0.86,
    'excess-capacity-gbp-per-kva-per-month': 0.40},
'llfc(658)-pc(00)': {
    'fixed-gbp-per-month': 98.23,
    'day-gbp-per-kwh': 0.00433,
    'night-gbp-per-kwh': 0.00108,
    'capacity-<=200-gbp-per-kva-per-month': 0.86,
    'capacity->200-gbp-per-kva-per-month': 0.86,
    'excess-capacity-gbp-per-kva-per-month': 0.40}}

def lafs():
    return {
        'hv': {
            'peak': 1.047,
            'winter-weekday': 1.044,
            'other': 1.037,
            'night': 1.032},
        'lv': {
            'peak': 1.096,
            'winter-weekday': 1.089,
            'other': 1.080,
            'night': 1.075}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract-rate-script]]></value>
        <value><![CDATA[20]]></value>
        <value><![CDATA[main 2000-04-01]]></value>
        <value><![CDATA[33]]></value>
        <value><![CDATA[2008-04-01T00:00Z]]></value>
        <value><![CDATA[def llfc_groups():
    return {}

def duos_tariffs():
    return {
'llfc(450)-pc(00)': {
    'fixed-gbp-per-month': 14.91,
    'day-gbp-per-kwh': 0.00508,
    'capacity-<=200-gbp-per-kva-per-month': 1.06,
    'capacity->200-gbp-per-kva-per-month': 0.93,
    'excess-capacity-gbp-per-kva-per-month': 0.42},
'llfc(453)-pc(00)': {
    'fixed-gbp-per-month': 14.91,
    'day-gbp-per-kwh': 0.00606,
    'night-gbp-per-kwh': 0.00118,
    'capacity-<=200-gbp-per-kva-per-month': 1.06,
    'capacity->200-gbp-per-kva-per-month': 0.93,
    'excess-capacity-gbp-per-kva-per-month': 0.42},
'llfc(520)-pc(00)': {
    'fixed-gbp-per-month': 51.50,
    'day-gbp-per-kwh':  0.01157},
'llfc(655)-pc(00)': {
    'fixed-gbp-per-month': 98.23,
    'day-gbp-per-kwh':   0.00379,
    'capacity-<=200-gbp-per-kva-per-month': 0.86,
    'capacity->200-gbp-per-kva-per-month': 0.86,
    'excess-capacity-gbp-per-kva-per-month': 0.40},
'llfc(658)-pc(00)': {
    'fixed-gbp-per-month': 98.23,
    'day-gbp-per-kwh': 0.00433,
    'night-gbp-per-kwh': 0.00108,
    'capacity-<=200-gbp-per-kva-per-month': 0.86,
    'capacity->200-gbp-per-kva-per-month': 0.86,
    'excess-capacity-gbp-per-kva-per-month': 0.40}}

def lafs():
    return {
        'hv': {
            'peak': 1.048,
            'winter-weekday': 1.045,
            'other': 1.038,
            'night': 1.033},
        'lv': {
            'peak': 1.095,
            'winter-weekday': 1.089,
            'other': 1.079,
            'night': 1.075}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract-rate-script]]></value>
        <value><![CDATA[20]]></value>
        <value><![CDATA[main 2000-04-01]]></value>
        <value><![CDATA[35]]></value>
        <value><![CDATA[2009-04-01T00:00Z]]></value>
        <value><![CDATA[def llfc_groups():
    return {
        '127': '127,473',
        '473': '127,473',
        '453': '453,470',
        '658': '658,476',
        '476': '658,476',
        '401': '401,475',
        '475': '401,475',
        '909': '909,477',
        '910': '910,478'}

def duos_tariffs():
    return {
        'llfc(126)-pc(03)': {
            'fixed-gbp-per-day': 0.0562,
            'day-gbp-per-kwh': 0.01645},
        'llfc(127,473)-pc(03)': {
            'fixed-gbp-per-day': 0.0808,
            'day-gbp-per-kwh': 0.01645},
        'llfc(129)-pc(04)': {
            'fixed-gbp-per-day': 0.0632,
            'day-gbp-per-kwh': 0.01737,
            'night-gbp-per-kwh': 0.00197},
        'llfc(130)-pc(04)': {
            'fixed-gbp-per-day': 0.0758,
            'day-gbp-per-kwh': 0.01737,
            'night-gbp-per-kwh': 0.00197},
        'llfc(401,475)-pc(05-08)': {
            'fixed-gbp-per-month': 18.58,
            'day-gbp-per-kwh': 0.00649,
            'night-gbp-per-kwh': 0.00126,
            'capacity-<=200-gbp-per-kva-per-month': 1.13,
            'capacity->200-gbp-per-kva-per-month': 1.00,
            'excess-capacity-gbp-per-kva-per-month': 0.45},
        'llfc(453,470)-pc(00)': {
            'fixed-gbp-per-month': 15.97,
            'day-gbp-per-kwh': 0.00649,
            'night-gbp-per-kwh': 0.00126,
            'capacity-<=200-gbp-per-kva-per-month': 1.13,
            'capacity->200-gbp-per-kva-per-month': 1.00,
            'excess-capacity-gbp-per-kva-per-month': 0.45},
        'llfc(658,476)-pc(00)': {
            'fixed-gbp-per-month': 105.18,
            'day-gbp-per-kwh': 0.00464,
            'night-gbp-per-kwh': 0.00116,
            'capacity-<=200-gbp-per-kva-per-month': 0.92,
            'capacity->200-gbp-per-kva-per-month': 0.92,
            'excess-capacity-gbp-per-kva-per-month': 0.43},
        'llfc(605)-pc(05-08)': {
            'fixed-gbp-per-month': 107.80,
            'day-gbp-per-kwh':  0.00406,
            'capacity-<=200-gbp-per-kva-per-month': 0.92,
            'capacity->200-gbp-per-kva-per-month': 0.92,
            'excess-capacity-gbp-per-kva-per-month': 0.43,},
        'llfc(450)-pc(00)': {
            'fixed-gbp-per-month': 15.97,
            'day-gbp-per-kwh':   0.00544,
            'capacity-<=200-gbp-per-kva-per-month': 1.13,
            'capacity->200-gbp-per-kva-per-month': 1.00,
            'excess-capacity-gbp-per-kva-per-month': 0.45,},
        'llfc(655)-pc(00)': {
            'fixed-gbp-per-month': 105.18,
            'day-gbp-per-kwh': 0.00406,
            'capacity-<=200-gbp-per-kva-per-month': 0.92,
            'capacity->200-gbp-per-kva-per-month': 0.92,
            'excess-capacity-gbp-per-kva-per-month': 0.43,},
        'llfc(909,477)-pc(00)': {
            'capacity-gbp-per-kva-per-month': 0.51},
        'llfc(910,478)-pc(00)': {
            'capacity-gbp-per-kva-per-month': 0.51}}

def lafs():
    return {
        'hv': {
            'peak': 1.043,
            'winter-weekday': 1.039,
            'other': 1.034,
            'night': 1.029},
        'lv': {
            'peak': 1.093,
            'winter-weekday': 1.087,
            'other': 1.078,
            'night': 1.074}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract-rate-script]]></value>
        <value><![CDATA[20]]></value>
        <value><![CDATA[main 2000-04-01]]></value>
        <value><![CDATA[37]]></value>
        <value><![CDATA[2009-10-01T00:00Z]]></value>
        <value><![CDATA[def llfc_groups():
    return {
        '127': '127,473',
        '473': '127,473',
        '453': '453,470',
        '658': '658,476',
        '476': '658,476',
        '401': '401,475',
        '475': '401,475',
        '909': '909,477',
        '910': '910,478'}

def duos_tariffs():
    return {
        'llfc(002)-pc(00)': {
            'capacity-gbp-per-kva-per-month': 0.51,
            'fixed-gbp-per-day': 0,
            'day-gbp-per-kwh': 0},
        'llfc(006)-pc(00)': {
            'capacity-gbp-per-kva-per-month': 0.51,
            'fixed-gbp-per-day': 0,
            'day-gbp-per-kwh': 0},
        'llfc(126)-pc(03)': {
            'fixed-gbp-per-day': 0.0562,
            'day-gbp-per-kwh': 0.01645},
        'llfc(127,473)-pc(03)': {
            'fixed-gbp-per-day': 0.0808,
            'day-gbp-per-kwh': 0.01645},
        'llfc(129)-pc(04)': {
            'fixed-gbp-per-day': 0.0632,
            'day-gbp-per-kwh': 0.01737,
            'night-gbp-per-kwh': 0.00197},
        'llfc(130)-pc(04)': {
            'fixed-gbp-per-day': 0.0758,
            'day-gbp-per-kwh': 0.01737,
            'night-gbp-per-kwh': 0.00197},
        'llfc(401,475)-pc(05-08)': {
            'fixed-gbp-per-month': 18.58,
            'day-gbp-per-kwh': 0.00649,
            'night-gbp-per-kwh': 0.00126,
            'capacity-<=200-gbp-per-kva-per-month': 1.13,
            'capacity->200-gbp-per-kva-per-month': 1.00,
            'excess-capacity-gbp-per-kva-per-month': 0.45},
        'llfc(453,470)-pc(00)': {
            'fixed-gbp-per-month': 15.97,
            'day-gbp-per-kwh': 0.00649,
            'night-gbp-per-kwh': 0.00126,
            'capacity-<=200-gbp-per-kva-per-month': 1.13,
            'capacity->200-gbp-per-kva-per-month': 1.00,
            'excess-capacity-gbp-per-kva-per-month': 0.45},
        'llfc(658,476)-pc(00)': {
            'fixed-gbp-per-month': 105.18,
            'day-gbp-per-kwh': 0.00464,
            'night-gbp-per-kwh': 0.00116,
            'capacity-<=200-gbp-per-kva-per-month': 0.92,
            'capacity->200-gbp-per-kva-per-month': 0.92,
            'excess-capacity-gbp-per-kva-per-month': 0.43},
        'llfc(605)-pc(05-08)': {
            'fixed-gbp-per-month': 107.80,
            'day-gbp-per-kwh':  0.00406,
            'capacity-<=200-gbp-per-kva-per-month': 0.92,
            'capacity->200-gbp-per-kva-per-month': 0.92,
            'excess-capacity-gbp-per-kva-per-month': 0.43},
        'llfc(450)-pc(00)': {
            'fixed-gbp-per-month': 15.97,
            'day-gbp-per-kwh':   0.00544,
            'capacity-<=200-gbp-per-kva-per-month': 1.13,
            'capacity->200-gbp-per-kva-per-month': 1.00,
            'excess-capacity-gbp-per-kva-per-month': 0.45},
        'llfc(655)-pc(00)': {
            'fixed-gbp-per-month': 105.18,
            'day-gbp-per-kwh': 0.00406,
            'capacity-<=200-gbp-per-kva-per-month': 0.92,
            'capacity->200-gbp-per-kva-per-month': 0.92,
            'excess-capacity-gbp-per-kva-per-month': 0.43},
        'llfc(909,477)-pc(00)': {
            'capacity-gbp-per-kva-per-month': 0.51},
        'llfc(910,478)-pc(00)': {
            'capacity-gbp-per-kva-per-month': 0.51}}

def lafs():
    return {
        'hv': {
            'peak': 1.043,
            'winter-weekday': 1.039,
            'other': 1.034,
            'night': 1.029},
        'lv': {
            'peak': 1.093,
            'winter-weekday': 1.087,
            'other': 1.078,
            'night': 1.074}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[20]]></value>
        <value><![CDATA[25]]></value>
        <value><![CDATA[main 2010-04-01]]></value>
        <value><![CDATA[2010-04-01T00:00Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[from net.sf.chellow.billing import NonCoreContract
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad import UserException
from net.sf.chellow.physical import HhStartDate
from java.lang import System

WINTER_MONTHS = [Calendar.NOVEMBER, Calendar.DECEMBER, Calendar.JANUARY, Calendar.FEBRUARY]

WEEKEND_DAYS = [Calendar.SATURDAY, Calendar.SUNDAY]

BANDS = ['red', 'amber', 'green']

KEYS = dict((band, {'kwh': 'duos-' + band + '-kwh', 'tariff-rate': band + '-gbp-per-kwh', 'bill-rate': 'duos-' + band + '-rate', 'gbp': 'duos-' + band + '-gbp'}) for band in BANDS)


def hh(summary, hh_list, data_source):
    #data_source.pw.println("hh list " + str(hh_list))
    #timing = System.currentTimeMillis()
    #data_source.pw.println("22 hh: start" + str(System.currentTimeMillis() - timing))
    bill = summary['dno-bill']

    voltage_level_code = data_source.voltage_level_code.lower()
    llfc_code = data_source.llfc_code
    if data_source.is_substation:
        vl_key = voltage_level_code + '-sub'
    else:
        vl_key = voltage_level_code + '-net'

    rate_script = contract.rateScript(summary['start-date'])

    llfc_groups = data_source.rate(rate_script, 'llfc_groups')
    if llfc_code in llfc_groups:
        llfc_group = llfc_groups[llfc_code]
    else:
        llfc_group = llfc_code
    tariff = data_source.rate(rate_script, 'tariffs')[llfc_group]
    lafs = data_source.rate(rate_script, 'lafs')[vl_key]

    for band in BANDS:
        bill[KEYS[band]['kwh']] = 0

    for hh in hh_list:
        band = 'green'
        if hh['ct-day-of-week'] not in WEEKEND_DAYS:
            if 16 < hh['ct-decimal-hour'] < 19:
                band = 'red'
            elif 9 <= hh['ct-decimal-hour'] <= 20:
                band = 'amber'

        bill[KEYS[band]['kwh']] += hh['msp-kwh']
            
    for band in BANDS:
        bill[KEYS[band]['bill-rate']] = tariff[KEYS[band]['tariff-rate']]
        bill[KEYS[band]['gbp']] = bill[KEYS[band]['bill-rate']] * bill[KEYS[band]['kwh']]

    for hh in hh_list:
        slot_name = 'other'
        if 0 < hh['ct-decimal-hour'] <= 7:
            slot_name = 'night'
        elif hh['ct-day-of-week'] not in WEEKEND_DAYS and hh['ct-month'] in WINTER_MONTHS:
            if 16 <= hh['ct-decimal-hour'] < 19:
                slot_name = 'peak'
            elif 7 < hh['ct-decimal-hour'] < 20:
                slot_name = 'winter-weekday'

        hh['laf'] = lafs[slot_name]
        hh['gsp-kwh'] = hh['laf'] * hh['msp-kwh']
        hh['gsp-kw'] = hh['gsp-kwh'] * 2

    #pw.println('hh-start-date,"' + hh['start-date'].toString() + '",msp,"' + str(hh['msp-kwh']) + '",laf,"' + str(hh['laf']) + '",gsp,"' + str(hh['gsp-kwh']) + '",slot name,"' + slot_name + '",ct decimal hour,"' + str(hh['ct-decimal-hour']) + '"')


def month(bill, whole_data, data_source):
    summary = whole_data['summary']
    timing = System.currentTimeMillis()

    rate_script = contract.rateScript(summary['finish-date'])
    llfc_groups = data_source.rate(rate_script, 'llfc_groups')
    llfc_code = data_source.llfc_code
    if llfc_code in llfc_groups:
        llfc_group = llfc_groups[llfc_code]
    else:
        llfc_group = llfc_code
    tariff = data_source.rate(rate_script, 'tariffs')[llfc_group]

    if not data_source.is_displaced:
        md_kva = 0
        for datum in whole_data['data']:
            if datum['msp-kw'] > 0 and datum['anti-msp-kw'] == 0:
                hh_kva = (datum['msp-kw'] ** 2 + max(datum['imp-msp-kvar'], datum['exp-msp-kvar']) ** 2) ** 0.5                
            else:
                hh_kva = datum['msp-kw']

            md_kva = max(md_kva, hh_kva)

        billed_avail = max(md_kva, data_source.availability)
        bill['duos-availability-agreed-kva'] = data_source.availability
        bill['duos-availability-billed-kva'] = billed_avail
        availability_rate = tariff['gbp-per-kva-per-day']
        bill['duos-availability-rate'] = availability_rate
        bill['duos-availability-gbp'] = availability_rate * billed_avail * summary['days']
        bill['duos-fixed-days'] = summary['days']
        bill['duos-fixed-rate'] = tariff['gbp-per-mpan-per-day']
        bill['duos-fixed-gbp'] = bill['duos-fixed-days'] * bill['duos-fixed-rate']


        reactive_rate = tariff['gbp-per-kvarh']
        bill['duos-reactive-rate'] = reactive_rate
        bill['duos-reactive-kvarh'] = sum(max(max(datum['imp-msp-kvarh'], datum['exp-msp-kvarh']) - (0.95 ** -2 -1) ** 0.5 * datum['msp-kwh'], 0) for datum in whole_data['data'] if datum['msp-kwh'] > 0)
        bill['duos-reactive-gbp'] = bill['duos-reactive-rate'] * bill['duos-reactive-kvarh']]]></value>
        <value><![CDATA[39]]></value>
        <value><![CDATA[def lafs():
    return {
        'lv-net': {
            'peak': 1.088,
            'winter-weekday': 1.083,
            'other': 1.077,
            'night': 1.073},
        'lv-sub': {
            'peak': 1.060,
            'winter-weekday': 1.058,
            'other': 1.056,
            'night': 1.056},
        'hv-net': {
            'peak': 1.042,
            'winter-weekday': 1.039,
            'other': 1.034,
            'night': 1.029},
        'hv-sub': {
            'peak': 1.021,
            'winter-weekday': 1.039,
            'other': 1.034,
            'night': 1.029}}

def llfc_groups():
    return {
        '001': '001,477,909',
        '006': '006,478,910',
        '127': '127,473',
        '401': '401,475',
        '453': '453,470',
        '473': '127,473',
        '475': '401,475',
        '476': '658,476',
        '477': '001,477,909',
        '478': '006,478,910',
        '658': '658,476',
        '909': '001,477,909',
        '910': '006,478,910'}

def tariffs():
    return {
        '001,477,909': {
            'description': 'LV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00754,
            'amber-gbp-per-kwh': -0.00754,
            'green-gbp-per-kwh': -0.00754,
            'gbp-per-kvarh': 0.00214},
        '002': {
            'description': 'LV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.05021,
            'amber-gbp-per-kwh': -0.01021,
            'green-gbp-per-kwh': -0.00161,
            'gbp-per-kvarh': 0.00214},
        '003': {
            'description': 'LV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00656,
            'amber-gbp-per-kwh': -0.00656,
            'green-gbp-per-kwh': -0.00656,
            'gbp-per-kvarh': 0.00199},
        '004': {
            'description': 'LV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04521,
            'amber-gbp-per-kwh': -0.00856,
            'green-gbp-per-kwh': -0.00136,
            'gbp-per-kvarh': 0.00199},
        '005': {
            'description': 'HV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00393,
            'amber-gbp-per-kwh': -0.00393,
            'green-gbp-per-kwh': -0.00393,
            'gbp-per-kvarh': 0.00169},
        '006,478,910': {
            'description': 'HV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.03226,
            'amber-gbp-per-kwh': -0.00407,
            'green-gbp-per-kwh': -0.00067,
            'gbp-per-kvarh': 0.00169},
        '007': {
            'description': 'HV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00306,
            'amber-gbp-per-kwh': -0.00306,
            'green-gbp-per-kwh': -0.00306,
            'gbp-per-kvarh': 0.00082},
        '008': {
            'description': 'HV Sub Generation Non Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.02634,
            'amber-gbp-per-kwh': -0.00295,
            'green-gbp-per-kwh': -0.00046,
            'gbp-per-kvarh': 0.00082},
        '453,470': {
            'description': 'LV HH Metered',
            'gbp-per-mpan-per-day': 0.0830,
            'gbp-per-kva-per-day': 0.0249,
            'excess-gbp-per-kva-per-day': 0.0249,
            'red-gbp-per-kwh': 0.06200,
            'amber-gbp-per-kwh': 0.00961,
            'green-gbp-per-kwh': 0.00159,
            'gbp-per-kvarh': 0.00251},
        '450': {
            'description': 'LV HH Metered',
            'gbp-per-mpan-per-day': 0.0830,
            'gbp-per-kva-per-day': 0.0249,
            'excess-gbp-per-kva-per-day': 0.0249,
            'red-gbp-per-kwh': 0.06200,
            'amber-gbp-per-kwh': 0.00961,
            'green-gbp-per-kwh': 0.00159,
            'gbp-per-kvarh': 0.00251},
        '455': {
            'description': 'LVS HH Metered',
            'gbp-per-mpan-per-day': 0.0327,
            'gbp-per-kva-per-day': 0.0484,
            'excess-gbp-per-kva-per-day': 0.0484,
            'red-gbp-per-kwh': 0.04308,
            'amber-gbp-per-kwh': 0.00469,
            'green-gbp-per-kwh': 0.00082,
            'gbp-per-kvarh': 0.00176},
        '658,476': {
            'description': 'HV HH Metered',
            'gbp-per-mpan-per-day': 0.7968,
            'gbp-per-kva-per-day': 0.0544,
            'excess-gbp-per-kva-per-day': 0.0544,
            'red-gbp-per-kwh': 0.03745,
            'amber-gbp-per-kwh': 0.00343,
            'green-gbp-per-kwh': 0.00058,
            'gbp-per-kvarh': 0.00118},
        '655': {
            'description': 'HV HH Metered',
            'gbp-per-mpan-per-day': 0.7968,
            'gbp-per-kva-per-day': 0.0544,
            'excess-gbp-per-kva-per-day': 0.0544,
            'red-gbp-per-kwh': 0.03745,
            'amber-gbp-per-kwh': 0.00343,
            'green-gbp-per-kwh': 0.00058,
            'gbp-per-kvarh': 0.00118},
        '660': {
            'description': 'HVS HH Metered',
            'gbp-per-mpan-per-day': 1.3397,
            'gbp-per-kva-per-day': 0.0347,
            'excess-gbp-per-kva-per-day': 0.0347,
            'red-gbp-per-kwh': 0.02971,
            'amber-gbp-per-kwh': 0.00222,
            'green-gbp-per-kwh': 0.00036,
            'gbp-per-kvarh': 0.00094}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract-rate-script]]></value>
        <value><![CDATA[20]]></value>
        <value><![CDATA[main 2010-04-01]]></value>
        <value><![CDATA[211]]></value>
        <value><![CDATA[2010-08-01T00:00Z]]></value>
        <value><![CDATA[def lafs():
    return {
        'lv-net': {
            'peak': 1.088,
            'winter-weekday': 1.083,
            'other': 1.077,
            'night': 1.073},
        'lv-sub': {
            'peak': 1.060,
            'winter-weekday': 1.058,
            'other': 1.056,
            'night': 1.056},
        'hv-net': {
            'peak': 1.042,
            'winter-weekday': 1.039,
            'other': 1.034,
            'night': 1.029},
        'hv-sub': {
            'peak': 1.021,
            'winter-weekday': 1.020,
            'other': 1.018,
            'night': 1.016}}

def llfc_groups():
    return {
        '001': '001,477,909',
        '006': '006,478,910',
        '127': '127,473',
        '401': '401,475',
        '453': '453,470',
        '473': '127,473',
        '475': '401,475',
        '476': '658,476',
        '477': '001,477,909',
        '478': '006,478,910',
        '658': '658,476',
        '909': '001,477,909',
        '910': '006,478,910'}

def tariffs():
    return {
        '001,477,909': {
            'description': 'LV Generation Intermittent',
            'gbp-per-mpan-per-day': 0,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00754,
            'amber-gbp-per-kwh': -0.00754,
            'green-gbp-per-kwh': -0.00754,
            'gbp-per-kvarh': 0.00214},
        '002': {
            'description': 'LV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00},
            'red-gbp-per-kwh': -0.05021,
            'amber-gbp-per-kwh': -0.01021,
            'green-gbp-per-kwh': -0.00161,
            'gbp-per-kvarh': 0.00214,
        '003': {
            'description': 'LV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00},
            'red-gbp-per-kwh': -0.00656,
            'amber-gbp-per-kwh': -0.00656,
            'green-gbp-per-kwh': -0.00656,
            'gbp-per-kvarh': 0.00199,
        '004': {
            'description': 'LV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04521,
            'amber-gbp-per-kwh': -0.00856,
            'green-gbp-per-kwh': -0.00136,
            'gbp-per-kvarh': 0.00199},
        '005': {
            'description': 'HV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00393,
            'amber-gbp-per-kwh': -0.00393,
            'green-gbp-per-kwh': -0.00393,
            'gbp-per-kvarh': 0.00169},
        '006,478,910': {
            'description': 'HV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.03226,
            'amber-gbp-per-kwh': -0.00407,
            'green-gbp-per-kwh': -0.00067,
            'gbp-per-kvarh': 0.00169},
        '007': {
            'description': 'HV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'unrestricted-gbp-per-kwh': -0.00306,
            'red-gbp-per-kwh': -0.00306,
            'amber-gbp-per-kwh': -0.00306,
            'green-gbp-per-kwh': -0.00306,
            'gbp-per-kvarh': 0.00082},
        '008': {
            'description': 'HV Sub Generation Non Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.02634,
            'amber-gbp-per-kwh': -0.00295,
            'green-gbp-per-kwh': -0.00046,
            'gbp-per-kvarh': 0.00082},
        '450': {
            'description': 'LV HH Metered',
            'gbp-per-mpan-per-day': 0.0830,
            'gbp-per-kva-per-day': 0.0249,
            'excess-gbp-per-kva-per-day': 0.0249,
            'red-gbp-per-kwh': 0.06200,
            'amber-gbp-per-kwh': 0.00961,
            'green-gbp-per-kwh': 0.00159,
            'gbp-per-kvarh': 0.00251},
        '453,470': {
            'description': 'LV HH Metered',
            'gbp-per-mpan-per-day': 0.0830,
            'gbp-per-kva-per-day': 0.0249,
            'excess-gbp-per-kva-per-day': 0.0249,
            'red-gbp-per-kwh': 0.06200,
            'amber-gbp-per-kwh': 0.00961,
            'green-gbp-per-kwh': 0.00159,
            'gbp-per-kvarh': 0.00251},
        '455': {
            'description': 'LVS HH Metered',
            'gbp-per-mpan-per-day': 0.0327,
            'gbp-per-kva-per-day': 0.0484,
            'excess-gbp-per-kva-per-day': 0.0484,
            'red-gbp-per-kwh': 0.04308,
            'amber-gbp-per-kwh': 0.00469,
            'green-gbp-per-kwh': 0.00082,
            'gbp-per-kvarh': 0.00176},
        '658,476': {
            'description': 'HV HH Metered',
            'gbp-per-mpan-per-day': 0.7968,
            'gbp-per-kva-per-day': 0.0544,
            'excess-gbp-per-kva-per-day': 0.0544,
            'red-gbp-per-kwh': 0.03745,
            'amber-gbp-per-kwh': 0.00343,
            'green-gbp-per-kwh': 0.00058,
            'gbp-per-kvarh': 0.00118},
        '655': {
            'description': 'HV HH Metered',
            'gbp-per-mpan-per-day': 0.7968,
            'gbp-per-kva-per-day': 0.0544,
            'excess-gbp-per-kva-per-day': 0.0544,
            'red-gbp-per-kwh': 0.03745,
            'amber-gbp-per-kwh': 0.00343,
            'green-gbp-per-kwh': 0.00058,
            'gbp-per-kvarh': 0.00118},
        '660': {
            'description': 'HVS HH Metered',
            'gbp-per-mpan-per-day': 1.3397,
            'gbp-per-kva-per-day': 0.0347,
            'excess-gbp-per-kva-per-day': 0.0347,
            'red-gbp-per-kwh': 0.02971,
            'amber-gbp-per-kwh': 0.00222,
            'green-gbp-per-kwh': 0.00036,
            'gbp-per-kvarh': 0.00094}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract-rate-script]]></value>
        <value><![CDATA[20]]></value>
        <value><![CDATA[main 2010-04-01]]></value>
        <value><![CDATA[245]]></value>
        <value><![CDATA[2011-04-01T00:00Z]]></value>
        <value><![CDATA[def lafs():
    return {
        'lv-net': {
            'peak': 1.089,
            'winter-weekday': 1.085,
            'other': 1.078,
            'night': 1.074},
        'lv-sub': {
            'peak': 1.061,
            'winter-weekday': 1.059,
            'other': 1.056,
            'night': 1.057},
        'hv-net': {
            'peak': 1.042,
            'winter-weekday': 1.040,
            'other': 1.035,
            'night': 1.029},
        'hv-sub': {
            'peak': 1.021,
            'winter-weekday': 1.020,
            'other': 1.018,
            'night': 1.017}}

def llfc_groups():
    return {
        '001': '001,477,909',
        '006': '006,478,910',
        '127': '127,473',
        '401': '401,475',
        '453': '453,470',
        '473': '127,473',
        '475': '401,475',
        '476': '658,476',
        '477': '001,477,909',
        '478': '006,478,910',
        '658': '658,476',
        '909': '001,477,909',
        '910': '006,478,910'}

def tariffs():
    return {
        '001,477,909': {
            'description': 'LV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00671,
            'amber-gbp-per-kwh': -0.00671,
            'green-gbp-per-kwh': -0.00671,
            'gbp-per-kvarh': 0.00192},
        '002': {
            'description': 'LV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04469,
            'amber-gbp-per-kwh': -0.00908,
            'green-gbp-per-kwh': -0.00144,
            'gbp-per-kvarh': 0.00192},
        '003': {
            'description': 'LV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00584,
            'amber-gbp-per-kwh': -0.00584,
            'green-gbp-per-kwh': -0.00584,
            'gbp-per-kvarh': 0.00178},
        '004': {
            'description': 'LV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04026,
            'amber-gbp-per-kwh': -0.00761,
            'green-gbp-per-kwh': -0.00121,
            'gbp-per-kvarh': 0.00178},
        '005': {
            'description': 'HV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9881,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00350,
            'amber-gbp-per-kwh': -0.00350,
            'green-gbp-per-kwh': -0.00350,
            'gbp-per-kvarh': 0.00151},
        '006,478,910': {
            'description': 'HV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.02871,
            'amber-gbp-per-kwh': -0.00361,
            'green-gbp-per-kwh': -0.00059,
            'gbp-per-kvarh': 0.00151},
        '007': {
            'description': 'HV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9881,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00272,
            'amber-gbp-per-kwh': -0.00272,
            'green-gbp-per-kwh': -0.00272,
            'gbp-per-kvarh': 0.00073},
        '008': {
            'description': 'HV Sub Generation Non Intermittent',
            'gbp-per-mpan-per-day': 0.9881,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.02346,
            'amber-gbp-per-kwh': -0.00261,
            'green-gbp-per-kwh': -0.00041,
            'gbp-per-kvarh': 0.00073},
        '453,470': {
            'description': 'LV HH Metered',
            'gbp-per-mpan-per-day': 0.0831,
            'gbp-per-kva-per-day': 0.0230,
            'excess-gbp-per-kva-per-day': 0.0230,
            'red-gbp-per-kwh': 0.06,
            'amber-gbp-per-kwh': 0.00883,
            'green-gbp-per-kwh': 0.00149,
            'gbp-per-kvarh': 0.00235},
        '455': {
            'description': 'LVS HH Metered',
            'gbp-per-mpan-per-day': 0.0328,
            'gbp-per-kva-per-day': 0.0433,
            'excess-gbp-per-kva-per-day': 0.0433,
            'red-gbp-per-kwh': 0.04672,
            'amber-gbp-per-kwh': 0.00482,
            'green-gbp-per-kwh': 0.00086,
            'gbp-per-kvarh': 0.00168},
        '658,476': {
            'description': 'HV HH Metered',
            'gbp-per-mpan-per-day': 0.7978,
            'gbp-per-kva-per-day': 0.0485,
            'excess-gbp-per-kva-per-day': 0.0485,
            'red-gbp-per-kwh': 0.03745,
            'amber-gbp-per-kwh': 0.00325,
            'green-gbp-per-kwh': 0.00057,
            'gbp-per-kvarh': 0.00116},
        '660': {
            'description': 'HVS HH Metered',
            'gbp-per-mpan-per-day': 1.3414,
            'gbp-per-kva-per-day': 0.0306,
            'excess-gbp-per-kva-per-day': 0.0306,
            'red-gbp-per-kwh': 0.03417,
            'amber-gbp-per-kwh': 0.00244,
            'green-gbp-per-kwh': 0.00042,
            'gbp-per-kvarh': 0.00094}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[21]]></value>
        <value><![CDATA[27]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
        <value><![CDATA[41]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[22]]></value>
        <value><![CDATA[29]]></value>
        <value><![CDATA[main 2000-04-01]]></value>
        <value><![CDATA[2000-01-01T00:00Z]]></value>
        <value><![CDATA[2010-03-31T23:30Z]]></value>
        <value><![CDATA[from net.sf.chellow.billing import NonCoreContract
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad import UserException
from net.sf.chellow.physical import HhStartDate
from java.lang import System


def get_rate_script(date):
    return contract.rateScripts(date, date)[0]


def hh(summary, hh_list, data_source):
    #timing = System.currentTimeMillis()
    #data_source.pw.println("22 hh: start" + str(System.currentTimeMillis() - timing))
    bill = summary['dno-bill']

    voltage_level_code = data_source.voltage_level_code
    is_substation = data_source.is_substation
    llfc_code = data_source.llfc_code

    bill['duos-night-kwh'] = 0
    bill['duos-night-gbp'] = 0
    bill['duos-day-kwh'] = 0
    bill['duos-day-gbp'] = 0

    if voltage_level_code == 'HV':
        substation = ''
    else:
        if is_substation:
            substation = '-sub'
        else:
            substation = '-net'
    vl_key = voltage_level_code.lower() + substation

    rate_script = contract.rateScript(summary['start-date'])
    rate_script_finish = rate_script.getFinishDate()
    tariff = data_source.rate(rate_script, 'tariffs')[llfc_code]
    lafs = data_source.rate(rate_script, 'lafs')[vl_key]

    if data_source.is_import:
        bill['duos-night-kwh'] = 0
        bill['duos-night-gbp'] = 0
        bill['duos-day-kwh'] = 0
        bill['duos-day-gbp'] = 0
        day_rate = tariff['day-gbp-per-kwh']
        night_rate = tariff['night-gbp-per-kwh']
        for hh in hh_list:
            if 6 < hh['ct-decimal-hour'] <= 23:
                bill['duos-day-kwh'] += hh['msp-kwh']
                bill['duos-day-gbp'] += hh['msp-kwh'] * day_rate
            else:
                bill['duos-night-kwh'] += hh['msp-kwh']
                bill['duos-night-gbp'] += hh['msp-kwh'] * night_rate

    for hh in hh_list:
        if 23 < hh['ct-decimal-hour'] <= 6:
            slot_name = 'night'
        elif 7 > hh['ct-day-of-week'] > 1 and (hh['ct-month'] > Calendar.OCTOBER or hh['ct-month'] < Calendar.MARCH):
            if 15.5 < hh['ct-decimal-hour'] < 18:
                slot_name = 'winter-weekday-peak'
            elif 6 < hh['ct-decimal-hour'] < 15:
                slot_name = 'winter-weekday-day'
            else:
                slot_name = 'other'
        else:
            slot_name = 'other'
        hh['laf'] = lafs[slot_name]
        hh['gsp-kwh'] = hh['laf'] * hh['msp-kwh']
        hh['gsp-kw'] = hh['gsp-kwh'] * 2
        #pw.println('hh-start-date,"' + hh['start-date'].toString() + '",msp,"' + str(hh['msp-kwh']) + '",laf,"' + str(hh['laf']) + '",gsp,"' + str(hh['gsp-kwh']) + '",slot name,"' + slot_name + '",ct decimal hour,"' + str(hh['ct-decimal-hour']) + '"')
    #data_source.pw.println("22 hh: finish " + str(System.currentTimeMillis() - timing))


def month(bill, whole_data, data_source):
    summary = whole_data['summary']
    timing = System.currentTimeMillis()

    rate_script = contract.rateScript(summary['finish-date'])
    tariff = data_source.rate(rate_script, 'tariffs')[data_source.llfc_code]
    reactive_rate = tariff['reactive-gbp-per-kvarh']
    bill['duos-reactive-rate'] = reactive_rate

    utc_cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
    utc_cal.setTime(summary['finish-date'].getDate())
    utc_cal.add(Calendar.MINUTE, -1)
    days_in_month = utc_cal.get(Calendar.DAY_OF_MONTH)
    
    if not data_source.is_displaced:
        md_kva = max((datum['msp-kw'] ** 2 + datum['imp-msp-kvar'] ** 2) ** 0.5 for datum in whole_data['data'])

        bill.setdefault('duos-availability-gbp', 0)

        billed_avail = max(md_kva, data_source.availability)
        bill['duos-availability-agreed-kva'] = data_source.availability
        bill['duos-availability-billed-kva'] = billed_avail

        availability_rate = tariff['capacity-gbp-per-kva-per-day']
        bill['duos-availability-rate'] = availability_rate

        bill['duos-availability-gbp'] += availability_rate * billed_avail * days_in_month
    
    bill.setdefault('duos-reactive-gbp', 0)

    month_imp_kvarh = summary['sum-imp-msp-kvarh']
    month_kwh = summary['sum-msp-kwh']

    if month_kwh is None:
        month_kwh = 0

    bill['duos-reactive-gbp'] += max(0, month_imp_kvarh - month_kwh / 2) * reactive_rate]]></value>
        <value><![CDATA[43]]></value>
        <value><![CDATA[def lafs():
    return {
        'hv': {
            'winter-weekday-peak': 1.057,
            'winter-weekday-day': 1.051,
            'night': 1.040,
            'other': 1.045},
        'lv-sub': {
            'winter-weekday-peak': 1.068,
            'winter-weekday-day': 1.064,
            'night': 1.059,
            'other': 1.060},
        'lv-net': {
            'winter-weekday-peak': 1.074,
            'winter-weekday-day': 1.069,
            'night': 1.064,
            'other': 1.065}}


def tariffs():
    return {
        '510': {
            'capacity-gbp-per-kva-per-day': 0.0372,
            'day-gbp-per-kwh': 0.0047,
            'night-gbp-per-kwh': 0.0014,
            'reactive-gbp-per-kvarh': 0.0023},
        '520': {
            'capacity-gbp-per-kva-per-day': 0.0372,
            'day-gbp-per-kwh': 0.0047,
            'night-gbp-per-kwh': 0.0014,
            'reactive-gbp-per-kvarh': 0.0023},
        '540': {
            'capacity-gbp-per-kva-per-day': 0.0352,
            'day-gbp-per-kwh': 0.0080,
            'night-gbp-per-kwh': 0.0028,
            'reactive-gbp-per-kvarh': 0.0033},
        '550': {
            'capacity-gbp-per-kva-per-day': 0.0352,
            'day-gbp-per-kwh': 0.0080,
            'night-gbp-per-kwh': 0.0039,
            'reactive-gbp-per-kvarh': 0.0033},
        '570': {
            'capacity-gbp-per-kva-per-day': 0.0332,
            'day-gbp-per-kwh': 0.0121,
            'night-gbp-per-kwh': 0.0040,
            'reactive-gbp-per-kvarh': 0.0042},
        '580': {
            'capacity-gbp-per-kva-per-day': 0.0332,
            'day-gbp-per-kwh': 0.0121,
            'night-gbp-per-kwh': 0.0040,
            'reactive-gbp-per-kvarh': 0.0042}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract-rate-script]]></value>
        <value><![CDATA[22]]></value>
        <value><![CDATA[main 2000-04-01]]></value>
        <value><![CDATA[45]]></value>
        <value><![CDATA[2007-04-01T00:00Z]]></value>
        <value><![CDATA[def lafs():
    return {
        'hv': {
            'winter-weekday-peak': 1.057,
            'winter-weekday-day': 1.051,
            'night': 1.040,
            'other': 1.045},
        'lv-sub': {
            'winter-weekday-peak': 1.068,
            'winter-weekday-day': 1.064,
            'night': 1.059,
            'other': 1.060},
        'lv-net': {
            'winter-weekday-peak': 1.074,
            'winter-weekday-day': 1.069,
            'night': 1.064,
            'other': 1.065}}


def tariffs():
    return {
        '510': {
            'capacity-gbp-per-kva-per-day': 0.0372,
            'day-gbp-per-kwh': 0.0047,
            'night-gbp-per-kwh': 0.0014,
            'reactive-gbp-per-kvarh': 0.0023},
        '520': {
            'capacity-gbp-per-kva-per-day': 0.0372,
            'day-gbp-per-kwh': 0.0047,
            'night-gbp-per-kwh': 0.0014,
            'reactive-gbp-per-kvarh': 0.0023},
        '540': {
            'capacity-gbp-per-kva-per-day': 0.0352,
            'day-gbp-per-kwh': 0.0080,
            'night-gbp-per-kwh': 0.0028,
            'reactive-gbp-per-kvarh': 0.0033},
        '550': {
            'capacity-gbp-per-kva-per-day': 0.0352,
            'day-gbp-per-kwh': 0.0080,
            'night-gbp-per-kwh': 0.0039,
            'reactive-gbp-per-kvarh': 0.0033},
        '570': {
            'capacity-gbp-per-kva-per-day': 0.0332,
            'day-gbp-per-kwh': 0.0121,
            'night-gbp-per-kwh': 0.0040,
            'reactive-gbp-per-kvarh': 0.0042},
        '580': {
            'capacity-gbp-per-kva-per-day': 0.0332,
            'day-gbp-per-kwh': 0.0121,
            'night-gbp-per-kwh': 0.0040,
            'reactive-gbp-per-kvarh': 0.0042}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract-rate-script]]></value>
        <value><![CDATA[22]]></value>
        <value><![CDATA[main 2000-04-01]]></value>
        <value><![CDATA[47]]></value>
        <value><![CDATA[2008-04-01T00:00Z]]></value>
        <value><![CDATA[def lafs():
    return {
        'hv': {
            'winter-weekday-peak': 1.058,
            'winter-weekday-day': 1.051,
            'night': 1.041,
            'other': 1.046},
        'lv-sub': {
            'winter-weekday-peak': 1.070,
            'winter-weekday-day': 1.066,
            'night': 1.060,
            'other': 1.062},
        'lv-net': {
            'winter-weekday-peak': 1.079,
            'winter-weekday-day': 1.073,
            'night': 1.067,
            'other': 1.069}}

def tariffs():
    return {
        '510': {
            'capacity-gbp-per-kva-per-day': 0.0378,
            'day-gbp-per-kwh': 0.0039,
            'night-gbp-per-kwh': 0.0012,
            'reactive-gbp-per-kvarh': 0.0023},
        '520': {
            'capacity-gbp-per-kva-per-day': 0.0378,
            'day-gbp-per-kwh': 0.0039,
            'night-gbp-per-kwh': 0.0012,
            'reactive-gbp-per-kvarh': 0.0023},
        '521': {
            'capacity-gbp-per-kva-per-day': 0.0174,
            'day-gbp-per-kwh': 0,
            'night-gbp-per-kwh': 0},
        '540': {
            'capacity-gbp-per-kva-per-day': 0.0368,
            'day-gbp-per-kwh': 0.0073,
            'night-gbp-per-kwh': 0.0026,
            'reactive-gbp-per-kvarh': 0.0033},
        '550': {
            'capacity-gbp-per-kva-per-day': 0.0368,
            'day-gbp-per-kwh': 0.0073,
            'night-gbp-per-kwh': 0.0026,
            'reactive-gbp-per-kvarh': 0.0033},
        '570': {
            'capacity-gbp-per-kva-per-day': 0.0358,
            'day-gbp-per-kwh': 0.0115,
            'night-gbp-per-kwh': 0.0038,
            'reactive-gbp-per-kvarh': 0.0042},
        '580': {
            'capacity-gbp-per-kva-per-day': 0.0358,
            'day-gbp-per-kwh': 0.0115,
            'night-gbp-per-kwh': 0.0038,
            'reactive-gbp-per-kvarh': 0.0042},
        '581': {
            'capacity-gbp-per-kva-per-day': 0.0167,
            'day-gbp-per-kwh': 0,
            'night-gbp-per-kwh': 0}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract-rate-script]]></value>
        <value><![CDATA[22]]></value>
        <value><![CDATA[main 2000-04-01]]></value>
        <value><![CDATA[49]]></value>
        <value><![CDATA[2009-04-01T00:00Z]]></value>
        <value><![CDATA[def lafs():
    return {
        'hv': {
            'winter-weekday-peak': 1.058,
            'winter-weekday-day': 1.051,
            'night': 1.041,
            'other': 1.046},
        'lv-sub': {
            'winter-weekday-peak': 1.070,
            'winter-weekday-day': 1.066,
            'night': 1.060,
            'other': 1.062},
        'lv-net': {
            'winter-weekday-peak': 1.079,
            'winter-weekday-day': 1.073,
            'night': 1.067,
            'other': 1.069}}

def winter_weekday_peak_hv():
    return 1.058

def winter_weekday_day_hv():
    return 1.051

def night_hv():
    return 1.041

def other_hv():
    return 1.046

def winter_weekday_peak_lv_sub():
    return 1.070

def winter_weekday_day_lv_sub():
    return 1.066

def night_lv_sub():
    return 1.060

def other_lv_sub():
    return 1.062

def winter_weekday_peak_lv_net():
    return 1.079

def winter_weekday_day_lv_net():
    return 1.073

def night_lv_net():
    return 1.067

def other_lv_net():
    return 1.069

def duos_day_hv_gbp_per_kwh():
    return 0.0047

def duos_night_hv_gbp_per_kwh():
    return 0.0014

def standing_hv_gbp_per_month():
    return 0

def availability_hv_gbp_per_kva_per_day():
    return 0.0387

def duos_reactive_hv_gbp_per_kvarh():
    return 0.0023

def duos_day_lv_net_gbp_per_kwh():
    return 0.0127

def duos_night_lv_net_gbp_per_kwh():
    return 0.0045

def standing_lv_net_gbp_per_month():
    return 0

def availability_lv_net_gbp_per_kva_per_day():
    return 0.039

def duos_reactive_lv_net_gbp_per_kvarh():
    return 0.0042

def duos_day_lv_sub_gbp_per_kwh():
    return 0.0081

def duos_night_lv_sub_gbp_per_kwh():
    return 0.0028

def standing_lv_sub_gbp_per_month():
    return 0

def availability_lv_sub_gbp_per_kva_per_day():
    return 0.0389

def duos_reactive_lv_sub_gbp_per_kvarh():
    return 0.0033

def tariffs():
    return {
        '510': {
            'capacity-gbp-per-kva-per-day': 0.038700,
            'day-gbp-per-kwh': 0.004700,
            'night-gbp-per-kwh': 0.001400,
            'reactive-gbp-per-kvarh': 0.002300},
        '520': {
            'capacity-gbp-per-kva-per-day': 0.038700,
            'day-gbp-per-kwh': 0.004700,
            'night-gbp-per-kwh': 0.001400,
            'reactive-gbp-per-kvarh': 0.002300},
        '540': {
            'capacity-gbp-per-kva-per-day': 0.038900,
            'day-gbp-per-kwh': 0.008100,
            'night-gbp-per-kwh': 0.002800,
            'reactive-gbp-per-kvarh': 0.003300},
        '550': {
            'capacity-gbp-per-kva-per-day': 0.038900,
            'day-gbp-per-kwh': 0.008100,
            'night-gbp-per-kwh': 0.002800,
            'reactive-gbp-per-kvarh': 0.003300},
        '570': {
            'capacity-gbp-per-kva-per-day': 0.039000,
            'day-gbp-per-kwh': 0.012700,
            'night-gbp-per-kwh': 0.004500,
            'reactive-gbp-per-kvarh': 0.004200},
        '580': {
            'capacity-gbp-per-kva-per-day': 0.039000,
            'day-gbp-per-kwh': 0.012700,
            'night-gbp-per-kwh': 0.004500,
            'reactive-gbp-per-kvarh': 0.004200}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract-rate-script]]></value>
        <value><![CDATA[22]]></value>
        <value><![CDATA[main 2000-04-01]]></value>
        <value><![CDATA[51]]></value>
        <value><![CDATA[2009-08-01T00:00Z]]></value>
        <value><![CDATA[def lafs():
    return {
        'hv': {
            'winter-weekday-peak': 1.058,
            'winter-weekday-day': 1.051,
            'night': 1.041,
            'other': 1.046},
        'lv-sub': {
            'winter-weekday-peak': 1.070,
            'winter-weekday-day': 1.066,
            'night': 1.060,
            'other': 1.062},
        'lv-net': {
            'winter-weekday-peak': 1.079,
            'winter-weekday-day': 1.073,
            'night': 1.067,
            'other': 1.069}}

def tariffs():
    return {
        '110': {
            'day-gbp-per-kwh': 0.019400,
            'night-gbp-per-kwh': 0.019400},
        '210': {
            'day-gbp-per-kwh': 0.026700,
            'night-gbp-per-kwh': 0.004800},
        '510': {
            'capacity-gbp-per-kva-per-day': 0.038700,
            'day-gbp-per-kwh': 0.004700,
            'night-gbp-per-kwh': 0.001400,
            'reactive-gbp-per-kvarh': 0.002300},
        '520': {
            'capacity-gbp-per-kva-per-day': 0.038700,
            'day-gbp-per-kwh': 0.004700,
            'night-gbp-per-kwh': 0.001400,
            'reactive-gbp-per-kvarh': 0.002300},
        '521': {
            'capacity-gbp-per-kva-per-day': 0.018600},
        '524': {
            'capacity-gbp-per-kva-per-day': 0.018600},
        '526': {
            'capacity-gbp-per-kva-per-day': 0.018600},
        '527': {
            'capacity-gbp-per-kva-per-day': 0.018600},
        '540': {
            'capacity-gbp-per-kva-per-day': 0.038900,
            'day-gbp-per-kwh': 0.008100,
            'night-gbp-per-kwh': 0.002800,
            'reactive-gbp-per-kvarh': 0.003300},
        '550': {
            'capacity-gbp-per-kva-per-day': 0.038900,
            'day-gbp-per-kwh': 0.008100,
            'night-gbp-per-kwh': 0.002800,
            'reactive-gbp-per-kvarh': 0.003300},
        '551': {
            'capacity-gbp-per-kva-per-day': 0.018200},
        '570': {
            'capacity-gbp-per-kva-per-day': 0.039000,
            'day-gbp-per-kwh': 0.012700,
            'night-gbp-per-kwh': 0.004500,
            'reactive-gbp-per-kvarh': 0.004200},
        '580': {
            'capacity-gbp-per-kva-per-day': 0.039000,
            'day-gbp-per-kwh': 0.012700,
            'night-gbp-per-kwh': 0.004500,
            'reactive-gbp-per-kvarh': 0.004200}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[22]]></value>
        <value><![CDATA[31]]></value>
        <value><![CDATA[main 2010-04-01]]></value>
        <value><![CDATA[2010-04-01T00:00Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[from net.sf.chellow.billing import NonCoreContract
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad import UserException
from net.sf.chellow.physical import HhStartDate
from java.lang import System

WINTER_MONTHS = [Calendar.NOVEMBER, Calendar.DECEMBER, Calendar.JANUARY, Calendar.FEBRUARY]

WEEKEND_DAYS = [Calendar.SATURDAY, Calendar.SUNDAY]

BANDS = ['red', 'amber', 'green']

KEYS = dict((band, {'kwh': 'duos-' + band + '-kwh', 'tariff-rate': band + '-gbp-per-kwh', 'bill-rate': 'duos-' + band + '-rate', 'gbp': 'duos-' + band + '-gbp'}) for band in BANDS)


def hh(summary, hh_list, data_source):
    #timing = System.currentTimeMillis()
    #data_source.pw.println("sum msp " + str(sum(datum['msp-kwh'] for datum in hh_list)))
    bill = summary['dno-bill']

    voltage_level_code = data_source.voltage_level_code
    is_substation = data_source.is_substation
    llfc_code = data_source.llfc_code

    if voltage_level_code == 'HV':
        substation = ''
    else:
        if is_substation:
            substation = '-sub'
        else:
            substation = '-net'
    vl_key = voltage_level_code.lower() + substation
    rate_script = contract.rateScript(summary['start-date'])
    tariff = data_source.rate(rate_script, 'tariffs')[llfc_code]
    lafs = data_source.rate(rate_script, 'lafs')[vl_key]

    for band in BANDS:
        bill[KEYS[band]['kwh']] = 0

    for hh in hh_list:
        band = 'green'
        if hh['ct-day-of-week'] in [Calendar.SATURDAY, Calendar.SUNDAY]:
            if 16 < hh['ct-decimal-hour'] <= 19:
                band = 'amber'
        else:
            if 17 <= hh['ct-decimal-hour'] < 19:
                band = 'red'
            elif 7 < hh['ct-decimal-hour'] <= 21:
                band = 'amber'
        bill[KEYS[band]['kwh']] += hh['msp-kwh']

    for band in BANDS:
        bill[KEYS[band]['bill-rate']] = tariff[KEYS[band]['tariff-rate']]
        bill[KEYS[band]['gbp']] = bill[KEYS[band]['bill-rate']] * bill[KEYS[band]['kwh']]
        #data_source.pw.println(band + " sum msp " + str(bill[keys[band]['kwh']]))

    for hh in hh_list:
        slot_name = 'other'
        if 23 < hh['ct-decimal-hour'] or hh['ct-decimal-hour'] <= 6:
            slot_name = 'night'
        elif hh['ct-day-of-week'] not in WEEKEND_DAYS and hh['ct-month'] in WINTER_MONTHS:
            if 16 <= hh['ct-decimal-hour'] < 19:
                slot_name = 'winter-weekday-peak'
            elif hh['ct-decimal-hour'] < 16:
                slot_name = 'winter-weekday-day'

        hh['laf'] = lafs[slot_name]
        hh['gsp-kwh'] = hh['laf'] * hh['msp-kwh']
        hh['gsp-kw'] = hh['gsp-kwh'] * 2

    #pw.println('hh-start-date,"' + hh['start-date'].toString() + '",msp,"' + str(hh['msp-kwh']) + '",laf,"' + str(hh['laf']) + '",gsp,"' + str(hh['gsp-kwh']) + '",slot name,"' + slot_name + '",ct decimal hour,"' + str(hh['ct-decimal-hour']) + '"')
    #data_source.pw.println("hh " + str(hh_list))


def month(bill, whole_data, data_source):
    summary = whole_data['summary']
    timing = System.currentTimeMillis()

    rate_script = contract.rateScript(summary['finish-date'])
    tariff = data_source.rate(rate_script, 'tariffs')[data_source.llfc_code]
    if not data_source.is_displaced:
        bill['duos-fixed-days'] = summary['days']
        bill['duos-fixed-rate'] = tariff['gbp-per-mpan-per-day']
        bill['duos-fixed-gbp'] = bill['duos-fixed-days'] * bill['duos-fixed-rate']

        if 'gbp-per-kva-per-day' in tariff:
            md_kva = 0
            for datum in whole_data['data']:
                if datum['msp-kw'] > 0 and datum['anti-msp-kw'] == 0:
                    hh_kva = (datum['msp-kw'] ** 2 + max(datum['imp-msp-kvar'], datum['exp-msp-kvar']) ** 2) ** 0.5
                else:
                    hh_kva = datum['msp-kw']
                md_kva = max(md_kva, hh_kva)

            billed_avail = max(md_kva, data_source.availability)
            bill['duos-availability-agreed-kva'] = data_source.availability
            bill['duos-availability-billed-kva'] = billed_avail
            availability_rate = tariff['gbp-per-kva-per-day']
            bill['duos-availability-rate'] = availability_rate
            bill['duos-availability-gbp'] = availability_rate * billed_avail * summary['days']

        reactive_rate = tariff['gbp-per-kvarh']
        bill['duos-reactive-rate'] = reactive_rate
        bill['duos-reactive-kvarh'] = sum(max(max(datum['imp-msp-kvarh'], datum['exp-msp-kvarh']) - (0.95 ** -2 -1) ** 0.5 * datum['msp-kwh'], 0) for datum in whole_data['data'] if datum['msp-kwh'] > 0)
        bill['duos-reactive-gbp'] = bill['duos-reactive-rate'] * bill['duos-reactive-kvarh']]]></value>
        <value><![CDATA[53]]></value>
        <value><![CDATA[def lafs():
    return {
        'lv-net': {
            'winter-weekday-peak': 1.078,
            'winter-weekday-day': 1.072,
            'night': 1.067,
            'other': 1.069},
        'lv-sub': {
            'winter-weekday-peak': 1.070,
            'winter-weekday-day': 1.066,
            'night': 1.060,
            'other': 1.062},
        'hv': {
            'winter-weekday-peak': 1.058,
            'winter-weekday-day': 1.051,
            'night': 1.040,
            'other': 1.046}}

def tariffs():
    return {
        '510': {
            'description': 'High Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.6338,
            'gbp-per-kva-per-day': 0.0163,
            'excess-gbp-per-kva-per-day': 0.0163,
            'red-gbp-per-kwh': 0.11678,
            'amber-gbp-per-kwh': 0.0003,
            'green-gbp-per-kwh': 0.00052,
            'gbp-per-kvarh': 0.00202},
        '520': {
            'description': 'High Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.6338,
            'gbp-per-kva-per-day': 0.0163,
            'excess-gbp-per-kva-per-day': 0.0163,
            'red-gbp-per-kwh': 0.11678,
            'amber-gbp-per-kwh': 0.0003,
            'green-gbp-per-kwh': 0.00052,
            'gbp-per-kvarh': 0.00202},
        '521': {
            'description': 'HV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.2608,
            'gbp-per-kva-per-day': 0.0163,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00347,
            'amber-gbp-per-kwh': -0.00347,
            'green-gbp-per-kwh': -0.00347,
            'gbp-per-kvarh': 0.00106},
        '522': {
            'description': 'High Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.6338,
            'gbp-per-kva-per-day': 0.0119,
            'excess-gbp-per-kva-per-day': 0.0119,
            'red-gbp-per-kwh': 0.11109,
            'amber-gbp-per-kwh': 0.00013,
            'green-gbp-per-kwh': 0.00041,
            'gbp-per-kvarh': 0.00191},
        '523': {
            'description': 'HV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.2608,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00323,
            'amber-gbp-per-kwh': -0.00323,
            'green-gbp-per-kwh': -0.00323,
            'gbp-per-kvarh': 0.00082},
        '524': {
            'description': 'HV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.2608,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04964,
            'amber-gbp-per-kwh': -0.00045,
            'green-gbp-per-kwh': -0.00061,
            'gbp-per-kvarh': 0.00106},
        '525': {
            'description': 'HV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.2608,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04697,
            'amber-gbp-per-kwh': -0.00034,
            'green-gbp-per-kwh': -0.00054,
            'gbp-per-kvarh': 0.00082},
        '526': {
            'description': 'LV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.07064,
            'amber-gbp-per-kwh': -0.00138,
            'green-gbp-per-kwh': -0.00118,
            'gbp-per-kvarh': 0.00147},
        '527': {
            'description': 'LV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.07546,
            'amber-gbp-per-kwh': -0.0161,
            'green-gbp-per-kwh': -0.0132,
            'gbp-per-kvarh': 0.00169},
        '540': {
            'description': 'Low Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.0526,
            'gbp-per-kva-per-day': 0.0231,
            'excess-gbp-per-kva-per-day': 0.0231,
            'red-gbp-per-kwh': 0.14307,
            'amber-gbp-per-kwh': 0.00084,
            'green-gbp-per-kwh': 0.00091,
            'gbp-per-kvarh': 0.00265},
        '550': {
            'description': 'Low Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.0526,
            'gbp-per-kva-per-day': 0.0231,
            'excess-gbp-per-kva-per-day': 0.0231,
            'red-gbp-per-kwh': 0.14307,
            'amber-gbp-per-kwh': 0.00084,
            'green-gbp-per-kwh': 0.00091,
            'gbp-per-kvarh': 0.00265},
        '551': {
            'description': 'LV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00540,
            'amber-gbp-per-kwh': -0.00540,
            'green-gbp-per-kwh': -0.00540,
            'gbp-per-kvarh': 0.00147},
        '570': {
            'description': 'Low Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.0694,
            'gbp-per-kva-per-day': 0.021,
            'excess-gbp-per-kva-per-day': 0.021,
            'red-gbp-per-kwh': 0.16146,
            'amber-gbp-per-kwh': 0.00147,
            'green-gbp-per-kwh': 0.0013,
            'gbp-per-kvarh': 0.00326},
        '580': {
            'description': 'Low Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.0694,
            'gbp-per-kva-per-day': 0.021,
            'excess-gbp-per-kva-per-day': 0.021,
            'red-gbp-per-kwh': 0.16146,
            'amber-gbp-per-kwh': 0.00147,
            'green-gbp-per-kwh': 0.0013,
            'gbp-per-kvarh': 0.00326},
        '581': {
            'description': 'LV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.586,
            'amber-gbp-per-kwh': -0.586,
            'green-gbp-per-kwh': -0.586,
            'gbp-per-kvarh': 0.00169}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract-rate-script]]></value>
        <value><![CDATA[22]]></value>
        <value><![CDATA[main 2010-04-01]]></value>
        <value><![CDATA[247]]></value>
        <value><![CDATA[2011-04-01T00:00Z]]></value>
        <value><![CDATA[def lafs():
    return {
        'lv-net': {
            'winter-weekday-peak': 1.087,
            'winter-weekday-day': 1.080,
            'night': 1.072,
            'other': 1.075},
        'lv-sub': {
            'winter-weekday-peak': 1.078,
            'winter-weekday-day': 1.072,
            'night': 1.065,
            'other': 1.068},
        'hv': {
            'winter-weekday-peak': 1.065,
            'winter-weekday-day': 1.058,
            'night': 1.046,
            'other': 1.051}}

def tariffs():
    return {
        '510': {
            'description': 'High Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.6485,
            'gbp-per-kva-per-day': 0.017,
            'excess-gbp-per-kva-per-day': 0.017,
            'red-gbp-per-kwh': 0.16342,
            'amber-gbp-per-kwh': 0.0004,
            'green-gbp-per-kwh': 0.00058,
            'gbp-per-kvarh': 0.00238},
        '520': {
            'description': 'High Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.6485,
            'gbp-per-kva-per-day': 0.017,
            'excess-gbp-per-kva-per-day': 0.017,
            'red-gbp-per-kwh': 0.16342,
            'amber-gbp-per-kwh': 0.0004,
            'green-gbp-per-kwh': 0.00058,
            'gbp-per-kvarh': 0.00238},
        '521': {
            'description': 'HV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.2666,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04470,
            'amber-gbp-per-kwh': -0.00059,
            'green-gbp-per-kwh': -0.00063,
            'gbp-per-kvarh': 0.00086},
        '522': {
            'description': 'High Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.6485,
            'gbp-per-kva-per-day': 0.0117,
            'excess-gbp-per-kva-per-day': 0.0117,
            'red-gbp-per-kwh': 0.13824,
            'amber-gbp-per-kwh': 0.00014,
            'green-gbp-per-kwh': 0.00041,
            'gbp-per-kvarh': 0.00187},
        '523': {
            'description': 'HV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.2666,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04181,
            'amber-gbp-per-kwh': -0.00042,
            'green-gbp-per-kwh': -0.00055,
            'gbp-per-kvarh': 0.00064},
        '524': {
            'description': 'HV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.2666,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04470,
            'amber-gbp-per-kwh': -0.00059,
            'green-gbp-per-kwh': -0.00063,
            'gbp-per-kvarh': 0.00086},
        '525': {
            'description': 'HV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.2666,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04181,
            'amber-gbp-per-kwh': -0.00042,
            'green-gbp-per-kwh': -0.00055,
            'gbp-per-kvarh': 0.00064},
        '526': {
            'description': 'LV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00, 
            'red-gbp-per-kwh': -0.06204,
            'amber-gbp-per-kwh': -0.00181,
            'green-gbp-per-kwh': -0.00117,
            'gbp-per-kvarh': 0.00118},
        '527': {
            'description': 'LV Generation Non-Intermittent',
            'gbp-per-kva-per-day': 0.00,
            'gbp-per-mpan-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.06632,
            'amber-gbp-per-kwh': -0.00214,
            'green-gbp-per-kwh': -0.00132,
            'gbp-per-kvarh': 0.00136},
        '540': {
            'description': 'Low Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.0554,
            'gbp-per-kva-per-day': 0.0228,
            'excess-gbp-per-kva-per-day': 0.0228,
            'red-gbp-per-kwh': 0.19431,
            'amber-gbp-per-kwh': 0.00115,
            'green-gbp-per-kwh': 0.00097,
            'gbp-per-kvarh': 0.00297},
        '550': {
            'description': 'Low Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.0554,
            'gbp-per-kva-per-day': 0.0228,
            'excess-gbp-per-kva-per-day': 0.0228,
            'red-gbp-per-kwh': 0.19431,
            'amber-gbp-per-kwh': 0.00115,
            'green-gbp-per-kwh': 0.00097,
            'gbp-per-kvarh': 0.00297},
        '551': {
            'description': 'LV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.06204,
            'amber-gbp-per-kwh': -0.00181,
            'green-gbp-per-kwh': -0.00117,
            'gbp-per-kvarh': 0.00118},
        '570': {
            'description': 'Low Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.0756,
            'gbp-per-kva-per-day': 0.0211,
            'excess-gbp-per-kva-per-day': 0.0211,
            'red-gbp-per-kwh': 0.21381,
            'amber-gbp-per-kwh': 0.00205,
            'green-gbp-per-kwh': 0.00138,
            'gbp-per-kvarh': 0.00353},
        '580': {
            'description': 'Low Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.0756,
            'gbp-per-kva-per-day': 0.0211,
            'excess-gbp-per-kva-per-day': 0.0211,
            'red-gbp-per-kwh': 0.21381,
            'amber-gbp-per-kwh': 0.00205,
            'green-gbp-per-kwh': 0.00138,
            'gbp-per-kvarh': 0.00353},
        '581': {
            'description': 'LV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.06632,
            'amber-gbp-per-kwh': -0.00214,
            'green-gbp-per-kwh': -0.00132,
            'gbp-per-kvarh': 0.00136}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[23]]></value>
        <value><![CDATA[33]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
        <value><![CDATA[55]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[24]]></value>
        <value><![CDATA[35]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
        <value><![CDATA[57]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dno-contract]]></value>
        <value><![CDATA[99]]></value>
        <value><![CDATA[37]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[from net.sf.chellow.billing import NonCoreContract
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad import UserException, Hiber
from net.sf.chellow.physical import HhStartDate, MpanCore
from net.sf.chellow.monad.types import MonadDate
from java.lang import System

def hh(bill, hh_list, data_source):
    bill['duos-night-kwh'] = 0
    bill['duos-night-gbp'] = 0
    bill['duos-day-kwh'] = 0
    bill['duos-day-gbp'] = 0

    for hh in hh_list:
        hh['laf'] = 1
        hh['gsp-kwh'] = hh['laf'] * hh['msp-kwh']
        hh['gsp-kw'] = hh['gsp-kwh'] * 2]]></value>
        <value><![CDATA[59]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
    </line>
</csv>