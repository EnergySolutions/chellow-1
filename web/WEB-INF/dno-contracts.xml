<?xml version="1.0"?>
<csv>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract]]></value>
		<value><![CDATA[10]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[2000-01-01T00:30Z]]></value>
		<value><![CDATA[]]>
		</value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract]]></value>
		<value><![CDATA[11]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[2000-01-01T00:30Z]]></value>
		<value><![CDATA[]]>
		</value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract]]></value>
		<value><![CDATA[12]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[2000-01-01T00:30Z]]></value>
		<value><![CDATA[]]>
		</value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract]]></value>
		<value><![CDATA[13]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[2000-01-01T00:30Z]]></value>
		<value><![CDATA[]]>
		</value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract]]></value>
		<value><![CDATA[14]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[2000-01-01T00:00Z]]></value>
		<value><![CDATA[]]>
		</value>
		<value><![CDATA[import collections
from chellow.contracts.non_core import ds_lib
from chellow.utils import UserException
import datetime
from datutil.relativedelta import relativedelta
from chellow import db


BANDS = ['red', 'amber', 'green']

KEYS = dict((band, {'kwh': 'duos-' + band + '-kwh',
        'tariff-rate': band + '-gbp-per-kwh',
        'bill-rate': 'duos-' + band + '-rate',
        'gbp': 'duos-' + band + '-gbp'}) for band in BANDS)

cachek_tariff_band = __name__ + ':tariff_band'
cachek_lafs = __name__ + ':lafs'
cachek_datum_funcs = __name__ + ':data_funcs'
cachek_time_funcs = __name__ + ':time_funcs'


def datum_beginning_22(ds, hh):
    bill = ds.supplier_bill

    if ds.voltage_level_code == 'HV':
        substation = ''
    else:
        if ds.is_substation:
            substation = '-sub'
        else:
            substation = '-net'
    vl_key = ds.voltage_level_code.lower() + substation

    tariff = ds.hh_rate(dno_rate_key(ds), hh['start-date'],
            'tariffs')[ds.llfc_code]
    lafs = ds.rate(dno_rate_key(ds), hh['start-date'], 'lafs')[vl_key]

    if ds.is_import:
        day_rate = tariff['day-gbp-per-kwh']
        night_rate = tariff['night-gbp-per-kwh']
        if 6 < hh['ct-decimal-hour'] <= 23:
            bill['duos-day-kwh'] += hh['msp-kwh']
            bill['duos-day-gbp'] += hh['msp-kwh'] * day_rate
        else:
            bill['duos-night-kwh'] += hh['msp-kwh']
            bill['duos-night-gbp'] += hh['msp-kwh'] * night_rate

    if 23 < hh['ct-decimal-hour'] <= 6:
        slot_name = 'night'
    elif 7 > hh['ct-day-of-week'] > 1 and (hh['ct-month'] > 10 or \
            hh['ct-month'] < 3):
        if 15.5 < hh['ct-decimal-hour'] < 18:
            slot_name = 'winter-weekday-peak'
        elif 6 < hh['ct-decimal-hour'] < 15:
            slot_name = 'winter-weekday-day'
        else:
            slot_name = 'other'
    else:
        slot_name = 'other'
    hh['laf'] = lafs[slot_name]
    hh['gsp-kwh'] = hh['laf'] * hh['msp-kwh']
    hh['gsp-kw'] = hh['gsp-kwh'] * 2


def hh_time_beginning_22(ds, hh):
    bill = ds.supplier_bill
    if hh['utc-is-month-end']:
        tariff = ds.rate(dno_rate_key(ds), hh['start-date'],
                'tariffs')[ds.llfc_code]
        reactive_rate = tariff['reactive-gbp-per-kvarh']
        bill['duos-reactive-rate'] = reactive_rate

        days_in_month = hh['start-date'].day

        if not ds.is_displaced:
            md_kva = max((datum['msp-kw'] ** 2 + datum['imp-msp-kvar'] ** 2) \
                    ** 0.5 for datum in ds.hh_data)

            billed_avail = max(md_kva, ds.availability)
            bill['duos-availability-agreed-kva'] = ds.availability
            bill['duos-availability-billed-kva'] = billed_avail

            availability_rate = tariff['capacity-gbp-per-kva-per-day']
            bill['duos-availability-rate'] = availability_rate

            bill['duos-availability-gbp'] += availability_rate * \
                    billed_avail * days_in_month

        month_imp_kvarh = sum(h['imp-msp-kvarh'] for h in ds.hh_data)
        month_kwh = sum(h['msp-kwh'] for h in ds.hh_data)

        if month_kwh is None:
            month_kwh = 0

        bill['duos-reactive-gbp'] += max(0, month_imp_kvarh - month_kwh / 2) \
                * reactive_rate


def dno_rate_key(ds):
    return 'chellow.contracts.dno.' + ds.dno_code


def datum_beginning_20(ds, hh):
    bill = ds.supplier_bill

    for k, tf in ds.hh_rate(dno_rate_key(ds), hh['start-date'],
            'duos_tariffs'):
        if ds.llfc_code in [cd.strip() for cd in k.split(',')]:
            tariff = tf

    if tariff is None:
        raise UserException('The tariff for the llfc ' + ds.llfc_code +
                ' cannot be found.')

    lafs = ds.hh_rate(dno_rate_key(ds), hh['start-date'],
            'lafs')[ds.voltage_level_code.lower()]

    day_rate = tariff['day-gbp-per-kwh']

    if 'night-gbp-per-kwh' in tariff:
        night_rate = tariff['night-gbp-per-kwh']
        bill['duos-night-kwh'] = 0
        bill['duos-night-gbp'] = 0
        if 0 < hh['ct-decimal-hour'] <= 7:
            bill['duos-night-kwh'] += hh['msp-kwh']
            bill['duos-night-gbp'] += hh['msp-kwh'] * night_rate
        else:
            bill['duos-day-kwh'] += hh['msp-kwh']
            bill['duos-day-gbp'] += hh['msp-kwh'] * day_rate
    else:
        bill['duos-day-kwh'] += hh['msp-kwh']
        bill['duos-day-gbp'] += hh['msp-kwh'] * day_rate

    if 0 < hh['ct-decimal-hour'] <= 7:
        slot_name = 'night'
    elif 5 > hh['ct-day-of-week'] > 6 and 16 < hh['ct-decimal-hour'] <= 19 \
            and (hh['ct-month'] > 10 or hh['ct-month'] < 3):
        slot_name = 'peak'
    elif 7 > hh['ct-day-of-week'] > 1 and (7 < hh['ct-decimal-hour'] < 15 or \
            18.5 < hh['ct-decimal-hour'] < 19) and (hh['ct-month'] > 10 or \
            hh['ct-month'] < 3):
        slot_name = 'winter-weekday'
    else:
        slot_name = 'other'
    hh['laf'] = lafs[slot_name]
    hh['gsp-kwh'] = hh['laf'] * hh['msp-kwh']
    hh['gsp-kw'] = hh['gsp-kwh'] * 2


def hh_time_beginning_20(ds, hh):
    bill = ds.supplier_bill
    if hh['utc-is-month-end']:
        for k, tf in ds.hh_rate(dno_rate_key(ds), hh['start-date'],
                'duos_tariffs'):
            for cd in k.split():
                if ds.llfc_code == cd.strip():
                    tariff = tf
                    break
        if tariff is None:
            raise UserException('The tariff for the llfc ' + ds.llfc_code +
                    ' cannot be found.')
        if not ds.is_displaced:
            year_md_kva_095 = year_md_095(ds, ds.finish_date)

            billed_avail = max(ds.availability, year_md_kva_095)
            bill['duos-availability-agreed-kva'] = ds.availability

            for threshold, block in [(15, 15), (100, 5), (250, 10), (500, 25),
                    (1000, 50), (None, 100)]:
                if threshold is None or billed_avail < threshold:
                    if billed_avail % block > 0:
                        billed_avail = (int(billed_avail / block) + 1) * block
                    break
            bill['duos-availability-billed-kva'] = billed_avail
            le_200_avail_rate = tariff['capacity-<=200-gbp-per-kva-per-month']

            bill['duos-availability-gbp'] += min(200, billed_avail) * \
                    le_200_avail_rate

            if billed_avail > 200:
                gt_200_avail_rate = \
                        tariff['capacity->200-gbp-per-kva-per-month']
                bill['duos-availability-gbp'] += (billed_avail - 200) * \
                        gt_200_avail_rate

        if 'fixed-gbp-per-month' in tariff:
            bill['duos-standing-gbp'] += tariff['fixed-gbp-per-month']
        else:
            bill['duos-standing-gbp'] += tariff['fixed-gbp-per-day'] * \
                    hh['utc-day']


def year_md_095(data_source, finish):
    if data_source.site is None:
        return year_md_095_supply(data_source.supply_era.getSupply(),
                finish)
    else:
        return year_md_095_site(data_source, finish)


def year_md_095_supply(supply, finish):
    md_kva = 0
    month_finish = finish + relativedelta(months=-11)
    month_kwh_query = db.session.query().from_statement('''select
            sum(hh_datum.value) as sum, max(hh_datum.value) as max from
            hh_datum, channel, era where hh_datum.channel_id = channel.id and
            channel.era_id = era.id and era.supply_id = :supply_id and
            hh_datum.start_date >= :start and hh_datum.start_date <= :finish
            and channel.is_kwh is true and channel.is_import is true'''
            ).params(supply_id=supply.id)

    month_kvarh_query = db.session.query().from_statement('''select
            sum(hh_datum.value) from hh_datum, channel, era where
            datum.channel_id = channel.id and channel.era_id = era.id and
            era.supply_id = :supply_id and hh_datum.start_date >= :start and
            datum.start_date <= :finish and channel.is_kwh is false and
            channel.is_import is true''').params("supply_id", supply.id)
    while not month_finish > finish:
        month_start = month_finish + relativedelta(months=-1, minutes=30)
        month_kwh_result = month_kwh_query.params(start=month_start,
                finish=month_finish).first()

        if month_kwh_result[0] is not None:
            month_md_kw = float(month_kwh_result[1]) * 2
            month_kwh = float(month_kwh_result[0])
            month_kvarh = month_kvarh_query.params(start=month_start,
                    finish=month_finish).first()
            if month_kvarh is None:
                pf = 0.95
            else:
                month_kvarh = float(month_kvarh)
                if month_kwh == 0 and month_kvarh == 0:
                    pf = 1
                else:
                    pf = month_kwh / (month_kwh ** 2 + month_kvarh ** 2) ** 0.5
            month_kva = month_md_kw / pf
            md_kva = max(md_kva, month_kva)
        month_finish = month_finish + relativedelta(months=+1)
    return md_kva


def year_md_095_site(data_source, finish, pw):
    md_kva = 0
    month_finish = finish + relativedelta(months=-12)

    while not month_finish > finish:
        month_start = month_finish + relativedelta(months=-1, minutes=+30)
        month_data = {'start': month_start, 'finish': month_finish}
        data_source.sum_md(month_data, pw)
        if month_data['sum-kwh'] is None:
            month_md_kw = 0
            month_kwh = 0
        else:
            month_md_kw = month_data['md-kw']
            month_kwh = month_data['sum-kwh']

        data_source.sum_md(month_data, pw, False)
        if month_data['sum-kvarh'] is not None:
            month_kvarh = month_data['sum-kvarh']

        if month_kvarh == 0:
            month_kva = month_md_kw / 0.95
        else:
            if month_kwh == 0 and month_kvarh == 0:
                pf = 1
            else:
                pf = month_kwh / (month_kwh ** 2 + month_kvarh ** 2) ** 0.5
            month_kva = month_md_kw / pf
        md_kva = max(md_kva, month_kva)
        month_finish = month_finish + relativedelta(months=+1)
    return md_kva, ''


def datum_beginning_14(ds, hh):
    bill = ds.supplier_bill

    tariffs = ds.hh_rate(ds.dno_code, hh['start-date'],
            'tariffs')[ds.llfc_code]
    if 0 < hh['ct-decimal-hour'] <= 7:
        bill['duos-night-kwh'] += hh['msp-kwh']
        bill['duos-night-gbp'] += hh['msp-kwh'] * tariffs['night-gbp-per-kwh']
    else:
        bill['duos-day-kwh'] += hh['msp-kwh']
        bill['duos-day-gbp'] += hh['msp-kwh'] * tariffs['day-gbp-per-kwh']

    if 0 < hh['ct-decimal-hour'] <= 7:
        slot = 'night'
    elif 7 > hh['ct-day-of-week'] > 1 and hh['ct-decimal-hour'] > 15.5 and \
            hh['ct-decimal-hour'] < 19 and (hh['ct-month'] > 10 or \
            hh['ct-month'] < 3):
        slot = 'winter-weekday-peak'
    elif 7 > hh['ct-day-of-week'] > 1 and (7 <= hh['ct-decimal-hour'] < 16 or \
            18 < hh['ct-decimal-hour'] < 20) and (hh['ct-month'] > 10 or \
            hh['ct-month'] < 3):
        slot = 'winter-weekday-day'
    else:
        slot = 'other'

    hh['laf'] = ds.hh_rate(ds.dno_code, hh['start-date'],
            'lafs')[ds.voltage_level_code.lower()][slot]
    hh['gsp-kwh'] = hh['msp-kwh'] * hh['laf']
    hh['gsp-kw'] = hh['gsp-kwh'] * 2


def hh_time_beginning_14(ds, hh):
    bill = ds.supplier_bill
    if hh['utc-decimal-hour'] == 0:
        tariff = ds.hh_rate(ds.dno_code, hh['start-date'], 'tariffs'
                )[ds.llfc_code]
        bill['duos-standing-gbp'] += tariff['fixed-gbp-per-day']

    if hh['utc-is-month-end']:
        availability = ds.availability
        tariff = ds.hh_rate(ds.dno_code, hh['start-date'],
                'tariffs')[ds.llfc_code]
        reactive_rate = tariff['reactive-gbp-per-kvarh']
        bill['duos-reactive-rate'] = reactive_rate
        bill['duos-reactive-gbp'] = max(0, sum(h['imp-msp-kvarh'] for h in
                ds.hh_data) - sum(h['msp-kwh'] for h in ds.hh_data) / 3) * \
                reactive_rate
        if not ds.is_displaced:
            availability_rate = tariff['availability-gbp-per-kva-per-day']
            bill['duos-availability-rate'] = availability_rate
            md_kva = max((datum['msp-kw'] ** 2 + (datum['imp-msp-kvar'] +
                datum['exp-msp-kvar']) ** 2) ** 0.5 for datum in ds.hh_data)

            billed_avail = max(availability, md_kva)
            bill['duos-availability-gbp'] += availability_rate * billed_avail
            bill['duos-availability-agreed-kva'] = ds.availability
            bill['duos-availability-billed-kva'] = billed_avail


def datum_2010_04_01(ds, hh):
    bill = ds.supplier_bill

    try:
        lafs = ds.caches[cachek_lafs][ds.dno_code][ds.voltage_level_code
                ][ds.is_substation]
    except KeyError:
        ds.caches[cachek_lafs] = collections.defaultdict(lambda: \
                collections.defaultdict(lambda: \
                collections.setdefaultdict(dict)))
        lafs = ds.caches[cachek_lafs][ds.dno_code][ds.voltage_level_code
                ][ds.is_substation]

    try:
        laf = lafs[hh['start-date']]
    except KeyError:
        vl_key = ds.voltage_level_code.lower() + \
                ('-sub' if ds.is_substation else '-net')
        slot_name = 'other'
        if ds.dno_code == '20':
            if 0 < hh['ct-decimal-hour'] <= 7:
                slot_name = 'night'
            elif hh['ct-day-of-week'] not in [5, 6] and \
                    hh['ct-month'] in [11, 12, 1, 2]:
                if 16 <= hh['ct-decimal-hour'] < 19:
                    slot_name = 'peak'
                elif 7 < hh['ct-decimal-hour'] < 20:
                    slot_name = 'winter-weekday'

        elif ds.dno_code in ['14', '22']:
            if 23 < hh['ct-decimal-hour'] or hh['ct-decimal-hour'] <= 6:
                slot_name = 'night'
            elif hh['ct-day-of-week'] not in [5, 6] and hh['ct-month'] in \
                    [11, 12, 1, 2]:
                if 16 <= hh['ct-decimal-hour'] < 19:
                    slot_name = 'winter-weekday-peak'
                elif hh['ct-decimal-hour'] < 16:
                    slot_name = 'winter-weekday-day'
        else:
            raise UserException("Not recognized")

        laf = ds.hh_rate('chellow.contracts.dno.' + ds.dno_code,
                hh['start-date'], 'lafs')[vl_key][slot_name]
        lafs[hh['start-date']] = laf

    hh['laf'] = laf
    hh['gsp-kwh'] = laf * hh['msp-kwh']
    hh['gsp-kw'] = hh['gsp-kwh'] * 2

    tariff, band = ds.caches[cachek_tariff_band][ds.dso_code][ds.llfc_code
            ][hh['start-date']]

    if hh['msp-kwh'] > 0 and hh['anti-msp-kwh'] == 0:
        kvarh = max(max(hh['imp-msp-kvarh'], hh['exp-msp-kvarh']) -
                (0.95 ** -2 - 1) ** 0.5 * hh['msp-kwh'], 0)
        bill['duos-reactive-kvarh'] += kvarh
        rate = tariff['gbp-per-kvarh']
        ds.rate_sets['duos-reactive-rate'].add(rate)
        bill['duos-reactive-gbp'] += kvarh * rate

    rate = tariff[KEYS[band]['tariff-rate']]
    ds.rate_sets[KEYS[band]['bill-rate']].add(rate)
    bill[KEYS[band]['kwh']] += hh['msp-kwh']
    bill[KEYS[band]['gbp']] += rate * hh['msp-kwh']


def hh_time_2010_04_01(ds, hh):
    bill = ds.supplier_bill
    try:
        tariff_bands = ds.caches[cachek_tariff_band][ds.dso_code][ds.llfc_code]
    except KeyError:
        ds.caches[cachek_tariff_band] = collections.defaultdict( \
                lambda: collections.defaultdict(dict))
        tariff_bands = ds.caches[cachek_tariff_band][ds.dso_code][ds.llfc_code]

    try:
        tariff, band = tariff_bands[hh['start-date']]
    except KeyError:
        for llfcs, tf in ds.hh_rate('chellow.contracts.dno.' + ds.dno_code,
                hh['start-date'], 'tariffs').iteritems():
            if ds.llfc_code in [cd.strip() for cd in llfcs.split(',')]:
                tariff = tf
                break

        band = 'green'
        if ds.dno_code == '14':
            if hh['ct-day-of-week'] not in [5, 6]:
                if 16 <= hh['ct-decimal-hour'] < 19:
                    band = 'red'
                elif 7 < hh['ct-decimal-hour'] < 21:
                    band = 'amber'
        elif ds.dno_code == '20':

            if hh['ct-day-of-week'] not in [5, 6]:
                if 16 < hh['ct-decimal-hour'] < 19:
                    band = 'red'
                elif 9 <= hh['ct-decimal-hour'] <= 20:
                    band = 'amber'

        elif ds.dno_code == '22':
            if hh['ct-day-of-week'] in [5, 6]:
                if 16 < hh['ct-decimal-hour'] <= 19:
                    band = 'amber'
            else:
                if 17 <= hh['ct-decimal-hour'] < 19:
                    band = 'red'
                elif 7 < hh['ct-decimal-hour'] <= 21:
                    band = 'amber'
        else:
            raise UserException("DNO code not recognized.")
        tariff_bands[hh['start-date']] = (tariff, band)

    if hh['utc-decimal-hour'] == 25.5 and not ds.is_displaced:
        bill['duos-fixed-days'] += 1
        rate = tariff['gbp-per-mpan-per-day']
        ds.rate_sets['duos-fixed-rate'].add(rate)
        bill['duos-fixed-gbp'] += rate

    if hh['utc-is-month-end'] and not ds.is_displaced:
        month_to = hh['start-date']
        month_from = datetime.datetime(month_to.year, month_to.month,
                month_to.day)
        md_kva = 0
        dss = [dsc for dsc in ds_lib.get_data_sources(ds, month_from,
                month_to)]
        for dsc in dss:
            for datum in dsc.hh_data:
                if datum['msp-kw'] > 0 and datum['anti-msp-kw'] == 0:
                    hh_kva = (datum['msp-kw'] ** 2 + max(datum['imp-msp-kvar'],
                            datum['exp-msp-kvar']) ** 2) ** 0.5
                else:
                    hh_kva = datum['msp-kw']

                md_kva = max(md_kva, hh_kva)

        billed_avail = max(md_kva, ds.availability)
        bill['duos-availability-agreed-kva'] = ds.availability
        bill['duos-availability-billed-kva'] = billed_avail
        availability_rate = tariff['gbp-per-kva-per-day']
        if availability_rate is not None:
            bill['duos-availability-rate'] = availability_rate
            bill['duos-availability-days'] = sum(1 for hh in dsc.hh_times for
                    dsc in dss if hh['utc-decimal-hour'] == 0)
            bill['duos-availability-gbp'] = availability_rate * billed_avail \
                    * bill['duos-availability-days']

UNIFICATION_DATE = datetime.datetime(2012, 4, 1)


def vb(ds):
    time_func_cache = ds.caches[cachek_time_funcs]
    for hh in ds.hh_times:
        try:
            time_func_cache[hh['start-date']](ds, hh)
        except KeyError:
            if hh['start-date'] < datetime.datetime(2010, 4, 1):
                if ds.dno_code == '14':
                    time_func = hh_time_beginning_14
                elif ds.dno_code == '20':
                    time_func = hh_time_beginning_20
                elif ds.dno_code == '22':
                    time_func = hh_time_beginning_22
                else:
                    raise UserException('Not recognized')

            else:
                time_func = hh_time_2010_04_01
            time_func_cache[hh['start-date']] = time_func
            time_func(ds, hh)

    data_func_cache = ds.caches[cachek_datum_funcs]
    for hh in ds.hh_data:
        try:
            data_func_cache[hh['start-date']](ds, hh)
        except KeyError:
            if hh['start-date'] < datetime.datetime(2010, 4, 1):
                if ds.dno_code == '14':
                    data_func = datum_beginning_14
                elif ds.dno_code == '20':
                    data_func = datum_beginning_20
                elif ds.dno_code == '22':
                    data_func = datum_beginning_22
                else:
                    raise UserException('Not recognized')
            else:
                data_func = datum_2010_04_01
            data_func_cache[hh['start-date']] = data_func
            data_func(ds, hh)
]]></value>
		<value><![CDATA[def triad():
    return 19.147817

def tariffs():
    return {
        '121': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '124': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '127': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '132': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '365': {
            'fixed-gbp-per-day': 4.29,
            'availability-gbp-per-kva-per-day': 0.0417,
            'excess-availability-gbp-per-kva-per-day': 0.0417,
            'day-gbp-per-kwh': 0.0012,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh': 0.0013}}

def lafs():
    return {
        'lv': {
            'night': 1.042,
            'winter-weekday-peak': 1.104,
            'winter-weekday-day': 1.095,
            'other': 1.070},
        'hv': {
            'night': 1.012,
            'winter-weekday-peak': 1.037,
            'winter-weekday-day': 1.032,
            'other': 1.029}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[14]]></value>
		<value><![CDATA[2007-04-01T00:00Z]]></value>
		<value><![CDATA[def triad():
    return 19.147817

def tariffs():
    return {
        '121': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '124': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '127': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '132': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '365': {
            'fixed-gbp-per-day': 4.29,
            'availability-gbp-per-kva-per-day': 0.0417,
            'excess-availability-gbp-per-kva-per-day': 0.0417,
            'day-gbp-per-kwh': 0.0012,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh': 0.0013}}

def lafs():
    return {
        'lv': {
            'night': 1.042,
            'winter-weekday-peak': 1.104,
            'winter-weekday-day': 1.095,
            'other': 1.070},
        'hv': {
            'night': 1.012,
            'winter-weekday-peak': 1.037,
            'winter-weekday-day': 1.032,
            'other': 1.029}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[14]]></value>
		<value><![CDATA[2008-04-01T00:00Z]]></value>
		<value><![CDATA[def triad():
    return 19.147817

def tariffs():
    return {
        '121': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '124': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '127': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '132': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '365': {
            'fixed-gbp-per-day': 4.29,
            'availability-gbp-per-kva-per-day': 0.0417,
            'excess-availability-gbp-per-kva-per-day': 0.0417,
            'day-gbp-per-kwh': 0.0012,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh': 0.0013}}

def lafs():
    return {
        'lv': {
            'night': 1.042,
            'winter-weekday-peak': 1.104,
            'winter-weekday-day': 1.095,
            'other': 1.070},
        'hv': {
            'night': 1.012,
            'winter-weekday-peak': 1.037,
            'winter-weekday-day': 1.032,
            'other': 1.029}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[14]]></value>
		<value><![CDATA[2009-04-01T00:00Z]]></value>
		<value><![CDATA[def night_hv():
    return 1.012

def night_lv():
    return 1.042

def peak_hv():
    return 1.037

def peak_lv():
    return 1.104

def winter_weekday_hv():
    return 1.032

def winter_weekday_lv():
    return 1.095

def other_hv():
    return 1.029

def other_lv():
    return 1.070

def duos_day_hv_gbp_per_kwh():
    return 0.0008

def duos_night_hv_gbp_per_kwh():
    return 0.0004

def standing_hv_gbp_per_month():
    return 137.1792

def availability_hv_gbp_per_kva_per_month():
    return 1.3900

def reactive_hv_gbp_per_kvarh():
    return 0.0012

def duos_day_lv_gbp_per_kwh():
    return 0.0014

def duos_night_lv_gbp_per_kwh():
    return 0.0006

def standing_lv_gbp_per_month():
    return 51.4042

def availability_lv_gbp_per_kva_per_month():
    return 1.7307

def reactive_lv_gbp_per_kvarh():
    return 0.0024

def tariffs():
    return {
        '121': {
            'fixed-gbp-per-day': 1.6900,
            'availability-gbp-per-kva-per-day': 0.0569,
            'excess-availability-gbp-per-kva-per-day': 0.0569,
            'day-gbp-per-kwh': 0.0014,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh':  0.0024},
        '124': {
            'fixed-gbp-per-day': 1.6900,
            'availability-gbp-per-kva-per-day': 0.0569,
            'excess-availability-gbp-per-kva-per-day': 0.0569,
            'day-gbp-per-kwh': 0.0014,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh':  0.0024},
        '127': {
            'fixed-gbp-per-day': 1.6900,
            'availability-gbp-per-kva-per-day': 0.0569,
            'excess-availability-gbp-per-kva-per-day': 0.0569,
            'day-gbp-per-kwh': 0.0014,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh':  0.0024},
        '132': {
            'fixed-gbp-per-day': 1.6900,
            'availability-gbp-per-kva-per-day': 0.0569,
            'excess-availability-gbp-per-kva-per-day': 0.0569,
            'day-gbp-per-kwh': 0.0014,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh': 0.0024},
        '365': {
            'fixed-gbp-per-day': 4.5100,
            'availability-gbp-per-kva-per-day': 0.0457,
            'excess-availability-gbp-per-kva-per-day': 0.0457,
            'day-gbp-per-kwh': 0.0008,
            'night-gbp-per-kwh': 0.0004,
            'reactive-gbp-per-kvarh': 0.0012}}


def lafs():
    return {
        'lv': {
            'night': 1.042,
            'winter-weekday-peak': 1.104,
            'winter-weekday-day': 1.095,
            'other': 1.070},
        'hv': {
            'night': 1.012,
            'winter-weekday-peak': 1.037,
            'winter-weekday-day': 1.032,
            'other': 1.029}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[14]]></value>
		<value><![CDATA[2010-04-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'lv': {
            'night': 1.051,
            'winter-weekday-peak': 1.075,
            'winter-weekday-day': 1.065,
            'other': 1.087},
        'hv': {
            'night': 1.017,
            'winter-weekday-peak': 1.025,
            'winter-weekday-day': 1.022,
            'other': 1.030}}

def tariffs():
    return {
        '127': {
            'description': 'LV',
            'gbp-per-mpan-per-day': 0.0706,
            'gbp-per-kva-per-day': 0.0273,
            'excess-gbp-per-kva-per-day': 0.0273,
            'red-gbp-per-kwh': 0.05749,
            'amber-gbp-per-kwh': 0.00672,
            'green-gbp-per-kwh': 0.00048,
            'gbp-per-kvarh': 0.00294},
        '128': {
            'description': 'LV Sub',
            'gbp-per-mpan-per-day': 0.0706,
            'gbp-per-kva-per-day': 0.0382,
            'excess-gbp-per-kva-per-day': 0.0382,
            'red-gbp-per-kwh': 0.03782,
            'amber-gbp-per-kwh': 0.00383,
            'green-gbp-per-kwh': 0.00033,
            'gbp-per-kvarh': 0.00230},
        '365': {
            'description': 'HV',
            'gbp-per-mpan-per-day': 0.7096,
            'gbp-per-kva-per-day': 0.0451,
            'excess-gbp-per-kva-per-day': 0.0451,
            'red-gbp-per-kwh': 0.02907,
            'amber-gbp-per-kwh': 0.00234,
            'green-gbp-per-kwh': 0.00025,
            'gbp-per-kvarh': 0.00132},
        '366': {
            'description': 'HV Sub',
            'gbp-per-mpan-per-day': 0.7096,
            'gbp-per-kva-per-day': 0.0403,
            'excess-gbp-per-kva-per-day': 0.0403,
            'red-gbp-per-kwh': 0.03299,
            'amber-gbp-per-kwh': 0.00266,
            'green-gbp-per-kwh': 0.00031,
            'gbp-per-kvarh': 0.00168}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[14]]></value>
		<value><![CDATA[2011-04-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'lv': {
            'night': 1.051,
            'winter-weekday-peak': 1.075,
            'winter-weekday-day': 1.065,
            'other': 1.087},
        'hv': {
            'night': 1.017,
            'winter-weekday-peak': 1.025,
            'winter-weekday-day': 1.022,
            'other': 1.030}}

def tariffs():
    return {
        '127': {
            'description': 'LV',
            'gbp-per-mpan-per-day': 0.0757,
            'gbp-per-kva-per-day': 0.0264,
            'excess-gbp-per-kva-per-day': 0.0264,
            'red-gbp-per-kwh': 0.06891,
            'amber-gbp-per-kwh': 0.00709,
            'green-gbp-per-kwh': 0.00046,
            'gbp-per-kvarh': 0.00319},
        '128': {
            'description': 'LV Sub',
            'gbp-per-mpan-per-day': 0.0757,
            'gbp-per-kva-per-day': 0.036,
            'excess-gbp-per-kva-per-day': 0.036,
            'red-gbp-per-kwh': 0.04495,
            'amber-gbp-per-kwh': 0.00395,
            'green-gbp-per-kwh': 0.00030,
            'gbp-per-kvarh': 0.00260},
        '365': {
            'description': 'HV',
            'gbp-per-mpan-per-day': 0.7610,
            'gbp-per-kva-per-day': 0.0422,
            'excess-gbp-per-kva-per-day': 0.0422,
            'red-gbp-per-kwh': 0.03916,
            'amber-gbp-per-kwh': 0.00275,
            'green-gbp-per-kwh': 0.00023,
            'gbp-per-kvarh': 0.00161},
        '366': {
            'description': 'HV Sub',
            'gbp-per-mpan-per-day': 0.7610,
            'gbp-per-kva-per-day': 0.0367,
            'excess-gbp-per-kva-per-day': 0.0367,
            'red-gbp-per-kwh': 0.04029,
            'amber-gbp-per-kwh': 0.00288,
            'green-gbp-per-kwh': 0.00028,
            'gbp-per-kvarh': 0.00193}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[14]]></value>
		<value><![CDATA[2011-10-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'lv': {
            'night': 1.051,
            'winter-weekday-peak': 1.075,
            'winter-weekday-day': 1.065,
            'other': 1.087},
        'hv': {
            'night': 1.017,
            'winter-weekday-peak': 1.025,
            'winter-weekday-day': 1.022,
            'other': 1.030}}

def tariffs():
    return {
        '127': {
            'description': 'LV',
            'gbp-per-mpan-per-day': 0.0757,
            'gbp-per-kva-per-day': 0.0264,
            'excess-gbp-per-kva-per-day': 0.0264,
            'red-gbp-per-kwh': 0.06892,
            'amber-gbp-per-kwh': 0.00709,
            'green-gbp-per-kwh': 0.00046,
            'gbp-per-kvarh': 0.00319},
        '128': {
            'description': 'LV Sub',
            'gbp-per-mpan-per-day': 0.0757,
            'gbp-per-kva-per-day': 0.036,
            'excess-gbp-per-kva-per-day': 0.036,
            'red-gbp-per-kwh': 0.04496,
            'amber-gbp-per-kwh': 0.00395,
            'green-gbp-per-kwh': 0.00030,
            'gbp-per-kvarh': 0.00260},
        '365': {
            'description': 'HV',
            'gbp-per-mpan-per-day': 0.7611,
            'gbp-per-kva-per-day': 0.0422,
            'excess-gbp-per-kva-per-day': 0.0422,
            'red-gbp-per-kwh': 0.03917,
            'amber-gbp-per-kwh': 0.00275,
            'green-gbp-per-kwh': 0.00023,
            'gbp-per-kvarh': 0.00161},
        '366': {
            'description': 'HV Sub',
            'gbp-per-mpan-per-day': 0.7611,
            'gbp-per-kva-per-day': 0.0367,
            'excess-gbp-per-kva-per-day': 0.0367,
            'red-gbp-per-kwh': 0.04029,
            'amber-gbp-per-kwh': 0.00288,
            'green-gbp-per-kwh': 0.00028,
            'gbp-per-kvarh': 0.00193}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[14]]></value>
		<value><![CDATA[2012-04-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'lv': {
            'night': 1.052,
            'winter-weekday-peak': 1.077,
            'winter-weekday-day': 1.069,
            'other': 1.060},
        'hv': {
            'night': 1.031,
            'winter-weekday-peak': 1.044,
            'winter-weekday-day': 1.041,
            'other': 1.035}}

def tariffs():
    return {
        '127': {
            'description': 'LV',
            'gbp-per-mpan-per-day': 0.1013,
            'gbp-per-kva-per-day': 0.0316,
            'excess-gbp-per-kva-per-day': 0.0316,
            'red-gbp-per-kwh': 0.07706,
            'amber-gbp-per-kwh': 0.00604,
            'green-gbp-per-kwh': 0.00048,
            'gbp-per-kvarh': 0.00298},
        '128': {
            'description': 'LV Sub',
            'gbp-per-mpan-per-day': 0.1013,
            'gbp-per-kva-per-day': 0.0416,
            'excess-gbp-per-kva-per-day': 0.0416,
            'red-gbp-per-kwh': 0.07110,
            'amber-gbp-per-kwh': 0.00474,
            'green-gbp-per-kwh': 0.00029,
            'gbp-per-kvarh': 0.00234},
        '365': {
            'description': 'HV',
            'gbp-per-mpan-per-day': 1.0191,
            'gbp-per-kva-per-day': 0.0490,
            'excess-gbp-per-kva-per-day': 0.0490,
            'red-gbp-per-kwh': 0.04321,
            'amber-gbp-per-kwh': 0.00258,
            'green-gbp-per-kwh': 0.00012,
            'gbp-per-kvarh': 0.00140},
        '366': {
            'description': 'HV Sub',
            'gbp-per-mpan-per-day': 0.7983939,
            'gbp-per-kva-per-day': 0.0384983,
            'excess-gbp-per-kva-per-day': 0.0384983,
            'red-gbp-per-kwh': 0.04883148,
            'amber-gbp-per-kwh': 0.00328032,
            'green-gbp-per-kwh': 0.00028,
            'gbp-per-kvarh': 0.00202457}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[14]]></value>
		<value><![CDATA[2013-04-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'lv': {
            'night': 1.052,
            'winter-weekday-peak': 1.077,
            'winter-weekday-day': 1.069,
            'other': 1.060},
        'hv': {
            'night': 1.031,
            'winter-weekday-peak': 1.044,
            'winter-weekday-day': 1.041,
            'other': 1.035}}

def tariffs():
    return {
        '127': {
            'description': 'LV',
            'gbp-per-mpan-per-day': 0.1013*1.14,
            'gbp-per-kva-per-day': 0.0316*1.14,
            'excess-gbp-per-kva-per-day': 0.0316*1.14,
            'red-gbp-per-kwh': 0.07706*1.14,
            'amber-gbp-per-kwh': 0.00604*1.14,
            'green-gbp-per-kwh': 0.00048*1.14,
            'gbp-per-kvarh': 0.00298*1.14},
        '128': {
            'description': 'LV Sub',
            'gbp-per-mpan-per-day': 0.1013*1.14,
            'gbp-per-kva-per-day': 0.0416*1.14,
            'excess-gbp-per-kva-per-day': 0.0416*1.14,
            'red-gbp-per-kwh': 0.07110*1.14,
            'amber-gbp-per-kwh': 0.00474*1.14,
            'green-gbp-per-kwh': 0.00029*1.14,
            'gbp-per-kvarh': 0.00234*1.14},
        '365': {
            'description': 'HV',
            'gbp-per-mpan-per-day': 1.0191*1.14,
            'gbp-per-kva-per-day': 0.0490*1.14,
            'excess-gbp-per-kva-per-day': 0.0490*1.14,
            'red-gbp-per-kwh': 0.04321*1.14,
            'amber-gbp-per-kwh': 0.00258*1.14,
            'green-gbp-per-kwh': 0.00012*1.14,
            'gbp-per-kvarh': 0.00140*1.14},
        '366': {
            'description': 'HV Sub',
            'gbp-per-mpan-per-day': 0.7983939*1.14,
            'gbp-per-kva-per-day': 0.0384983*1.14,
            'excess-gbp-per-kva-per-day': 0.0384983*1.14,
            'red-gbp-per-kwh': 0.04883148*1.14,
            'amber-gbp-per-kwh': 0.00328032*1.14,
            'green-gbp-per-kwh': 0.00028*1.14,
            'gbp-per-kvarh': 0.00202457*1.14}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract]]></value>
		<value><![CDATA[15]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[2000-01-01T00:30Z]]></value>
		<value><![CDATA[]]>
		</value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract]]></value>
		<value><![CDATA[16]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[2000-01-01T00:30Z]]></value>
		<value><![CDATA[]]>
		</value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract]]></value>
		<value><![CDATA[17]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[2000-01-01T00:30Z]]></value>
		<value><![CDATA[]]>
		</value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract]]></value>
		<value><![CDATA[18]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[2000-01-01T00:30Z]]></value>
		<value><![CDATA[]]>
		</value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract]]></value>
		<value><![CDATA[19]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[2000-01-01T00:30Z]]></value>
		<value><![CDATA[]]>
		</value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract]]></value>
		<value><![CDATA[20]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[2000-01-01T00:00Z]]></value>
		<value><![CDATA[]]></value>
		<value><![CDATA[]]>
		</value>
		<value><![CDATA[def llfc_groups():
    return {}

def duos_tariffs():
    return {
'llfc(450)-pc(00)': {
    'fixed-gbp-per-month': 14.91,
    'day-gbp-per-kwh': 0.00508,
    'capacity-<=200-gbp-per-kva-per-month': 1.06,
    'capacity->200-gbp-per-kva-per-month': 0.93,
    'excess-capacity-gbp-per-kva-per-month': 0.42},
'llfc(453)-pc(00)': {
    'fixed-gbp-per-month': 14.91,
    'day-gbp-per-kwh': 0.00606,
    'night-gbp-per-kwh': 0.00118,
    'capacity-<=200-gbp-per-kva-per-month': 1.06,
    'capacity->200-gbp-per-kva-per-month': 0.93,
    'excess-capacity-gbp-per-kva-per-month': 0.42},
'llfc(520)-pc(00)': {
    'fixed-gbp-per-month': 51.50,
    'day-gbp-per-kwh':  0.01157},
'llfc(655)-pc(00)': {
    'fixed-gbp-per-month': 98.23,
    'day-gbp-per-kwh':   0.00379,
    'capacity-<=200-gbp-per-kva-per-month': 0.86,
    'capacity->200-gbp-per-kva-per-month': 0.86,
    'excess-capacity-gbp-per-kva-per-month': 0.40},
'llfc(658)-pc(00)': {
    'fixed-gbp-per-month': 98.23,
    'day-gbp-per-kwh': 0.00433,
    'night-gbp-per-kwh': 0.00108,
    'capacity-<=200-gbp-per-kva-per-month': 0.86,
    'capacity->200-gbp-per-kva-per-month': 0.86,
    'excess-capacity-gbp-per-kva-per-month': 0.40}}

def lafs():
    return {
        'hv': {
            'peak': 1.047,
            'winter-weekday': 1.044,
            'other': 1.037,
            'night': 1.032},
        'lv': {
            'peak': 1.096,
            'winter-weekday': 1.089,
            'other': 1.080,
            'night': 1.075}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[20]]></value>
		<value><![CDATA[2007-04-01T00:00Z]]></value>
		<value><![CDATA[def llfc_groups():
    return {}

def duos_tariffs():
    return {
'llfc(450)-pc(00)': {
    'fixed-gbp-per-month': 14.91,
    'day-gbp-per-kwh': 0.00508,
    'capacity-<=200-gbp-per-kva-per-month': 1.06,
    'capacity->200-gbp-per-kva-per-month': 0.93,
    'excess-capacity-gbp-per-kva-per-month': 0.42},
'llfc(453)-pc(00)': {
    'fixed-gbp-per-month': 14.91,
    'day-gbp-per-kwh': 0.00606,
    'night-gbp-per-kwh': 0.00118,
    'capacity-<=200-gbp-per-kva-per-month': 1.06,
    'capacity->200-gbp-per-kva-per-month': 0.93,
    'excess-capacity-gbp-per-kva-per-month': 0.42},
'llfc(520)-pc(00)': {
    'fixed-gbp-per-month': 51.50,
    'day-gbp-per-kwh':  0.01157},
'llfc(655)-pc(00)': {
    'fixed-gbp-per-month': 98.23,
    'day-gbp-per-kwh':   0.00379,
    'capacity-<=200-gbp-per-kva-per-month': 0.86,
    'capacity->200-gbp-per-kva-per-month': 0.86,
    'excess-capacity-gbp-per-kva-per-month': 0.40},
'llfc(658)-pc(00)': {
    'fixed-gbp-per-month': 98.23,
    'day-gbp-per-kwh': 0.00433,
    'night-gbp-per-kwh': 0.00108,
    'capacity-<=200-gbp-per-kva-per-month': 0.86,
    'capacity->200-gbp-per-kva-per-month': 0.86,
    'excess-capacity-gbp-per-kva-per-month': 0.40}}

def lafs():
    return {
        'hv': {
            'peak': 1.047,
            'winter-weekday': 1.044,
            'other': 1.037,
            'night': 1.032},
        'lv': {
            'peak': 1.096,
            'winter-weekday': 1.089,
            'other': 1.080,
            'night': 1.075}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[20]]></value>
		<value><![CDATA[2008-04-01T00:00Z]]></value>
		<value><![CDATA[def llfc_groups():
    return {}

def duos_tariffs():
    return {
'llfc(450)-pc(00)': {
    'fixed-gbp-per-month': 14.91,
    'day-gbp-per-kwh': 0.00508,
    'capacity-<=200-gbp-per-kva-per-month': 1.06,
    'capacity->200-gbp-per-kva-per-month': 0.93,
    'excess-capacity-gbp-per-kva-per-month': 0.42},
'llfc(453)-pc(00)': {
    'fixed-gbp-per-month': 14.91,
    'day-gbp-per-kwh': 0.00606,
    'night-gbp-per-kwh': 0.00118,
    'capacity-<=200-gbp-per-kva-per-month': 1.06,
    'capacity->200-gbp-per-kva-per-month': 0.93,
    'excess-capacity-gbp-per-kva-per-month': 0.42},
'llfc(520)-pc(00)': {
    'fixed-gbp-per-month': 51.50,
    'day-gbp-per-kwh':  0.01157},
'llfc(655)-pc(00)': {
    'fixed-gbp-per-month': 98.23,
    'day-gbp-per-kwh':   0.00379,
    'capacity-<=200-gbp-per-kva-per-month': 0.86,
    'capacity->200-gbp-per-kva-per-month': 0.86,
    'excess-capacity-gbp-per-kva-per-month': 0.40},
'llfc(658)-pc(00)': {
    'fixed-gbp-per-month': 98.23,
    'day-gbp-per-kwh': 0.00433,
    'night-gbp-per-kwh': 0.00108,
    'capacity-<=200-gbp-per-kva-per-month': 0.86,
    'capacity->200-gbp-per-kva-per-month': 0.86,
    'excess-capacity-gbp-per-kva-per-month': 0.40}}

def lafs():
    return {
        'hv': {
            'peak': 1.048,
            'winter-weekday': 1.045,
            'other': 1.038,
            'night': 1.033},
        'lv': {
            'peak': 1.095,
            'winter-weekday': 1.089,
            'other': 1.079,
            'night': 1.075}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[20]]></value>
		<value><![CDATA[2009-04-01T00:00Z]]></value>
		<value><![CDATA[def llfc_groups():
    return {
        '127': '127,473',
        '473': '127,473',
        '453': '453,470',
        '658': '658,476',
        '476': '658,476',
        '401': '401,475',
        '475': '401,475',
        '909': '909,477',
        '910': '910,478'}

def duos_tariffs():
    return {
        'llfc(126)-pc(03)': {
            'fixed-gbp-per-day': 0.0562,
            'day-gbp-per-kwh': 0.01645},
        'llfc(127,473)-pc(03)': {
            'fixed-gbp-per-day': 0.0808,
            'day-gbp-per-kwh': 0.01645},
        'llfc(129)-pc(04)': {
            'fixed-gbp-per-day': 0.0632,
            'day-gbp-per-kwh': 0.01737,
            'night-gbp-per-kwh': 0.00197},
        'llfc(130)-pc(04)': {
            'fixed-gbp-per-day': 0.0758,
            'day-gbp-per-kwh': 0.01737,
            'night-gbp-per-kwh': 0.00197},
        'llfc(401,475)-pc(05-08)': {
            'fixed-gbp-per-month': 18.58,
            'day-gbp-per-kwh': 0.00649,
            'night-gbp-per-kwh': 0.00126,
            'capacity-<=200-gbp-per-kva-per-month': 1.13,
            'capacity->200-gbp-per-kva-per-month': 1.00,
            'excess-capacity-gbp-per-kva-per-month': 0.45},
        'llfc(453,470)-pc(00)': {
            'fixed-gbp-per-month': 15.97,
            'day-gbp-per-kwh': 0.00649,
            'night-gbp-per-kwh': 0.00126,
            'capacity-<=200-gbp-per-kva-per-month': 1.13,
            'capacity->200-gbp-per-kva-per-month': 1.00,
            'excess-capacity-gbp-per-kva-per-month': 0.45},
        'llfc(658,476)-pc(00)': {
            'fixed-gbp-per-month': 105.18,
            'day-gbp-per-kwh': 0.00464,
            'night-gbp-per-kwh': 0.00116,
            'capacity-<=200-gbp-per-kva-per-month': 0.92,
            'capacity->200-gbp-per-kva-per-month': 0.92,
            'excess-capacity-gbp-per-kva-per-month': 0.43},
        'llfc(605)-pc(05-08)': {
            'fixed-gbp-per-month': 107.80,
            'day-gbp-per-kwh':  0.00406,
            'capacity-<=200-gbp-per-kva-per-month': 0.92,
            'capacity->200-gbp-per-kva-per-month': 0.92,
            'excess-capacity-gbp-per-kva-per-month': 0.43,},
        'llfc(450)-pc(00)': {
            'fixed-gbp-per-month': 15.97,
            'day-gbp-per-kwh':   0.00544,
            'capacity-<=200-gbp-per-kva-per-month': 1.13,
            'capacity->200-gbp-per-kva-per-month': 1.00,
            'excess-capacity-gbp-per-kva-per-month': 0.45,},
        'llfc(655)-pc(00)': {
            'fixed-gbp-per-month': 105.18,
            'day-gbp-per-kwh': 0.00406,
            'capacity-<=200-gbp-per-kva-per-month': 0.92,
            'capacity->200-gbp-per-kva-per-month': 0.92,
            'excess-capacity-gbp-per-kva-per-month': 0.43,},
        'llfc(909,477)-pc(00)': {
            'capacity-gbp-per-kva-per-month': 0.51},
        'llfc(910,478)-pc(00)': {
            'capacity-gbp-per-kva-per-month': 0.51}}

def lafs():
    return {
        'hv': {
            'peak': 1.043,
            'winter-weekday': 1.039,
            'other': 1.034,
            'night': 1.029},
        'lv': {
            'peak': 1.093,
            'winter-weekday': 1.087,
            'other': 1.078,
            'night': 1.074}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[20]]></value>
		<value><![CDATA[2009-10-01T00:00Z]]></value>
		<value><![CDATA[def llfc_groups():
    return {
        '127': '127,473',
        '473': '127,473',
        '453': '453,470',
        '658': '658,476',
        '476': '658,476',
        '401': '401,475',
        '475': '401,475',
        '909': '909,477',
        '910': '910,478'}

def duos_tariffs():
    return {
        'llfc(002)-pc(00)': {
            'capacity-gbp-per-kva-per-month': 0.51,
            'fixed-gbp-per-day': 0,
            'day-gbp-per-kwh': 0},
        'llfc(006)-pc(00)': {
            'capacity-gbp-per-kva-per-month': 0.51,
            'fixed-gbp-per-day': 0,
            'day-gbp-per-kwh': 0},
        'llfc(126)-pc(03)': {
            'fixed-gbp-per-day': 0.0562,
            'day-gbp-per-kwh': 0.01645},
        'llfc(127,473)-pc(03)': {
            'fixed-gbp-per-day': 0.0808,
            'day-gbp-per-kwh': 0.01645},
        'llfc(129)-pc(04)': {
            'fixed-gbp-per-day': 0.0632,
            'day-gbp-per-kwh': 0.01737,
            'night-gbp-per-kwh': 0.00197},
        'llfc(130)-pc(04)': {
            'fixed-gbp-per-day': 0.0758,
            'day-gbp-per-kwh': 0.01737,
            'night-gbp-per-kwh': 0.00197},
        'llfc(401,475)-pc(05-08)': {
            'fixed-gbp-per-month': 18.58,
            'day-gbp-per-kwh': 0.00649,
            'night-gbp-per-kwh': 0.00126,
            'capacity-<=200-gbp-per-kva-per-month': 1.13,
            'capacity->200-gbp-per-kva-per-month': 1.00,
            'excess-capacity-gbp-per-kva-per-month': 0.45},
        'llfc(453,470)-pc(00)': {
            'fixed-gbp-per-month': 15.97,
            'day-gbp-per-kwh': 0.00649,
            'night-gbp-per-kwh': 0.00126,
            'capacity-<=200-gbp-per-kva-per-month': 1.13,
            'capacity->200-gbp-per-kva-per-month': 1.00,
            'excess-capacity-gbp-per-kva-per-month': 0.45},
        'llfc(658,476)-pc(00)': {
            'fixed-gbp-per-month': 105.18,
            'day-gbp-per-kwh': 0.00464,
            'night-gbp-per-kwh': 0.00116,
            'capacity-<=200-gbp-per-kva-per-month': 0.92,
            'capacity->200-gbp-per-kva-per-month': 0.92,
            'excess-capacity-gbp-per-kva-per-month': 0.43},
        'llfc(605)-pc(05-08)': {
            'fixed-gbp-per-month': 107.80,
            'day-gbp-per-kwh':  0.00406,
            'capacity-<=200-gbp-per-kva-per-month': 0.92,
            'capacity->200-gbp-per-kva-per-month': 0.92,
            'excess-capacity-gbp-per-kva-per-month': 0.43},
        'llfc(450)-pc(00)': {
            'fixed-gbp-per-month': 15.97,
            'day-gbp-per-kwh':   0.00544,
            'capacity-<=200-gbp-per-kva-per-month': 1.13,
            'capacity->200-gbp-per-kva-per-month': 1.00,
            'excess-capacity-gbp-per-kva-per-month': 0.45},
        'llfc(655)-pc(00)': {
            'fixed-gbp-per-month': 105.18,
            'day-gbp-per-kwh': 0.00406,
            'capacity-<=200-gbp-per-kva-per-month': 0.92,
            'capacity->200-gbp-per-kva-per-month': 0.92,
            'excess-capacity-gbp-per-kva-per-month': 0.43},
        'llfc(909,477)-pc(00)': {
            'capacity-gbp-per-kva-per-month': 0.51},
        'llfc(910,478)-pc(00)': {
            'capacity-gbp-per-kva-per-month': 0.51}}

def lafs():
    return {
        'hv': {
            'peak': 1.043,
            'winter-weekday': 1.039,
            'other': 1.034,
            'night': 1.029},
        'lv': {
            'peak': 1.093,
            'winter-weekday': 1.087,
            'other': 1.078,
            'night': 1.074}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[20]]></value>
		<value><![CDATA[2010-04-01T00:00Z]]></value>
		<value><![CDATA[]]>
		</value>
		<value><![CDATA[def lafs():
    return {
        'lv-net': {
            'peak': 1.088,
            'winter-weekday': 1.083,
            'other': 1.077,
            'night': 1.073},
        'lv-sub': {
            'peak': 1.060,
            'winter-weekday': 1.058,
            'other': 1.056,
            'night': 1.056},
        'hv-net': {
            'peak': 1.042,
            'winter-weekday': 1.039,
            'other': 1.034,
            'night': 1.029},
        'hv-sub': {
            'peak': 1.021,
            'winter-weekday': 1.039,
            'other': 1.034,
            'night': 1.029}}

def llfc_groups():
    return {
        '001': '001,477,909',
        '006': '006,478,910',
        '127': '127,473',
        '401': '401,475',
        '453': '453,470',
        '473': '127,473',
        '475': '401,475',
        '476': '658,476',
        '477': '001,477,909',
        '478': '006,478,910',
        '658': '658,476',
        '909': '001,477,909',
        '910': '006,478,910'}

def tariffs():
    return {
        '001,477,909': {
            'description': 'LV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00754,
            'amber-gbp-per-kwh': -0.00754,
            'green-gbp-per-kwh': -0.00754,
            'gbp-per-kvarh': 0.00214},
        '002': {
            'description': 'LV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.05021,
            'amber-gbp-per-kwh': -0.01021,
            'green-gbp-per-kwh': -0.00161,
            'gbp-per-kvarh': 0.00214},
        '003': {
            'description': 'LV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00656,
            'amber-gbp-per-kwh': -0.00656,
            'green-gbp-per-kwh': -0.00656,
            'gbp-per-kvarh': 0.00199},
        '004': {
            'description': 'LV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04521,
            'amber-gbp-per-kwh': -0.00856,
            'green-gbp-per-kwh': -0.00136,
            'gbp-per-kvarh': 0.00199},
        '005': {
            'description': 'HV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00393,
            'amber-gbp-per-kwh': -0.00393,
            'green-gbp-per-kwh': -0.00393,
            'gbp-per-kvarh': 0.00169},
        '006,478,910': {
            'description': 'HV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.03226,
            'amber-gbp-per-kwh': -0.00407,
            'green-gbp-per-kwh': -0.00067,
            'gbp-per-kvarh': 0.00169},
        '007': {
            'description': 'HV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00306,
            'amber-gbp-per-kwh': -0.00306,
            'green-gbp-per-kwh': -0.00306,
            'gbp-per-kvarh': 0.00082},
        '008': {
            'description': 'HV Sub Generation Non Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.02634,
            'amber-gbp-per-kwh': -0.00295,
            'green-gbp-per-kwh': -0.00046,
            'gbp-per-kvarh': 0.00082},
        '453,470': {
            'description': 'LV HH Metered',
            'gbp-per-mpan-per-day': 0.0830,
            'gbp-per-kva-per-day': 0.0249,
            'excess-gbp-per-kva-per-day': 0.0249,
            'red-gbp-per-kwh': 0.06200,
            'amber-gbp-per-kwh': 0.00961,
            'green-gbp-per-kwh': 0.00159,
            'gbp-per-kvarh': 0.00251},
        '450': {
            'description': 'LV HH Metered',
            'gbp-per-mpan-per-day': 0.0830,
            'gbp-per-kva-per-day': 0.0249,
            'excess-gbp-per-kva-per-day': 0.0249,
            'red-gbp-per-kwh': 0.06200,
            'amber-gbp-per-kwh': 0.00961,
            'green-gbp-per-kwh': 0.00159,
            'gbp-per-kvarh': 0.00251},
        '455': {
            'description': 'LVS HH Metered',
            'gbp-per-mpan-per-day': 0.0327,
            'gbp-per-kva-per-day': 0.0484,
            'excess-gbp-per-kva-per-day': 0.0484,
            'red-gbp-per-kwh': 0.04308,
            'amber-gbp-per-kwh': 0.00469,
            'green-gbp-per-kwh': 0.00082,
            'gbp-per-kvarh': 0.00176},
        '658,476': {
            'description': 'HV HH Metered',
            'gbp-per-mpan-per-day': 0.7968,
            'gbp-per-kva-per-day': 0.0544,
            'excess-gbp-per-kva-per-day': 0.0544,
            'red-gbp-per-kwh': 0.03745,
            'amber-gbp-per-kwh': 0.00343,
            'green-gbp-per-kwh': 0.00058,
            'gbp-per-kvarh': 0.00118},
        '655': {
            'description': 'HV HH Metered',
            'gbp-per-mpan-per-day': 0.7968,
            'gbp-per-kva-per-day': 0.0544,
            'excess-gbp-per-kva-per-day': 0.0544,
            'red-gbp-per-kwh': 0.03745,
            'amber-gbp-per-kwh': 0.00343,
            'green-gbp-per-kwh': 0.00058,
            'gbp-per-kvarh': 0.00118},
        '660': {
            'description': 'HVS HH Metered',
            'gbp-per-mpan-per-day': 1.3397,
            'gbp-per-kva-per-day': 0.0347,
            'excess-gbp-per-kva-per-day': 0.0347,
            'red-gbp-per-kwh': 0.02971,
            'amber-gbp-per-kwh': 0.00222,
            'green-gbp-per-kwh': 0.00036,
            'gbp-per-kvarh': 0.00094}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[20]]></value>
		<value><![CDATA[2010-08-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'lv-net': {
            'peak': 1.088,
            'winter-weekday': 1.083,
            'other': 1.077,
            'night': 1.073},
        'lv-sub': {
            'peak': 1.060,
            'winter-weekday': 1.058,
            'other': 1.056,
            'night': 1.056},
        'hv-net': {
            'peak': 1.042,
            'winter-weekday': 1.039,
            'other': 1.034,
            'night': 1.029},
        'hv-sub': {
            'peak': 1.021,
            'winter-weekday': 1.020,
            'other': 1.018,
            'night': 1.016}}

def llfc_groups():
    return {
        '001': '001,477,909',
        '006': '006,478,910',
        '127': '127,473',
        '401': '401,475',
        '453': '453,470',
        '473': '127,473',
        '475': '401,475',
        '476': '658,476',
        '477': '001,477,909',
        '478': '006,478,910',
        '658': '658,476',
        '909': '001,477,909',
        '910': '006,478,910'}

def tariffs():
    return {
        '001,477,909': {
            'description': 'LV Generation Intermittent',
            'gbp-per-mpan-per-day': 0,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00754,
            'amber-gbp-per-kwh': -0.00754,
            'green-gbp-per-kwh': -0.00754,
            'gbp-per-kvarh': 0.00214},
        '002': {
            'description': 'LV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.05021,
            'amber-gbp-per-kwh': -0.01021,
            'green-gbp-per-kwh': -0.00161,
            'gbp-per-kvarh': 0.00214},
        '003': {
            'description': 'LV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00},
            'red-gbp-per-kwh': -0.00656,
            'amber-gbp-per-kwh': -0.00656,
            'green-gbp-per-kwh': -0.00656,
            'gbp-per-kvarh': 0.00199,
        '004': {
            'description': 'LV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04521,
            'amber-gbp-per-kwh': -0.00856,
            'green-gbp-per-kwh': -0.00136,
            'gbp-per-kvarh': 0.00199},
        '005': {
            'description': 'HV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00393,
            'amber-gbp-per-kwh': -0.00393,
            'green-gbp-per-kwh': -0.00393,
            'gbp-per-kvarh': 0.00169},
        '006,478,910': {
            'description': 'HV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.03226,
            'amber-gbp-per-kwh': -0.00407,
            'green-gbp-per-kwh': -0.00067,
            'gbp-per-kvarh': 0.00169},
        '007': {
            'description': 'HV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'unrestricted-gbp-per-kwh': -0.00306,
            'red-gbp-per-kwh': -0.00306,
            'amber-gbp-per-kwh': -0.00306,
            'green-gbp-per-kwh': -0.00306,
            'gbp-per-kvarh': 0.00082},
        '008': {
            'description': 'HV Sub Generation Non Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.02634,
            'amber-gbp-per-kwh': -0.00295,
            'green-gbp-per-kwh': -0.00046,
            'gbp-per-kvarh': 0.00082},
        '450': {
            'description': 'LV HH Metered',
            'gbp-per-mpan-per-day': 0.0830,
            'gbp-per-kva-per-day': 0.0249,
            'excess-gbp-per-kva-per-day': 0.0249,
            'red-gbp-per-kwh': 0.06200,
            'amber-gbp-per-kwh': 0.00961,
            'green-gbp-per-kwh': 0.00159,
            'gbp-per-kvarh': 0.00251},
        '453,470': {
            'description': 'LV HH Metered',
            'gbp-per-mpan-per-day': 0.0830,
            'gbp-per-kva-per-day': 0.0249,
            'excess-gbp-per-kva-per-day': 0.0249,
            'red-gbp-per-kwh': 0.06200,
            'amber-gbp-per-kwh': 0.00961,
            'green-gbp-per-kwh': 0.00159,
            'gbp-per-kvarh': 0.00251},
        '455': {
            'description': 'LVS HH Metered',
            'gbp-per-mpan-per-day': 0.0327,
            'gbp-per-kva-per-day': 0.0484,
            'excess-gbp-per-kva-per-day': 0.0484,
            'red-gbp-per-kwh': 0.04308,
            'amber-gbp-per-kwh': 0.00469,
            'green-gbp-per-kwh': 0.00082,
            'gbp-per-kvarh': 0.00176},
        '658,476': {
            'description': 'HV HH Metered',
            'gbp-per-mpan-per-day': 0.7968,
            'gbp-per-kva-per-day': 0.0544,
            'excess-gbp-per-kva-per-day': 0.0544,
            'red-gbp-per-kwh': 0.03745,
            'amber-gbp-per-kwh': 0.00343,
            'green-gbp-per-kwh': 0.00058,
            'gbp-per-kvarh': 0.00118},
        '655': {
            'description': 'HV HH Metered',
            'gbp-per-mpan-per-day': 0.7968,
            'gbp-per-kva-per-day': 0.0544,
            'excess-gbp-per-kva-per-day': 0.0544,
            'red-gbp-per-kwh': 0.03745,
            'amber-gbp-per-kwh': 0.00343,
            'green-gbp-per-kwh': 0.00058,
            'gbp-per-kvarh': 0.00118},
        '660': {
            'description': 'HVS HH Metered',
            'gbp-per-mpan-per-day': 1.3397,
            'gbp-per-kva-per-day': 0.0347,
            'excess-gbp-per-kva-per-day': 0.0347,
            'red-gbp-per-kwh': 0.02971,
            'amber-gbp-per-kwh': 0.00222,
            'green-gbp-per-kwh': 0.00036,
            'gbp-per-kvarh': 0.00094}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[20]]></value>
		<value><![CDATA[2011-04-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'lv-net': {
            'peak': 1.089,
            'winter-weekday': 1.085,
            'other': 1.078,
            'night': 1.074},
        'lv-sub': {
            'peak': 1.061,
            'winter-weekday': 1.059,
            'other': 1.056,
            'night': 1.057},
        'hv-net': {
            'peak': 1.042,
            'winter-weekday': 1.040,
            'other': 1.035,
            'night': 1.029},
        'hv-sub': {
            'peak': 1.021,
            'winter-weekday': 1.020,
            'other': 1.018,
            'night': 1.017}}

def llfc_groups():
    return {
        '001': '001,477,909',
        '006': '006,478,910',
        '127': '127,473',
        '401': '401,475',
        '453': '453,470',
        '473': '127,473',
        '475': '401,475',
        '476': '658,476',
        '477': '001,477,909',
        '478': '006,478,910',
        '658': '658,476',
        '909': '001,477,909',
        '910': '006,478,910'}

def tariffs():
    return {
        '001,477,909': {
            'description': 'LV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00671,
            'amber-gbp-per-kwh': -0.00671,
            'green-gbp-per-kwh': -0.00671,
            'gbp-per-kvarh': 0.00192},
        '002': {
            'description': 'LV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04469,
            'amber-gbp-per-kwh': -0.00908,
            'green-gbp-per-kwh': -0.00144,
            'gbp-per-kvarh': 0.00192},
        '003': {
            'description': 'LV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00584,
            'amber-gbp-per-kwh': -0.00584,
            'green-gbp-per-kwh': -0.00584,
            'gbp-per-kvarh': 0.00178},
        '004': {
            'description': 'LV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04026,
            'amber-gbp-per-kwh': -0.00761,
            'green-gbp-per-kwh': -0.00121,
            'gbp-per-kvarh': 0.00178},
        '005': {
            'description': 'HV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9881,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00350,
            'amber-gbp-per-kwh': -0.00350,
            'green-gbp-per-kwh': -0.00350,
            'gbp-per-kvarh': 0.00151},
        '006,478,910': {
            'description': 'HV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.02871,
            'amber-gbp-per-kwh': -0.00361,
            'green-gbp-per-kwh': -0.00059,
            'gbp-per-kvarh': 0.00151},
        '007': {
            'description': 'HV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9881,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00272,
            'amber-gbp-per-kwh': -0.00272,
            'green-gbp-per-kwh': -0.00272,
            'gbp-per-kvarh': 0.00073},
        '008': {
            'description': 'HV Sub Generation Non Intermittent',
            'gbp-per-mpan-per-day': 0.9881,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.02346,
            'amber-gbp-per-kwh': -0.00261,
            'green-gbp-per-kwh': -0.00041,
            'gbp-per-kvarh': 0.00073},
        '453,470': {
            'description': 'LV HH Metered',
            'gbp-per-mpan-per-day': 0.0831,
            'gbp-per-kva-per-day': 0.0230,
            'excess-gbp-per-kva-per-day': 0.0230,
            'red-gbp-per-kwh': 0.06,
            'amber-gbp-per-kwh': 0.00883,
            'green-gbp-per-kwh': 0.00149,
            'gbp-per-kvarh': 0.00235},
        '455': {
            'description': 'LVS HH Metered',
            'gbp-per-mpan-per-day': 0.0328,
            'gbp-per-kva-per-day': 0.0433,
            'excess-gbp-per-kva-per-day': 0.0433,
            'red-gbp-per-kwh': 0.04672,
            'amber-gbp-per-kwh': 0.00482,
            'green-gbp-per-kwh': 0.00086,
            'gbp-per-kvarh': 0.00168},
        '658,476': {
            'description': 'HV HH Metered',
            'gbp-per-mpan-per-day': 0.7978,
            'gbp-per-kva-per-day': 0.0485,
            'excess-gbp-per-kva-per-day': 0.0485,
            'red-gbp-per-kwh': 0.03745,
            'amber-gbp-per-kwh': 0.00325,
            'green-gbp-per-kwh': 0.00057,
            'gbp-per-kvarh': 0.00116},
        '660': {
            'description': 'HVS HH Metered',
            'gbp-per-mpan-per-day': 1.3414,
            'gbp-per-kva-per-day': 0.0306,
            'excess-gbp-per-kva-per-day': 0.0306,
            'red-gbp-per-kwh': 0.03417,
            'amber-gbp-per-kwh': 0.00244,
            'green-gbp-per-kwh': 0.00042,
            'gbp-per-kvarh': 0.00094}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[20]]></value>
		<value><![CDATA[2011-07-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'lv-net': {
            'peak': 1.089,
            'winter-weekday': 1.085,
            'other': 1.078,
            'night': 1.074},
        'lv-sub': {
            'peak': 1.061,
            'winter-weekday': 1.059,
            'other': 1.056,
            'night': 1.057},
        'hv-net': {
            'peak': 1.042,
            'winter-weekday': 1.040,
            'other': 1.035,
            'night': 1.029},
        'hv-sub': {
            'peak': 1.021,
            'winter-weekday': 1.020,
            'other': 1.018,
            'night': 1.017}}

def llfc_groups():
    return {
        '001': '001,477,909',
        '006': '006,478,910',
        '127': '127,473',
        '401': '401,475',
        '453': '453,470',
        '473': '127,473',
        '475': '401,475',
        '476': '658,476',
        '477': '001,477,909',
        '478': '006,478,910',
        '658': '658,476',
        '909': '001,477,909',
        '910': '006,478,910'}

def tariffs():
    return {
        '001,477,909': {
            'description': 'LV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00671,
            'amber-gbp-per-kwh': -0.00671,
            'green-gbp-per-kwh': -0.00671,
            'gbp-per-kvarh': 0.00192},
        '002': {
            'description': 'LV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04469,
            'amber-gbp-per-kwh': -0.00908,
            'green-gbp-per-kwh': -0.00144,
            'gbp-per-kvarh': 0.00192},
        '003': {
            'description': 'LV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00584,
            'amber-gbp-per-kwh': -0.00584,
            'green-gbp-per-kwh': -0.00584,
            'gbp-per-kvarh': 0.00178},
        '004': {
            'description': 'LV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04026,
            'amber-gbp-per-kwh': -0.00761,
            'green-gbp-per-kwh': -0.00121,
            'gbp-per-kvarh': 0.00178},
        '005': {
            'description': 'HV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9881,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00350,
            'amber-gbp-per-kwh': -0.00350,
            'green-gbp-per-kwh': -0.00350,
            'gbp-per-kvarh': 0.00151},
        '006,478,910': {
            'description': 'HV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.9868,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.02871,
            'amber-gbp-per-kwh': -0.00361,
            'green-gbp-per-kwh': -0.00059,
            'gbp-per-kvarh': 0.00151},
        '007': {
            'description': 'HV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9881,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00272,
            'amber-gbp-per-kwh': -0.00272,
            'green-gbp-per-kwh': -0.00272,
            'gbp-per-kvarh': 0.00073},
        '008': {
            'description': 'HV Sub Generation Non Intermittent',
            'gbp-per-mpan-per-day': 0.9881,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.02346,
            'amber-gbp-per-kwh': -0.00261,
            'green-gbp-per-kwh': -0.00041,
            'gbp-per-kvarh': 0.00073},
        '453,470': {
            'description': 'LV HH Metered',
            'gbp-per-mpan-per-day': 0.0825,
            'gbp-per-kva-per-day': 0.0229,
            'excess-gbp-per-kva-per-day': 0.0229,
            'red-gbp-per-kwh': 0.0702,
            'amber-gbp-per-kwh': 0.00924,
            'green-gbp-per-kwh': 0.00161,
            'gbp-per-kvarh': 0.00267},
        '455': {
            'description': 'LVS HH Metered',
            'gbp-per-mpan-per-day': 0.0325,
            'gbp-per-kva-per-day': 0.0432,
            'excess-gbp-per-kva-per-day': 0.0432,
            'red-gbp-per-kwh': 0.0569,
            'amber-gbp-per-kwh': 0.00530,
            'green-gbp-per-kwh': 0.001,
            'gbp-per-kvarh': 0.00199},
        '658,476': {
            'description': 'HV HH Metered',
            'gbp-per-mpan-per-day': 0.7920,
            'gbp-per-kva-per-day': 0.0484,
            'excess-gbp-per-kva-per-day': 0.0484,
            'red-gbp-per-kwh': 0.04662,
            'amber-gbp-per-kwh': 0.00367,
            'green-gbp-per-kwh': 0.00069,
            'gbp-per-kvarh': 0.00143},
        '660': {
            'description': 'HVS HH Metered',
            'gbp-per-mpan-per-day': 1.3316,
            'gbp-per-kva-per-day': 0.0306,
            'excess-gbp-per-kva-per-day': 0.0306,
            'red-gbp-per-kwh': 0.04367,
            'amber-gbp-per-kwh': 0.00288,
            'green-gbp-per-kwh': 0.00054,
            'gbp-per-kvarh': 0.00120}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[20]]></value>
		<value><![CDATA[2011-10-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'lv-net': {
            'peak': 1.089,
            'winter-weekday': 1.085,
            'other': 1.078,
            'night': 1.074},
        'lv-sub': {
            'peak': 1.061,
            'winter-weekday': 1.059,
            'other': 1.056,
            'night': 1.057},
        'hv-net': {
            'peak': 1.042,
            'winter-weekday': 1.040,
            'other': 1.035,
            'night': 1.029},
        'hv-sub': {
            'peak': 1.021,
            'winter-weekday': 1.020,
            'other': 1.018,
            'night': 1.017}}

def llfc_groups():
    return {
        '001': '001,477,909',
        '006': '006,478,910',
        '127': '127,473',
        '401': '401,475',
        '453': '453,470',
        '473': '127,473',
        '475': '401,475',
        '476': '658,476',
        '477': '001,477,909',
        '478': '006,478,910',
        '658': '658,476',
        '909': '001,477,909',
        '910': '006,478,910'}

def tariffs():
    return {
        '001,477,909': {
            'description': 'LV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00670,
            'amber-gbp-per-kwh': -0.00670,
            'green-gbp-per-kwh': -0.00670,
            'gbp-per-kvarh': 0.00191},
        '002': {
            'description': 'LV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04460,
            'amber-gbp-per-kwh': -0.00906,
            'green-gbp-per-kwh': -0.00144,
            'gbp-per-kvarh': 0.00191},
        '003': {
            'description': 'LV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00583,
            'amber-gbp-per-kwh': -0.00583,
            'green-gbp-per-kwh': -0.00583,
            'gbp-per-kvarh': 0.00177},
        '004': {
            'description': 'LV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04017,
            'amber-gbp-per-kwh': -0.00759,
            'green-gbp-per-kwh': -0.00121,
            'gbp-per-kvarh': 0.00177},
        '005': {
            'description': 'HV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9811,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00349,
            'amber-gbp-per-kwh': -0.00349,
            'green-gbp-per-kwh': -0.00349,
            'gbp-per-kvarh': 0.00151},
        '006,478,910': {
            'description': 'HV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.9811,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.02865,
            'amber-gbp-per-kwh': -0.00360,
            'green-gbp-per-kwh': -0.00059,
            'gbp-per-kvarh': 0.00151},
        '007': {
            'description': 'HV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9811,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00271,
            'amber-gbp-per-kwh': -0.00271,
            'green-gbp-per-kwh': -0.00271,
            'gbp-per-kvarh': 0.00073},
        '008': {
            'description': 'HV Sub Generation Non Intermittent',
            'gbp-per-mpan-per-day': 0.9811,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.02341,
            'amber-gbp-per-kwh': -0.00261,
            'green-gbp-per-kwh': -0.00041,
            'gbp-per-kvarh': 0.00073},
        '401,475': {
            'description': 'LV Medium Non Domestic',
            'gbp-per-mpan-per-day': 0.2157,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': 0.01744,
            'amber-gbp-per-kwh': 0.0092,
            'green-gbp-per-kwh': 0.000,
            'gbp-per-kvarh': 0.00},
        '453,470': {
            'description': 'LV HH Metered',
            'gbp-per-mpan-per-day': 0.0826,
            'gbp-per-kva-per-day': 0.0229,
            'excess-gbp-per-kva-per-day': 0.0229,
            'red-gbp-per-kwh': 0.07022,
            'amber-gbp-per-kwh': 0.00924,
            'green-gbp-per-kwh': 0.00161,
            'gbp-per-kvarh': 0.00267},
        '455': {
            'description': 'LVS HH Metered',
            'gbp-per-mpan-per-day': 0.0325,
            'gbp-per-kva-per-day': 0.0432,
            'excess-gbp-per-kva-per-day': 0.0432,
            'red-gbp-per-kwh': 0.05691,
            'amber-gbp-per-kwh': 0.00530,
            'green-gbp-per-kwh': 0.001,
            'gbp-per-kvarh': 0.00199},
        '658,476': {
            'description': 'HV HH Metered',
            'gbp-per-mpan-per-day': 0.7921,
            'gbp-per-kva-per-day': 0.0484,
            'excess-gbp-per-kva-per-day': 0.0484,
            'red-gbp-per-kwh': 0.04664,
            'amber-gbp-per-kwh': 0.00367,
            'green-gbp-per-kwh': 0.00069,
            'gbp-per-kvarh': 0.00143},
        '660': {
            'description': 'HVS HH Metered',
            'gbp-per-mpan-per-day': 1.3319,
            'gbp-per-kva-per-day': 0.0306,
            'excess-gbp-per-kva-per-day': 0.0306,
            'red-gbp-per-kwh': 0.04368,
            'amber-gbp-per-kwh': 0.00288,
            'green-gbp-per-kwh': 0.00054,
            'gbp-per-kvarh': 0.00120}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[20]]></value>
		<value><![CDATA[2012-04-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'lv-net': {
            'peak': 1.087,
            'winter-weekday': 1.080,
            'other': 1.073,
            'night': 1.070},
        'lv-sub': {
            'peak': 1.062,
            'winter-weekday': 1.058,
            'other': 1.056,
            'night': 1.056},
        'hv-net': {
            'peak': 1.044,
            'winter-weekday': 1.039,
            'other': 1.034,
            'night': 1.028},
        'hv-sub': {
            'peak': 1.021,
            'winter-weekday': 1.019,
            'other': 1.018,
            'night': 1.016}}

def llfc_groups():
    return {
        '001': '001,477,909',
        '006': '006,478,910',
        '127': '127,473',
        '401': '401,475',
        '453': '453,470',
        '473': '127,473',
        '475': '401,475',
        '476': '658,476',
        '477': '001,477,909',
        '478': '006,478,910',
        '658': '658,476',
        '909': '001,477,909',
        '910': '006,478,910'}

def tariffs():
    return {
        '001,477,909': {
            'description': 'LV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00676,
            'amber-gbp-per-kwh': -0.00676,
            'green-gbp-per-kwh': -0.00676,
            'gbp-per-kvarh': 0.00186},
        '002': {
            'description': 'LV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04946,
            'amber-gbp-per-kwh': -0.00987,
            'green-gbp-per-kwh': -0.00068,
            'gbp-per-kvarh': 0.00186},
        '003': {
            'description': 'LV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00590,
            'amber-gbp-per-kwh': -0.00590,
            'green-gbp-per-kwh': -0.00590,
            'gbp-per-kvarh': 0.00173},
        '004': {
            'description': 'LV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04526,
            'amber-gbp-per-kwh': -0.00813,
            'green-gbp-per-kwh': -0.00056,
            'gbp-per-kvarh': 0.00173},
        '005': {
            'description': 'HV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9811,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00354,
            'amber-gbp-per-kwh': -0.00354,
            'green-gbp-per-kwh': -0.00354,
            'gbp-per-kvarh': 0.00151},
        '006,478,910': {
            'description': 'HV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.9913,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.03408,
            'amber-gbp-per-kwh': -0.00330,
            'green-gbp-per-kwh': -0.00020,
            'gbp-per-kvarh': 0.00147},
        '007': {
            'description': 'HV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9913,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00276,
            'amber-gbp-per-kwh': -0.00276,
            'green-gbp-per-kwh': -0.00276,
            'gbp-per-kvarh': 0.00072},
        '008': {
            'description': 'HV Sub Generation Non Intermittent',
            'gbp-per-mpan-per-day': 0.9913,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.02761,
            'amber-gbp-per-kwh': -0.00232,
            'green-gbp-per-kwh': -0.00014,
            'gbp-per-kvarh': 0.00072},
        '453,470': {
            'description': 'LV HH Metered',
            'gbp-per-mpan-per-day': 0.0834,
            'gbp-per-kva-per-day': 0.0238,
            'excess-gbp-per-kva-per-day': 0.0238,
            'red-gbp-per-kwh': 0.09729,
            'amber-gbp-per-kwh': 0.01078,
            'green-gbp-per-kwh': 0.00061,
            'gbp-per-kvarh': 0.00309},
        '455': {
            'description': 'LVS HH Metered',
            'gbp-per-mpan-per-day': 0.0329,
            'gbp-per-kva-per-day': 0.0455,
            'excess-gbp-per-kva-per-day': 0.0455,
            'red-gbp-per-kwh': 0.08357,
            'amber-gbp-per-kwh': 0.00606,
            'green-gbp-per-kwh': 0.00027,
            'gbp-per-kvarh': 0.00243},
        '658,476': {
            'description': 'HV HH Metered',
            'gbp-per-mpan-per-day': 0.8004,
            'gbp-per-kva-per-day': 0.0509,
            'excess-gbp-per-kva-per-day': 0.0509,
            'red-gbp-per-kwh': 0.06871,
            'amber-gbp-per-kwh': 0.00431,
            'green-gbp-per-kwh': 0.00017,
            'gbp-per-kvarh': 0.00177},
        '660': {
            'description': 'HVS HH Metered',
            'gbp-per-mpan-per-day': 1.4038226,
            'gbp-per-kva-per-day': 0.0322524,
            'excess-gbp-per-kva-per-day': 0.0322524,
            'red-gbp-per-kwh': 0.05521152,
            'amber-gbp-per-kwh': 0.00343872,
            'green-gbp-per-kwh': 0.00069012,
            'gbp-per-kvarh': 0.0012648}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[20]]></value>
		<value><![CDATA[2013-04-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'lv-net': {
            'peak': 1.087,
            'winter-weekday': 1.080,
            'other': 1.073,
            'night': 1.070},
        'lv-sub': {
            'peak': 1.062,
            'winter-weekday': 1.058,
            'other': 1.056,
            'night': 1.056},
        'hv-net': {
            'peak': 1.044,
            'winter-weekday': 1.039,
            'other': 1.034,
            'night': 1.028},
        'hv-sub': {
            'peak': 1.021,
            'winter-weekday': 1.019,
            'other': 1.018,
            'night': 1.016}}

def llfc_groups():
    return {
        '001': '001,477,909',
        '006': '006,478,910',
        '127': '127,473',
        '401': '401,475',
        '453': '453,470',
        '473': '127,473',
        '475': '401,475',
        '476': '658,476',
        '477': '001,477,909',
        '478': '006,478,910',
        '658': '658,476',
        '909': '001,477,909',
        '910': '006,478,910'}

def tariffs():
    return {
        '001,477,909': {
            'description': 'LV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00*1.14,
            'gbp-per-kva-per-day': 0.00*1.14,
            'excess-gbp-per-kva-per-day': 0.00*1.14,
            'red-gbp-per-kwh': -0.00676*1.14,
            'amber-gbp-per-kwh': -0.00676*1.14,
            'green-gbp-per-kwh': -0.00676*1.14,
            'gbp-per-kvarh': 0.00186*1.14},
        '002': {
            'description': 'LV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00*1.14,
            'gbp-per-kva-per-day': 0.00*1.14,
            'excess-gbp-per-kva-per-day': 0.00*1.14,
            'red-gbp-per-kwh': -0.04946*1.14,
            'amber-gbp-per-kwh': -0.00987*1.14,
            'green-gbp-per-kwh': -0.00068*1.14,
            'gbp-per-kvarh': 0.00186*1.14},
        '003': {
            'description': 'LV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00*1.14,
            'gbp-per-kva-per-day': 0.00*1.14,
            'excess-gbp-per-kva-per-day': 0.00*1.14,
            'red-gbp-per-kwh': -0.00590*1.14,
            'amber-gbp-per-kwh': -0.00590*1.14,
            'green-gbp-per-kwh': -0.00590*1.14,
            'gbp-per-kvarh': 0.00173*1.14},
        '004': {
            'description': 'LV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00*1.14,
            'gbp-per-kva-per-day': 0.00*1.14,
            'excess-gbp-per-kva-per-day': 0.00*1.14,
            'red-gbp-per-kwh': -0.04526*1.14,
            'amber-gbp-per-kwh': -0.00813*1.14,
            'green-gbp-per-kwh': -0.00056*1.14,
            'gbp-per-kvarh': 0.00173*1.14},
        '005': {
            'description': 'HV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9811*1.14,
            'gbp-per-kva-per-day': 0.00*1.14,
            'excess-gbp-per-kva-per-day': 0.00*1.14,
            'red-gbp-per-kwh': -0.00354*1.14,
            'amber-gbp-per-kwh': -0.00354*1.14,
            'green-gbp-per-kwh': -0.00354*1.14,
            'gbp-per-kvarh': 0.00151*1.14},
        '006,478,910': {
            'description': 'HV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.9913*1.14,
            'gbp-per-kva-per-day': 0.00*1.14,
            'excess-gbp-per-kva-per-day': 0.00*1.14,
            'red-gbp-per-kwh': -0.03408*1.14,
            'amber-gbp-per-kwh': -0.00330*1.14,
            'green-gbp-per-kwh': -0.00020*1.14,
            'gbp-per-kvarh': 0.00147*1.14},
        '007': {
            'description': 'HV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.9913*1.14,
            'gbp-per-kva-per-day': 0.00*1.14,
            'excess-gbp-per-kva-per-day': 0.00*1.14,
            'red-gbp-per-kwh': -0.00276*1.14,
            'amber-gbp-per-kwh': -0.00276*1.14,
            'green-gbp-per-kwh': -0.00276*1.14,
            'gbp-per-kvarh': 0.00072*1.14},
        '008': {
            'description': 'HV Sub Generation Non Intermittent',
            'gbp-per-mpan-per-day': 0.9913*1.14,
            'gbp-per-kva-per-day': 0.00*1.14,
            'excess-gbp-per-kva-per-day': 0.00*1.14,
            'red-gbp-per-kwh': -0.02761*1.14,
            'amber-gbp-per-kwh': -0.00232*1.14,
            'green-gbp-per-kwh': -0.00014*1.14,
            'gbp-per-kvarh': 0.00072*1.14},
        '453,470': {
            'description': 'LV HH Metered',
            'gbp-per-mpan-per-day': 0.0834*1.14,
            'gbp-per-kva-per-day': 0.0238*1.14,
            'excess-gbp-per-kva-per-day': 0.0238*1.14,
            'red-gbp-per-kwh': 0.09729*1.14,
            'amber-gbp-per-kwh': 0.01078*1.14,
            'green-gbp-per-kwh': 0.00061*1.14,
            'gbp-per-kvarh': 0.00309*1.14},
        '455': {
            'description': 'LVS HH Metered',
            'gbp-per-mpan-per-day': 0.0329*1.14,
            'gbp-per-kva-per-day': 0.0455*1.14,
            'excess-gbp-per-kva-per-day': 0.0455*1.14,
            'red-gbp-per-kwh': 0.08357*1.14,
            'amber-gbp-per-kwh': 0.00606*1.14,
            'green-gbp-per-kwh': 0.00027*1.14,
            'gbp-per-kvarh': 0.00243*1.14},
        '658,476': {
            'description': 'HV HH Metered',
            'gbp-per-mpan-per-day': 0.8004*1.14,
            'gbp-per-kva-per-day': 0.0509*1.14,
            'excess-gbp-per-kva-per-day': 0.0509*1.14,
            'red-gbp-per-kwh': 0.06871*1.14,
            'amber-gbp-per-kwh': 0.00431*1.14,
            'green-gbp-per-kwh': 0.00017*1.14,
            'gbp-per-kvarh': 0.00177*1.14},
        '660': {
            'description': 'HVS HH Metered',
            'gbp-per-mpan-per-day': 1.4038226*1.14,
            'gbp-per-kva-per-day': 0.0322524*1.14,
            'excess-gbp-per-kva-per-day': 0.0322524*1.14,
            'red-gbp-per-kwh': 0.05521152*1.14,
            'amber-gbp-per-kwh': 0.00343872*1.14,
            'green-gbp-per-kwh': 0.00069012*1.14,
            'gbp-per-kvarh': 0.0012648*1.14}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract]]></value>
		<value><![CDATA[21]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[2000-01-01T00:30Z]]></value>
		<value><![CDATA[]]>
		</value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract]]></value>
		<value><![CDATA[22]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[2000-01-01T00:00Z]]></value>
		<value><![CDATA[]]></value>
		<value><![CDATA[from net.sf.chellow.billing import NonCoreContract
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad import UserException
from net.sf.chellow.physical import HhStartDate
from java.lang import System

contract_from = contract.getStartRateScript().getStartDate()
contract_to = contract.getFinishRateScript().getFinishDate()


def get_rate_script(date):
    return contract.rateScripts(date, date)[0]


def hh(data_source):
    bill = data_source.supplier_bill

    if data_source.start_date.after(contract_from):
        chunk_from = data_source.start_date
    else:
        chunk_from = contract_from
    if data_source.finish_date.before(contract_to):
        chunk_to = data_source.finish_date
    else:
        chunk_to = contract_to

    if len(data_source.dno_contracts) == 1:
        hh_data = data_source.hh_data
        hh_times = data_source.hh_times
    else:
        hh_data = [h for h in data_source.hh_data if not h['start-date'].before(chunk_from.getDate()) and not h['start-date'].after(chunk_to.getDate())]
        hh_times = [h for h in data_source.hh_times if not h['start-date'].before(chunk_from.getDate()) and not h['start-date'].after(chunk_to.getDate())]

    voltage_level_code = data_source.voltage_level_code
    is_substation = data_source.is_substation
    llfc_code = data_source.llfc_code

    bill['duos-night-kwh'] = 0
    bill['duos-night-gbp'] = 0
    bill['duos-day-kwh'] = 0
    bill['duos-day-gbp'] = 0

    if voltage_level_code == 'HV':
        substation = ''
    else:
        if is_substation:
            substation = '-sub'
        else:
            substation = '-net'
    vl_key = voltage_level_code.lower() + substation

    tariff = data_source.hh_rate(contract, chunk_from.getDate(), 'tariffs')[llfc_code]
    lafs = data_source.hh_rate(contract, chunk_from.getDate(), 'lafs')[vl_key]

    if data_source.is_import:
        bill['duos-night-kwh'] = 0
        bill['duos-night-gbp'] = 0
        bill['duos-day-kwh'] = 0
        bill['duos-day-gbp'] = 0
        day_rate = tariff['day-gbp-per-kwh']
        night_rate = tariff['night-gbp-per-kwh']
        for hh in data_source.hh_data:
            if 6 < hh['ct-decimal-hour'] <= 23:
                bill['duos-day-kwh'] += hh['msp-kwh']
                bill['duos-day-gbp'] += hh['msp-kwh'] * day_rate
            else:
                bill['duos-night-kwh'] += hh['msp-kwh']
                bill['duos-night-gbp'] += hh['msp-kwh'] * night_rate

    for hh in hh_data:
        if 23 < hh['ct-decimal-hour'] <= 6:
            slot_name = 'night'
        elif 7 > hh['ct-day-of-week'] > 1 and (hh['ct-month'] > Calendar.OCTOBER or hh['ct-month'] < Calendar.MARCH):
            if 15.5 < hh['ct-decimal-hour'] < 18:
                slot_name = 'winter-weekday-peak'
            elif 6 < hh['ct-decimal-hour'] < 15:
                slot_name = 'winter-weekday-day'
            else:
                slot_name = 'other'
        else:
            slot_name = 'other'
        hh['laf'] = lafs[slot_name]
        hh['gsp-kwh'] = hh['laf'] * hh['msp-kwh']
        hh['gsp-kw'] = hh['gsp-kwh'] * 2

    for hh in hh_times:
        if hh['utc-is-month-end']:
            tariff = data_source.hh_rate(contract, chunk_to.getDate(), 'tariffs')[data_source.llfc_code]
            reactive_rate = tariff['reactive-gbp-per-kvarh']
            bill['duos-reactive-rate'] = reactive_rate

            utc_cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
            utc_cal.setTime(data_source.finish_date.getDate())
            utc_cal.add(Calendar.MINUTE, -1)
            days_in_month = utc_cal.get(Calendar.DAY_OF_MONTH)
    
            if not data_source.is_displaced:
                md_kva = max((datum['msp-kw'] ** 2 + datum['imp-msp-kvar'] ** 2) ** 0.5 for datum in data_source.hh_data)

                bill.setdefault('duos-availability-gbp', 0)

                billed_avail = max(md_kva, data_source.availability)
                bill['duos-availability-agreed-kva'] = data_source.availability
                bill['duos-availability-billed-kva'] = billed_avail

                availability_rate = tariff['capacity-gbp-per-kva-per-day']
                bill['duos-availability-rate'] = availability_rate

                bill['duos-availability-gbp'] += availability_rate * billed_avail * days_in_month
    
            bill.setdefault('duos-reactive-gbp', 0)

            month_imp_kvarh = sum(h['imp-msp-kvarh'] for h in hh_data)
            month_kwh = sum(h['msp-kwh'] for h in hh_data)

            if month_kwh is None:
                month_kwh = 0

            bill['duos-reactive-gbp'] += max(0, month_imp_kvarh - month_kwh / 2) * reactive_rate]]></value>
		<value><![CDATA[def lafs():
    return {
        'hv': {
            'winter-weekday-peak': 1.057,
            'winter-weekday-day': 1.051,
            'night': 1.040,
            'other': 1.045},
        'lv-sub': {
            'winter-weekday-peak': 1.068,
            'winter-weekday-day': 1.064,
            'night': 1.059,
            'other': 1.060},
        'lv-net': {
            'winter-weekday-peak': 1.074,
            'winter-weekday-day': 1.069,
            'night': 1.064,
            'other': 1.065}}


def tariffs():
    return {
        '510': {
            'capacity-gbp-per-kva-per-day': 0.0372,
            'day-gbp-per-kwh': 0.0047,
            'night-gbp-per-kwh': 0.0014,
            'reactive-gbp-per-kvarh': 0.0023},
        '520': {
            'capacity-gbp-per-kva-per-day': 0.0372,
            'day-gbp-per-kwh': 0.0047,
            'night-gbp-per-kwh': 0.0014,
            'reactive-gbp-per-kvarh': 0.0023},
        '540': {
            'capacity-gbp-per-kva-per-day': 0.0352,
            'day-gbp-per-kwh': 0.0080,
            'night-gbp-per-kwh': 0.0028,
            'reactive-gbp-per-kvarh': 0.0033},
        '550': {
            'capacity-gbp-per-kva-per-day': 0.0352,
            'day-gbp-per-kwh': 0.0080,
            'night-gbp-per-kwh': 0.0039,
            'reactive-gbp-per-kvarh': 0.0033},
        '570': {
            'capacity-gbp-per-kva-per-day': 0.0332,
            'day-gbp-per-kwh': 0.0121,
            'night-gbp-per-kwh': 0.0040,
            'reactive-gbp-per-kvarh': 0.0042},
        '580': {
            'capacity-gbp-per-kva-per-day': 0.0332,
            'day-gbp-per-kwh': 0.0121,
            'night-gbp-per-kwh': 0.0040,
            'reactive-gbp-per-kvarh': 0.0042}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[22]]></value>
		<value><![CDATA[2007-04-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'hv': {
            'winter-weekday-peak': 1.057,
            'winter-weekday-day': 1.051,
            'night': 1.040,
            'other': 1.045},
        'lv-sub': {
            'winter-weekday-peak': 1.068,
            'winter-weekday-day': 1.064,
            'night': 1.059,
            'other': 1.060},
        'lv-net': {
            'winter-weekday-peak': 1.074,
            'winter-weekday-day': 1.069,
            'night': 1.064,
            'other': 1.065}}


def tariffs():
    return {
        '510': {
            'capacity-gbp-per-kva-per-day': 0.0372,
            'day-gbp-per-kwh': 0.0047,
            'night-gbp-per-kwh': 0.0014,
            'reactive-gbp-per-kvarh': 0.0023},
        '520': {
            'capacity-gbp-per-kva-per-day': 0.0372,
            'day-gbp-per-kwh': 0.0047,
            'night-gbp-per-kwh': 0.0014,
            'reactive-gbp-per-kvarh': 0.0023},
        '540': {
            'capacity-gbp-per-kva-per-day': 0.0352,
            'day-gbp-per-kwh': 0.0080,
            'night-gbp-per-kwh': 0.0028,
            'reactive-gbp-per-kvarh': 0.0033},
        '550': {
            'capacity-gbp-per-kva-per-day': 0.0352,
            'day-gbp-per-kwh': 0.0080,
            'night-gbp-per-kwh': 0.0039,
            'reactive-gbp-per-kvarh': 0.0033},
        '570': {
            'capacity-gbp-per-kva-per-day': 0.0332,
            'day-gbp-per-kwh': 0.0121,
            'night-gbp-per-kwh': 0.0040,
            'reactive-gbp-per-kvarh': 0.0042},
        '580': {
            'capacity-gbp-per-kva-per-day': 0.0332,
            'day-gbp-per-kwh': 0.0121,
            'night-gbp-per-kwh': 0.0040,
            'reactive-gbp-per-kvarh': 0.0042}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[22]]></value>
		<value><![CDATA[2008-04-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'hv': {
            'winter-weekday-peak': 1.058,
            'winter-weekday-day': 1.051,
            'night': 1.041,
            'other': 1.046},
        'lv-sub': {
            'winter-weekday-peak': 1.070,
            'winter-weekday-day': 1.066,
            'night': 1.060,
            'other': 1.062},
        'lv-net': {
            'winter-weekday-peak': 1.079,
            'winter-weekday-day': 1.073,
            'night': 1.067,
            'other': 1.069}}

def tariffs():
    return {
        '510': {
            'capacity-gbp-per-kva-per-day': 0.0378,
            'day-gbp-per-kwh': 0.0039,
            'night-gbp-per-kwh': 0.0012,
            'reactive-gbp-per-kvarh': 0.0023},
        '520': {
            'capacity-gbp-per-kva-per-day': 0.0378,
            'day-gbp-per-kwh': 0.0039,
            'night-gbp-per-kwh': 0.0012,
            'reactive-gbp-per-kvarh': 0.0023},
        '521': {
            'capacity-gbp-per-kva-per-day': 0.0174,
            'day-gbp-per-kwh': 0,
            'night-gbp-per-kwh': 0},
        '540': {
            'capacity-gbp-per-kva-per-day': 0.0368,
            'day-gbp-per-kwh': 0.0073,
            'night-gbp-per-kwh': 0.0026,
            'reactive-gbp-per-kvarh': 0.0033},
        '550': {
            'capacity-gbp-per-kva-per-day': 0.0368,
            'day-gbp-per-kwh': 0.0073,
            'night-gbp-per-kwh': 0.0026,
            'reactive-gbp-per-kvarh': 0.0033},
        '570': {
            'capacity-gbp-per-kva-per-day': 0.0358,
            'day-gbp-per-kwh': 0.0115,
            'night-gbp-per-kwh': 0.0038,
            'reactive-gbp-per-kvarh': 0.0042},
        '580': {
            'capacity-gbp-per-kva-per-day': 0.0358,
            'day-gbp-per-kwh': 0.0115,
            'night-gbp-per-kwh': 0.0038,
            'reactive-gbp-per-kvarh': 0.0042},
        '581': {
            'capacity-gbp-per-kva-per-day': 0.0167,
            'day-gbp-per-kwh': 0,
            'night-gbp-per-kwh': 0}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[22]]></value>
		<value><![CDATA[2009-04-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'hv': {
            'winter-weekday-peak': 1.058,
            'winter-weekday-day': 1.051,
            'night': 1.041,
            'other': 1.046},
        'lv-sub': {
            'winter-weekday-peak': 1.070,
            'winter-weekday-day': 1.066,
            'night': 1.060,
            'other': 1.062},
        'lv-net': {
            'winter-weekday-peak': 1.079,
            'winter-weekday-day': 1.073,
            'night': 1.067,
            'other': 1.069}}

def winter_weekday_peak_hv():
    return 1.058

def winter_weekday_day_hv():
    return 1.051

def night_hv():
    return 1.041

def other_hv():
    return 1.046

def winter_weekday_peak_lv_sub():
    return 1.070

def winter_weekday_day_lv_sub():
    return 1.066

def night_lv_sub():
    return 1.060

def other_lv_sub():
    return 1.062

def winter_weekday_peak_lv_net():
    return 1.079

def winter_weekday_day_lv_net():
    return 1.073

def night_lv_net():
    return 1.067

def other_lv_net():
    return 1.069

def duos_day_hv_gbp_per_kwh():
    return 0.0047

def duos_night_hv_gbp_per_kwh():
    return 0.0014

def standing_hv_gbp_per_month():
    return 0

def availability_hv_gbp_per_kva_per_day():
    return 0.0387

def duos_reactive_hv_gbp_per_kvarh():
    return 0.0023

def duos_day_lv_net_gbp_per_kwh():
    return 0.0127

def duos_night_lv_net_gbp_per_kwh():
    return 0.0045

def standing_lv_net_gbp_per_month():
    return 0

def availability_lv_net_gbp_per_kva_per_day():
    return 0.039

def duos_reactive_lv_net_gbp_per_kvarh():
    return 0.0042

def duos_day_lv_sub_gbp_per_kwh():
    return 0.0081

def duos_night_lv_sub_gbp_per_kwh():
    return 0.0028

def standing_lv_sub_gbp_per_month():
    return 0

def availability_lv_sub_gbp_per_kva_per_day():
    return 0.0389

def duos_reactive_lv_sub_gbp_per_kvarh():
    return 0.0033

def tariffs():
    return {
        '510': {
            'capacity-gbp-per-kva-per-day': 0.038700,
            'day-gbp-per-kwh': 0.004700,
            'night-gbp-per-kwh': 0.001400,
            'reactive-gbp-per-kvarh': 0.002300},
        '520': {
            'capacity-gbp-per-kva-per-day': 0.038700,
            'day-gbp-per-kwh': 0.004700,
            'night-gbp-per-kwh': 0.001400,
            'reactive-gbp-per-kvarh': 0.002300},
        '540': {
            'capacity-gbp-per-kva-per-day': 0.038900,
            'day-gbp-per-kwh': 0.008100,
            'night-gbp-per-kwh': 0.002800,
            'reactive-gbp-per-kvarh': 0.003300},
        '550': {
            'capacity-gbp-per-kva-per-day': 0.038900,
            'day-gbp-per-kwh': 0.008100,
            'night-gbp-per-kwh': 0.002800,
            'reactive-gbp-per-kvarh': 0.003300},
        '570': {
            'capacity-gbp-per-kva-per-day': 0.039000,
            'day-gbp-per-kwh': 0.012700,
            'night-gbp-per-kwh': 0.004500,
            'reactive-gbp-per-kvarh': 0.004200},
        '580': {
            'capacity-gbp-per-kva-per-day': 0.039000,
            'day-gbp-per-kwh': 0.012700,
            'night-gbp-per-kwh': 0.004500,
            'reactive-gbp-per-kvarh': 0.004200}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[22]]></value>
		<value><![CDATA[2009-08-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'hv': {
            'winter-weekday-peak': 1.058,
            'winter-weekday-day': 1.051,
            'night': 1.041,
            'other': 1.046},
        'lv-sub': {
            'winter-weekday-peak': 1.070,
            'winter-weekday-day': 1.066,
            'night': 1.060,
            'other': 1.062},
        'lv-net': {
            'winter-weekday-peak': 1.079,
            'winter-weekday-day': 1.073,
            'night': 1.067,
            'other': 1.069}}

def tariffs():
    return {
        '110': {
            'day-gbp-per-kwh': 0.019400,
            'night-gbp-per-kwh': 0.019400},
        '210': {
            'day-gbp-per-kwh': 0.026700,
            'night-gbp-per-kwh': 0.004800},
        '510': {
            'capacity-gbp-per-kva-per-day': 0.038700,
            'day-gbp-per-kwh': 0.004700,
            'night-gbp-per-kwh': 0.001400,
            'reactive-gbp-per-kvarh': 0.002300},
        '520': {
            'capacity-gbp-per-kva-per-day': 0.038700,
            'day-gbp-per-kwh': 0.004700,
            'night-gbp-per-kwh': 0.001400,
            'reactive-gbp-per-kvarh': 0.002300},
        '521': {
            'capacity-gbp-per-kva-per-day': 0.018600,
            'reactive-gbp-per-kvarh': 0.002300},
        '524': {
            'capacity-gbp-per-kva-per-day': 0.018600},
        '526': {
            'capacity-gbp-per-kva-per-day': 0.018600},
        '527': {
            'capacity-gbp-per-kva-per-day': 0.018600},
        '540': {
            'capacity-gbp-per-kva-per-day': 0.038900,
            'day-gbp-per-kwh': 0.008100,
            'night-gbp-per-kwh': 0.002800,
            'reactive-gbp-per-kvarh': 0.003300},
        '550': {
            'capacity-gbp-per-kva-per-day': 0.038900,
            'day-gbp-per-kwh': 0.008100,
            'night-gbp-per-kwh': 0.002800,
            'reactive-gbp-per-kvarh': 0.003300},
        '551': {
            'capacity-gbp-per-kva-per-day': 0.018200},
        '570': {
            'capacity-gbp-per-kva-per-day': 0.039000,
            'day-gbp-per-kwh': 0.012700,
            'night-gbp-per-kwh': 0.004500,
            'reactive-gbp-per-kvarh': 0.004200},
        '580': {
            'capacity-gbp-per-kva-per-day': 0.039000,
            'day-gbp-per-kwh': 0.012700,
            'night-gbp-per-kwh': 0.004500,
            'reactive-gbp-per-kvarh': 0.004200}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[22]]></value>
		<value><![CDATA[2010-04-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'lv-net': {
            'winter-weekday-peak': 1.078,
            'winter-weekday-day': 1.072,
            'night': 1.067,
            'other': 1.069},
        'lv-sub': {
            'winter-weekday-peak': 1.070,
            'winter-weekday-day': 1.066,
            'night': 1.060,
            'other': 1.062},
        'hv': {
            'winter-weekday-peak': 1.058,
            'winter-weekday-day': 1.051,
            'night': 1.040,
            'other': 1.046}}

def tariffs():
    return {
        '510': {
            'description': 'High Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.6338,
            'gbp-per-kva-per-day': 0.0163,
            'excess-gbp-per-kva-per-day': 0.0163,
            'red-gbp-per-kwh': 0.11678,
            'amber-gbp-per-kwh': 0.0003,
            'green-gbp-per-kwh': 0.00052,
            'gbp-per-kvarh': 0.00202},
        '520': {
            'description': 'High Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.6338,
            'gbp-per-kva-per-day': 0.0163,
            'excess-gbp-per-kva-per-day': 0.0163,
            'red-gbp-per-kwh': 0.11678,
            'amber-gbp-per-kwh': 0.0003,
            'green-gbp-per-kwh': 0.00052,
            'gbp-per-kvarh': 0.00202},
        '521': {
            'description': 'HV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.2608,
            'gbp-per-kva-per-day': 0.0163,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00347,
            'amber-gbp-per-kwh': -0.00347,
            'green-gbp-per-kwh': -0.00347,
            'gbp-per-kvarh': 0.00106},
        '522': {
            'description': 'High Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.6338,
            'gbp-per-kva-per-day': 0.0119,
            'excess-gbp-per-kva-per-day': 0.0119,
            'red-gbp-per-kwh': 0.11109,
            'amber-gbp-per-kwh': 0.00013,
            'green-gbp-per-kwh': 0.00041,
            'gbp-per-kvarh': 0.00191},
        '523': {
            'description': 'HV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.2608,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00323,
            'amber-gbp-per-kwh': -0.00323,
            'green-gbp-per-kwh': -0.00323,
            'gbp-per-kvarh': 0.00082},
        '524': {
            'description': 'HV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.2608,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04964,
            'amber-gbp-per-kwh': -0.00045,
            'green-gbp-per-kwh': -0.00061,
            'gbp-per-kvarh': 0.00106},
        '525': {
            'description': 'HV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.2608,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04697,
            'amber-gbp-per-kwh': -0.00034,
            'green-gbp-per-kwh': -0.00054,
            'gbp-per-kvarh': 0.00082},
        '526': {
            'description': 'LV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.07064,
            'amber-gbp-per-kwh': -0.00138,
            'green-gbp-per-kwh': -0.00118,
            'gbp-per-kvarh': 0.00147},
        '527': {
            'description': 'LV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.07546,
            'amber-gbp-per-kwh': -0.0161,
            'green-gbp-per-kwh': -0.0132,
            'gbp-per-kvarh': 0.00169},
        '540': {
            'description': 'Low Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.0526,
            'gbp-per-kva-per-day': 0.0231,
            'excess-gbp-per-kva-per-day': 0.0231,
            'red-gbp-per-kwh': 0.14307,
            'amber-gbp-per-kwh': 0.00084,
            'green-gbp-per-kwh': 0.00091,
            'gbp-per-kvarh': 0.00265},
        '550': {
            'description': 'Low Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.0526,
            'gbp-per-kva-per-day': 0.0231,
            'excess-gbp-per-kva-per-day': 0.0231,
            'red-gbp-per-kwh': 0.14307,
            'amber-gbp-per-kwh': 0.00084,
            'green-gbp-per-kwh': 0.00091,
            'gbp-per-kvarh': 0.00265},
        '551': {
            'description': 'LV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00540,
            'amber-gbp-per-kwh': -0.00540,
            'green-gbp-per-kwh': -0.00540,
            'gbp-per-kvarh': 0.00147},
        '570': {
            'description': 'Low Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.0694,
            'gbp-per-kva-per-day': 0.021,
            'excess-gbp-per-kva-per-day': 0.021,
            'red-gbp-per-kwh': 0.16146,
            'amber-gbp-per-kwh': 0.00147,
            'green-gbp-per-kwh': 0.0013,
            'gbp-per-kvarh': 0.00326},
        '580': {
            'description': 'Low Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.0694,
            'gbp-per-kva-per-day': 0.021,
            'excess-gbp-per-kva-per-day': 0.021,
            'red-gbp-per-kwh': 0.16146,
            'amber-gbp-per-kwh': 0.00147,
            'green-gbp-per-kwh': 0.0013,
            'gbp-per-kvarh': 0.00326},
        '581': {
            'description': 'LV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.586,
            'amber-gbp-per-kwh': -0.586,
            'green-gbp-per-kwh': -0.586,
            'gbp-per-kvarh': 0.00169}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[22]]></value>
		<value><![CDATA[2011-04-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'lv-net': {
            'winter-weekday-peak': 1.087,
            'winter-weekday-day': 1.080,
            'night': 1.072,
            'other': 1.075},
        'lv-sub': {
            'winter-weekday-peak': 1.078,
            'winter-weekday-day': 1.072,
            'night': 1.065,
            'other': 1.068},
        'hv': {
            'winter-weekday-peak': 1.065,
            'winter-weekday-day': 1.058,
            'night': 1.046,
            'other': 1.051}}

def tariffs():
    return {
        '510': {
            'description': 'High Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.6485,
            'gbp-per-kva-per-day': 0.017,
            'excess-gbp-per-kva-per-day': 0.017,
            'red-gbp-per-kwh': 0.16342,
            'amber-gbp-per-kwh': 0.0004,
            'green-gbp-per-kwh': 0.00058,
            'gbp-per-kvarh': 0.00238},
        '520': {
            'description': 'High Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.6485,
            'gbp-per-kva-per-day': 0.017,
            'excess-gbp-per-kva-per-day': 0.017,
            'red-gbp-per-kwh': 0.16342,
            'amber-gbp-per-kwh': 0.0004,
            'green-gbp-per-kwh': 0.00058,
            'gbp-per-kvarh': 0.00238},
        '521': {
            'description': 'HV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.2666,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04470,
            'amber-gbp-per-kwh': -0.00059,
            'green-gbp-per-kwh': -0.00063,
            'gbp-per-kvarh': 0.00086},
        '522': {
            'description': 'High Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.6485,
            'gbp-per-kva-per-day': 0.0117,
            'excess-gbp-per-kva-per-day': 0.0117,
            'red-gbp-per-kwh': 0.13824,
            'amber-gbp-per-kwh': 0.00014,
            'green-gbp-per-kwh': 0.00041,
            'gbp-per-kvarh': 0.00187},
        '523': {
            'description': 'HV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.2666,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04181,
            'amber-gbp-per-kwh': -0.00042,
            'green-gbp-per-kwh': -0.00055,
            'gbp-per-kvarh': 0.00064},
        '524': {
            'description': 'HV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.2666,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04470,
            'amber-gbp-per-kwh': -0.00059,
            'green-gbp-per-kwh': -0.00063,
            'gbp-per-kvarh': 0.00086},
        '525': {
            'description': 'HV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.2666,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04181,
            'amber-gbp-per-kwh': -0.00042,
            'green-gbp-per-kwh': -0.00055,
            'gbp-per-kvarh': 0.00064},
        '526': {
            'description': 'LV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00, 
            'red-gbp-per-kwh': -0.06204,
            'amber-gbp-per-kwh': -0.00181,
            'green-gbp-per-kwh': -0.00117,
            'gbp-per-kvarh': 0.00118},
        '527': {
            'description': 'LV Generation Non-Intermittent',
            'gbp-per-kva-per-day': 0.00,
            'gbp-per-mpan-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.06632,
            'amber-gbp-per-kwh': -0.00214,
            'green-gbp-per-kwh': -0.00132,
            'gbp-per-kvarh': 0.00136},
        '540': {
            'description': 'Low Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.0554,
            'gbp-per-kva-per-day': 0.0228,
            'excess-gbp-per-kva-per-day': 0.0228,
            'red-gbp-per-kwh': 0.19431,
            'amber-gbp-per-kwh': 0.00115,
            'green-gbp-per-kwh': 0.00097,
            'gbp-per-kvarh': 0.00297},
        '550': {
            'description': 'Low Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.0554,
            'gbp-per-kva-per-day': 0.0228,
            'excess-gbp-per-kva-per-day': 0.0228,
            'red-gbp-per-kwh': 0.19431,
            'amber-gbp-per-kwh': 0.00115,
            'green-gbp-per-kwh': 0.00097,
            'gbp-per-kvarh': 0.00297},
        '551': {
            'description': 'LV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.06204,
            'amber-gbp-per-kwh': -0.00181,
            'green-gbp-per-kwh': -0.00117,
            'gbp-per-kvarh': 0.00118},
        '570': {
            'description': 'Low Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.0756,
            'gbp-per-kva-per-day': 0.0211,
            'excess-gbp-per-kva-per-day': 0.0211,
            'red-gbp-per-kwh': 0.21381,
            'amber-gbp-per-kwh': 0.00205,
            'green-gbp-per-kwh': 0.00138,
            'gbp-per-kvarh': 0.00353},
        '580': {
            'description': 'Low Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.0756,
            'gbp-per-kva-per-day': 0.0211,
            'excess-gbp-per-kva-per-day': 0.0211,
            'red-gbp-per-kwh': 0.21381,
            'amber-gbp-per-kwh': 0.00205,
            'green-gbp-per-kwh': 0.00138,
            'gbp-per-kvarh': 0.00353},
        '581': {
            'description': 'LV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.06632,
            'amber-gbp-per-kwh': -0.00214,
            'green-gbp-per-kwh': -0.00132,
            'gbp-per-kvarh': 0.00136}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[22]]></value>
		<value><![CDATA[2011-10-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'lv-net': {
            'winter-weekday-peak': 1.087,
            'winter-weekday-day': 1.080,
            'night': 1.072,
            'other': 1.075},
        'lv-sub': {
            'winter-weekday-peak': 1.078,
            'winter-weekday-day': 1.072,
            'night': 1.065,
            'other': 1.068},
        'hv': {
            'winter-weekday-peak': 1.065,
            'winter-weekday-day': 1.058,
            'night': 1.046,
            'other': 1.051},
        'hv-sub': {
            'winter-weekday-peak': 1.042,
            'winter-weekday-day': 1.038,
            'night': 1.031,
            'other': 1.034}}

def tariffs():
    return {
        '510': {
            'description': 'High Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.6488,
            'gbp-per-kva-per-day': 0.017,
            'excess-gbp-per-kva-per-day': 0.017,
            'red-gbp-per-kwh': 0.16349,
            'amber-gbp-per-kwh': 0.0004,
            'green-gbp-per-kwh': 0.00058,
            'gbp-per-kvarh': 0.00238},
        '520': {
            'description': 'High Voltage HH Metered (Old)',
            'gbp-per-mpan-per-day': 0.6488,
            'gbp-per-kva-per-day': 0.017,
            'excess-gbp-per-kva-per-day': 0.017,
            'red-gbp-per-kwh': 0.16349,
            'amber-gbp-per-kwh': 0.0004,
            'green-gbp-per-kwh': 0.00058,
            'gbp-per-kvarh': 0.00238},
        '522': {
            'description': 'High Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.6488,
            'gbp-per-kva-per-day': 0.0117,
            'excess-gbp-per-kva-per-day': 0.0117,
            'red-gbp-per-kwh': 0.13830,
            'amber-gbp-per-kwh': 0.00014,
            'green-gbp-per-kwh': 0.00041,
            'gbp-per-kvarh': 0.00187},
        '523': {
            'description': 'HV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.2667,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.0296,
            'amber-gbp-per-kwh': -0.0296,
            'green-gbp-per-kwh': -0.0296,
            'gbp-per-kvarh': 0.00064},
        '524': {
            'description': 'HV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.2667,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04471,
            'amber-gbp-per-kwh': -0.00059,
            'green-gbp-per-kwh': -0.00063,
            'gbp-per-kvarh': 0.00086},
        '525': {
            'description': 'HV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.2667,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04181,
            'amber-gbp-per-kwh': -0.00042,
            'green-gbp-per-kwh': -0.00055,
            'gbp-per-kvarh': 0.00064},
        '526': {
            'description': 'LV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00, 
            'red-gbp-per-kwh': -0.06205,
            'amber-gbp-per-kwh': -0.00181,
            'green-gbp-per-kwh': -0.00117,
            'gbp-per-kvarh': 0.00118},
        '527': {
            'description': 'LV Generation Non-Intermittent',
            'gbp-per-kva-per-day': 0.00,
            'gbp-per-mpan-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.06633,
            'amber-gbp-per-kwh': -0.00214,
            'green-gbp-per-kwh': -0.00132,
            'gbp-per-kvarh': 0.00137},
        '540': {
            'description': 'Low Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.0555,
            'gbp-per-kva-per-day': 0.0228,
            'excess-gbp-per-kva-per-day': 0.0228,
            'red-gbp-per-kwh': 0.19439,
            'amber-gbp-per-kwh': 0.00115,
            'green-gbp-per-kwh': 0.00097,
            'gbp-per-kvarh': 0.00297},
        '551': {
            'description': 'LV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00505,
            'amber-gbp-per-kwh': -0.00505,
            'green-gbp-per-kwh': -0.00505,
            'gbp-per-kvarh': 0.00118},
        '570': {
            'description': 'Low Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.0757,
            'gbp-per-kva-per-day': 0.0211,
            'excess-gbp-per-kva-per-day': 0.0211,
            'red-gbp-per-kwh': 0.21390,
            'amber-gbp-per-kwh': 0.00205,
            'green-gbp-per-kwh': 0.00138,
            'gbp-per-kvarh': 0.00353},
        '581': {
            'description': 'LV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00551,
            'amber-gbp-per-kwh': -0.00551,
            'green-gbp-per-kwh': -0.00551,
            'gbp-per-kvarh': 0.00137}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[22]]></value>
		<value><![CDATA[2012-04-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'lv-net': {
            'winter-weekday-peak': 1.087,
            'winter-weekday-day': 1.080,
            'night': 1.072,
            'other': 1.075},
        'lv-sub': {
            'winter-weekday-peak': 1.078,
            'winter-weekday-day': 1.072,
            'night': 1.065,
            'other': 1.068},
        'hv': {
            'winter-weekday-peak': 1.065,
            'winter-weekday-day': 1.058,
            'night': 1.046,
            'other': 1.051},
        'hv-sub': {
            'winter-weekday-peak': 1.042,
            'winter-weekday-day': 1.038,
            'night': 1.031,
            'other': 1.034}}

def tariffs():
    return {
        '510': {
            'description': 'High Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.6797,
            'gbp-per-kva-per-day': 0.0208,
            'excess-gbp-per-kva-per-day': 0.0208,
            'red-gbp-per-kwh': 0.15398,
            'amber-gbp-per-kwh': 0.00063,
            'green-gbp-per-kwh': 0.00068,
            'gbp-per-kvarh': 0.00208},
        '520': {
            'description': 'High Voltage HH Metered (Old)',
            'gbp-per-mpan-per-day': 0.6797,
            'gbp-per-kva-per-day': 0.0208,
            'excess-gbp-per-kva-per-day': 0.0208,
            'red-gbp-per-kwh': 0.15398,
            'amber-gbp-per-kwh': 0.00063,
            'green-gbp-per-kwh': 0.00068,
            'gbp-per-kvarh': 0.00208},
        '522': {
            'description': 'High Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.6838352,
            'gbp-per-kva-per-day': 0.0123318,
            'excess-gbp-per-kva-per-day': 0.0123318,
            'red-gbp-per-kwh': 0.1432788,
            'amber-gbp-per-kwh': 0.00014,
            'green-gbp-per-kwh': 0.00041,
            'gbp-per-kvarh': 0.00197098},
        '523': {
            'description': 'HV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.2921,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.0324,
            'amber-gbp-per-kwh': -0.0324,
            'green-gbp-per-kwh': -0.0324,
            'gbp-per-kvarh': 0.00063},
        '524': {
            'description': 'HV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.2921,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04708,
            'amber-gbp-per-kwh': -0.00083,
            'green-gbp-per-kwh': -0.00076,
            'gbp-per-kvarh': 0.00088},
        '525': {
            'description': 'HV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.2921,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.04396,
            'amber-gbp-per-kwh': -0.00066,
            'green-gbp-per-kwh': -0.00067,
            'gbp-per-kvarh': 0.00063},
        '526': {
            'description': 'LV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00, 
            'red-gbp-per-kwh': -0.06902,
            'amber-gbp-per-kwh': -0.00228,
            'green-gbp-per-kwh': -0.00142,
            'gbp-per-kvarh': 0.00121},
        '527': {
            'description': 'LV Generation Non-Intermittent',
            'gbp-per-kva-per-day': 0.00,
            'gbp-per-mpan-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.07363,
            'amber-gbp-per-kwh': -0.00260,
            'green-gbp-per-kwh': -0.00156,
            'gbp-per-kvarh': 0.00141},
        '540': {
            'description': 'Low Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.0609,
            'gbp-per-kva-per-day': 0.0273,
            'excess-gbp-per-kva-per-day': 0.0273,
            'red-gbp-per-kwh': 0.18692,
            'amber-gbp-per-kwh': 0.00149,
            'green-gbp-per-kwh': 0.00114,
            'gbp-per-kvarh': 0.00269},
        '551': {
            'description': 'LV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00577,
            'amber-gbp-per-kwh': -0.00577,
            'green-gbp-per-kwh': -0.00577,
            'gbp-per-kvarh': 0},
        '570': {
            'description': 'Low Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.0843,
            'gbp-per-kva-per-day': 0.0243,
            'excess-gbp-per-kva-per-day': 0.0243,
            'red-gbp-per-kwh': 0.20727,
            'amber-gbp-per-kwh': 0.00251,
            'green-gbp-per-kwh': 0.00161,
            'gbp-per-kvarh': 0.00329},
        '581': {
            'description': 'LV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00,
            'gbp-per-kva-per-day': 0.00,
            'excess-gbp-per-kva-per-day': 0.00,
            'red-gbp-per-kwh': -0.00625,
            'amber-gbp-per-kwh': -0.00625,
            'green-gbp-per-kwh': -0.00625,
            'gbp-per-kvarh': 0}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract-rate-script]]></value>
		<value><![CDATA[22]]></value>
		<value><![CDATA[2013-04-01T00:00Z]]></value>
		<value><![CDATA[def lafs():
    return {
        'lv-net': {
            'winter-weekday-peak': 1.087,
            'winter-weekday-day': 1.080,
            'night': 1.072,
            'other': 1.075},
        'lv-sub': {
            'winter-weekday-peak': 1.078,
            'winter-weekday-day': 1.072,
            'night': 1.065,
            'other': 1.068},
        'hv': {
            'winter-weekday-peak': 1.065,
            'winter-weekday-day': 1.058,
            'night': 1.046,
            'other': 1.051},
        'hv-sub': {
            'winter-weekday-peak': 1.042,
            'winter-weekday-day': 1.038,
            'night': 1.031,
            'other': 1.034}}

def tariffs():
    return {
        '510': {
            'description': 'High Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.6797*1.14,
            'gbp-per-kva-per-day': 0.0208*1.14,
            'excess-gbp-per-kva-per-day': 0.0208*1.14,
            'red-gbp-per-kwh': 0.15398*1.14,
            'amber-gbp-per-kwh': 0.00063*1.14,
            'green-gbp-per-kwh': 0.00068*1.14,
            'gbp-per-kvarh': 0.00208*1.14},
        '520': {
            'description': 'High Voltage HH Metered (Old)',
            'gbp-per-mpan-per-day': 0.6797*1.14,
            'gbp-per-kva-per-day': 0.0208*1.14,
            'excess-gbp-per-kva-per-day': 0.0208*1.14,
            'red-gbp-per-kwh': 0.15398*1.14,
            'amber-gbp-per-kwh': 0.00063*1.14,
            'green-gbp-per-kwh': 0.00068*1.14,
            'gbp-per-kvarh': 0.00208*1.14},
        '522': {
            'description': 'High Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.6838352*1.14,
            'gbp-per-kva-per-day': 0.0123318*1.14,
            'excess-gbp-per-kva-per-day': 0.0123318*1.14,
            'red-gbp-per-kwh': 0.1432788*1.14,
            'amber-gbp-per-kwh': 0.00014*1.14,
            'green-gbp-per-kwh': 0.00041*1.14,
            'gbp-per-kvarh': 0.00197098*1.14},
        '523': {
            'description': 'HV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.2921*1.14,
            'gbp-per-kva-per-day': 0.00*1.14,
            'excess-gbp-per-kva-per-day': 0.00*1.14,
            'red-gbp-per-kwh': -0.0324*1.14,
            'amber-gbp-per-kwh': -0.0324*1.14,
            'green-gbp-per-kwh': -0.0324*1.14,
            'gbp-per-kvarh': 0.00063*1.14},
        '524': {
            'description': 'HV Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.2921*1.14,
            'gbp-per-kva-per-day': 0.00*1.14,
            'excess-gbp-per-kva-per-day': 0.00*1.14,
            'red-gbp-per-kwh': -0.04708*1.14,
            'amber-gbp-per-kwh': -0.00083*1.14,
            'green-gbp-per-kwh': -0.00076*1.14,
            'gbp-per-kvarh': 0.00088*1.14},
        '525': {
            'description': 'HV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.2921*1.14,
            'gbp-per-kva-per-day': 0.00*1.14,
            'excess-gbp-per-kva-per-day': 0.00*1.14,
            'red-gbp-per-kwh': -0.04396*1.14,
            'amber-gbp-per-kwh': -0.00066*1.14,
            'green-gbp-per-kwh': -0.00067*1.14,
            'gbp-per-kvarh': 0.00063*1.14},
        '526': {
            'description': 'LV Sub Generation Non-Intermittent',
            'gbp-per-mpan-per-day': 0.00*1.14,
            'gbp-per-kva-per-day': 0.00*1.14,
            'excess-gbp-per-kva-per-day': 0.00*1.14, 
            'red-gbp-per-kwh': -0.06902*1.14,
            'amber-gbp-per-kwh': -0.00228*1.14,
            'green-gbp-per-kwh': -0.00142*1.14,
            'gbp-per-kvarh': 0.00121*1.14},
        '527': {
            'description': 'LV Generation Non-Intermittent',
            'gbp-per-kva-per-day': 0.00*1.14,
            'gbp-per-mpan-per-day': 0.00*1.14,
            'excess-gbp-per-kva-per-day': 0.00*1.14,
            'red-gbp-per-kwh': -0.07363*1.14,
            'amber-gbp-per-kwh': -0.00260*1.14,
            'green-gbp-per-kwh': -0.00156*1.14,
            'gbp-per-kvarh': 0.00141*1.14},
        '540': {
            'description': 'Low Voltage Sub HH Metered',
            'gbp-per-mpan-per-day': 0.0609*1.14,
            'gbp-per-kva-per-day': 0.0273*1.14,
            'excess-gbp-per-kva-per-day': 0.0273*1.14,
            'red-gbp-per-kwh': 0.18692*1.14,
            'amber-gbp-per-kwh': 0.00149*1.14,
            'green-gbp-per-kwh': 0.00114*1.14,
            'gbp-per-kvarh': 0.00269*1.14},
        '551': {
            'description': 'LV Sub Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00*1.14,
            'gbp-per-kva-per-day': 0.00*1.14,
            'excess-gbp-per-kva-per-day': 0.00*1.14,
            'red-gbp-per-kwh': -0.00577*1.14,
            'amber-gbp-per-kwh': -0.00577*1.14,
            'green-gbp-per-kwh': -0.00577*1.14,
            'gbp-per-kvarh': 0},
        '570': {
            'description': 'Low Voltage HH Metered',
            'gbp-per-mpan-per-day': 0.0843*1.14,
            'gbp-per-kva-per-day': 0.0243*1.14,
            'excess-gbp-per-kva-per-day': 0.0243*1.14,
            'red-gbp-per-kwh': 0.20727*1.14,
            'amber-gbp-per-kwh': 0.00251*1.14,
            'green-gbp-per-kwh': 0.00161*1.14,
            'gbp-per-kvarh': 0.00329*1.14},
        '581': {
            'description': 'LV Generation Intermittent',
            'gbp-per-mpan-per-day': 0.00*1.14,
            'gbp-per-kva-per-day': 0.00*1.14,
            'excess-gbp-per-kva-per-day': 0.00*1.14,
            'red-gbp-per-kwh': -0.00625*1.14,
            'amber-gbp-per-kwh': -0.00625*1.14,
            'green-gbp-per-kwh': -0.00625*1.14,
            'gbp-per-kvarh': 0*1.14}}]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract]]></value>
		<value><![CDATA[23]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[2000-01-01T00:30Z]]></value>
		<value><![CDATA[]]>
		</value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract]]></value>
		<value><![CDATA[24]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[2000-01-01T00:30Z]]></value>
		<value><![CDATA[]]>
		</value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
	</line>
	<line>
		<value><![CDATA[insert]]></value>
		<value><![CDATA[dno-contract]]></value>
		<value><![CDATA[99]]></value>
		<value><![CDATA[true]]></value>
		<value><![CDATA[2000-01-01T00:30Z]]></value>
		<value><![CDATA[]]>
		</value>
		<value><![CDATA[from net.sf.chellow.billing import NonCoreContract
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad import UserException, Hiber
from net.sf.chellow.physical import HhStartDate, MpanCore
from net.sf.chellow.monad.types import MonadDate
from java.lang import System

def hh(data_source):
    for hh in data_source.hh_data:
        hh['laf'] = 1
        hh['gsp-kwh'] = hh['laf'] * hh['msp-kwh']
        hh['gsp-kw'] = hh['gsp-kwh'] * 2]]></value>
		<value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dno cost")
    return totalElement]]></value>
	</line>
</csv>