<?xml version="1.0"?>
<csv>
    <line>
        <value><![CDATA[Action]]></value>
        <value><![CDATA[Type]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[non-core-contract]]></value>
        <value><![CDATA[POOL]]></value>

        <value><![CDATA[ccl]]></value>
        <value><![CDATA[2008-02-27T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[def ccl_gbp(hh_value, date):
    return hh_value * contract.rateScript(date).getRate('ccl_rate')

def is_ccl_month(kwh):
    return kwh > 999]]></value>
        <value><![CDATA[def ccl_rate():
    return 0.004560]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[non-core-contract]]></value>

        <value><![CDATA[POOL]]></value>
        <value><![CDATA[TRIAD]]></value>
        <value><![CDATA[2005-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[from net.sf.chellow.billing import VirtualBill, NonCoreContract
from net.sf.chellow.physical import HhEndDate

def totalElement(account, startDate, finishDate):
    totalElement = VirtualBill("total", 103, "Dso cost")
    return totalElement

def triad_dates(date):
    rate_script = contract.rateScript(date)
    return rate_script.getRate('triad_dates')

def supplyElement(supply, start_date, finish_date, is_import):
    channel = supply.getChannel(is_import, true)
    total_cost = 0
    triad_elements = []
    cal = GregorianCalendar.getInstance(TimeZone.getTimeZone("GMT"), Locale.UK)
    cal.setTime(start_date.getDate())
    cal.set(Calendar.Month, 2)
    cal.set(Calendar.DAY_OF_MONTH, 1)
    cal.set(Calendar.HOUR_OF_DAY, 0)
    cal.set(Calendar.MINUTE, 30)
    if cal.getTime().before(start_date.getDate()):
        cal.add(Calendar.YEAR, 1)
    while not cal.getTime().after(finish_date.getDate()):
        dates = triad_dates(cal.getField(Calendar.YEAR))
        total_msp_kw = 0 
        cost = 0
        supplyGeneration = supply.getGeneration(cal.getTime())
        dso = supplyGeneration.getDso()
        voltage_level = supplyGeneration.getMpans().iterator().next().getLineLossFactor().getVoltageLevel()
        triad_date_working = ''
        for date in dates:
            hh_datum = Hiber.session().createQuery("from HhDatum datum where datum.channel = :channel and datum.endDate.date = :endDate").setEntity('channel', channel).setTimestamp('endDate', date.getDate()).uniqueResult()
            datum_kw = hh_datum.getValue()
            total_msp_kw = total_msp_kw + datum_kw
            triad_date_working = triad_date_working + '(' + datum_kw + ' kW status: ' + hh_datum.getStatus() + ') '
        average_msp_kw = total_msp_kw / 3
        llf = dso.getService('main').callFunction('llf', [voltageLevel, isSubstation, date, year, month, day, dayOfWeek, hour, minute, yearCt, monthCt, dayCt, dayOfWeekCt, hourCt, minuteCt])
        #triad_elements.append(BillElement('triad ' + HhEndDate(cal.getTime()).toString(), cost, 'Cost ' + cost ' GBP = Rate ' rate + ' (GBP / kW) * Average GSP ' + average_gsp_kw + ' (kW) where Average GSP ' + gsp_kw + ' (kW) = LLF ' + llf + ' * Average MSP ' + average_msp_kw + ' (kW) where Average MSP ' + average_msp_kw + ' (kW) = Total MSP ' + total_msp_kw + ' (kW) / 3 where Total MSP ' + total_msp_kw + ' (kW) = ' + triad_date_working))
        cal.add(Calendar.YEAR, 1)
    supply_element = BillElement("supply total", total_cost, "Sum of triad elements")
    for triad_element in triad_elements:
        supply_element.addSubElement(triad_element)
    return supply_element

def triad(dso_contract, triad_kws, date, voltage_level, is_substation):
    result = {}
    calc = dso_contract.callFunction('calculator', [voltage_level, is_substation])
    dates = NonCoreContract.getNonCoreContract('TRIAD').callFunction('triad_dates', [date])
    total_gsp_kw = 0
    for i in range(3):
        if calc is None:
            llf = None
            gsp_kw = None
        else:
            llf = calc.llf(dates[i])
            if triad_kws[i] is None:
                gsp_kw = None
            else:
                gsp_kw = triad_kws[i] * llf
                total_gsp_kw = total_gsp_kw + gsp_kw               
        result['t' + str(i + 1) + '-msp-kw'] = triad_kws[i]
        result['t' + str(i + 1) + '-llf'] = llf
        result['t' + str(i + 1) + '-gsp-kw'] = gsp_kw
    if calc is None:
        total_gsp_kw = None
        total_gbp = None
    else:
        total_gsp_kw = total_gsp_kw / 3
        rate_script = calc.find_rate_script(date)
        total_gbp = total_gsp_kw * rate_script.getRate('triad')
    result['total-gsp-kw'] = total_gsp_kw
    result['total-gbp'] = total_gbp
    return result]]></value>
        <value><![CDATA[from net.sf.chellow.physical import HhEndDate

def triad_dates():
    return [HhEndDate("2007-11-26T17:30Z"), HhEndDate("2007-12-17T17:30Z"), HhEndDate("2008-01-03T17:30Z")]]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>

        <value><![CDATA[non-core-contract-rate-script]]></value>
        <value><![CDATA[TRIAD]]></value>
        <value><![CDATA[2008-04-03T00:30Z]]></value>
        <value><![CDATA[from net.sf.chellow.physical import HhEndDate

def triad_dates():
    return [HhEndDate("2008-12-01T17:30Z"), HhEndDate("2008-12-15T17:30Z"), HhEndDate("2009-01-06T17:30Z")]]]></value>
    </line>
</csv>
