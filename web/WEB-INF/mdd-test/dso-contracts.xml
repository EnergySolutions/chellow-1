<?xml version="1.0"?>
<csv>
    <line>

        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[22]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[from net.sf.chellow.billing import VirtualBill, NonCoreContract
from java.util import GregorianCalendar, TimeZone, Locale, Calendar

def totalElement(account, startDate, finishDate):
    totalElement = VirtualBill("total", 103, "Dso cost")
    return totalElement

class LlfCalculator:
    def __init__(self, voltage_level, is_substation):
        self.cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
        self.cal_ct = GregorianCalendar(TimeZone.getTimeZone("BST"), Locale.UK)
        self.voltage_level = voltage_level
        self.is_substation = is_substation
        self.rate_script = None

    def find_rate_script(self, date):
        if self.rate_script == None or self.rate_script.getStartDate().getDate().after(date.getDate()) or (self.rate_script.getFinishDate() is not None and self.rate_script.getFinishDate().getDate().before(date.getDate())):
            self.rate_script = contract.rateScripts(date, date)[0]
        return self.rate_script 

    def llf(self, date, year = None, month = None, day = None, day_of_week = None, hour = None, minute = None, decimal_hour = None, year_ct = None, month_ct = None, day_ct = None, day_of_week_ct = None, hour_ct = None, minute_ct = None, decimal_hour_ct = None):
        if year is None:
            self.cal.setTime(date.getDate())
            year = self.cal.get(Calendar.YEAR)
            month = self.cal.get(Calendar.MONTH)
            day = self.cal.get(Calendar.DAY_OF_MONTH)
            day_of_week = self.cal.get(Calendar.DAY_OF_WEEK)
            hour = self.cal.get(Calendar.HOUR_OF_DAY)
            minute = self.cal.get(Calendar.MINUTE)
            decimal_hour = hour + minute / 60
            self.cal_ct.setTime(date.getDate())
            year_ct = self.cal_ct.get(Calendar.YEAR)
            month_ct = self.cal_ct.get(Calendar.MONTH)
            day_ct = self.cal_ct.get(Calendar.DAY_OF_MONTH)
            day_of_week_ct = self.cal_ct.get(Calendar.DAY_OF_WEEK)
            hour_ct = self.cal_ct.get(Calendar.HOUR_OF_DAY)
            minute_ct = self.cal_ct.get(Calendar.MINUTE)
            decimal_hour_ct = hour_ct + minute_ct / 60            
        rate_script = self.find_rate_script(date)
        if decimal_hour_ct > 23.5 or decimal_hour_ct <= 6.5:
            if self.voltage_level == "HV":
                return rate_script.getRate('night_hv')
            elif self.voltage_level == "LV":
                #raise net.sf.chellow.monad.ui.UserException.newInvalidParameter("substation is"+str(isSubstation))
                if self.is_substation:
                    return rate_script.getRate('night_lv_sub')
                else:
                    return rate_script.getRate('night_lv')
        elif day_of_week < 5 and decimal_hour_ct > 16 and decimal_hour_ct <= 19 and (month_ct > 10 or month_ct < 3):
            if self.voltage_level == "HV":
                return rate_script.getRate('winter_weekday_peak_hv')
            elif self.voltage_level == "LV":
                if self.is_substation:
                    return rate_script.getRate('winter_weekday_peak_lv_sub')
                else:
                    return rate_script.getRate('winter_weekday_peak_lv')
        elif day_of_week < 5 and decimal_hour_ct > 6.5 and decimal_hour_ct <= 16 and (month_ct > 10 or month_ct <3):
            if self.voltage_level == "HV":
                return rate_script.getRate('winter_weekday_day_hv')
            elif self.voltage_level == "LV":
                if self.is_substation:
                    return rate_script.getRate('winter_weekday_day_lv_sub')
                else:
                    return rate_script.getRate('winter_weekday_day_lv')
        else:
            if self.voltage_level == "HV":
                return rate_script.getRate('other_hv')
            elif self.voltage_level == "LV":
                if self.is_substation:
                    return rate_script.getRate('other_lv_sub')
                else:
                    return rate_script.getRate('other_lv_sub')

def calculator(voltage_level, is_substation):
    return LlfCalculator(voltage_level, is_substation)

def triad_gsp(triad_kws, date, voltage_level, is_substation):
    calc = calculator(voltage_level, is_substation)
    dates = NonCoreContract.getNonCoreContract('TRIAD').callFunction('triad_dates', [date])
    gsp_kw = 0
    for i in range(3):
        gsp_kw = gsp_kw + triad_kws[i] * calc.llf(dates[i])
    return gsp_kw / 3

def triad_gbp(triad_gsp_kw, date):
    rate_script = contract.rateScript(date)
    return triad_gsp_kw * rate_script.getRate('triad_rate')
]]></value>
        <value><![CDATA[def winter_weekday_peak_hv():
    return 1.057

def winter_weekday_day_hv():
    return 1.051

def night_hv():
    return 1.040

def other_hv():
    return 1.045

def winter_weekday_peak_lv_sub():
    return 1.068

def winter_weekday_day_lv_sub():
    return 1.064

def night_lv_sub():
    return 1.059

def other_lv_sub():
    return 1.060

def winter_weekday_peak_lv():
    return 1.074

def winter_weekday_day_lv():
    return 1.069

def night_lv():
    return 1.064

def other_lv():
    return 1.065

def triad():
    return 23.77056]]></value>
    </line>

    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[22]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2008-04-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[def winter_weekday_peak_hv():
    return 1.057

def winter_weekday_day_hv():
    return 1.051

def night_hv():
    return 1.040

def other_hv():
    return 1.045

def winter_weekday_peak_lv_sub():
    return 1.068

def winter_weekday_day_lv_sub():
    return 1.064

def night_lv_sub():
    return 1.059

def other_lv_sub():
    return 1.060

def winter_weekday_peak_lv():
    return 1.074

def winter_weekday_day_lv():
    return 1.069

def night_lv():
    return 1.064

def other_lv():
    return 1.065

def triad_rate():
    return 25.212997]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>

        <value><![CDATA[99]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
</csv>
