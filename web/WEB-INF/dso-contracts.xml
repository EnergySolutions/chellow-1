<?xml version="1.0"?>
<csv>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[10]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[11]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[12]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[13]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[14]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[from net.sf.chellow.billing import NonCoreContract
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.physical import HhEndDate


def get_rate_script(date):
    return contract.rateScripts(date, date)[0]


def month(bill, whole_data, data_source):
    bill.setdefault('duos-reactive-working', '')
    bill.setdefault('duos-standing-gbp', 0)

    llfc_code = data_source.llfc_code
    availability = data_source.availability
    summary = whole_data['summary']

    rate_script = contract.rateScript(summary['finish-date'])
    tariff = data_source.rate(rate_script, 'tariffs')[llfc_code]

    bill['duos-reactive-gbp'] = max(0, summary['sum-imp-msp-kvarh'] - summary['sum-msp-kwh'] / 3) * tariff['reactive-gbp-per-kvarh']

    if not data_source.is_displaced:
        bill.setdefault('duos-availability-gbp', 0)
        bill.setdefault('duos-availability-working', '')

        availability_rate = tariff['availability-gbp-per-kva-per-day']

        md_kva = max((datum['msp-kw'] ** 2 + (datum['imp-msp-kvar'] + datum['exp-msp-kvar'])** 2) ** 0.5 for datum in whole_data['data'])

        billed_avail = max(availability, md_kva)
        bill['duos-availability-gbp'] += availability_rate * billed_avail
        bill['duos-availability-working'] += ' (billed_avail ' + str(billed_avail) + ' rate ' + str(availability_rate) + ')'

    bill['duos-standing-gbp'] += tariff['fixed-gbp-per-day']


def hh(bill, hh_list, data_source):
    bill['duos-night-kwh'] = 0
    bill['duos-night-gbp'] = 0
    bill['duos-day-kwh'] = 0
    bill['duos-day-gbp'] = 0

    llfc_code = data_source.llfc_code
    voltage_level_code = data_source.voltage_level_code
    is_substation = data_source.is_substation

    head_list = hh_list
    tail_list = None

    for rate_script in contract.rateScripts(HhEndDate(hh_list[0]['end-date']), HhEndDate(hh_list[-1]['end-date'])):
        rate_script_finish = rate_script.getFinishDate()
        tariff = data_source.rate(rate_script, 'tariffs')[llfc_code]
        lafs = data_source.rate(rate_script, 'lafs')[voltage_level_code.lower()]
        if rate_script_finish is not None and hh_list[-1]['end-date'].after(rate_script_finish.getDate()):
            for i in range(len(head_list)):
                if head_list[i]['end-date'].after(rate_script_finish.getDate()):
                    tail_list = head_list[i:]
                    head_list = head_list[:i]
                    break
        for hh in head_list:
            if 0.5 < hh['ct-decimal-hour'] <= 7.5:
                bill['duos-night-kwh'] += hh['msp-kwh']
                bill['duos-night-gbp'] += hh['msp-kwh'] * tariff['day-gbp-per-kwh']
            else:
                bill['duos-day-kwh'] += hh['msp-kwh']
                bill['duos-night-gbp'] += hh['msp-kwh'] * tariff['night-gbp-per-kwh']

            if 1 <= hh['ct-decimal-hour'] <= 7.5:
                slot = 'night'
            elif 7 > hh['ct-day-of-week'] > 1 and hh['ct-decimal-hour'] > 16 and hh['ct-decimal-hour'] <= 19 and (hh['ct-month'] > 10 or hh['ct-month'] < 3):
                slot = 'winter-weekday-peak'
            elif 7 > hh['ct-day-of-week'] > 1 and (7.5 <= hh['ct-decimal-hour'] <= 16 or 19 <= hh['ct-decimal-hour'] <= 20) and (hh['ct-month'] > 10 or hh['ct-month'] < 3):
                slot = 'winter-weekday-day'
            else:
                slot = 'other'

            hh['laf'] = lafs[slot]
            hh['gsp-kwh'] = hh['msp-kwh'] * hh['laf']
            hh['gsp-kw'] = hh['gsp-kwh'] * 2
        head_list = tail_list]]></value>
        <value><![CDATA[def night_hv():
    return 1.012

def night_lv():
    return 1.042

def peak_hv():
    return 1.037

def peak_lv():
    return 1.104

def winter_weekday_hv():
    return 1.032

def winter_weekday_lv():
    return 1.095

def other_hv():
    return 1.029

def other_lv():
    return 1.070]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[14]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2007-04-01T00:30Z]]></value>
        <value><![CDATA[def night_hv():
    return 1.012

def night_lv():
    return 1.042

def peak_hv():
    return 1.037

def peak_lv():
    return 1.104

def winter_weekday_hv():
    return 1.032

def winter_weekday_lv():
    return 1.095

def other_hv():
    return 1.029

def other_lv():
    return 1.070

def triad():
    return 17.807318]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[14]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2008-04-01T00:30Z]]></value>
        <value><![CDATA[def triad():
    return 19.147817

def tariffs():
    return {
        '121': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '124': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '127': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '132': {
            'fixed-gbp-per-day': 1.61,
            'availability-gbp-per-kva-per-day': 0.0519,
            'excess-availability-gbp-per-kva-per-day': 0.0519,
            'day-gbp-per-kwh': 0.0018,
            'night-gbp-per-kwh': 0.0007,
            'reactive-gbp-per-kvarh':  0.0026},
        '365': {
            'fixed-gbp-per-day': 4.29,
            'availability-gbp-per-kva-per-day': 0.0417,
            'excess-availability-gbp-per-kva-per-day': 0.0417,
            'day-gbp-per-kwh': 0.0012,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh': 0.0013}}

def lafs():
    return {
        'lv': {
            'night': 1.042,
            'winter-weekday-peak': 1.104,
            'winter-weekday-day': 1.095,
            'other': 1.070},
        'hv': {
            'night': 1.012,
            'winter-weekday-peak': 1.037,
            'winter-weekday-day': 1.032,
            'other': 1.029}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[14]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2009-04-01T00:30Z]]></value>
        <value><![CDATA[def night_hv():
    return 1.012

def night_lv():
    return 1.042

def peak_hv():
    return 1.037

def peak_lv():
    return 1.104

def winter_weekday_hv():
    return 1.032

def winter_weekday_lv():
    return 1.095

def other_hv():
    return 1.029

def other_lv():
    return 1.070

def triad():
    return 20.526611

def duos_day_hv_gbp_per_kwh():
    return 0.0008

def duos_night_hv_gbp_per_kwh():
    return 0.0004

def standing_hv_gbp_per_month():
    return 137.1792

def availability_hv_gbp_per_kva_per_month():
    return 1.3900

def reactive_hv_gbp_per_kvarh():
    return 0.0012

def duos_day_lv_gbp_per_kwh():
    return 0.0014

def duos_night_lv_gbp_per_kwh():
    return 0.0006

def standing_lv_gbp_per_month():
    return 51.4042

def availability_lv_gbp_per_kva_per_month():
    return 1.7307

def reactive_lv_gbp_per_kvarh():
    return 0.0024

def tariffs():
    return {
        '121': {
            'fixed-gbp-per-day': 1.6900,
            'availability-gbp-per-kva-per-day': 0.0569,
            'excess-availability-gbp-per-kva-per-day': 0.0569,
            'day-gbp-per-kwh': 0.0014,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh':  0.0024},
        '124': {
            'fixed-gbp-per-day': 1.6900,
            'availability-gbp-per-kva-per-day': 0.0569,
            'excess-availability-gbp-per-kva-per-day': 0.0569,
            'day-gbp-per-kwh': 0.0014,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh':  0.0024},
        '127': {
            'fixed-gbp-per-day': 1.6900,
            'availability-gbp-per-kva-per-day': 0.0569,
            'excess-availability-gbp-per-kva-per-day': 0.0569,
            'day-gbp-per-kwh': 0.0014,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh':  0.0024},
        '132': {
            'fixed-gbp-per-day': 1.6900,
            'availability-gbp-per-kva-per-day': 0.0569,
            'excess-availability-gbp-per-kva-per-day': 0.0569,
            'day-gbp-per-kwh': 0.0014,
            'night-gbp-per-kwh': 0.0006,
            'reactive-gbp-per-kvarh': 0.0024},
        '365': {
            'fixed-gbp-per-day': 4.5100,
            'availability-gbp-per-kva-per-day': 0.0457,
            'excess-availability-gbp-per-kva-per-day': 0.0457,
            'day-gbp-per-kwh': 0.0008,
            'night-gbp-per-kwh': 0.0004,
            'reactive-gbp-per-kvarh': 0.0012}}


def lafs():
    return {
        'lv': {
            'night': 1.042,
            'winter-weekday-peak': 1.104,
            'winter-weekday-day': 1.095,
            'other': 1.070},
        'hv': {
            'night': 1.012,
            'winter-weekday-peak': 1.037,
            'winter-weekday-day': 1.032,
            'other': 1.029}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[15]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[16]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[17]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[18]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[19]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[20]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[from net.sf.chellow.billing import NonCoreContract
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad import UserException, Hiber
from net.sf.chellow.physical import HhEndDate, MpanCore
from net.sf.chellow.monad.types import MonadDate
from java.lang import System



def year_md_095(data_source, finish):
    if data_source.site_id is None:
        if not data_source.is_new:
            return year_md_095_supply(MpanCore.getMpanCore(data_source.id).getSupply(), finish)
    else:
        return year_md_095_site(data_source, finish)


def year_md_095_supply(supply, finish):
    md_kva = 0
    cal = MonadDate.getCalendar()
    cal.setTime(finish)
    cal.add(Calendar.MONTH, -11)
    month_finish = cal.getTime()
    working = ''
    month_kwh_query = Hiber.session().createQuery("select sum(datum.value), max(datum.value) from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.endDate.date >= :start and datum.endDate.date <= :finish and datum.channel.isKwh is true and datum.channel.isImport is true").setEntity("supply", supply)

    month_kvarh_query = Hiber.session().createQuery("select sum(datum.value) from HhDatum datum where datum.channel.supplyGeneration.supply = :supply and datum.endDate.date >= :start and datum.endDate.date <= :finish and datum.channel.isKwh is false and datum.channel.isImport is true").setEntity("supply", supply)
    while not month_finish.after(finish):
        cal.setTime(month_finish)
        cal.add(Calendar.MONTH, -1)
        cal.add(Calendar.MINUTE, 30)
        month_start = cal.getTime()        
        month_kwh_result = month_kwh_query.setTimestamp("start", month_start).setTimestamp("finish", month_finish).uniqueResult()

        if month_kwh_result[0] is not None:
            month_md_kw = month_kwh_result[1].doubleValue() * 2
            month_kwh = month_kwh_result[0].doubleValue()
            month_kvarh = month_kvarh_query.setTimestamp("start", month_start).setTimestamp("finish", month_finish).uniqueResult()
            if month_kvarh is None:
                pf = 0.95
            else:
                month_kvarh = month_kvarh.doubleValue()
                if month_kwh == 0 and month_kvarh == 0:
                    pf = 1
                else:
                    pf = month_kwh / (month_kwh ** 2 + month_kvarh ** 2) ** 0.5
            month_kva = month_md_kw / pf
            working += ' | month starting ' + str(month_start) + ' md kw ' + str(month_md_kw) + ' kva ' + str(month_kva)

            md_kva = max(md_kva, month_kva)
        cal.setTime(month_finish)
        cal.add(Calendar.MONTH, 1)
        month_finish = cal.getTime()
    return md_kva, working


def year_md_095_site(data_source, finish, pw):
    timing = System.currentTimeMillis()
    #pw.println("starting 095 " + str(System.currentTimeMillis() - timing))    
    md_kva = 0
    cal = MonadDate.getCalendar()
    cal.setTime(finish)
    cal.add(Calendar.MONTH, -12)
    month_finish = cal.getTime()


    while not month_finish.after(finish):
        cal.setTime(month_finish)
        cal.add(Calendar.MONTH, -1)
        cal.add(Calendar.MINUTE, 30)
        month_start = cal.getTime()
        month_data = {'start': HhEndDate(month_start), 'finish': HhEndDate(month_finish)}
        data_source.sum_md(month_data, pw)
        if month_data['sum-kwh'] is None:
            month_md_kw = 0
            month_kwh = 0
        else:
            month_md_kw = month_data['md-kw']
            month_kwh = month_data['sum-kwh']

        data_source.sum_md(month_data, pw, False)
        if month_data['sum-kvarh'] is not None:
            month_kvarh = month_data['sum-kvarh']

        if month_kvarh == 0:
            month_kva = month_md_kw / 0.95
        else:
            if month_kwh == 0 and month_kvarh == 0:
                pf = 1
            else:
                pf = month_kwh / (month_kwh ** 2 + month_kvarh ** 2) ** 0.5
            month_kva = month_md_kw / pf
        md_kva = max(md_kva, month_kva)
        cal.setTime(month_finish)
        cal.add(Calendar.MONTH, 1)
        month_finish = cal.getTime()
    return md_kva, ''


def get_rate_script(date):
    return contract.rateScripts(date, date)[0]

#below threshold in kVA, blocks in kVA are used

threshold_blocks = [(15, 15), (100, 5), (250, 10), (500, 25), (1000, 50), (None, 100)]


def hh(bill, hh_list, data_source):
    bill['duos-night-kwh'] = 0
    bill['duos-night-gbp'] = 0
    bill['duos-day-kwh'] = 0
    bill['duos-day-gbp'] = 0

    llfc_code = data_source.llfc_code
    voltage_level_code = data_source.voltage_level_code
    pc_code = data_source.pc_code

    head_list = hh_list
    tail_list = None

    for rate_script in contract.rateScripts(HhEndDate(hh_list[0]['end-date']), HhEndDate(hh_list[-1]['end-date'])):
        rate_script_finish = rate_script.getFinishDate()
        llfc_groups = data_source.rate(rate_script, 'llfc_groups')
        if llfc_code in llfc_groups:
            llfc_group = llfc_groups[llfc_code]
        else:
            llfc_group = llfc_code

        if pc_code in ('05', '06', '07', '08'):
            pc_group = '05-08'
        else:
            pc_group = pc_code

        tariff = data_source.rate(rate_script, 'duos_tariffs')['llfc(' + llfc_group + ')-pc(' + pc_group + ')']

        if tariff is None:
            raise UserException('The tariff for the llfc ' + llfc_code + ' cannot be found.')

        lafs = data_source.rate(rate_script, 'lafs')[voltage_level_code.lower()]
        if rate_script_finish is not None and hh_list[-1]['end-date'].after(rate_script_finish.getDate()):
            for i in range(len(head_list)):
                if head_list[i]['end-date'].after(rate_script_finish.getDate()):
                    tail_list = head_list[i:]
                    head_list = head_list[:i]
                    break
        for hh in head_list:
            if 0.5 <= hh['ct-decimal-hour'] <= 7.5 and 'night-gbp-per-kwh' in tariff:
                bill['duos-night-kwh'] += hh['msp-kwh']
                bill['duos-night-gbp'] += hh['msp-kwh'] * tariff['night-gbp-per-kwh']
            else:
                bill['duos-day-kwh'] += hh['msp-kwh']
                bill['duos-day-gbp'] += hh['msp-kwh'] * tariff['day-gbp-per-kwh']

            if 0.5 < hh['ct-decimal-hour'] <= 7.5:
                slot_name = 'night'
            elif Calendar.SATURDAY > hh['ct-day-of-week'] > Calendar.SUNDAY and 16 < hh['ct-decimal-hour'] <= 19 and (hh['ct-month'] > Calendar.OCTOBER or hh['ct-month'] < Calendar.MARCH):
                slot_name = 'peak'
            elif 7 > hh['ct-day-of-week'] > 1 and (7.5 < hh['ct-decimal-hour'] <= 16 or 19 < hh['ct-decimal-hour'] <= 20) and (hh['ct-month'] > 10 or hh['ct-month'] < 3):
                slot_name = 'winter-weekday'
            else:
                slot_name = 'other'
            hh['laf'] = lafs[slot_name]
            hh['gsp-kwh'] = hh['laf'] * hh['msp-kwh']
            hh['gsp-kw'] = hh['gsp-kwh'] * 2

            #pw.println('hh-end-date,"' + hh['end-date'].toString() + '",msp,"' + str(hh['msp-kwh']) + '",laf,"' + str(hh['laf']) + '",gsp,"' + str(hh['gsp-kwh']) + '",slot name,"' + slot_name + '",ct decimal hour,"' + str(hh['ct-decimal-hour']) + '"')
        head_list = tail_list




def month(bill, whole_data, data_source):
    bill.setdefault('duos-reactive-gbp', 0)
    bill.setdefault('duos-reactive-working', '')
    
    llfc_code = data_source.llfc_code
    summary = whole_data['summary']
    rate_script = get_rate_script(summary['finish-date'])
    llfc_groups = data_source.rate(rate_script, 'llfc_groups')
    if llfc_code in llfc_groups:
        llfc_group = llfc_groups[llfc_code]
    else:
        llfc_group = llfc_code

    tariff = data_source.rate(rate_script, 'duos_tariffs')['llfc(' + llfc_group + ')-pc(00)']
    if tariff is None:
        raise UserException('The tariff for the llfc ' + llfc_code + ' cannot be found.')
    if not data_source.is_displaced:
        year_md_kva_095 = year_md_095(data_source, summary['finish-date'].getDate())

        billed_avail = max(data_source.availability, year_md_kva_095[0])
        bill.setdefault('duos-availability-working', '')
        bill.setdefault('duos-availability-gbp', 0)

        bill['duos-availability-working'] += year_md_kva_095[1] + ' max(availability:' + str(data_source.availability) + ', year_md_kva_095:' + str(year_md_kva_095[0]) + '):' + str(billed_avail)

        for threshold, block in threshold_blocks:
            if threshold is None or billed_avail < threshold:
                billed_avail = (int(billed_avail / block) + 1) * block
                break

        bill['duos-availability-working'] += ' billed_avail:' + str(billed_avail)
        le_200_avail_rate = tariff['capacity-<=200-gbp-per-kva-per-month']

        bill['duos-availability-gbp'] += min(200, billed_avail) * le_200_avail_rate 
        bill['duos-availability-working'] += ' [min(200, billed_avail:' + str(billed_avail) + ') * avail_rate:' + str(le_200_avail_rate)

        if billed_avail > 200:
            gt_200_avail_rate = tariff['capacity->200-gbp-per-kva-per-month']
            bill['duos-availability-gbp'] += (billed_avail - 200) * gt_200_avail_rate
            bill['duos-availability-working'] += ' + (billed_avail:' + str(billed_avail) + ' - 200) * avail_rate:' + str(gt_200_avail_rate)

        bill['duos-availability-working'] += ']'

    bill.setdefault('duos-standing-gbp', 0)
    if 'fixed-gbp-per-month' in tariff:
        bill['duos-standing-gbp'] += tariff['fixed-gbp-per-month']
    else:
        utc_cal = MonadDate.getCalendar()
        utc_cal.setTime(summary['finish_date'].getPrevious().getDate())
        days_in_month = utc_cal.get(Calendar.DAY_OF_MONTH)
        bill['duos-standing-gbp'] += tariff['fixed-gbp-per-day'] * days_in_month]]></value>
        <value><![CDATA[def night_hv():
    return 1.032

def night_lv():
    return 1.075

def peak_hv():
    return 1.047

def peak_lv():
    return 1.096

def winter_weekday_hv():
    return 1.044

def winter_weekday_lv():
    return 1.089

def other_hv():
    return 1.037

def other_lv():
    return 1.080

def triad():
    return 21.100281]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[20]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2007-04-01T00:30Z]]></value>
        <value><![CDATA[def triad():
    return 21.100281

def llfc_groups():
    return {}

def duos_tariffs():
    return {
'llfc(450)-pc(00)': {
    'fixed-gbp-per-month': 14.91,
    'day-gbp-per-kwh': 0.00508,
    'capacity-<=200-gbp-per-kva-per-month': 1.06,
    'capacity->200-gbp-per-kva-per-month': 0.93,
    'excess-capacity-gbp-per-kva-per-month': 0.42},
'llfc(453)-pc(00)': {
    'fixed-gbp-per-month': 14.91,
    'day-gbp-per-kwh': 0.00606,
    'night-gbp-per-kwh': 0.00118,
    'capacity-<=200-gbp-per-kva-per-month': 1.06,
    'capacity->200-gbp-per-kva-per-month': 0.93,
    'excess-capacity-gbp-per-kva-per-month': 0.42},
'llfc(520)-pc(00)': {
    'fixed-gbp-per-month': 51.50,
    'day-gbp-per-kwh':  0.01157},
'llfc(655)-pc(00)': {
    'fixed-gbp-per-month': 98.23,
    'day-gbp-per-kwh':   0.00379,
    'capacity-<=200-gbp-per-kva-per-month': 0.86,
    'capacity->200-gbp-per-kva-per-month': 0.86,
    'excess-capacity-gbp-per-kva-per-month': 0.40},
'llfc(658)-pc(00)': {
    'fixed-gbp-per-month': 98.23,
    'day-gbp-per-kwh': 0.00433,
    'night-gbp-per-kwh': 0.00108,
    'capacity-<=200-gbp-per-kva-per-month': 0.86,
    'capacity->200-gbp-per-kva-per-month': 0.86,
    'excess-capacity-gbp-per-kva-per-month': 0.40}}

def lafs():
    return {
        'hv': {
            'peak': 1.047,
            'winter-weekday': 1.044,
            'other': 1.037,
            'night': 1.032},
        'lv': {
            'peak': 1.096,
            'winter-weekday': 1.089,
            'other': 1.080,
            'night': 1.075}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[20]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2008-04-01T00:30Z]]></value>
        <value><![CDATA[def triad():
    return 22.194810

def llfc_groups():
    return {}

def duos_tariffs():
    return {
'llfc(450)-pc(00)': {
    'fixed-gbp-per-month': 14.91,
    'day-gbp-per-kwh': 0.00508,
    'capacity-<=200-gbp-per-kva-per-month': 1.06,
    'capacity->200-gbp-per-kva-per-month': 0.93,
    'excess-capacity-gbp-per-kva-per-month': 0.42},
'llfc(453)-pc(00)': {
    'fixed-gbp-per-month': 14.91,
    'day-gbp-per-kwh': 0.00606,
    'night-gbp-per-kwh': 0.00118,
    'capacity-<=200-gbp-per-kva-per-month': 1.06,
    'capacity->200-gbp-per-kva-per-month': 0.93,
    'excess-capacity-gbp-per-kva-per-month': 0.42},
'llfc(520)-pc(00)': {
    'fixed-gbp-per-month': 51.50,
    'day-gbp-per-kwh':  0.01157},
'llfc(655)-pc(00)': {
    'fixed-gbp-per-month': 98.23,
    'day-gbp-per-kwh':   0.00379,
    'capacity-<=200-gbp-per-kva-per-month': 0.86,
    'capacity->200-gbp-per-kva-per-month': 0.86,
    'excess-capacity-gbp-per-kva-per-month': 0.40},
'llfc(658)-pc(00)': {
    'fixed-gbp-per-month': 98.23,
    'day-gbp-per-kwh': 0.00433,
    'night-gbp-per-kwh': 0.00108,
    'capacity-<=200-gbp-per-kva-per-month': 0.86,
    'capacity->200-gbp-per-kva-per-month': 0.86,
    'excess-capacity-gbp-per-kva-per-month': 0.40}}

def lafs():
    return {
        'hv': {
            'peak': 1.048,
            'winter-weekday': 1.045,
            'other': 1.038,
            'night': 1.033},
        'lv': {
            'peak': 1.095,
            'winter-weekday': 1.089,
            'other': 1.079,
            'night': 1.075}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[20]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2009-04-01T00:30Z]]></value>
        <value><![CDATA[def triad():
    return 24.471461

def llfc_groups():
    return {
        '127': '127,473',
        '473': '127,473',
        '453': '453,470',
        '658': '658,476',
        '476': '658,476',
        '401': '401,475',
        '475': '401,475'}

def duos_tariffs():
    return {
        'llfc(126)-pc(03)': {
            'fixed-gbp-per-day': 0.0562,
            'day-gbp-per-kwh': 0.01645},
        'llfc(127,473)-pc(03)': {
            'fixed-gbp-per-day': 0.0808,
            'day-gbp-per-kwh': 0.01645},
        'llfc(129)-pc(04)': {
            'fixed-gbp-per-day': 0.0632,
            'day-gbp-per-kwh': 0.01737,
            'night-gbp-per-kwh': 0.00197},
        'llfc(130)-pc(04)': {
            'fixed-gbp-per-day': 0.0758,
            'day-gbp-per-kwh': 0.01737,
            'night-gbp-per-kwh': 0.00197},
        'llfc(401,475)-pc(05-08)': {
            'fixed-gbp-per-month': 18.58,
            'day-gbp-per-kwh': 0.00649,
            'night-gbp-per-kwh': 0.00126,
            'capacity-<=200-gbp-per-kva-per-month': 1.13,
            'capacity->200-gbp-per-kva-per-month': 1.00,
            'excess-capacity-gbp-per-kva-per-month': 0.45},
'llfc(453,470)-pc(00)': {
    'fixed-gbp-per-month': 15.97,
    'day-gbp-per-kwh': 0.00649,
    'night-gbp-per-kwh': 0.00126,
    'capacity-<=200-gbp-per-kva-per-month': 1.13,
    'capacity->200-gbp-per-kva-per-month': 1.00,
    'excess-capacity-gbp-per-kva-per-month': 0.45},
'llfc(658,476)-pc(00)': {
    'fixed-gbp-per-month': 105.18,
    'day-gbp-per-kwh': 0.00464,
    'night-gbp-per-kwh': 0.00116,
    'capacity-<=200-gbp-per-kva-per-month': 0.92,
    'capacity->200-gbp-per-kva-per-month': 0.92,
    'excess-capacity-gbp-per-kva-per-month': 0.43},
'llfc(605)-pc(05-08)': {
    'fixed-gbp-per-month': 107.80,
    'day-gbp-per-kwh':  0.00406,
    'capacity-<=200-gbp-per-kva-per-month': 0.92,
    'capacity->200-gbp-per-kva-per-month': 0.92,
    'excess-capacity-gbp-per-kva-per-month': 0.43,},
'llfc(450)-pc(00)': {
    'fixed-gbp-per-month': 159.7,
    'day-gbp-per-kwh':   0.00544,
    'capacity-<=200-gbp-per-kva-per-month': 0.92,
    'capacity->200-gbp-per-kva-per-month': 0.92,
    'excess-capacity-gbp-per-kva-per-month': 0.43,},
'llfc(655)-pc(00)': {
    'fixed-gbp-per-month': 105.18,
    'day-gbp-per-kwh': 0.00406,
    'capacity-<=200-gbp-per-kva-per-month': 0.92,
    'capacity->200-gbp-per-kva-per-month': 0.92,
    'excess-capacity-gbp-per-kva-per-month': 0.43,}}

def lafs():
    return {
        'hv': {
            'peak': 1.043,
            'winter-weekday': 1.039,
            'other': 1.034,
            'night': 1.029},
        'lv': {
            'peak': 1.093,
            'winter-weekday': 1.087,
            'other': 1.078,
            'night': 1.074}}

# old stuff

def peak_hv():
    return 1.043
def winter_weekday_hv():
    return 1.039
def other_hv():
    return 1.034
def night_hv():
    return 1.029
def peak_lv():
    return 1.093
def winter_weekday_lv():
    return 1.087
def other_lv():
    return 1.078
def night_lv():
    return 1.074


def duos_fixed_lv_gbp_per_month():
    return 15.97
def duos_day_lv_gbp_per_kwh():
    return 0.00649
def duos_night_lv_gbp_per_kwh():
    return 0.00126
def duos_capacity_le200_lv_gbp_per_kva_per_month():
    return 1.13
def duos_capacity_gt200_lv_gbp_per_kva_per_month():
    return 1.00
def duos_excess_capacity_lv_gbp_per_kva_per_month():
    return 0.45
def duos_fixed_hv_gbp_per_month():
   return 105.18
def duos_day_hv_gbp_per_kwh():
   return 0.00464
def duos_night_hv_gbp_per_kwh():
   return 0.00116
def duos_capacity_le200_hv_gbp_per_kva_per_month():
   return 0.92
def duos_capacity_gt200_hv_gbp_per_kva_per_month():
   return 0.92
def duos_excess_capacity_hv_gbp_per_kva_per_month():
   return 0.43]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[21]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[22]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[from net.sf.chellow.billing import NonCoreContract
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad import UserException
from net.sf.chellow.physical import HhEndDate
from java.lang import System


def get_rate_script(date):
    return contract.rateScripts(date, date)[0]


def hh(bill, hh_list, data_source):
    #timing = System.currentTimeMillis()
    #data_source.pw.println("22 hh: start" + str(System.currentTimeMillis() - timing))

    voltage_level_code = data_source.voltage_level_code
    is_substation = data_source.is_substation
    llfc_code = data_source.llfc_code

    bill['duos-night-kwh'] = 0
    bill['duos-night-gbp'] = 0
    bill['duos-day-kwh'] = 0
    bill['duos-day-gbp'] = 0

    if voltage_level_code == 'HV':
        substation = ''
    else:
        if is_substation:
            substation = '-sub'
        else:
            substation = '-net'
    vl_key = voltage_level_code.lower() + substation

    head_list = hh_list
    tail_list = None
    list_finish = HhEndDate(hh_list[-1]['end-date'])
    #data_source.pw.println('list finish ' + str(list_finish))
    for rate_script in contract.rateScripts(HhEndDate(hh_list[0]['end-date']), list_finish):
        rate_script_finish = rate_script.getFinishDate()
        tariff = data_source.rate(rate_script, 'tariffs')[llfc_code]
        lafs = data_source.rate(rate_script, 'lafs')[vl_key]
        if list_finish.after(rate_script_finish):
            for i in range(len(head_list)):
                if head_list[i]['end-date'].after(rate_script_finish.getDate()):
                    tail_list = head_list[i:]
                    head_list = head_list[:i]
                    break

        for hh in head_list:
            if 6.5 < hh['ct-decimal-hour'] <= 23.5:
                bill['duos-day-kwh'] += hh['msp-kwh']
                bill['duos-day-gbp'] += hh['msp-kwh'] * tariff['day-gbp-per-kwh']
            else:
                bill['duos-night-kwh'] += hh['msp-kwh']
                bill['duos-night-gbp'] += hh['msp-kwh'] * tariff['night-gbp-per-kwh']

            if 6.5 >= hh['ct-decimal-hour']:
                slot_name = 'night'
            elif 7 > hh['ct-day-of-week'] > 1 and 16 < hh['ct-decimal-hour'] <= 19 and (hh['ct-month'] > 10 or hh['ct-month'] < 3):
                slot_name = 'winter-weekday-peak'
            elif 7 > hh['ct-day-of-week'] > 1 and 6.5 < hh['ct-decimal-hour'] <= 16 and (hh['ct-month'] > 10 or hh['ct-month'] < 3):
                slot_name = 'winter-weekday-day'
            else:
                slot_name = 'other'
            hh['laf'] = lafs[slot_name]
            hh['gsp-kwh'] = hh['laf'] * hh['msp-kwh']
            hh['gsp-kw'] = hh['gsp-kwh'] * 2
        #pw.println('hh-end-date,"' + hh['end-date'].toString() + '",msp,"' + str(hh['msp-kwh']) + '",laf,"' + str(hh['laf']) + '",gsp,"' + str(hh['gsp-kwh']) + '",slot name,"' + slot_name + '",ct decimal hour,"' + str(hh['ct-decimal-hour']) + '"')
        head_list = tail_list
    #data_source.pw.println("22 hh: finish " + str(System.currentTimeMillis() - timing))


def month(bill, whole_data, data_source):
    summary = whole_data['summary']
    timing = System.currentTimeMillis()

    rate_script = contract.rateScript(summary['finish-date'])
    tariff = data_source.rate(rate_script, 'tariffs')[data_source.llfc_code]
    reactive_rate = tariff['reactive-gbp-per-kvarh']


    utc_cal = GregorianCalendar(TimeZone.getTimeZone("GMT"), Locale.UK)
    utc_cal.setTime(summary['finish-date'].getDate())
    utc_cal.add(Calendar.MINUTE, -1)
    days_in_month = utc_cal.get(Calendar.DAY_OF_MONTH)
    
    if not data_source.is_displaced:
        md_kva = max((datum['msp-kw'] ** 2 + datum['imp-msp-kvar'] ** 2) ** 0.5 for datum in whole_data['data'])

        bill.setdefault('duos-availability-gbp', 0)
        bill.setdefault('duos-availability-working', '')

        billed_avail = max(md_kva, data_source.availability)

        availability_rate = tariff['capacity-gbp-per-kva-per-day']

        bill['duos-availability-gbp'] += availability_rate * billed_avail * days_in_month

        bill['duos-availability-working'] += '[max(md_kva:' + str(md_kva) + ', availability:' + str(data_source.availability) + ' * rate:' + str(availability_rate) + ' * days:' + str(days_in_month) + '] '
  

    
    bill.setdefault('duos-reactive-gbp', 0)
    bill.setdefault('duos-reactive-working', '')

    month_imp_kvarh = summary['sum-imp-msp-kvarh']
    month_kwh = summary['sum-msp-kwh']

    if month_kwh is None:
        month_kwh = 0

    bill['duos-reactive-gbp'] += max(0, month_imp_kvarh - month_kwh / 2) * reactive_rate

    bill['duos-reactive-working'] += ' [rate:' + str(reactive_rate) + ' * max(0, kvarh:' + str(month_imp_kvarh) + ' - month_kwh:' + str(month_kwh) + ' / 2)] ']]></value>
        <value><![CDATA[def winter_weekday_peak_hv():

    return 1.057



def winter_weekday_day_hv():

    return 1.051



def night_hv():

    return 1.040



def other_hv():

    return 1.045



def winter_weekday_peak_lv_sub():

    return 1.068



def winter_weekday_day_lv_sub():

    return 1.064



def night_lv_sub():

    return 1.059



def other_lv_sub():

    return 1.060



def winter_weekday_peak_lv():

    return 1.074



def winter_weekday_day_lv():

    return 1.069



def night_lv():

    return 1.064



def other_lv():

    return 1.065



def triad():

    return 23.77056]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[22]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2007-04-01T00:30Z]]></value>
        <value><![CDATA[def lafs():
    return {
        'hv': {
            'winter-weekday-peak': 1.057,
            'winter-weekday-day': 1.051,
            'night': 1.040,
            'other': 1.045},
        'lv-sub': {
            'winter-weekday-peak': 1.068,
            'winter-weekday-day': 1.064,
            'night': 1.059,
            'other': 1.060},
        'lv-net': {
            'winter-weekday-peak': 1.074,
            'winter-weekday-day': 1.069,
            'night': 1.064,
            'other': 1.065}}


def tariffs():
    return {
        '510': {
            'capacity-gbp-per-kva-per-day': 0.0372,
            'day-gbp-per-kwh': 0.0047,
            'night-gbp-per-kwh': 0.0014,
            'reactive-gbp-per-kvarh': 0.0023},
        '520': {
            'capacity-gbp-per-kva-per-day': 0.0372,
            'day-gbp-per-kwh': 0.0047,
            'night-gbp-per-kwh': 0.0014,
            'reactive-gbp-per-kvarh': 0.0023},
        '540': {
            'capacity-gbp-per-kva-per-day': 0.0352,
            'day-gbp-per-kwh': 0.0080,
            'night-gbp-per-kwh': 0.0028,
            'reactive-gbp-per-kvarh': 0.0033},
        '550': {
            'capacity-gbp-per-kva-per-day': 0.0352,
            'day-gbp-per-kwh': 0.0080,
            'night-gbp-per-kwh': 0.0039,
            'reactive-gbp-per-kvarh': 0.0033},
        '570': {
            'capacity-gbp-per-kva-per-day': 0.0332,
            'day-gbp-per-kwh': 0.0121,
            'night-gbp-per-kwh': 0.0040,
            'reactive-gbp-per-kvarh': 0.0042},
        '580': {
            'capacity-gbp-per-kva-per-day': 0.0332,
            'day-gbp-per-kwh': 0.0121,
            'night-gbp-per-kwh': 0.0040,
            'reactive-gbp-per-kvarh': 0.0042}}


def triad():
    return 23.77056]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[22]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2008-04-01T00:30Z]]></value>
        <value><![CDATA[def triad():
    return 25.212997

def lafs():
    return {
        'hv': {
            'winter-weekday-peak': 1.058,
            'winter-weekday-day': 1.051,
            'night': 1.041,
            'other': 1.046},
        'lv-sub': {
            'winter-weekday-peak': 1.070,
            'winter-weekday-day': 1.066,
            'night': 1.060,
            'other': 1.062},
        'lv-net': {
            'winter-weekday-peak': 1.079,
            'winter-weekday-day': 1.073,
            'night': 1.067,
            'other': 1.069}}

def tariffs():
    return {
        '510': {
            'capacity-gbp-per-kva-per-day': 0.0378,
            'day-gbp-per-kwh': 0.0039,
            'night-gbp-per-kwh': 0.0012,
            'reactive-gbp-per-kvarh': 0.0023},
        '520': {
            'capacity-gbp-per-kva-per-day': 0.0378,
            'day-gbp-per-kwh': 0.0039,
            'night-gbp-per-kwh': 0.0012,
            'reactive-gbp-per-kvarh': 0.0023},
        '540': {
            'capacity-gbp-per-kva-per-day': 0.0368,
            'day-gbp-per-kwh': 0.0073,
            'night-gbp-per-kwh': 0.0026,
            'reactive-gbp-per-kvarh': 0.0033},
        '550': {
            'capacity-gbp-per-kva-per-day': 0.0368,
            'day-gbp-per-kwh': 0.0073,
            'night-gbp-per-kwh': 0.0026,
            'reactive-gbp-per-kvarh': 0.0033},
        '570': {
            'capacity-gbp-per-kva-per-day': 0.0358,
            'day-gbp-per-kwh': 0.0115,
            'night-gbp-per-kwh': 0.0038,
            'reactive-gbp-per-kvarh': 0.0042},
        '580': {
            'capacity-gbp-per-kva-per-day': 0.0358,
            'day-gbp-per-kwh': 0.0115,
            'night-gbp-per-kwh': 0.0038,
            'reactive-gbp-per-kvarh': 0.0042}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[22]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2009-04-01T00:30Z]]></value>
        <value><![CDATA[def lafs():
    return {
        'hv': {
            'winter-weekday-peak': 1.058,
            'winter-weekday-day': 1.051,
            'night': 1.041,
            'other': 1.046},
        'lv-sub': {
            'winter-weekday-peak': 1.070,
            'winter-weekday-day': 1.066,
            'night': 1.060,
            'other': 1.062},
        'lv-net': {
            'winter-weekday-peak': 1.079,
            'winter-weekday-day': 1.073,
            'night': 1.067,
            'other': 1.069}}

def winter_weekday_peak_hv():
    return 1.058

def winter_weekday_day_hv():
    return 1.051

def night_hv():
    return 1.041

def other_hv():
    return 1.046

def winter_weekday_peak_lv_sub():
    return 1.070

def winter_weekday_day_lv_sub():
    return 1.066

def night_lv_sub():
    return 1.060

def other_lv_sub():
    return 1.062

def winter_weekday_peak_lv_net():
    return 1.079

def winter_weekday_day_lv_net():
    return 1.073

def night_lv_net():
    return 1.067

def other_lv_net():
    return 1.069

def triad():
    return 25.631634

def duos_day_hv_gbp_per_kwh():
    return 0.0047

def duos_night_hv_gbp_per_kwh():
    return 0.0014

def standing_hv_gbp_per_month():
    return 0

def availability_hv_gbp_per_kva_per_day():
    return 0.0387

def duos_reactive_hv_gbp_per_kvarh():
    return 0.0023

def duos_day_lv_net_gbp_per_kwh():
    return 0.0127

def duos_night_lv_net_gbp_per_kwh():
    return 0.0045

def standing_lv_net_gbp_per_month():
    return 0

def availability_lv_net_gbp_per_kva_per_day():
    return 0.039

def duos_reactive_lv_net_gbp_per_kvarh():
    return 0.0042

def duos_day_lv_sub_gbp_per_kwh():
    return 0.0081

def duos_night_lv_sub_gbp_per_kwh():
    return 0.0028

def standing_lv_sub_gbp_per_month():
    return 0

def availability_lv_sub_gbp_per_kva_per_day():
    return 0.0389

def duos_reactive_lv_sub_gbp_per_kvarh():
    return 0.0033

def tariffs():
    return {
        '510': {
            'capacity-gbp-per-kva-per-day': 0.038700,
            'day-gbp-per-kwh': 0.004700,
            'night-gbp-per-kwh': 0.001400,
            'reactive-gbp-per-kvarh': 0.002300},
        '520': {
            'capacity-gbp-per-kva-per-day': 0.038700,
            'day-gbp-per-kwh': 0.004700,
            'night-gbp-per-kwh': 0.001400,
            'reactive-gbp-per-kvarh': 0.002300},
        '540': {
            'capacity-gbp-per-kva-per-day': 0.038900,
            'day-gbp-per-kwh': 0.008100,
            'night-gbp-per-kwh': 0.002800,
            'reactive-gbp-per-kvarh': 0.003300},
        '550': {
            'capacity-gbp-per-kva-per-day': 0.038900,
            'day-gbp-per-kwh': 0.008100,
            'night-gbp-per-kwh': 0.002800,
            'reactive-gbp-per-kvarh': 0.003300},
        '570': {
            'capacity-gbp-per-kva-per-day': 0.039000,
            'day-gbp-per-kwh': 0.012700,
            'night-gbp-per-kwh': 0.004500,
            'reactive-gbp-per-kvarh': 0.004200},
        '580': {
            'capacity-gbp-per-kva-per-day': 0.039000,
            'day-gbp-per-kwh': 0.012700,
            'night-gbp-per-kwh': 0.004500,
            'reactive-gbp-per-kvarh': 0.004200}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract-rate-script]]></value>
        <value><![CDATA[22]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2009-08-01T00:30Z]]></value>
        <value><![CDATA[def lafs():
    return {
        'hv': {
            'winter-weekday-peak': 1.058,
            'winter-weekday-day': 1.051,
            'night': 1.041,
            'other': 1.046},
        'lv-sub': {
            'winter-weekday-peak': 1.070,
            'winter-weekday-day': 1.066,
            'night': 1.060,
            'other': 1.062},
        'lv-net': {
            'winter-weekday-peak': 1.079,
            'winter-weekday-day': 1.073,
            'night': 1.067,
            'other': 1.069}}

def tariffs():
    return {
        '110': {
            'day-gbp-per-kwh': 0.019400,
            'night-gbp-per-kwh': 0.019400},
        '210': {
            'day-gbp-per-kwh': 0.026700,
            'night-gbp-per-kwh': 0.004800},
        '510': {
            'capacity-gbp-per-kva-per-day': 0.038700,
            'day-gbp-per-kwh': 0.004700,
            'night-gbp-per-kwh': 0.001400,
            'reactive-gbp-per-kvarh': 0.002300},
        '520': {
            'capacity-gbp-per-kva-per-day': 0.038700,
            'day-gbp-per-kwh': 0.004700,
            'night-gbp-per-kwh': 0.001400,
            'reactive-gbp-per-kvarh': 0.002300},
        '540': {
            'capacity-gbp-per-kva-per-day': 0.038900,
            'day-gbp-per-kwh': 0.008100,
            'night-gbp-per-kwh': 0.002800,
            'reactive-gbp-per-kvarh': 0.003300},
        '550': {
            'capacity-gbp-per-kva-per-day': 0.038900,
            'day-gbp-per-kwh': 0.008100,
            'night-gbp-per-kwh': 0.002800,
            'reactive-gbp-per-kvarh': 0.003300},
        '570': {
            'capacity-gbp-per-kva-per-day': 0.039000,
            'day-gbp-per-kwh': 0.012700,
            'night-gbp-per-kwh': 0.004500,
            'reactive-gbp-per-kvarh': 0.004200},
        '580': {
            'capacity-gbp-per-kva-per-day': 0.039000,
            'day-gbp-per-kwh': 0.012700,
            'night-gbp-per-kwh': 0.004500,
            'reactive-gbp-per-kvarh': 0.004200}}]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[23]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[24]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
    <line>
        <value><![CDATA[insert]]></value>
        <value><![CDATA[dso-contract]]></value>
        <value><![CDATA[99]]></value>
        <value><![CDATA[main]]></value>
        <value><![CDATA[2000-01-01T00:30Z]]></value>
        <value><![CDATA[]]></value>
        <value><![CDATA[from net.sf.chellow.billing import NonCoreContract
from java.util import GregorianCalendar, TimeZone, Locale, Calendar
from net.sf.chellow.monad import UserException, Hiber
from net.sf.chellow.physical import HhEndDate, MpanCore
from net.sf.chellow.monad.types import MonadDate
from java.lang import System

def hh(bill, hh_list, data_source):
    bill['duos-night-kwh'] = 0
    bill['duos-night-gbp'] = 0
    bill['duos-day-kwh'] = 0
    bill['duos-day-gbp'] = 0

    for hh in hh_list:
        hh['laf'] = 1
        hh['gsp-kwh'] = hh['laf'] * hh['msp-kwh']
        hh['gsp-kw'] = hh['gsp-kwh'] * 2]]></value>
        <value><![CDATA[import sys
import net.sf.chellow.billing
import net.sf.chellow.monad.ui
import net.sf.chellow.physical

def totalElement(account, startDate, finishDate):
    totalElement = net.sf.chellow.billing.BillElement("total", 103, "Dso cost")
    return totalElement]]></value>
    </line>
</csv>
